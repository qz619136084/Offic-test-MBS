//tealium universal tag - utag.loader ut4.0.202207210624, Copyright 2022 Tealium.com Inc. All Rights Reserved.
var utag_condload = false;
window.__tealium_twc_switch = false;
try {
  (function (a, b, c) {
    if (typeof utag_data == "undefined") utag_data = {};
    a = location.pathname.split("/");
    b = a.length > 9 ? 9 : a.length;
    for (c = 1; c < b; c++) {
      utag_data["_pathname" + c] = typeof a[c] != "undefined" ? a[c] : "";
    }
  })();
} catch (e) {
  console.log(e);
}
if (!utag_condload) {
  try {
    try {
      if (
        document.location.href.indexOf("deals/mooncakes.html") > -1 ||
        document.location.href.indexOf("deals/christmas-goodies.html") > -1 ||
        document.location.href.indexOf(
          "deals/christmas-goodies/confirmation.html"
        ) > -1 ||
        document.location.href.indexOf("deals/mooncakes/confirmation.html") >
          -1 ||
        document.location.href.indexOf("mooncakes-2020-test") > -1 ||
        document.location.href.indexOf("mooncakes-online-order") > -1 ||
        document.location.href.indexOf(
          "museum/artscience-friends-order/confirmation.html"
        ) > -1 ||
        document.location.href.indexOf("museum/artscience-friends-order.html") >
          -1
      ) {
        window.utag_cfg_ovrd = window.utag_cfg_ovrd || {};
        window.utag_cfg_ovrd.noview = true;
      }
      var stagingReg = new RegExp(
        "staging.marinabaysands.com/deals/.*online-ordering",
        "i"
      );
      var uatReg = new RegExp(
        ".*.marinabaysands.com/.*restaurants/.*/order",
        "i"
      );
      if (
        stagingReg.test(document.location.href) ||
        uatReg.test(document.location.href)
      ) {
        window.utag_cfg_ovrd = window.utag_cfg_ovrd || {};
        window.utag_cfg_ovrd.noview = true;
      }
      var stagingReg = new RegExp("staging.marinabaysands.com.*/booking/", "i");
      var prodReg = new RegExp(
        "(www|zh|jp|hk|ko|id).marinabaysands.com.*/booking/",
        "i"
      );
      if (
        stagingReg.test(document.location.href) ||
        prodReg.test(document.location.href)
      ) {
        window.utag_cfg_ovrd = window.utag_cfg_ovrd || {};
        window.utag_cfg_ovrd.noview = true;
      }
      var restaurant_detail_Reg = new RegExp(
        "marinabaysands.com/restaurants/.*.html",
        "i"
      );
      if (
        restaurant_detail_Reg.test(document.location.href) &&
        document.getElementsByClassName("table-widget-container").length > 0
      ) {
        window.utag_cfg_ovrd = window.utag_cfg_ovrd || {};
        window.utag_cfg_ovrd.noview = true;
      }
      var restaurant_reservation_Reg = new RegExp(
        "marinabaysands.com/restaurants/.*/reservation",
        "i"
      );
      if (restaurant_reservation_Reg.test(document.location.href)) {
        window.utag_cfg_ovrd = window.utag_cfg_ovrd || {};
        window.utag_cfg_ovrd.noview = true;
      }
      var stagingReg = new RegExp(
        "ticketing.*.stixcloudtest.com/mbs/confirmorder/postconfirmation",
        "i"
      );
      var prodReg = new RegExp(
        "ticket.*.marinabaysands.com/mbs/confirmorder/postconfirmation",
        "i"
      );
      if (
        stagingReg.test(document.location.href) ||
        prodReg.test(document.location.href)
      ) {
        window.utag_cfg_ovrd = window.utag_cfg_ovrd || {};
        window.utag_cfg_ovrd.noview = true;
      }
    } catch (e) {
      console.log(e);
    }
  } catch (e) {
    console.log(e);
  }
}
if (!utag_condload) {
  try {
    try {
      if (document.location.href.indexOf("/index-no-tealium.html") > -1) {
        window.utag_cfg_ovrd = window.utag_cfg_ovrd || {};
        window.utag_cfg_ovrd.noload = true;
      }
    } catch (e) {
      console.log(e);
    }
  } catch (e) {
    console.log(e);
  }
}
if (!utag_condload) {
  try {
    try {
      if (window.location.hostname === "meetings.marinabaysands.com") {
        for (var property in utag_data) {
          if (utag_data.hasOwnProperty(property)) {
            if (utag_data[property] == "") {
              delete utag_data[property];
            }
          }
        }
      }
    } catch (e) {
      console.log(e);
    }
  } catch (e) {
    console.log(e);
  }
}
if (!utag_condload) {
  try {
    try {
      (function (w) {
        if (typeof w.utag !== "undefined" && typeof w.utag.e === "object") {
          w.utag_events = w.utag.e;
          delete w.utag;
        }
      })(window);
    } catch (e) {
      console.log(e);
    }
  } catch (e) {
    console.log(e);
  }
}
if (!utag_condload) {
  try {
    try {
      if (
        window.location.hostname == "ticket.marinabaysands.com" ||
        window.location.hostname == "ticketing.stixcloudtest.com"
      ) {
        window.teal = window.teal || {};
        teal.ignore_keys = {};
        teal.replace_keys = {};
        teal.prefix = "";
        teal.nested_delimiter = ".";
        teal.replace_keys = {
          ecommerce: "",
          add: "",
          detail: "",
          checkout: "",
          purchase: "",
        };
        teal.flattener_version = 1.4;
        Object.keys ||
          (Object.keys = (function () {
            "use strict";
            var a = Object.prototype.hasOwnProperty,
              b = !{ toString: null }.propertyIsEnumerable("toString"),
              c = [
                "toString",
                "toLocaleString",
                "valueOf",
                "hasOwnProperty",
                "isPrototypeOf",
                "propertyIsEnumerable",
                "constructor",
              ],
              d = c.length;
            return function (e) {
              if (
                "object" != typeof e &&
                ("function" != typeof e || null === e)
              )
                throw new TypeError("Object.keys called on non-object");
              var g,
                h,
                f = [];
              for (g in e) a.call(e, g) && f.push(g);
              if (b) for (h = 0; h < d; h++) a.call(e, c[h]) && f.push(c[h]);
              return f;
            };
          })());
        teal.ignoreKey = function (key, re) {
          var should_ignore_key = 0;
          if (typeof teal.ignore_keys_list === "undefined") {
            teal.ignore_keys_list = Object.keys(teal.ignore_keys);
            teal.ignore_keys_list.forEach(function (name) {
              teal.ignore_keys[name] = new RegExp("^" + name);
              if (key.match(teal.ignore_keys[name])) {
                should_ignore_key = 1;
              }
            });
          } else {
            teal.ignore_keys_list.forEach(function (name) {
              if (key.match(teal.ignore_keys[name])) {
                should_ignore_key = 1;
              }
            });
          }
          return should_ignore_key;
        };
        teal.getKeyName = function (key, re) {
          teal.replace_keys_regex = teal.replace_keys_regex || {};
          if (typeof teal.replace_keys_list === "undefined") {
            teal.replace_keys_list = Object.keys(teal.replace_keys);
            teal.replace_keys_regex.startOfString = new RegExp(
              "^[" + teal.nested_delimiter + "]"
            );
            teal.replace_keys_regex.endOfString = new RegExp(
              "[" + teal.nested_delimiter + "]$"
            );
            teal.replace_keys_list.forEach(function (name) {
              teal.replace_keys_regex[name] = new RegExp(
                "[" +
                  teal.nested_delimiter +
                  "]?" +
                  name +
                  "[" +
                  teal.nested_delimiter +
                  "]?",
                "g"
              );
              key = teal.keyReplace(key, name, teal.replace_keys_regex[name]);
            });
          } else {
            teal.replace_keys_list.forEach(function (name) {
              key = teal.keyReplace(key, name, teal.replace_keys_regex[name]);
            });
          }
          return key;
        };
        teal.keyReplace = function (key, name, re) {
          if (teal.replace_keys[name] === "") {
            key = key.replace(re, teal.nested_delimiter);
            if (key.indexOf(teal.nested_delimiter) === 0) {
              var cleanRegEx = new RegExp("^[" + teal.nested_delimiter + "]");
              key = key.replace(cleanRegEx, "");
            }
          } else {
            var origKey = key;
            key = key.replace(
              re,
              teal.nested_delimiter +
                teal.replace_keys[name] +
                teal.nested_delimiter
            );
            if (!origKey.match(teal.replace_keys_regex.startOfString)) {
              var cleanRegEx = new RegExp("^[" + teal.nested_delimiter + "]");
              key = key.replace(cleanRegEx, "");
            }
            if (!origKey.match(teal.replace_keys_regex.endOfString)) {
              var cleanRegEx = new RegExp("[" + teal.nested_delimiter + "]$");
              key = key.replace(cleanRegEx, "");
            }
          }
          return key;
        };
        teal.processDataObject = function (
          obj,
          new_obj,
          parent_key,
          create_array
        ) {
          if (typeof parent_key === "undefined") {
            parent_key = "";
          } else {
            teal.nested_delimiter_regex =
              teal.nested_delimiter_regex ||
              new RegExp("[" + teal.nested_delimiter + "]$");
            if (!parent_key.match(teal.nested_delimiter_regex)) {
              parent_key += "" + teal.nested_delimiter;
            }
          }
          Object.keys(obj).forEach(function (key) {
            var nested_key_name = parent_key + key;
            var new_key_name = teal.getKeyName(
              (teal.prefix + parent_key + key).replace(/\s/g, "")
            );
            var key_type = teal.typeOf(obj[key]);
            if (key_type !== "undefined" && key_type != null) {
              if (
                key_type.match(/boolean|string|number|date/) &&
                !teal.ignoreKey(key)
              ) {
                if (teal.typeOf(obj[key]) === "date") {
                  obj[key] = obj[key].toISOString();
                }
                if (create_array) {
                  if (teal.typeOf(new_obj[new_key_name]) !== "array") {
                    new_obj[new_key_name] = [];
                  }
                  new_obj[new_key_name].push("" + obj[key]);
                } else {
                  new_obj[new_key_name] = "" + obj[key];
                }
              } else if (key_type === "object" && !teal.ignoreKey(key)) {
                teal.processDataObject(
                  obj[key],
                  new_obj,
                  nested_key_name,
                  create_array
                );
              } else if (key_type === "array") {
                teal.processDataArray(obj[key], new_obj, nested_key_name);
              }
            }
          });
        };
        teal.processDataArray = function (obj, new_obj, parent_key) {
          var objLength = obj.length;
          if (typeof parent_key === "undefined") {
            parent_key = "";
          } else if (
            objLength > 0 &&
            teal.typeOf(obj[0]).match(/boolean|string|number|date/)
          ) {
          } else {
            parent_key += "" + teal.nested_delimiter;
          }
          var new_key_name = teal.getKeyName(
            (teal.prefix + parent_key).replace(/\s/g, "")
          );
          for (var n = 0; n < objLength; n++) {
            var key_type = teal.typeOf(obj[n]);
            if (key_type.match(/boolean|string|number|date/)) {
              if (key_type === "date") {
                obj[n] = obj[n].toISOString();
              }
              if (teal.typeOf(new_obj[new_key_name]) !== "array") {
                new_obj[new_key_name] = [];
              }
              new_obj[new_key_name].push("" + obj[n]);
            } else if (key_type === "object") {
              teal.processDataObject(obj[n], new_obj, new_key_name, 1);
            }
          }
        };
        teal.typeOf = function (e) {
          return {}.toString
            .call(e)
            .match(/\s([a-zA-Z]+)/)[1]
            .toLowerCase();
        };
        teal.flattenObject = function (obj, new_obj) {
          if (typeof obj === "undefined") {
            return false;
          }
          var mergeObject = false;
          if (obj === new_obj) {
            mergeObject = true;
            new_obj = {};
          }
          if (typeof new_obj === "undefined") {
            new_obj = {};
          }
          if (teal.typeOf(obj) === "array") {
            var temp_array = JSON.parse(JSON.stringify(obj));
            var temp_array_length = temp_array.length;
            obj = {};
            if (obj == new_obj) {
              if (typeof a === "undefined") {
                var a = "view";
              }
              utag.loader.RD(new_obj, a);
            }
            for (var i = 0; i < temp_array_length; i++) {
              teal.processDataObject(temp_array[i], new_obj);
            }
          } else {
            teal.processDataObject(obj, new_obj);
          }
          if (mergeObject) {
            Object.keys(obj).forEach(function (key) {
              delete obj[key];
            });
            Object.keys(new_obj).forEach(function (key) {
              obj[key] = new_obj[key];
            });
          }
          return new_obj;
        };
      }
    } catch (e) {
      console.log(e);
    }
  } catch (e) {
    console.log(e);
  }
}
if (!utag_condload) {
  try {
    try {
      function reProcessData(data) {
        if (typeof data === "undefined") return false;
        if (data.tealium_event === "confirmOrder") {
          if (typeof window.confirmationProcessed != "undefined") return false;
        }
        var new_obj = {};
        new_obj.tealium_event = data.tealium_event;
        new_obj.entertainment_product_id =
          data && data["products.id"] ? data["products.id"] : undefined;
        new_obj.product_category = [];
        try {
          new_obj.entertainment_product_code =
            localStorage.getItem("productCode");
        } catch (e) {}
        if (
          typeof new_obj.entertainment_product_code != "undefined" &&
          new_obj.entertainment_product_code != null &&
          new_obj.entertainment_product_code != ""
        ) {
          var entertainment_category = get_entertainment_category(
            new_obj.entertainment_product_code
          );
          if (typeof new_obj.entertainment_product_id != "undefined") {
            for (var i = 0; i < new_obj.entertainment_product_id.length; i++) {
              new_obj.product_category.push(entertainment_category);
            }
          }
        } else {
          var product_codes =
            data && data["products.dimension1"]
              ? data["products.dimension1"]
              : undefined;
          if (typeof product_codes != "undefined") {
            new_obj.entertainment_product_code = product_codes[0];
            for (var i = 0; i < product_codes.length; i++) {
              new_obj.product_category.push(
                get_entertainment_category(product_codes[i])
              );
            }
          } else {
            if (typeof new_obj.entertainment_product_id != "undefined") {
              for (
                var i = 0;
                i < new_obj.entertainment_product_id.length;
                i++
              ) {
                new_obj.product_category.push("Entertainment Tickets");
              }
            }
          }
        }
        new_obj.entertainment_product_name =
          data && data["products.name"] ? data["products.name"] : undefined;
        new_obj.entertainment_ticket_quantity =
          data && data["products.quantity"]
            ? data["products.quantity"]
            : undefined;
        new_obj.entertainment_venue =
          data && data["products.dimension4"]
            ? data["products.dimension4"]
            : undefined;
        if (
          new_obj.tealium_event == "confirmOrder" ||
          new_obj.tealium_event == "checkout"
        ) {
          new_obj.entertainment_ticket_unit_price_with_fees =
            data && data["products.price"] ? data["products.price"] : undefined;
          new_obj.entertainment_order_total_with_fees =
            data && data["actionField.revenue"]
              ? data["actionField.revenue"]
              : undefined;
          try {
            new_obj.entertainment_ticket_unit_price_without_fees = JSON.parse(
              utag.loader.RC("teal_ticketprices")
            );
          } catch (e) {}
          try {
            new_obj.entertainment_order_total_without_fees = JSON.parse(
              utag.loader.RC("teal_ticketorderprice")
            );
          } catch (e) {}
          if (new_obj.entertainment_order_total_without_fees) {
            new_obj.entertainment_order_total_without_fees =
              new_obj.entertainment_order_total_without_fees.toFixed(2);
          } else {
            if (
              (new_obj.entertainment_order_total_with_fees ||
                new_obj.entertainment_order_total_with_fees === 0) &&
              new_obj.entertainment_ticket_quantity
            ) {
              if (new_obj.entertainment_order_total_with_fees != 0) {
                var total_ticket_qty = 0;
                for (
                  var i = 0;
                  i < new_obj.entertainment_ticket_quantity.length;
                  i++
                ) {
                  total_ticket_qty += parseInt(
                    new_obj.entertainment_ticket_quantity[i]
                  );
                }
                new_obj.entertainment_order_total_without_fees =
                  parseFloat(new_obj.entertainment_order_total_with_fees) -
                  1.0 * total_ticket_qty;
                new_obj.entertainment_order_total_without_fees =
                  new_obj.entertainment_order_total_without_fees.toFixed(2);
              } else {
                new_obj.entertainment_order_total_without_fees = 0;
              }
            }
          }
        } else if (new_obj.tealium_event == "addToCart") {
          new_obj.entertainment_ticket_unit_price_without_fees =
            data && data["products.price"] ? data["products.price"] : undefined;
          new_obj.entertainment_order_total_without_fees =
            data && data["bookingTotal"] ? data["bookingTotal"] : undefined;
          var ent_order_total = 0;
          try {
            if (
              typeof new_obj.entertainment_order_total_without_fees ==
              "undefined"
            ) {
              for (
                var i = 0;
                i < new_obj.entertainment_ticket_unit_price_without_fees.length;
                i++
              ) {
                ent_order_total += parseFloat(
                  (
                    Math.round(
                      parseFloat(
                        new_obj.entertainment_ticket_unit_price_without_fees[
                          i
                        ] * new_obj.entertainment_ticket_quantity[i]
                      ) * 100
                    ) / 100
                  ).toFixed(2)
                );
              }
              new_obj.entertainment_order_total_without_fees =
                ent_order_total.toFixed(2);
            }
          } catch (e) {}
          if (
            typeof new_obj.entertainment_ticket_unit_price_without_fees !=
            "undefined"
          ) {
            try {
              utag.loader.SC(
                "teal_ticketprices",
                JSON.stringify(
                  new_obj.entertainment_ticket_unit_price_without_fees
                )
              );
            } catch (e) {}
          }
          if (
            typeof new_obj.entertainment_order_total_without_fees != "undefined"
          ) {
            utag.loader.SC(
              "teal_ticketorderprice",
              new_obj.entertainment_order_total_without_fees
            );
          }
        }
        new_obj.entertainment_price_class =
          data && data["products.dimension2"]
            ? data["products.dimension2"]
            : undefined;
        new_obj.entertainment_ticket_datetime =
          data && data["products.dimension3"]
            ? data["products.dimension3"]
            : undefined;
        if (typeof new_obj.entertainment_ticket_datetime !== "undefined") {
          try {
            new_obj.entertainment_ticket_time = [];
            new_obj.entertainment_ticket_date = [];
            for (
              var i = 0;
              i < new_obj.entertainment_ticket_datetime.length;
              i++
            ) {
              var ord_time = new_obj.entertainment_ticket_datetime[
                i
              ].lastIndexOf(
                " ",
                new_obj.entertainment_ticket_datetime[i].indexOf(":")
              );
              var entertainment_temp_ticket_time =
                new_obj.entertainment_ticket_datetime[i].substring(
                  ord_time + 1
                );
              new_obj.entertainment_ticket_time[i] = am_pm_to_hours(
                entertainment_temp_ticket_time
              );
              new_obj.entertainment_ticket_date[i] =
                new_obj.entertainment_ticket_datetime[i].substring(0, ord_time);
              new_obj.entertainment_ticket_datetime[i] =
                new_obj.entertainment_ticket_datetime[i].replace(
                  entertainment_temp_ticket_time,
                  new_obj.entertainment_ticket_time[i]
                );
            }
          } catch (e) {}
        }
        new_obj.currency =
          data && data["currencyCode"] ? data["currencyCode"] : undefined;
        if (typeof new_obj.entertainment_ticket_quantity !== "undefined") {
          total_qty = 0;
          for (
            var i = 0;
            i < new_obj.entertainment_ticket_quantity.length;
            i++
          ) {
            total_qty += parseInt(new_obj.entertainment_ticket_quantity[i]);
          }
          new_obj.entertainment_order_quantity = total_qty.toString();
        }
        new_obj.entertainment_order_payment_method =
          data && data["actionField.paymentMethod"]
            ? data["actionField.paymentMethod"]
            : undefined;
        new_obj.entertainment_order_id =
          data && data["actionField.id"] ? data["actionField.id"] : undefined;
        new_obj.customer_prehashed_email_sha256encrypt =
          data && data["userData.email"] ? data["userData.email"] : undefined;
        new_obj.customer_prehashed_phone_with_iso_country_code_plus_sign =
          data && data["userData.phone-g"]
            ? data["userData.phone-g"]
            : undefined;
        new_obj.customer_prehashed_phone_with_iso_country_code =
          data && data["userData.phone-fb"]
            ? data["userData.phone-fb"]
            : undefined;
        new_obj.marketing_opt_in =
          data && data["userData.subscribed"]
            ? data["userData.subscribed"]
            : undefined;
        if (typeof new_obj.entertainment_price_class != "undefined") {
          if (
            typeof new_obj.entertainment_price_class[0] != "undefined" &&
            new_obj.entertainment_price_class[0].indexOf("Show and Dine") > -1
          ) {
            new_obj.entertainment_order_quantity =
              new_obj.entertainment_ticket_quantity[0];
          }
        }
        if (new_obj.tealium_event == "checkout") {
          new_obj.event_category = "Checkout";
          new_obj.event_action = "Entertainment";
        }
        if (new_obj.tealium_event == "addToCart") {
          sessionStorage.setItem("cartData", JSON.stringify(new_obj));
        }
        if (new_obj.tealium_event == "register") {
          new_obj.customer_country =
            data && data["dataLayer.registration.userData.country"]
              ? data["dataLayer.registration.userData.country"]
              : undefined;
          new_obj.customer_prehashed_email_sha256encrypt =
            data && data["dataLayer.registration.userData.email"]
              ? data["dataLayer.registration.userData.email"]
              : undefined;
          new_obj.customer_prehashed_phone_with_iso_country_code =
            data && data["dataLayer.registration.userData.phone-fb"]
              ? data["dataLayer.registration.userData.phone-fb"]
              : undefined;
          new_obj.customer_prehashed_phone_with_iso_country_code_plus_sign =
            data && data["dataLayer.registration.userData.phone-g"]
              ? data["dataLayer.registration.userData.phone-g"]
              : undefined;
          new_obj.marketing_opt_in =
            data && data["dataLayer.registration.userData.subscribed"]
              ? data["dataLayer.registration.userData.subscribed"]
              : undefined;
          new_obj.tealium_event = "sistic_registration";
        }
        clean(new_obj);
        if (data.tealium_event === "confirmOrder") {
          window.confirmationProcessed = "1";
        }
        return new_obj;
      }
      function get_entertainment_category(product_code) {
        if (!product_code) {
          return "Entertainment Tickets";
        }
        var entertainment_category = "Entertainment Tickets";
        if (
          /^casm/.test(product_code) ||
          /^asm/.test(product_code) ||
          /^asf/.test(product_code) ||
          /^asos/.test(product_code)
        ) {
          entertainment_category = "Museum Tickets";
        } else if (
          /^cskypark/.test(product_code) ||
          /^skypark/.test(product_code) ||
          /^cdlc/.test(product_code) ||
          /^dlc/.test(product_code) ||
          /^csampan/.test(product_code) ||
          /^sampan/.test(product_code)
        ) {
          entertainment_category = "Attraction Tickets";
        } else if (
          /^cmarquee/.test(product_code) ||
          /^marquee/.test(product_code) ||
          /^clavo/.test(product_code) ||
          /^lavo/.test(product_code)
        ) {
          entertainment_category = "Nightlife Tickets";
        }
        return entertainment_category;
      }
      function clean(obj) {
        for (var propName in obj) {
          if (obj[propName] === null || obj[propName] === undefined) {
            delete obj[propName];
          }
        }
      }
      function am_pm_to_hours(time) {
        var hours = Number(time.match(/^(\d+)/)[1]);
        var minutes = Number(time.match(/:(\d+)/)[1]);
        var AMPM = time.match(/\s(.*)$/)[1];
        if (AMPM == "pm" && hours < 12) hours = hours + 12;
        if (AMPM == "am" && hours == 12) hours = hours - 12;
        var sHours = hours.toString();
        var sMinutes = minutes.toString();
        if (hours < 10) sHours = "0" + sHours;
        if (minutes < 10) sMinutes = "0" + sMinutes;
        return sHours + ":" + sMinutes;
      }
      if (
        window.location.hostname == "ticket.marinabaysands.com" ||
        window.location.hostname == "ticketing.stixcloudtest.com"
      ) {
        var tealPush = dataLayer.push;
        dataLayer.push = function () {
          var data = teal.flattenObject(arguments[0]);
          if (
            data.event &&
            data.event &&
            data.event.indexOf("gtm.js") === -1 &&
            data.event.indexOf("gtm.dom") === -1 &&
            data.event.indexOf("gtm.load") === -1 &&
            data.event.indexOf("gtm.click") === -1
          ) {
            data.tealium_event = data.event;
            if (data.event == "confirmOrder") {
              utag.view(reProcessData(data));
            } else {
              utag.link(reProcessData(data));
            }
          }
          return tealPush.apply(this, arguments);
        };
        if (
          window.location.pathname.indexOf("mbs/booking/") > -1 ||
          window.location.pathname.indexOf("mbs/package/") > -1
        ) {
          var product_code = window.location.pathname.split("/").pop();
          if (product_code) {
            utag_data.entertainment_product_code = product_code;
          }
          localStorage.setItem("productCode", product_code);
        }
        if (window.location.pathname.indexOf("confirm/shoppingcart") > -1) {
          if (sessionStorage.getItem("cartData")) {
            utag_data = JSON.parse(sessionStorage.cartData);
            utag_data.tealium_event = "cart";
          }
          try {
            utag_data.entertainment_product_code =
              localStorage.getItem("productCode");
          } catch (e) {}
        }
        if (window.location.pathname.indexOf("postconfirmation") > -1) {
          var confirmationEventArr = window.dataLayer.filter(function (item) {
            return item.event === "confirmOrder";
          });
          if (confirmationEventArr.length > 0) {
            var data = teal.flattenObject(confirmationEventArr[0]);
            data.tealium_event = data.event;
            utag_data = reProcessData(data);
          }
        }
      }
    } catch (e) {
      console.log(e);
    }
  } catch (e) {
    console.log(e);
  }
}
if (typeof utag == "undefined" && !utag_condload) {
  var utag = {
    id: "mbs.main",
    o: {},
    sender: {},
    send: {},
    rpt: { ts: { a: new Date() } },
    dbi: [],
    db_log: [],
    loader: {
      q: [],
      lc: 0,
      f: {},
      p: 0,
      ol: 0,
      wq: [],
      lq: [],
      bq: {},
      bk: {},
      rf: 0,
      ri: 0,
      rp: 0,
      rq: [],
      ready_q: [],
      sendq: { pending: 0 },
      run_ready_q: function () {
        for (var i = 0; i < utag.loader.ready_q.length; i++) {
          utag.DB("READY_Q:" + i);
          try {
            utag.loader.ready_q[i]();
          } catch (e) {
            utag.DB(e);
          }
        }
      },
      lh: function (a, b, c) {
        a = "" + location.hostname;
        b = a.split(".");
        c = /\.co\.|\.com\.|\.org\.|\.edu\.|\.net\.|\.asn\./.test(a) ? 3 : 2;
        return b.splice(b.length - c, c).join(".");
      },
      WQ: function (a, b, c, d, g) {
        utag.DB("WQ:" + utag.loader.wq.length);
        try {
          if (utag.udoname && utag.udoname.indexOf(".") < 0) {
            utag.ut.merge(utag.data, window[utag.udoname], 0);
          }
          if (utag.cfg.load_rules_at_wait) {
            utag.handler.LR(utag.data);
          }
        } catch (e) {
          utag.DB(e);
        }
        d = 0;
        g = [];
        for (a = 0; a < utag.loader.wq.length; a++) {
          b = utag.loader.wq[a];
          b.load = utag.loader.cfg[b.id].load;
          if (b.load == 4) {
            this.f[b.id] = 0;
            utag.loader.LOAD(b.id);
          } else if (b.load > 0) {
            g.push(b);
            d++;
          } else {
            this.f[b.id] = 1;
          }
        }
        for (a = 0; a < g.length; a++) {
          utag.loader.AS(g[a]);
        }
        if (d == 0) {
          utag.loader.END();
        }
      },
      AS: function (a, b, c, d) {
        utag.send[a.id] = a;
        if (typeof a.src == "undefined") {
          a.src =
            utag.cfg.path +
            (typeof a.name != "undefined"
              ? a.name
              : "ut" + "ag." + a.id + ".js");
        }
        a.src +=
          (a.src.indexOf("?") > 0 ? "&" : "?") +
          "utv=" +
          (a.v ? utag.cfg.template + a.v : utag.cfg.v);
        utag.rpt["l_" + a.id] = a.src;
        b = document;
        this.f[a.id] = 0;
        if (a.load == 2) {
          utag.DB("Attach sync: " + a.src);
          a.uid = a.id;
          b.write(
            '<script id="utag_' + a.id + '" src="' + a.src + '"></scr' + "ipt>"
          );
          if (typeof a.cb != "undefined") a.cb();
        } else if (a.load == 1 || a.load == 3) {
          if (b.createElement) {
            c = "utag_mbs.main_" + a.id;
            if (!b.getElementById(c)) {
              d = { src: a.src, id: c, uid: a.id, loc: a.loc };
              if (a.load == 3) {
                d.type = "iframe";
              }
              if (typeof a.cb != "undefined") d.cb = a.cb;
              utag.ut.loader(d);
            }
          }
        }
      },
      GV: function (a, b, c) {
        b = {};
        for (c in a) {
          if (a.hasOwnProperty(c) && typeof a[c] != "function") b[c] = a[c];
        }
        return b;
      },
      OU: function (a, b, c, d, f) {
        try {
          if (typeof utag.data["cp.OPTOUTMULTI"] != "undefined") {
            c = utag.loader.cfg;
            a = utag.ut.decode(utag.data["cp.OPTOUTMULTI"]).split("|");
            for (d = 0; d < a.length; d++) {
              b = a[d].split(":");
              if (b[1] * 1 !== 0) {
                if (b[0].indexOf("c") == 0) {
                  for (f in utag.loader.GV(c)) {
                    if (c[f].tcat == b[0].substring(1)) c[f].load = 0;
                  }
                } else if (b[0] * 1 == 0) {
                  utag.cfg.nocookie = true;
                } else {
                  for (f in utag.loader.GV(c)) {
                    if (c[f].tid == b[0]) c[f].load = 0;
                  }
                }
              }
            }
          }
        } catch (e) {
          utag.DB(e);
        }
      },
      RDdom: function (o) {
        var d = document || {},
          l = location || {};
        o["dom.referrer"] = d.referrer;
        o["dom.title"] = "" + d.title;
        o["dom.domain"] = "" + l.hostname;
        o["dom.query_string"] = ("" + l.search).substring(1);
        o["dom.hash"] = ("" + l.hash).substring(1);
        o["dom.url"] = "" + d.URL;
        o["dom.pathname"] = "" + l.pathname;
        o["dom.viewport_height"] =
          window.innerHeight ||
          (d.documentElement ? d.documentElement.clientHeight : 960);
        o["dom.viewport_width"] =
          window.innerWidth ||
          (d.documentElement ? d.documentElement.clientWidth : 960);
      },
      RDcp: function (o, b, c, d) {
        b = utag.loader.RC();
        for (d in b) {
          if (d.match(/utag_(.*)/)) {
            for (c in utag.loader.GV(b[d])) {
              o["cp.utag_" + RegExp.$1 + "_" + c] = b[d][c];
            }
          }
        }
        for (c in utag.loader.GV(utag.cl && !utag.cl["_all_"] ? utag.cl : b)) {
          if (c.indexOf("utag_") < 0 && typeof b[c] != "undefined")
            o["cp." + c] = b[c];
        }
      },
      RDqp: function (o, a, b, c) {
        a = location.search + (location.hash + "").replace("#", "&");
        if (utag.cfg.lowerqp) {
          a = a.toLowerCase();
        }
        if (a.length > 1) {
          b = a.substring(1).split("&");
          for (a = 0; a < b.length; a++) {
            c = b[a].split("=");
            if (c.length > 1) {
              o["qp." + c[0]] = utag.ut.decode(c[1]);
            }
          }
        }
      },
      RDmeta: function (o, a, b, h) {
        a = document.getElementsByTagName("meta");
        for (b = 0; b < a.length; b++) {
          try {
            h = a[b].name || a[b].getAttribute("property") || "";
          } catch (e) {
            h = "";
            utag.DB(e);
          }
          if (utag.cfg.lowermeta) {
            h = h.toLowerCase();
          }
          if (h != "") {
            o["meta." + h] = a[b].content;
          }
        }
      },
      RDva: function (o) {
        var readAttr = function (o, l) {
          var a = "",
            b;
          a = localStorage.getItem(l);
          if (!a || a == "{}") return;
          b = utag.ut.flatten({ va: JSON.parse(a) });
          utag.ut.merge(o, b, 1);
        };
        try {
          readAttr(o, "tealium_va");
          readAttr(o, "tealium_va_" + o["ut.account"] + "_" + o["ut.profile"]);
        } catch (e) {
          utag.DB(e);
        }
      },
      RDut: function (o, a) {
        var t = {};
        var d = new Date();
        var m = utag.ut.typeOf(d.toISOString) == "function";
        o["ut.domain"] = utag.cfg.domain;
        o["ut.version"] = utag.cfg.v;
        t["tealium_event"] = o["ut.event"] = a || "view";
        t["tealium_visitor_id"] = o["ut.visitor_id"] = o["cp.utag_main_v_id"];
        t["tealium_session_id"] = o["ut.session_id"] = o["cp.utag_main_ses_id"];
        try {
          t["tealium_datasource"] = utag.cfg.datasource;
          t["tealium_account"] = o["ut.account"] = utag.cfg.utid.split("/")[0];
          t["tealium_profile"] = o["ut.profile"] = utag.cfg.utid.split("/")[1];
          t["tealium_environment"] = o["ut.env"] = utag.cfg.path.split("/")[6];
        } catch (e) {
          utag.DB(e);
        }
        t["tealium_random"] = Math.random().toFixed(16).substring(2);
        t["tealium_library_name"] = "ut" + "ag.js";
        t["tealium_library_version"] = (utag.cfg.template + "0").substring(2);
        t["tealium_timestamp_epoch"] = Math.floor(d.getTime() / 1000);
        t["tealium_timestamp_utc"] = m ? d.toISOString() : "";
        d.setHours(d.getHours() - d.getTimezoneOffset() / 60);
        t["tealium_timestamp_local"] = m
          ? d.toISOString().replace("Z", "")
          : "";
        utag.ut.merge(o, t, 0);
      },
      RDses: function (o, a, c) {
        a = new Date().getTime();
        c = a + parseInt(utag.cfg.session_timeout) + "";
        if (!o["cp.utag_main_ses_id"]) {
          o["cp.utag_main_ses_id"] = a + "";
          o["cp.utag_main__ss"] = "1";
          o["cp.utag_main__sn"] = 1 + parseInt(o["cp.utag_main__sn"] || 0) + "";
        } else {
          o["cp.utag_main__ss"] = "0";
        }
        o["cp.utag_main__pn"] = o["cp.utag_main__pn"] || "1";
        o["cp.utag_main__st"] = c;
        utag.loader.SC("utag_main", {
          _sn: o["cp.utag_main__sn"] || 1,
          _ss: o["cp.utag_main__ss"],
          _st: c,
          ses_id: (o["cp.utag_main_ses_id"] || a) + ";exp-session",
          _pn: o["cp.utag_main__pn"] + ";exp-session",
        });
      },
      RDpv: function (o) {
        if (typeof utag.pagevars == "function") {
          utag.DB("Read page variables");
          utag.pagevars(o);
        }
      },
      RD: function (o, a) {
        utag.DB("utag.loader.RD");
        utag.DB(o);
        utag.loader.RDcp(o);
        if (!utag.loader.rd_flag) {
          utag.loader.rd_flag = 1;
          o["cp.utag_main_v_id"] =
            o["cp.utag_main_v_id"] || utag.ut.vi(new Date().getTime());
          o["cp.utag_main__pn"] = 1 + parseInt(o["cp.utag_main__pn"] || 0) + "";
          utag.loader.SC("utag_main", { v_id: o["cp.utag_main_v_id"] });
          utag.loader.RDses(o);
        }
        if (a && !utag.cfg.noview) utag.loader.RDses(o);
        utag.loader.RDqp(o);
        utag.loader.RDmeta(o);
        utag.loader.RDdom(o);
        utag.loader.RDut(o, a || "view");
        utag.loader.RDpv(o);
        utag.loader.RDva(o);
      },
      RC: function (
        a,
        x,
        b,
        c,
        d,
        e,
        f,
        g,
        h,
        i,
        j,
        k,
        l,
        m,
        n,
        o,
        v,
        ck,
        cv,
        r,
        s,
        t
      ) {
        o = {};
        b = "" + document.cookie != "" ? document.cookie.split("; ") : [];
        r = /^(.*?)=(.*)$/;
        s = /^(.*);exp-(.*)$/;
        t = new Date().getTime();
        for (c = 0; c < b.length; c++) {
          if (b[c].match(r)) {
            ck = RegExp.$1;
            cv = RegExp.$2;
          }
          e = utag.ut.decode(cv);
          if (typeof ck != "undefined") {
            if (ck.indexOf("ulog") == 0 || ck.indexOf("utag_") == 0) {
              e = cv.split("$");
              g = [];
              j = {};
              for (f = 0; f < e.length; f++) {
                try {
                  g = e[f].split(":");
                  if (g.length > 2) {
                    g[1] = g.slice(1).join(":");
                  }
                  v = "";
                  if (("" + g[1]).indexOf("~") == 0) {
                    h = g[1].substring(1).split("|");
                    for (i = 0; i < h.length; i++) h[i] = utag.ut.decode(h[i]);
                    v = h;
                  } else v = utag.ut.decode(g[1]);
                  j[g[0]] = v;
                } catch (er) {
                  utag.DB(er);
                }
              }
              o[ck] = {};
              for (f in utag.loader.GV(j)) {
                if (j[f] instanceof Array) {
                  n = [];
                  for (m = 0; m < j[f].length; m++) {
                    if (j[f][m].match(s)) {
                      k =
                        RegExp.$2 == "session"
                          ? typeof j._st != "undefined"
                            ? j._st
                            : t - 1
                          : parseInt(RegExp.$2);
                      if (k > t) n[m] = x == 0 ? j[f][m] : RegExp.$1;
                    }
                  }
                  j[f] = n.join("|");
                } else {
                  j[f] = "" + j[f];
                  if (j[f].match(s)) {
                    k =
                      RegExp.$2 == "session"
                        ? typeof j._st != "undefined"
                          ? j._st
                          : t - 1
                        : parseInt(RegExp.$2);
                    j[f] = k < t ? null : x == 0 ? j[f] : RegExp.$1;
                  }
                }
                if (j[f]) o[ck][f] = j[f];
              }
            } else if (utag.cl[ck] || utag.cl["_all_"]) {
              o[ck] = e;
            }
          }
        }
        return a ? (o[a] ? o[a] : {}) : o;
      },
      SC: function (a, b, c, d, e, f, g, h, i, j, k, x, v) {
        if (!a) return 0;
        if (a == "utag_main" && utag.cfg.nocookie) return 0;
        v = "";
        var date = new Date();
        var exp = new Date();
        exp.setTime(date.getTime() + 365 * 24 * 60 * 60 * 1000);
        x = exp.toGMTString();
        if (c && c == "da") {
          x = "Thu, 31 Dec 2009 00:00:00 GMT";
        } else if (a.indexOf("utag_") != 0 && a.indexOf("ulog") != 0) {
          if (typeof b != "object") {
            v = b;
          }
        } else {
          d = utag.loader.RC(a, 0);
          for (e in utag.loader.GV(b)) {
            f = "" + b[e];
            if (f.match(/^(.*);exp-(\d+)(\w)$/)) {
              g =
                date.getTime() +
                parseInt(RegExp.$2) * (RegExp.$3 == "h" ? 3600000 : 86400000);
              if (RegExp.$3 == "u") g = parseInt(RegExp.$2);
              f = RegExp.$1 + ";exp-" + g;
            }
            if (c == "i") {
              if (d[e] == null) d[e] = f;
            } else if (c == "d") delete d[e];
            else if (c == "a") d[e] = d[e] != null ? f - 0 + (d[e] - 0) : f;
            else if (c == "ap" || c == "au") {
              if (d[e] == null) d[e] = f;
              else {
                if (d[e].indexOf("|") > 0) {
                  d[e] = d[e].split("|");
                }
                g = d[e] instanceof Array ? d[e] : [d[e]];
                g.push(f);
                if (c == "au") {
                  h = {};
                  k = {};
                  for (i = 0; i < g.length; i++) {
                    if (g[i].match(/^(.*);exp-(.*)$/)) {
                      j = RegExp.$1;
                    }
                    if (typeof k[j] == "undefined") {
                      k[j] = 1;
                      h[g[i]] = 1;
                    }
                  }
                  g = [];
                  for (i in utag.loader.GV(h)) {
                    g.push(i);
                  }
                }
                d[e] = g;
              }
            } else d[e] = f;
          }
          h = new Array();
          for (g in utag.loader.GV(d)) {
            if (d[g] instanceof Array) {
              for (c = 0; c < d[g].length; c++) {
                d[g][c] = encodeURIComponent(d[g][c]);
              }
              h.push(g + ":~" + d[g].join("|"));
            } else
              h.push(
                (g + ":").replace(/[\,\$\;\?]/g, "") + encodeURIComponent(d[g])
              );
          }
          if (h.length == 0) {
            h.push("");
            x = "";
          }
          v = h.join("$");
        }
        document.cookie =
          a + "=" + v + ";path=/;domain=" + utag.cfg.domain + ";expires=" + x;
        return 1;
      },
      LOAD: function (a, b, c, d) {
        if (!utag.loader.cfg) {
          return;
        }
        if (this.ol == 0) {
          if (utag.loader.cfg[a].block && utag.loader.cfg[a].cbf) {
            this.f[a] = 1;
            delete utag.loader.bq[a];
          }
          for (b in utag.loader.GV(utag.loader.bq)) {
            if (utag.loader.cfg[a].load == 4 && utag.loader.cfg[a].wait == 0) {
              utag.loader.bk[a] = 1;
              utag.DB("blocked: " + a);
            }
            utag.DB("blocking: " + b);
            return;
          }
          utag.loader.INIT();
          return;
        }
        utag.DB("utag.loader.LOAD:" + a);
        if (this.f[a] == 0) {
          this.f[a] = 1;
          if (utag.cfg.noview != true) {
            if (utag.loader.cfg[a].send) {
              utag.DB("SENDING: " + a);
              try {
                if (utag.loader.sendq.pending > 0 && utag.loader.sendq[a]) {
                  utag.DB("utag.loader.LOAD:sendq: " + a);
                  while ((d = utag.loader.sendq[a].shift())) {
                    utag.DB(d);
                    utag.sender[a].send(d.event, utag.handler.C(d.data));
                    utag.loader.sendq.pending--;
                  }
                } else {
                  utag.sender[a].send("view", utag.handler.C(utag.data));
                }
                utag.rpt["s_" + a] = 0;
              } catch (e) {
                utag.DB(e);
                utag.rpt["s_" + a] = 1;
              }
            }
          }
          if (utag.loader.rf == 0) return;
          for (b in utag.loader.GV(this.f)) {
            if (this.f[b] == 0 || this.f[b] == 2) return;
          }
          utag.loader.END();
        }
      },
      EV: function (a, b, c, d) {
        if (b == "ready") {
          if (!utag.data) {
            try {
              utag.cl = { _all_: 1 };
              utag.loader.initdata();
              utag.loader.RD(utag.data);
            } catch (e) {
              utag.DB(e);
            }
          }
          if (
            document.attachEvent || utag.cfg.dom_complete
              ? document.readyState === "complete"
              : document.readyState !== "loading"
          )
            setTimeout(c, 1);
          else {
            utag.loader.ready_q.push(c);
            var RH;
            if (utag.loader.ready_q.length <= 1) {
              if (document.addEventListener) {
                RH = function () {
                  document.removeEventListener("DOMContentLoaded", RH, false);
                  utag.loader.run_ready_q();
                };
                if (!utag.cfg.dom_complete)
                  document.addEventListener("DOMContentLoaded", RH, false);
                window.addEventListener("load", utag.loader.run_ready_q, false);
              } else if (document.attachEvent) {
                RH = function () {
                  if (document.readyState === "complete") {
                    document.detachEvent("onreadystatechange", RH);
                    utag.loader.run_ready_q();
                  }
                };
                document.attachEvent("onreadystatechange", RH);
                window.attachEvent("onload", utag.loader.run_ready_q);
              }
            }
          }
        } else {
          if (a.addEventListener) {
            a.addEventListener(b, c, false);
          } else if (a.attachEvent) {
            a.attachEvent((d == 1 ? "" : "on") + b, c);
          }
        }
      },
      END: function (b, c, d, e, v, w) {
        if (this.ended) {
          return;
        }
        this.ended = 1;
        utag.DB("loader.END");
        b = utag.data;
        if (utag.handler.base && utag.handler.base != "*") {
          e = utag.handler.base.split(",");
          for (d = 0; d < e.length; d++) {
            if (typeof b[e[d]] != "undefined") utag.handler.df[e[d]] = b[e[d]];
          }
        } else if (utag.handler.base == "*") {
          utag.ut.merge(utag.handler.df, b, 1);
        }
        utag.rpt["r_0"] = "t";
        for (var r in utag.loader.GV(utag.cond)) {
          utag.rpt["r_" + r] = utag.cond[r] ? "t" : "f";
        }
        utag.rpt.ts["s"] = new Date();
        v = ".tiqcdn.com";
        w = utag.cfg.path.indexOf(v);
        if (w > 0 && b["cp.utag_main__ss"] == 1 && !utag.cfg.no_session_count)
          utag.ut.loader({
            src:
              utag.cfg.path.substring(0, w) +
              v +
              "/ut" +
              "ag/tiqapp/ut" +
              "ag.v.js?a=" +
              utag.cfg.utid +
              (utag.cfg.nocookie
                ? "&nocookie=1"
                : "&cb=" + new Date().getTime()),
            id: "tiqapp",
          });
        if (utag.cfg.noview != true) utag.handler.RE("view", b, "end");
        utag.handler.INIT();
      },
    },
    DB: function (a, b) {
      if (utag.cfg.utagdb === false) {
        return;
      } else if (typeof utag.cfg.utagdb == "undefined") {
        b = document.cookie + "";
        utag.cfg.utagdb = b.indexOf("utagdb=true") >= 0 ? true : false;
      }
      if (utag.cfg.utagdb === true) {
        var t;
        if (utag.ut.typeOf(a) == "object") {
          t = utag.handler.C(a);
        } else {
          t = a;
        }
        utag.db_log.push(t);
        try {
          if (!utag.cfg.noconsole) console.log(t);
        } catch (e) {}
      }
    },
    RP: function (a, b, c) {
      if (
        typeof a != "undefined" &&
        typeof a.src != "undefined" &&
        a.src != ""
      ) {
        b = [];
        for (c in utag.loader.GV(a)) {
          if (c != "src") b.push(c + "=" + escape(a[c]));
        }
        this.dbi.push(
          (new Image().src =
            a.src +
            "?utv=" +
            utag.cfg.v +
            "&utid=" +
            utag.cfg.utid +
            "&" +
            b.join("&"))
        );
      }
    },
    view: function (a, c, d) {
      return this.track({ event: "view", data: a, cfg: { cb: c, uids: d } });
    },
    link: function (a, c, d) {
      return this.track({ event: "link", data: a, cfg: { cb: c, uids: d } });
    },
    track: function (a, b, c, d) {
      if (typeof a == "string") a = { event: a, data: b, cfg: { cb: c } };
      for (d in utag.loader.GV(utag.o)) {
        try {
          utag.o[d].handler.trigger(a.event || "view", a.data || a, a.cfg);
        } catch (e) {
          utag.DB(e);
        }
      }
      if (a.cfg && a.cfg.cb)
        try {
          a.cfg.cb();
        } catch (e) {
          utag.DB(e);
        }
      return true;
    },
    handler: {
      base: "",
      df: {},
      o: {},
      send: {},
      iflag: 0,
      INIT: function (a, b, c) {
        utag.DB("utag.handler.INIT");
        if (utag.initcatch) {
          utag.initcatch = 0;
          return;
        }
        this.iflag = 1;
        a = utag.loader.q.length;
        if (a > 0) {
          utag.DB("Loader queue");
          for (b = 0; b < a; b++) {
            c = utag.loader.q[b];
            utag.handler.trigger(c.a, c.b, c.c);
          }
        }
      },
      test: function () {
        return 1;
      },
      LR: function (b) {
        utag.DB("Load Rules");
        for (var d in utag.loader.GV(utag.cond)) {
          utag.cond[d] = false;
        }
        utag.DB(b);
        utag.loader.loadrules(b);
        utag.DB(utag.cond);
        utag.loader.initcfg();
        utag.loader.OU();
        for (var r in utag.loader.GV(utag.cond)) {
          utag.rpt["r_" + r] = utag.cond[r] ? "t" : "f";
        }
      },
      RE: function (a, b, c, d, e, f, g) {
        if (c != "alr" && !this.cfg_extend) {
          return 0;
        }
        utag.DB("RE: " + c);
        if (c == "alr") utag.DB("All Tags EXTENSIONS");
        utag.DB(b);
        if (typeof this.extend != "undefined") {
          g = 0;
          for (d = 0; d < this.extend.length; d++) {
            try {
              e = 0;
              if (typeof this.cfg_extend != "undefined") {
                f = this.cfg_extend[d];
                if (typeof f.count == "undefined") f.count = 0;
                if (f[a] == 0 || (f.once == 1 && f.count > 0) || f[c] == 0) {
                  e = 1;
                } else {
                  if (f[c] == 1) {
                    g = 1;
                  }
                  f.count++;
                }
              }
              if (e != 1) {
                this.extend[d](a, b);
                utag.rpt["ex_" + d] = 0;
              }
            } catch (er) {
              utag.DB(er);
              utag.rpt["ex_" + d] = 1;
              utag.ut.error({
                e: er.message,
                s: utag.cfg.path + "utag.js",
                l: d,
                t: "ge",
              });
            }
          }
          utag.DB(b);
          return g;
        }
      },
      trigger: function (a, b, c, d, e, f) {
        utag.DB("trigger:" + a + (c && c.uids ? ":" + c.uids.join(",") : ""));
        b = b || {};
        utag.DB(b);
        if (!this.iflag) {
          utag.DB("trigger:called before tags loaded");
          for (d in utag.loader.f) {
            if (!(utag.loader.f[d] === 1))
              utag.DB("Tag " + d + " did not LOAD");
          }
          utag.loader.q.push({ a: a, b: utag.handler.C(b), c: c });
          return;
        }
        utag.ut.merge(b, this.df, 0);
        utag.loader.RD(b, a);
        utag.cfg.noview = false;
        function sendTag(a, b, d) {
          try {
            if (typeof utag.sender[d] != "undefined") {
              utag.DB("SENDING: " + d);
              utag.sender[d].send(a, utag.handler.C(b));
              utag.rpt["s_" + d] = 0;
            } else if (utag.loader.cfg[d].load != 2) {
              utag.loader.sendq[d] = utag.loader.sendq[d] || [];
              utag.loader.sendq[d].push({ event: a, data: utag.handler.C(b) });
              utag.loader.sendq.pending++;
              utag.loader.AS({ id: d, load: 1 });
            }
          } catch (e) {
            utag.DB(e);
          }
        }
        if (c && c.uids) {
          this.RE(a, b, "alr");
          for (f = 0; f < c.uids.length; f++) {
            d = c.uids[f];
            sendTag(a, b, d);
          }
        } else if (utag.cfg.load_rules_ajax) {
          this.RE(a, b, "blr");
          this.LR(b);
          this.RE(a, b, "alr");
          for (f = 0; f < utag.loader.cfgsort.length; f++) {
            d = utag.loader.cfgsort[f];
            if (utag.loader.cfg[d].load && utag.loader.cfg[d].send) {
              sendTag(a, b, d);
            }
          }
        } else {
          this.RE(a, b, "alr");
          for (d in utag.loader.GV(utag.sender)) {
            sendTag(a, b, d);
          }
        }
        this.RE(a, b, "end");
      },
      C: function (a, b, c) {
        b = {};
        for (c in utag.loader.GV(a)) {
          if (a[c] instanceof Array) {
            b[c] = a[c].slice(0);
          } else {
            b[c] = a[c];
          }
        }
        return b;
      },
    },
    ut: {
      pad: function (a, b, c, d) {
        a = "" + (a - 0).toString(16);
        d = "";
        if (b > a.length) {
          for (c = 0; c < b - a.length; c++) {
            d += "0";
          }
        }
        return "" + d + a;
      },
      vi: function (t, a, b) {
        if (!utag.v_id) {
          a = this.pad(t, 12);
          b = "" + Math.random();
          a += this.pad(b.substring(2, b.length), 16);
          try {
            a += this.pad(
              navigator.plugins.length ? navigator.plugins.length : 0,
              2
            );
            a += this.pad(navigator.userAgent.length, 3);
            a += this.pad(document.URL.length, 4);
            a += this.pad(navigator.appVersion.length, 3);
            a += this.pad(
              screen.width +
                screen.height +
                parseInt(
                  screen.colorDepth ? screen.colorDepth : screen.pixelDepth
                ),
              5
            );
          } catch (e) {
            utag.DB(e);
            a += "12345";
          }
          utag.v_id = a;
        }
        return utag.v_id;
      },
      hasOwn: function (o, a) {
        return o != null && Object.prototype.hasOwnProperty.call(o, a);
      },
      isEmptyObject: function (o, a) {
        for (a in o) {
          if (utag.ut.hasOwn(o, a)) return false;
        }
        return true;
      },
      isEmpty: function (o) {
        var t = utag.ut.typeOf(o);
        if (t == "number") {
          return isNaN(o);
        } else if (t == "boolean") {
          return false;
        } else if (t == "string") {
          return o.length === 0;
        } else return utag.ut.isEmptyObject(o);
      },
      typeOf: function (e) {
        return {}.toString
          .call(e)
          .match(/\s([a-zA-Z]+)/)[1]
          .toLowerCase();
      },
      flatten: function (o) {
        var a = {};
        function r(c, p) {
          if (Object(c) !== c || c instanceof Array) {
            a[p] = c;
          } else {
            if (utag.ut.isEmptyObject(c)) {
            } else {
              for (var d in c) {
                r(c[d], p ? p + "." + d : d);
              }
            }
          }
        }
        r(o, "");
        return a;
      },
      merge: function (a, b, c, d) {
        if (c) {
          for (d in utag.loader.GV(b)) {
            a[d] = b[d];
          }
        } else {
          for (d in utag.loader.GV(b)) {
            if (typeof a[d] == "undefined") a[d] = b[d];
          }
        }
      },
      decode: function (a, b) {
        b = "";
        try {
          b = decodeURIComponent(a);
        } catch (e) {
          utag.DB(e);
        }
        if (b == "") {
          b = unescape(a);
        }
        return b;
      },
      encode: function (a, b) {
        b = "";
        try {
          b = encodeURIComponent(a);
        } catch (e) {
          utag.DB(e);
        }
        if (b == "") {
          b = escape(a);
        }
        return b;
      },
      error: function (a, b, c) {
        if (typeof utag_err != "undefined") {
          utag_err.push(a);
        }
      },
      loader: function (o, a, b, c, l, m) {
        utag.DB(o);
        a = document;
        if (o.type == "iframe") {
          m = a.getElementById(o.id);
          if (m && m.tagName == "IFRAME") {
            b = m;
          } else {
            b = a.createElement("iframe");
          }
          o.attrs = o.attrs || {};
          utag.ut.merge(
            o.attrs,
            { height: "1", width: "1", style: "display:none" },
            0
          );
        } else if (o.type == "img") {
          utag.DB("Attach img: " + o.src);
          b = new Image();
        } else {
          b = a.createElement("script");
          b.language = "javascript";
          b.type = "text/javascript";
          b.async = 1;
          b.charset = "utf-8";
        }
        if (o.id) {
          b.id = o.id;
        }
        for (l in utag.loader.GV(o.attrs)) {
          b.setAttribute(l, o.attrs[l]);
        }
        b.setAttribute("src", o.src);
        if (typeof o.cb == "function") {
          if (b.addEventListener) {
            b.addEventListener(
              "load",
              function () {
                o.cb();
              },
              false
            );
          } else {
            b.onreadystatechange = function () {
              if (
                this.readyState == "complete" ||
                this.readyState == "loaded"
              ) {
                this.onreadystatechange = null;
                o.cb();
              }
            };
          }
        }
        if (typeof o.error == "function") {
          utag.loader.EV(b, "error", o.error);
        }
        if (o.type != "img" && !m) {
          l = o.loc || "head";
          c = a.getElementsByTagName(l)[0];
          if (c) {
            utag.DB("Attach to " + l + ": " + o.src);
            if (l == "script") {
              c.parentNode.insertBefore(b, c);
            } else {
              c.appendChild(b);
            }
          }
        }
      },
    },
  };
  utag.o["mbs.main"] = utag;
  utag.cfg = {
    template: "ut4.43.",
    load_rules_ajax: true,
    load_rules_at_wait: false,
    lowerqp: false,
    noconsole: false,
    session_timeout: 1800000,
    readywait: 0,
    noload: 0,
    domain: utag.loader.lh(),
    datasource: "##UTDATASOURCE##".replace("##" + "UTDATASOURCE##", ""),
    path: "//tags.tiqcdn.com/utag/mbs/main/qa/",
    utid: "mbs/main/202207210623",
  };
  utag.cfg.v = utag.cfg.template + "202207210624";
  utag.cond = {
    106: 0,
    109: 0,
    127: 0,
    128: 0,
    131: 0,
    132: 0,
    135: 0,
    156: 0,
    168: 0,
    173: 0,
    178: 0,
    181: 0,
    182: 0,
    184: 0,
    188: 0,
    194: 0,
    195: 0,
    19: 0,
    202: 0,
    207: 0,
    209: 0,
    210: 0,
    214: 0,
    216: 0,
    219: 0,
    220: 0,
    221: 0,
    222: 0,
    226: 0,
    227: 0,
    228: 0,
    231: 0,
    235: 0,
    236: 0,
    238: 0,
    239: 0,
    240: 0,
    243: 0,
    252: 0,
    253: 0,
    254: 0,
    260: 0,
    261: 0,
    47: 0,
    51: 0,
    54: 0,
    61: 0,
    64: 0,
    65: 0,
    66: 0,
    75: 0,
    95: 0,
    96: 0,
    97: 0,
    98: 0,
  };
  utag.pagevars = function (ud) {
    ud = ud || utag.data;
    try {
      ud["js_page.Facebook_data_page"] = Facebook_data_page;
    } catch (e) {
      utag.DB(e);
    }
  };
  utag.loader.initdata = function () {
    try {
      utag.data = typeof utag_data != "undefined" ? utag_data : {};
      utag.udoname = "utag_data";
    } catch (e) {
      utag.data = {};
      utag.DB("idf:" + e);
    }
  };
  utag.loader.loadrules = function (_pd, _pc) {
    var d = _pd || utag.data;
    var c = _pc || utag.cond;
    for (var l in utag.loader.GV(c)) {
      switch (l) {
        case "106":
          try {
            c[106] |=
              /^marinabaysands\.com/i.test(d["dom.domain"]) ||
              /^zh\.marinabaysands\.com/i.test(d["dom.domain"]) ||
              /^booking\.marinabaysands\.com/i.test(d["dom.domain"]) ||
              /^booking-zh\.marinabaysands\.com/i.test(d["dom.domain"]);
          } catch (e) {
            utag.DB(e);
          }
          break;
        case "109":
          try {
            c[109] |=
              /^jp\.marinabaysands\.com/.test(d["dom.domain"]) ||
              (d["dom.domain"]
                .toString()
                .toLowerCase()
                .indexOf("reserve.marinabaysands.com".toLowerCase()) > -1 &&
                d["dom.query_string"]
                  .toString()
                  .toLowerCase()
                  .indexOf("locale=ja".toLowerCase()) > -1) ||
              d["domain_pathname"]
                .toString()
                .indexOf("jp.marinabaysands.com/booking/") > -1;
          } catch (e) {
            utag.DB(e);
          }
          break;
        case "127":
          try {
            c[127] |=
              d["dom.url"]
                .toString()
                .toLowerCase()
                .indexOf("/sandsrewardsclub/".toLowerCase()) > -1 ||
              d["dom.url"]
                .toString()
                .toLowerCase()
                .indexOf("/sands-rewards-club/".toLowerCase()) > -1;
          } catch (e) {
            utag.DB(e);
          }
          break;
        case "128":
          try {
            c[128] |=
              d["dom.url"]
                .toString()
                .toLowerCase()
                .indexOf("/sandsrewardslifestyle/".toLowerCase()) > -1 ||
              d["dom.url"]
                .toString()
                .toLowerCase()
                .indexOf("/sands-rewards-lifestyle/".toLowerCase()) > -1 ||
              d["dom.url"]
                .toString()
                .toLowerCase()
                .indexOf("/deals/members-only".toLowerCase()) > -1;
          } catch (e) {
            utag.DB(e);
          }
          break;
        case "131":
          try {
            c[131] |=
              typeof d["va.properties.5531"] == "undefined" &&
              typeof d["cp.utag_main_dcsyncran"] == "undefined";
          } catch (e) {
            utag.DB(e);
          }
          break;
        case "132":
          try {
            c[132] |=
              d["dom.url"]
                .toString()
                .toLowerCase()
                .indexOf("postconfirmation".toLowerCase()) > -1 &&
              typeof d["entertainment_order_id"] != "undefined";
          } catch (e) {
            utag.DB(e);
          }
          break;
        case "135":
          try {
            c[135] |=
              (typeof d["event_name"] != "undefined" &&
                d["event_name"].toString().toLowerCase() ==
                  "button click".toLowerCase()) ||
              (typeof d["event_name"] != "undefined" &&
                d["event_name"].toString().toLowerCase() ==
                  "Outbound Link".toLowerCase());
          } catch (e) {
            utag.DB(e);
          }
          break;
        case "156":
          try {
            c[156] |=
              /^reserve\.marinabaysands\.com\/confirmation/i.test(
                d["domain_pathname"]
              ) ||
              d["dom.url"]
                .toString()
                .indexOf("marinabaysands.com/booking/confirmation") > -1;
          } catch (e) {
            utag.DB(e);
          }
          break;
        case "168":
          try {
            c[168] |=
              d["dom.domain"]
                .toString()
                .toLowerCase()
                .indexOf("www.sandscasino.com".toLowerCase()) > -1;
          } catch (e) {
            utag.DB(e);
          }
          break;
        case "173":
          try {
            c[173] |=
              (d["dom.domain"]
                .toString()
                .toLowerCase()
                .indexOf("ticket.marinabaysands.com".toLowerCase()) > -1 &&
                d["dom.pathname"]
                  .toString()
                  .toLowerCase()
                  .indexOf("/confirmorder/postconfirmation".toLowerCase()) >
                  -1) ||
              (d["dom.domain"]
                .toString()
                .toLowerCase()
                .indexOf("ticketing.marinabaysands.com".toLowerCase()) > -1 &&
                d["dom.pathname"]
                  .toString()
                  .toLowerCase()
                  .indexOf("/confirmorder/postconfirmation".toLowerCase()) >
                  -1) ||
              (d["dom.domain"]
                .toString()
                .toLowerCase()
                .indexOf("entertainment.marinabaysands.com".toLowerCase()) >
                -1 &&
                d["dom.pathname"]
                  .toString()
                  .toLowerCase()
                  .indexOf("/confirmorder/postconfirmation".toLowerCase()) >
                  -1);
          } catch (e) {
            utag.DB(e);
          }
          break;
        case "178":
          try {
            c[178] |=
              d["dom.url"].toString().indexOf(".sevenrooms.com") > -1 ||
              /marinabaysands.com\/restaurants\/(.*)\/reservation/.test(
                d["dom.url"]
              );
          } catch (e) {
            utag.DB(e);
          }
          break;
        case "181":
          try {
            c[181] |= typeof d["restaurant_revenue"] != "undefined";
          } catch (e) {
            utag.DB(e);
          }
          break;
        case "182":
          try {
            c[182] |=
              d["dom.url"]
                .toString()
                .toLowerCase()
                .indexOf("staging.marinabaysands.com".toLowerCase()) > -1;
          } catch (e) {
            utag.DB(e);
          }
          break;
        case "184":
          try {
            c[184] |= typeof d["casino_pages"] == "undefined";
          } catch (e) {
            utag.DB(e);
          }
          break;
        case "188":
          try {
            c[188] |=
              d["dom.domain"]
                .toString()
                .toLowerCase()
                .indexOf("meetings".toLowerCase()) > -1;
          } catch (e) {
            utag.DB(e);
          }
          break;
        case "19":
          try {
            c[19] |=
              d["dom.url"]
                .toString()
                .toLowerCase()
                .indexOf("marinabaysands.com/deals/rooms".toLowerCase()) > -1;
          } catch (e) {
            utag.DB(e);
          }
          break;
        case "194":
          try {
            c[194] |=
              (/^reserve\.marinabaysands\.com\/confirmation/i.test(
                d["domain_pathname"]
              ) &&
                d["dom.query_string"]
                  .toString()
                  .toLowerCase()
                  .indexOf("locale=ja".toLowerCase()) > -1) ||
              d["domain_pathname"]
                .toString()
                .toLowerCase()
                .indexOf(
                  "jp.www.marinabaysands.com/booking/confirmation".toLowerCase()
                ) > -1;
          } catch (e) {
            utag.DB(e);
          }
          break;
        case "195":
          try {
            c[195] |= /^jp\.marinabaysands\.com/.test(d["dom.domain"]);
          } catch (e) {
            utag.DB(e);
          }
          break;
        case "202":
          try {
            c[202] |=
              d["dom.domain"].toString().indexOf("reserve.marinabaysands.com") <
                0 &&
              d["domain_pathname"]
                .toString()
                .indexOf("marinabaysands.com/booking") < 0;
          } catch (e) {
            utag.DB(e);
          }
          break;
        case "207":
          try {
            c[207] |= d["tealium_event"] == "hotel_booking_confirmation";
          } catch (e) {
            utag.DB(e);
          }
          break;
        case "209":
          try {
            c[209] |=
              typeof d["amobee_base_url"] != "undefined" &&
              d["amobee_base_url"] != "";
          } catch (e) {
            utag.DB(e);
          }
          break;
        case "210":
          try {
            c[210] |=
              typeof d["reservation_order_id"] != "undefined" ||
              typeof d["hotel_order_id_individual"] != "undefined";
          } catch (e) {
            utag.DB(e);
          }
          break;
        case "214":
          try {
            c[214] |= d["event_name"] == "hm_push_event";
          } catch (e) {
            utag.DB(e);
          }
          break;
        case "216":
          try {
            c[216] |=
              d["dom.url"]
                .toString()
                .toLowerCase()
                .indexOf("staging.marinabaysands.com/booking/".toLowerCase()) >
                -1 ||
              d["dom.url"]
                .toString()
                .toLowerCase()
                .indexOf(
                  "staging.marinabaysands.com/content/singapore/marinabaysands/en/main/index/booking/".toLowerCase()
                ) > -1;
          } catch (e) {
            utag.DB(e);
          }
          break;
        case "219":
          try {
            c[219] |= d["cp.utag_main__ss"] == "1";
          } catch (e) {
            utag.DB(e);
          }
          break;
        case "220":
          try {
            c[220] |= d["domain_pathname"] == "staging.marinabaysands.com/";
          } catch (e) {
            utag.DB(e);
          }
          break;
        case "221":
          try {
            c[221] |=
              d["event_name"].toString().toLowerCase() ==
              "ApplyNowButtonClick".toLowerCase();
          } catch (e) {
            utag.DB(e);
          }
          break;
        case "222":
          try {
            c[222] |=
              (d["event_action"].toString().toLowerCase() ==
                "https://www.marinabaysands.com/campaign/christmas/festive-dining.html".toLowerCase() &&
                d["link_name"].toString().toLowerCase() ==
                  "www.sevenrooms.com".toLowerCase() &&
                d["event_name"].toString().toLowerCase() ==
                  "Outbound Link".toLowerCase()) ||
              (d["event_action"].toString().toLowerCase() ==
                "https://www.marinabaysands.com/campaign/christmas/festive-dining.html".toLowerCase() &&
                /marinabaysands.com\/restaurants\/(.*)\/reservation.html/.test(
                  d["link_name"]
                ) &&
                d["event_name"].toString().toLowerCase() ==
                  "Outbound Link".toLowerCase());
          } catch (e) {
            utag.DB(e);
          }
          break;
        case "226":
          try {
            c[226] |= typeof d["cp.utag_main_ttd_uuid"] == "undefined";
          } catch (e) {
            utag.DB(e);
          }
          break;
        case "227":
          try {
            c[227] |=
              d["dom.domain"]
                .toString()
                .toLowerCase()
                .indexOf("marinabaysands.com".toLowerCase()) > -1;
          } catch (e) {
            utag.DB(e);
          }
          break;
        case "228":
          try {
            c[228] |=
              d["dom.domain"]
                .toString()
                .toLowerCase()
                .indexOf("marinabaysands.com".toLowerCase()) < 0;
          } catch (e) {
            utag.DB(e);
          }
          break;
        case "231":
          try {
            c[231] |=
              d["tealium_event"]
                .toString()
                .indexOf("hotel_booking_individual_confirmation") > -1;
          } catch (e) {
            utag.DB(e);
          }
          break;
        case "235":
          try {
            c[235] |=
              d["event_name"].toString().indexOf("hm_push_event_error") > -1;
          } catch (e) {
            utag.DB(e);
          }
          break;
        case "236":
          try {
            c[236] |=
              d["domain_pathname"].toString().indexOf("restaurants") > -1;
          } catch (e) {
            utag.DB(e);
          }
          break;
        case "238":
          try {
            c[238] |=
              d["dom.url"]
                .toString()
                .indexOf(
                  "marinabaysands.com/deals/restaurants/endless-lunch-selections.html"
                ) > -1;
          } catch (e) {
            utag.DB(e);
          }
          break;
        case "239":
          try {
            c[239] |=
              d["domain_pathname"]
                .toString()
                .indexOf(
                  "marinabaysands.com/deals/restaurants/mooncakes-online-order/confirmation.html"
                ) > -1;
          } catch (e) {
            utag.DB(e);
          }
          break;
        case "240":
          try {
            c[240] |=
              (d["domain_pathname"]
                .toString()
                .indexOf(
                  "marinabaysands.com/deals/attractions/virgin-active-yoga.html"
                ) > -1 &&
                d["event_action"].toString().indexOf("Book now") > -1 &&
                d["event_category"].toString().toLowerCase() ==
                  "Button".toLowerCase()) ||
              (d["domain_pathname"]
                .toString()
                .indexOf(
                  "marinabaysands.com/deals/attractions/virgin-active-yoga.html"
                ) > -1 &&
                d["event_action"].toString().indexOf("Pesan sekarang") > -1 &&
                d["event_category"].toString().indexOf("Button") > -1) ||
              (d["domain_pathname"]
                .toString()
                .indexOf(
                  "marinabaysands.com/deals/attractions/virgin-active-yoga.html"
                ) > -1 &&
                d["event_action"].toString().indexOf("立即预订") > -1 &&
                d["event_category"].toString().indexOf("Button") > -1) ||
              (d["domain_pathname"]
                .toString()
                .indexOf(
                  "marinabaysands.com/deals/attractions/virgin-active-yoga.html"
                ) > -1 &&
                d["event_action"].toString().indexOf("今すぐ予約") > -1 &&
                d["event_category"].toString().indexOf("Button") > -1) ||
              (d["domain_pathname"]
                .toString()
                .indexOf(
                  "marinabaysands.com/deals/attractions/virgin-active-yoga.html"
                ) > -1 &&
                d["event_action"].toString().indexOf("지금 예약") > -1 &&
                d["event_category"].toString().indexOf("Button") > -1);
          } catch (e) {
            utag.DB(e);
          }
          break;
        case "243":
          try {
            c[243] |=
              /marinabaysands.com\/restaurants\/(.*)\/reservation\/confirmation.html/.test(
                d["dom.url"]
              );
          } catch (e) {
            utag.DB(e);
          }
          break;
        case "252":
          try {
            c[252] |=
              d["dom.url"]
                .toString()
                .toLowerCase()
                .indexOf("ang-bao-peel-and-win.html".toLowerCase()) < 0 ||
              (d["dom.url"]
                .toString()
                .toLowerCase()
                .indexOf("ang-bao-peel-and-win.html".toLowerCase()) > -1 &&
                d["va.current_visit.properties.12300"]
                  .toString()
                  .toLowerCase()
                  .indexOf("MBS-IOS".toLowerCase()) < 0);
          } catch (e) {
            utag.DB(e);
          }
          break;
        case "253":
          try {
            c[253] |= typeof d["va.badges.5734"] != "undefined";
          } catch (e) {
            utag.DB(e);
          }
          break;
        case "254":
          try {
            c[254] |= typeof d["va.badges.14283"] != "undefined";
          } catch (e) {
            utag.DB(e);
          }
          break;
        case "260":
          try {
            c[260] |= d["tealium_event"].toString().indexOf("restaurant") > -1;
          } catch (e) {
            utag.DB(e);
          }
          break;
        case "261":
          try {
            c[261] |= d["page_name"].toString().indexOf("waku-ghin") > -1;
          } catch (e) {
            utag.DB(e);
          }
          break;
        case "47":
          try {
            c[47] |=
              d["dom.domain"].toString().indexOf("ko.marinabaysands.com") > -1;
          } catch (e) {
            utag.DB(e);
          }
          break;
        case "51":
          try {
            c[51] |=
              d["dom.domain"].toString().indexOf("reserve.marinabaysands.com") >
                -1 ||
              d["dom.url"].toString().indexOf("marinabaysands.com/booking/") >
                -1;
          } catch (e) {
            utag.DB(e);
          }
          break;
        case "54":
          try {
            c[54] |=
              (d["dom.domain"].toString().indexOf("marinabaysands.com") > -1 &&
                d["dom.domain"].toString().indexOf("ticketing") < 0 &&
                d["dom.domain"].toString().indexOf("entertainment") < 0 &&
                d["dom.domain"].toString().indexOf("ticket") < 0 &&
                d["dom.domain"].toString().indexOf("meetings") < 0) ||
              d["dom.url"].toString().indexOf("reserve.marinabaysands.com") >
                -1 ||
              d["dom.url"].toString().indexOf("mbs-be-qa1") > -1 ||
              d["dom.url"].toString().indexOf("marinabaysands.com/booking/") >
                -1;
          } catch (e) {
            utag.DB(e);
          }
          break;
        case "61":
          try {
            c[61] |=
              (/^\/confirmation/i.test(d["dom.pathname"]) &&
                d["dom.domain"]
                  .toString()
                  .toLowerCase()
                  .indexOf("reserve.marinabaysands.com".toLowerCase()) > -1) ||
              (d["dom.url"].toString().indexOf("/booking/confirmation") > -1 &&
                d["tealium_event"].toString().toLowerCase() ==
                  "hotel_booking_confirmation".toLowerCase());
          } catch (e) {
            utag.DB(e);
          }
          break;
        case "64":
          try {
            c[64] |=
              typeof d["DC_settings"] != "undefined" &&
              d["DC_settings"]
                .toString()
                .toLowerCase()
                .indexOf("NOMATCH".toLowerCase()) < 0;
          } catch (e) {
            utag.DB(e);
          }
          break;
        case "65":
          try {
            c[65] |=
              typeof d["DC_settings_regex"] != "undefined" &&
              d["DC_settings_regex"]
                .toString()
                .toLowerCase()
                .indexOf("nomatch".toLowerCase()) < 0 &&
              typeof d["DC_settings"] != "undefined" &&
              d["DC_settings"]
                .toString()
                .toLowerCase()
                .indexOf("nomatch".toLowerCase()) > -1;
          } catch (e) {
            utag.DB(e);
          }
          break;
        case "66":
          try {
            c[66] |= /.+.marinabaysands.com\/*/.test(d["domain_pathname"]);
          } catch (e) {
            utag.DB(e);
          }
          break;
        case "75":
          try {
            c[75] |=
              (typeof d["event_label"] != "undefined" &&
                d["event_label"]
                  .toString()
                  .toLowerCase()
                  .indexOf("bookarestaurant".toLowerCase()) > -1) ||
              (typeof d["event_label"] != "undefined" &&
                d["event_label"]
                  .toString()
                  .toLowerCase()
                  .indexOf("sevenrooms".toLowerCase()) > -1) ||
              (typeof d["event_label"] != "undefined" &&
                /marinabaysands.com\/restaurants\/(.*)\/reservation.html/.test(
                  d["event_label"]
                ));
          } catch (e) {
            utag.DB(e);
          }
          break;
        case "95":
          try {
            c[95] |=
              d["dom.domain"]
                .toString()
                .toLowerCase()
                .indexOf("sandsrewardslifestyle.com".toLowerCase()) > -1 ||
              d["dom.url"]
                .toString()
                .toLowerCase()
                .indexOf(
                  "marinabaysands.com/sands-rewards-lifestyle/".toLowerCase()
                ) > -1 ||
              d["dom.url"]
                .toString()
                .toLowerCase()
                .indexOf(
                  "marinabaysands.com/sands-rewards-lifestyle".toLowerCase()
                ) > -1 ||
              d["dom.url"]
                .toString()
                .toLowerCase()
                .indexOf(
                  "marinabaysands.com/deals/members-only".toLowerCase()
                ) > -1;
          } catch (e) {
            utag.DB(e);
          }
          break;
        case "96":
          try {
            c[96] |=
              d["dom.domain"]
                .toString()
                .toLowerCase()
                .indexOf("sandsrewardsclub.sg".toLowerCase()) > -1 ||
              d["dom.url"]
                .toString()
                .toLowerCase()
                .indexOf(
                  "marinabaysands.com/sands-rewards-club".toLowerCase()
                ) > -1;
          } catch (e) {
            utag.DB(e);
          }
          break;
        case "97":
          try {
            c[97] |=
              d["dom.domain"]
                .toString()
                .toLowerCase()
                .indexOf("entertainment.marinabaysands.com".toLowerCase()) >
                -1 ||
              d["dom.domain"]
                .toString()
                .toLowerCase()
                .indexOf("ticketing.marinabaysands.com".toLowerCase()) > -1 ||
              d["dom.domain"]
                .toString()
                .toLowerCase()
                .indexOf("ticket.marinabaysands.com".toLowerCase()) > -1 ||
              typeof d["entertainment_order_id"] != "undefined";
          } catch (e) {
            utag.DB(e);
          }
          break;
        case "98":
          try {
            c[98] |=
              typeof d["DC_dedup_settings"] != "undefined" &&
              d["DC_dedup_settings"]
                .toString()
                .toLowerCase()
                .indexOf("NOMATCH".toLowerCase()) < 0;
          } catch (e) {
            utag.DB(e);
          }
          break;
      }
    }
  };
  utag.pre = function () {
    utag.loader.initdata();
    utag.pagevars();
    try {
      utag.loader.RD(utag.data);
    } catch (e) {
      utag.DB(e);
    }
    utag.loader.loadrules();
  };
  utag.loader.GET = function () {
    utag.cl = { _all_: 1 };
    utag.pre();
    utag.handler.extend = [
      function (a, b) {
        try {
          if (b["dom.domain"].toString().indexOf("marinabaysands.com") > -1) {
            window.utag_data = window.utag_data || {};
            window.utag_cfg_ovrd = window.utag_cfg_ovrd || {};
            utag_cfg_ovrd.noview = true;
            if (sessionStorage.geoLoc != "Started") {
              fetch("https://www.marinabaysands.com/services/country-api")
                .then(function (response) {
                  return response.json();
                })
                .then(function (data) {
                  utag.loader.SC("utag_main", {
                    geolocation: data.country + ";exp-session",
                  });
                  b["cp.utag_main_geolocation"] = data.country;
                  sessionStorage.geoLoc = "Started";
                })
                .catch(function (err) {
                  console.log("Unable to retrieve Country from JSON payload");
                });
            }
          }
        } catch (e) {
          utag.DB(e);
        }
      },
      function (a, b) {
        try {
          utag.runonce = utag.runonce || {};
          utag.runonce.ext = utag.runonce.ext || {};
          if (typeof utag.runonce.ext[397] == "undefined") {
            utag.runonce.ext[397] = 1;
            if (
              b["dom.url"]
                .toString()
                .indexOf("https://reserve.marinabaysands.com") > -1 ||
              b["dom.url"]
                .toString()
                .indexOf("https://uat.marinabaysands.com") > -1 ||
              b["dom.url"]
                .toString()
                .indexOf("https://ticket.marinabaysands.com/") > -1 ||
              b["dom.url"]
                .toString()
                .indexOf("https://www.marinabaysands.com") > -1
            ) {
              (function ($) {
                console.log("[397] Before Load Rules [Run Once]");
                function isDebug() {
                  var cpl_debug = readCookie("cpl_debug");
                  if (cpl_debug !== null && cpl_debug === "true") {
                    return true;
                  }
                  return false;
                }
                function isRoomsPathName() {
                  return /\/rooms/.test(window.location.pathname);
                }
                function isPaymentPathName() {
                  return /\/payment/.test(window.location.pathname);
                }
                function isBookingEnginePage() {
                  return window.location.host.indexOf("reserve") > -1
                    ? true
                    : false;
                }
                function isBookingEnginePageNew() {
                  return document.URL.indexOf("marinabaysands.com/booking") > -1
                    ? true
                    : false;
                }
                function isSearchPathName() {
                  return /\/search/.test(window.location.pathname);
                }
                function isRoomsMultiRoomRatePlanListingPath() {
                  return /\/multiroomRatePlanListing/.test(
                    window.location.pathname
                  );
                }
                function createCookie(name, value, days) {
                  if (days) {
                    var date = new Date();
                    date.setTime(date.getTime() + days * 24 * 60 * 60 * 1000);
                    var expires = "; expires=" + date.toGMTString();
                  } else var expires = "";
                  document.cookie = name + "=" + value + expires + "; path=/";
                }
                function readCookie(name) {
                  var nameEQ = name + "=";
                  var ca = document.cookie.split(";");
                  for (var i = 0; i < ca.length; i++) {
                    var c = ca[i];
                    while (c.charAt(0) == " ") c = c.substring(1, c.length);
                    if (c.indexOf(nameEQ) == 0)
                      return c.substring(nameEQ.length, c.length);
                  }
                  return null;
                }
                function getOldSkus() {
                  if (typeof oldSku === "undefined") {
                    return "";
                  }
                  return Array.isArray(oldSku) ? oldSku : oldSku.split(",");
                }
                function isOnSearchStep() {
                  return (
                    document.querySelectorAll(
                      "section.placeholder-section .outer.circle.shapeborder-selected"
                    ).length === 1
                  );
                }
                var oldSku = readCookie("oldSku") || "";
                if (typeof DY === "undefined") {
                  window.DY = window.DY || {};
                  function initContextMainScript() {
                    function setContext(context) {
                      DY.recommendationContext = context;
                      if (isDebug()) {
                        console.group("%cCPL Debug:", "color:#E34234");
                        console.table(DY.recommendationContext);
                        console.trace("CPL: DY Tracking Debug");
                        console.groupEnd();
                      }
                    }
                    function setDYRecommendationContext() {
                      if (isRoomsPathName()) {
                        createCookie("addToCart", "0", 1);
                        if (isOnSearchStep()) {
                          setContext({ type: "OTHER", data: [""] });
                        } else if (!isOnSearchStep()) {
                          setContext({
                            type: "CATEGORY",
                            data: ["hotel", "rooms-suites"],
                          });
                        }
                      } else if (isPaymentPathName()) {
                        productSKU = readCookie("selectedSKU");
                        setContext({ type: "CART", data: [productSKU] });
                      } else if (
                        isSearchPathName() ||
                        /\/multiroomRatePlanListing/.test(
                          window.location.pathname
                        ) ||
                        /\/multirooms/.test(window.location.pathname)
                      ) {
                        setContext({ type: "OTHER", data: [""] });
                      } else if (
                        /\/guestCreditCardInfo/.test(
                          window.location.pathname
                        ) ||
                        /\/payment/.test(window.location.pathname)
                      ) {
                        setContext({ type: "CART", data: getOldSkus() });
                      } else {
                        setContext({ type: "OTHER", data: [""] });
                      }
                    }
                    setDYRecommendationContext();
                  }
                  if (isBookingEnginePage()) {
                    initContextMainScript();
                  }
                  if (isBookingEnginePageNew()) {
                    initContextMainScript();
                  }
                  if (typeof DY.recommendationContext !== "undefined") {
                    console.log("Context Loaded: ", DY.recommendationContext);
                  }
                } else {
                  console.log("DY already Loaded. Unable to set context here.");
                }
              })(jQuery);
            }
          }
        } catch (e) {
          utag.DB(e);
        }
      },
      function (a, b) {
        try {
          if (1) {
            function setDaysCookie(cookieName, cookieValue) {
              document.cookie =
                cookieName +
                "=" +
                cookieValue +
                ";path=/;domain=" +
                utag.cfg.domain +
                ";expires=" +
                (function () {
                  var d = new Date();
                  d.setTime(d.getTime() + 5 * 86400000);
                  return d.toGMTString();
                })() +
                "";
              b["cp." + cookieName] = cookieValue;
            }
            window.setSessionCookie = function (cookieName, cookieValue) {
              document.cookie =
                cookieName +
                "=" +
                cookieValue +
                ";path=/;domain=" +
                utag.cfg.domain +
                ";expires=";
              b["cp." + cookieName] = cookieValue;
            };
            window.getCookie = function (name) {
              var nameEQ = name + "=";
              var ca = document.cookie.split(";");
              for (var i = 0; i < ca.length; i++) {
                var c = ca[i];
                while (c.charAt(0) == " ") c = c.substring(1);
                if (c.indexOf(nameEQ) != -1)
                  return c.substring(nameEQ.length, c.length);
              }
              return null;
            };
            window.getRoomRateRange = function (n) {
              var roomRateRanges = [
                "\x3c 400 SGD",
                "400 - 450 SGD",
                "450 - 500 SGD",
                "500 - 550 SGD",
                "550 - 600 SGD",
                "600 - 700 SGD",
                "700 - 800 SGD",
                "800 - 900 SGD",
                "900 - 1050 SGD",
                "1050 - 1200 SGD",
                "1200 - 1400 SGD",
                "1400 - 1600 SGD",
                "1600 - 1800 SGD",
                "1800 - 2000 SGD",
                "2000 - 2300 SGD",
                "2300 - 2600 SGD",
                "2600 - 3000 SGD",
                "3000 - 3500 SGD",
                "3500 - 4500 SGD",
                "\x3e\x3d 4500 SGD",
                "Abnormal",
              ];
              var m = roomRateRanges.length - 1;
              try {
                if (n > 0 && n < 400) m = 0;
                else if (n >= 400 && n < 600) m = Math.floor(n / 50) - 7;
                else if (n >= 600 && n < 1050) {
                  m = Math.floor(n / 100) - 1;
                  if (n >= 1e3) m -= 1;
                } else if (n >= 1050 && n < 2e3)
                  m = Math.floor(n / 100 / 2) + 4;
                else if (n >= 2e3 && n < 2600)
                  m = Math.floor((n - 2e3) / 300) + 14;
                else if (n >= 2600 && n < 3e3) m = 16;
                else if (n >= 3e3 && n < 3500) m = 17;
                else if (n >= 3500 && n < 4500) m = 18;
                else if (n >= 4500) m = roomRateRanges.length - 2;
              } catch (e) {
                console.log(e.message);
                m = roomRateRanges.length - 1;
              }
              return roomRateRanges[m];
            };
            window.bookingMethods = {
              0: "Booking Widget Outside Booking Engine",
              1: "Booking Calendar",
              2: "Modify Widget",
              3: "Flexible Date Booking Calendar",
              4: "Find Best Match",
              "": "-Unknown-",
              null: "-Unknown-",
            };
            if (window.location.pathname.match(/\//)) {
              $("button.book_btn").on("click", function () {
                setDaysCookie("bookingMethod", "0");
              });
            }
            if (window.location.pathname.match(/\/Booking\/(New)?Search/i)) {
              $("#ContentPlaceHolder1_btnCheckRates").on("click", function () {
                setDaysCookie("bookingMethod", "1");
              });
            }
            if (window.location.pathname.match(/\/Booking\/Listing/i)) {
              $("#btnRefresh").on("click", function () {
                setDaysCookie("bookingMethod", "2");
              });
            }
            if (window.location.pathname.match(/\/Booking\/Listing/i)) {
              $(document).ajaxComplete(function () {
                $("#ContentPlaceHolder1_btnFlexiBook").on("click", function () {
                  setDaysCookie("bookingMethod", "3");
                });
              });
            }
            if (window.location.pathname.match(/\/Booking\/helpmechoose/i)) {
              $("input[type\x3dbutton][value\x3d'Find Best Match']").on(
                "click",
                function () {
                  setDaysCookie("bookingMethod", "4");
                }
              );
            }
          }
        } catch (e) {
          utag.DB(e);
        }
      },
      function (a, b, c, d) {
        try {
          if (1) {
            c = [b["dom.domain"], b["dom.pathname"]];
            b["domain_pathname"] = c.join("");
          }
        } catch (e) {
          utag.DB(e);
        }
      },
      function (a, b, c, d, e, f, g) {
        if (
          b["dom.pathname"]
            .toString()
            .toLowerCase()
            .indexOf("ang-bao-peel-and-win.html".toLowerCase()) < 0 ||
          (b["dom.pathname"]
            .toString()
            .toLowerCase()
            .indexOf("ang-bao-peel-and-win.html".toLowerCase()) > -1 &&
            b["va.current_visit.properties.12300"]
              .toString()
              .toLowerCase()
              .indexOf("MBS-iOS".toLowerCase()) < 0)
        ) {
          d = b["domain_pathname"];
          if (typeof d == "undefined") return;
          c = [
            { "marinabaysands.com/hotel.html": "mbsla00/mbs_7000" },
            { "marinabaysands.com/see-and-do.html": "mbsfb0/mbs_700" },
            {
              "marinabaysands.com/expo-events-and-convention-centre.html":
                "mbsev0/mbs_70",
            },
            { "marinabaysands.com/sands-rewards-club.html": "mbs_r0/mbs_70" },
            {
              "www.sandsrewardslifestyle.com/SignUp/SignUp.aspx":
                "mbssr0/mbs_700",
            },
            {
              "www.sandsrewardslifestyle.com/SignUp/SignUp2.aspx":
                "mbssr0/mbs_70",
            },
            {
              "marinabaysands.com/attractions/spectra.html": "mbsfb0/mbs_7008",
            },
            {
              "marinabaysands.com/expo-events-and-convention-centre/weddings/weddingonthebay.html":
                "mbsev00/mbs_7000",
            },
            {
              "marinabaysands.com/sands-rewards-lifestyle/signup-successful.html":
                "mbssr0/mbs_70",
            },
            {
              "marinabaysands.com/sands-rewards-lifestyle/sign-up.aspx":
                "mbssr0/mbs_7000",
            },
            { "ticket.marinabaysands.com/mbs/booking": "mbsfb0/mbs_700a" },
            {
              "marinabaysands.com/sands-rewards-lifestyle.html":
                "mbssr0/mbs_7001",
            },
            {
              "ticket.marinabaysands.com/mbs/confirm/shoppingcart":
                "mbsfb0/mbs_7009",
            },
            { "marinabaysands.com/attractions.html": "mbs_70/mbs_70" },
            {
              "ovs.tour-list.com/DPSearch?HotelCode=mbsands&Language=ja":
                "mbs_h001/mbs_7000",
            },
            { "ovs.tour-list.com/Package/": "mbs_h001/mbs_7001" },
            { "ovs.tour-list.com/Reservation/Complete": "mbs_h000/mbs_700" },
            { SHOW_AND: "mbsre00/mbs_7002" },
            {
              "marinabaysands.com/restaurants/view-all.html?Offers=Taste%20the%20Impossible":
                "mbsre0/mbs_700b",
            },
            { "marinabaysands.com/book-direct.html": "bkdirect/mbs_70" },
            { "marinabaysands.com/nightlife.html": "nightlif/mbs_70" },
            {
              "marinabaysands.com/nightlife/bignightout.html":
                "nightlif/mbs_7000",
            },
            { "sevenrooms.com/reservations/komambs": "rsrvtns/mbs_7000" },
            { "sevenrooms.com/reservations/renkumbs": "rsrvtns/mbs_7002" },
            { "sevenrooms.com/reservations/risembs": "rsrvtns/mbs_7001" },
            { "sevenrooms.com/reservations/bskmbs": "rsrvtns/mbs_7005" },
            { "sevenrooms.com/reservations/club55mbs": "rsrvtns/mbs_7007" },
            { "sevenrooms.com/reservations/cutmbs": "rsrvtns/mbs_7008" },
            { "sevenrooms.com/reservations/dbmbs": "rsrvtns/mbs_700a" },
            {
              "sevenrooms.com/reservations/lavosingaporembs":
                "rsrvtns/mbs_700-",
            },
            {
              "sevenrooms.com/reservations/spagodiningmbs": "rsrvtns/mbs_7003",
            },
            {
              "sevenrooms.com/reservations/spagoloungembs": "rsrvtns/mbs_7004",
            },
            {
              "sevenrooms.com/reservations/theyardbirdmbs": "rsrvtns/mbs_7009",
            },
            {
              "marinabaysands.com/nightlife/marquee-singapore.html":
                "nightlif/mbs_7001",
            },
            { "marinabaysands.com/restaurants/lavo.html": "mbsre0/mbs_7002" },
            {
              "marinabaysands.com/deals/restaurants/endless-lunch-selections.html":
                "deals/mbs_7001",
            },
            { "marinabaysands.com/christmas.html": "mbs_c00a/mbs_70" },
            {
              "marinabaysands.com/deals/christmas-goodies.html":
                "xmasgds/mbs_70",
            },
            { "meetings.marinabaysands.com/booking/search": "mbsev0/mbs_7000" },
            { "sevenrooms.com/reservations/mott32mbs": "rsrvtns/mbs_700o" },
            { "marinabaysands.com/lunar-new-year.html": "mbs_c00d/mbs_70" },
            { "marinabaysands.com/restaurants/mott32.html": "mbsre0/mbs_700d" },
            {
              "marinabaysands.com/hotel/amenities/banyan-tree-spa.html":
                "mbsla00/mbs_700k",
            },
            {
              "marinabaysands.com/restaurants/koma-singapore.html":
                "mbsre0/mbs_700e",
            },
            {
              "shoppes.marinabaysands.com/pages/thank-you-order":
                "mbs_s0/mbs_7003",
            },
            { "/restaurants/black-tap.html": "mbsre0/mbs_700k" },
            { "/restaurants/bread-street-kitchen.html": "mbsre0/mbs_700j" },
            { "/restaurants/cut.html": "mbsre0/mbs_700f" },
            { "/restaurants/db-bistro-and-oyster-bar.html": "mbsre0/mbs_700h" },
            { "/restaurants/origin-and-bloom.html": "mbsre0/mbs_700l" },
            { "/restaurants/renku-bar-and-lounge.html": "mbsre0/mbs_700m" },
            { "/restaurants/rise.html": "mbsre0/mbs_700q" },
            { "/deals/restaurants/social-hour.html": "mbsre0/mbs_700n" },
            { "/restaurants/spago.html": "mbsre0/mbs_700i" },
            { "/restaurants/sweetspot.html": "mbsre0/mbs_700o" },
            {
              "/restaurants/yardbird-southern-table-and-bar.html":
                "mbsre0/mbs_700g",
            },
            { "/deals/restaurants/gourmet-takeaway.html": "deals/mbs_7007" },
            {
              "/deals/attractions/attractions-ticket-bundle.html":
                "deals/mbs_700-",
            },
            { "/deals/museum/sands-rewards-offer.html": "deals/mbs_700a" },
            { "/deals/rooms/sands-staycation.html": "deals/mbs_7009" },
            {
              "shoppes.marinabaysands.com/collections/deals": "mbs_s0/mbs_7004",
            },
            { "shoppes.marinabaysands.com": "mbs_s0/mbs_70" },
            { "/deals/rooms/stay-longer-save-more.html": "deals/mbs_700b" },
            { "/deals/restaurants/dine-and-earn.html": "deals/mbs_700d" },
            { "/museum/exhibitions/planet-or-plastic.html": "mbspa0/mbs_7006" },
            { "sevenrooms.com/reservations/blacktapmbs": "rsrvtns/mbs_700p" },
            {
              "marinabaysands.com/deals/restaurants/mooncakes-online-order.html":
                "deals/mbs_70",
            },
            {
              "marinabaysands.com/museum/events/artscience-at-home.html":
                "mbspa0/mbs_7007",
            },
            {
              "marinabaysands.com/deals/rooms/joyous-family-staycation.html":
                "deals/mbs_700e",
            },
            {
              "marinabaysands.com/attractions/sands-skypark.html":
                "mbs_70/mbs_7000",
            },
            { "marinabaysands.com/deals/rooms.html": "deals/mbs_700f" },
            {
              "marinabaysands.com/campaign/christmas.html": "campaign/mbs_7000",
            },
            {
              "marinabaysands.com/campaign/christmas/advent-calendar.html":
                "campaign/mbs_7001",
            },
            {
              "marinabaysands.com/campaign/christmas/festive-dining.html":
                "campaign/mbs_7002",
            },
            {
              "marinabaysands.com/campaign/christmas/shoppes.html":
                "campaign/mbs_7004",
            },
            {
              "marinabaysands.com/restaurants/koma-singapore.html":
                "mbsre0/mbs_700e",
            },
            {
              "marinabaysands.com/restaurants/renku-bar-and-lounge.html":
                "mbsre0/mbs_700m",
            },
            { "marinabaysands.com/restaurants/rise.html": "mbsre0/mbs_700q" },
            {
              "marinabaysands.com/restaurants/bread-street-kitchen.html":
                "mbsre0/mbs_700j",
            },
            { "marinabaysands.com/restaurants/cut.html": "mbsre0/mbs_700f" },
            {
              "marinabaysands.com/restaurants/db-bistro-and-oyster-bar.html":
                "mbsre0/mbs_700h",
            },
            { "marinabaysands.com/restaurants/lavo.html": "mbsre0/mbs_7002" },
            { "marinabaysands.com/restaurants/spago.html": "mbsre0/mbs_700i" },
            {
              "marinabaysands.com/restaurants/yardbird-southern-table-and-bar.html":
                "mbsre0/mbs_700g",
            },
            { "marinabaysands.com/restaurants/mott32.html": "mbsre0/mbs_700d" },
            {
              "marinabaysands.com/restaurants/black-tap.html":
                "mbsre0/mbs_700k",
            },
            {
              "marinabaysands.com/restaurants/koma-singapore/reservation.html":
                "rsrvtns/mbs_7000",
            },
            {
              "marinabaysands.com/restaurants/renku-bar-and-lounge/reservation.html":
                "rsrvtns/mbs_7002",
            },
            {
              "marinabaysands.com/restaurants/rise/reservation.html":
                "rsrvtns/mbs_7001",
            },
            {
              "marinabaysands.com/restaurants/bread-street-kitchen/reservation.html":
                "rsrvtns/mbs_7005",
            },
            {
              "marinabaysands.com/restaurants/club55/reservation.html":
                "rsrvtns/mbs_7007",
            },
            {
              "marinabaysands.com/restaurants/cut/reservation.html":
                "rsrvtns/mbs_7008",
            },
            {
              "marinabaysands.com/restaurants/db-bistro-and-oyster-bar/reservation.html":
                "rsrvtns/mbs_700a",
            },
            {
              "marinabaysands.com/restaurants/lavo/reservation.html":
                "rsrvtns/mbs_700-",
            },
            {
              "marinabaysands.com/restaurants/spago/reservation.html":
                "rsrvtns/mbs_7003",
            },
            {
              "marinabaysands.com/restaurants/spago-bar-and-lounge/reservation.html":
                "rsrvtns/mbs_7004",
            },
            {
              "marinabaysands.com/restaurants/yardbird-southern-table-and-bar/reservation.html":
                "rsrvtns/mbs_7009",
            },
            {
              "marinabaysands.com/restaurants/mott32/reservation.html":
                "rsrvtns/mbs_700o",
            },
            {
              "marinabaysands.com/restaurants/black-tap/reservation.html":
                "rsrvtns/mbs_700p",
            },
            {
              "marinabaysands.com/restaurants/koma-singapore/reservation/confirmation.html":
                "rsrvtns/mbs_700g",
            },
            {
              "marinabaysands.com/restaurants/renku-bar-and-lounge/reservation/confirmation.html":
                "rsrvtns/mbs_700i",
            },
            {
              "marinabaysands.com/restaurants/rise/reservation/confirmation.html":
                "rsrvtns/mbs_700j",
            },
            {
              "marinabaysands.com/restaurants/bread-street-kitchen/reservation/confirmation.html":
                "rsrvtns/mbs_700c",
            },
            {
              "marinabaysands.com/restaurants/club55/reservation/confirmation.html":
                "rsrvtns/mbs_700d",
            },
            {
              "marinabaysands.com/restaurants/cut/reservation/confirmation.html":
                "rsrvtns/mbs_700e",
            },
            {
              "marinabaysands.com/restaurants/db-bistro-and-oyster-bar/reservation/confirmation.html":
                "rsrvtns/mbs_700f",
            },
            {
              "marinabaysands.com/restaurants/lavo/reservation/confirmation.html":
                "rsrvtns/mbs_700h",
            },
            {
              "marinabaysands.com/restaurants/spago/reservation/confirmation.html":
                "rsrvtns/mbs_700k",
            },
            {
              "marinabaysands.com/restaurants/spago-bar-and-lounge/reservation/confirmation.html":
                "rsrvtns/mbs_700l",
            },
            {
              "marinabaysands.com/restaurants/yardbird-southern-table-and-bar/reservation/confirmation.html":
                "rsrvtns/mbs_700m",
            },
            {
              "marinabaysands.com/restaurants/mott32/reservation/confirmation.html":
                "rsrvtns/mbs_700n",
            },
            {
              "marinabaysands.com/restaurants/black-tap/reservation/confirmation.html":
                "rsrvtns/mbs_700q",
            },
            { "marinabaysands.com/booking/search": "mbsla00/mbs_7009" },
            { "marinabaysands.com/booking/rooms": "mbsla00/mbs_700-" },
            { "marinabaysands.com/booking/payment": "mbsla00/mbs_700a" },
            { "reserve.marinabaysands.com/search": "mbsla00/mbs_7009" },
            { "reserve.marinabaysands.com/rooms": "mbsla00/mbs_700-" },
            {
              "reserve.marinabaysands.com/guestCreditCardInfo":
                "mbsla00/mbs_700a",
            },
            { "reserve.marinabaysands.com/confirmation": "mbs_h00/mbs_70" },
            {
              "www.marinabaysands.com/campaign/chinese-new-year.html":
                "campaign/mbs_7009",
            },
            {
              "marinabaysands.com/museum/campaign/a-date-at-the-museum.html":
                "mbspa0/mbs_700b",
            },
            {
              "marinabaysands.com/museum/campaign/a-different-kind-of-museum.html":
                "mbspa0/mbs_700a",
            },
            {
              "marinabaysands.com/museum/campaign/great-family-day-out.html":
                "mbspa0/mbs_700c",
            },
            {
              "marinabaysands.com/museum/campaign/hang-out-with-your-friends.html":
                "mbspa0/mbs_700d",
            },
            {
              "www.marinabaysands.com/campaign/chinese-new-year/festive-dining.html":
                "campaign/mbs_700-",
            },
            {
              "marinabaysands.com/deals/restaurants/weekend-brunch.html":
                "deals/mbs_700h",
            },
            {
              "marinabaysands.com/deals/restaurants/easter-festive-dining.html":
                "deals/mbs_700i",
            },
            {
              "marinabaysands.com/booking/multirooms.html": "mbsla00/mbs_700m",
            },
            {
              "reserve.marinabaysands.com/multiroomRatePlanListing":
                "mbsla00/mbs_700m",
            },
            {
              "marinabaysands.com/museum/artscience-friends-order.html":
                "mbspa0/mbs_700e",
            },
            {
              "marinabaysands.com/museum/artscience-friends-order/personal-order-confirmation.html":
                "mbsmusa0/mbs_7000",
            },
            {
              "marinabaysands.com/restaurants/signature-restaurants.html":
                "mbsre0/mbs_700w",
            },
            {
              "marinabaysands.com/deals/restaurants/bar-promotions.html":
                "deals/mbs_700j",
            },
            {
              "marinabaysands.com/museum/exhibitions/future-world.html":
                "mbspa0/mbs_700i",
            },
            {
              "marinabaysands.com/museum/events/art-of-being-calm.html":
                "mbspa0/mbs_700j",
            },
            {
              "marinabaysands.com/museum/events/tetsuya-mizuguchi-and-patrick-moran.html":
                "mbspa0/mbs_700k",
            },
            {
              "marinabaysands.com/museum/events/virtual-tour-virtual-realms.html":
                "mbspa0/mbs_700r",
            },
            {
              "marinabaysands.com/restaurants/waku-ghin.html":
                "mbsre0/mbs_700s",
            },
            { "marinabaysands.com/careers.html": "mbs_c000/mbs_70" },
            {
              "marinabaysands.com/deals/attractions/virgin-active-yoga.html":
                "deals/mbs_700m",
            },
            { "marinabaysands.com/sustainability.html": "mbs_c0/marin0" },
            {
              "marinabaysands.com/museum/events/great-book-club-sep.html":
                "mbspa0/mbs_700_",
            },
            {
              "marinabaysands.com/museum/exhibitions/vr-gallery.html":
                "mbspa0/mbs_7011",
            },
            {
              "marinabaysands.com/museum/events/extended-play.html":
                "mbspa0/mbs_7010",
            },
            {
              "marinabaysands.com/museum/events/future-gaming-conference.html":
                "mbspa0/mbs_7012",
            },
            { "marinabaysands.com/museum/tours.html": "mbspa0/mbs_701" },
            {
              "marinabaysands.com/museum/exhibitions/orchestral-manoeuvres.html":
                "mbspa0/mbs_7013",
            },
            {
              "marinabaysands.com/museum/exhibitions/hyperrealities.html":
                "mbspa0/mbs_701-",
            },
            {
              "marinabaysands.com/restaurants/wakuda-singapore.html":
                "mbsre0/mbs_700_",
            },
            {
              "careers.marinabaysands.com/en/job/496509/fb-signon-bonus":
                "mbs_c000/mbs_700",
            },
            {
              "marinabaysands.com/museum/events/orchestral-manoeuvres-curators-in-dialogue.html":
                "mbspa0/mbs_701g",
            },
            {
              "marinabaysands.com/museum/plan-your-visit/photography-experience.html":
                "mbspa0/mbs_701h",
            },
            {
              "marinabaysands.com/museum/plan-your-visit/art-lovers-vip-experience.html":
                "mbspa0/mbs_701i",
            },
            {
              "marinabaysands.com/museum/plan-your-visit/immersive-vip-experience.html":
                "mbspa0/mbs_701j",
            },
            {
              "marinabaysands.com/museum/plan-your-visit/artscience-friends-corporate.html":
                "mbspa0/mbs_701k",
            },
            {
              "marinabaysands.com/museum/vip-experiences.html":
                "mbspa0/mbs_701l",
            },
            {
              "marinabaysands.com/deals/restaurants/christmas-goodies.html":
                "deals/mbs_700p",
            },
            {
              "marinabaysands.com/deals/restaurants/christmas-goodies/confirmation.html":
                "dealss/mbs_70",
            },
            {
              "marinabaysands.com/deals/rooms/sandsational-staycation.html":
                "deals/mbs_700q",
            },
            {
              "marinabaysands.com/sands-rewards-lifestyle/bingo-2021.html":
                "mbssr0/mbs_7004",
            },
            {
              "marinabaysands.com/museum/events/waves-of-change.html":
                "mbspa0/mbs_701m",
            },
            {
              "ko.marinabaysands.com/deals/rooms/stay-longer-and-save.html":
                "deals/mbs_700r",
            },
            {
              "www.marinabaysands.com/deals/rooms/stay-longer-and-save.html":
                "deals/mbs_700s",
            },
            {
              "id.marinabaysands.com/deals/rooms/stay-longer-and-save.html":
                "deals/mbs_700t",
            },
            {
              "marinabaysands.com/deals/rooms/reimagine-package.html":
                "deals/mbs_700u",
            },
            {
              "www.marinabaysands.com/campaign/chinese-new-year/shoppes.html":
                "campaign/mbs_700b",
            },
            {
              "zh.marinabaysands.com/campaign/chinese-new-year.html":
                "campaign/mbs_700c",
            },
            {
              "zh.marinabaysands.com/campaign/chinese-new-year/festive-dining.html":
                "campaign/mbs_700d",
            },
            {
              "www.marinabaysands.com/sands-rewards-lifestyle/super-lucky-number-2022.html":
                "mbssr0/mbs_7005",
            },
            {
              "zh.marinabaysands.com/sands-rewards-lifestyle/super-lucky-number-2022.html":
                "mbssr0/mbs_7006",
            },
            {
              "marinabaysands.com/museum/exhibitions/hope-from-chaos-pandemic-reflections.html":
                "mbspa0/mbs_701n",
            },
            {
              "marinabaysands.com/museum/exhibitions/radical-curiosity.html":
                "mbspa0/mbs_701o",
            },
            {
              "zh.marinabaysands.com/campaign/chinese-new-year/shoppes.html":
                "mbspa0/mbs_701p",
            },
            {
              "marinabaysands.com/sands-rewards-lifestyle/ang-bao-peel-and-win.html":
                "mbspa0/mbs_7007",
            },
            {
              "marinabaysands.com/museum/exhibitions/attack-on-titan.html":
                "mbspa0/mbs_701q",
            },
            {
              "marinabaysands.com/museum/events/virtual-tour-architectural-tour.html":
                "mbspa0/mbs_701v",
            },
            {
              "marinabaysands.com/museum/events/intan-suci-nurhati.html":
                "mbspa0/mbs_701u",
            },
            {
              "marinabaysands.com/museum/events/mighty-meditating.html":
                "mbspa0/mbs_701t",
            },
            {
              "marinabaysands.com/museum/events/paper-beads-with-adeline-kueh.html":
                "mbspa0/mbs_701s",
            },
            {
              "marinabaysands.com/museum/events/sonorous-sketches.html":
                "mbspa0/mbs_701r",
            },
            {
              "marinabaysands.com/museum/artscience-on-screen.html":
                "mbspa0/mbs_701y",
            },
            {
              "marinabaysands.com/museum/events/surface-tension-art.html":
                "mbspa0/mbs_701x",
            },
            {
              "marinabaysands.com/museum/events/special-event-march-holidays-2022.html":
                "mbspa0/mbs_701w",
            },
            {
              "marinabaysands.com/deals/restaurants/march-afternoon-specials.html":
                "mbsre0/mbs_701",
            },
            {
              "marinabaysands.com/deals/restaurants/monthly-cocktail-pairings.html":
                "mbsre0/mbs_7010",
            },
            {
              "marinabaysands.com/museum/events/the-different-duckling-by-the-storytelling-centre.html":
                "mbspa0/mbs_701z",
            },
            {
              "marinabaysands.com/museum/events/special-event-autism-awareness-2022.html":
                "mbspa0/mbs_701_",
            },
            {
              "marinabaysands.com/museum/events/asos-masaaki-yuasa.html":
                "mbspa0/mbs_702",
            },
            {
              "marinabaysands.com/museum/events/asos-meditative-screens.html":
                "mbspa0/mbs_7020",
            },
            {
              "marinabaysands.com/museum/exhibitions/radical-curiosity-spaceship-earth.html":
                "mbspa0/mbs_7021",
            },
            {
              "marinabaysands.com/museum/events/radical-curiosity-curators-in-dialogue.html":
                "mbspa0/mbs_7022",
            },
            {
              "marinabaysands.com/museum/events/making-nothing-out-of-something.html":
                "mbspa0/mbs_7024",
            },
            {
              "marinabaysands.com/museum/events/virtual-kids-tour-hope-from-chaos.html":
                "mbspa0/mbs_7025",
            },
            {
              "marinabaysands.com/deals/restaurants/meatless-may.html":
                "mbsre0/mbs_7011",
            },
            {
              "marinabaysands.com/museum/events/the-future-is-always-first-an-idea.html":
                "mbspa0/mbs_7023",
            },
            {
              "marinabaysands.com/museum/events/garden-of-spells.html":
                "mbspa0/mbs_7028",
            },
            {
              "marinabaysands.com/museum/events/creative-recharge-holiday-programmes.html":
                "mbspa0/mbs_7026",
            },
            {
              "marinabaysands.com/museum/events/making-art-in-pandemic-times.html":
                "mbspa0/mbs_7027",
            },
            {
              "marinabaysands.com/museum/exhibitions/we-live-in-an-ocean-of-air.html":
                "mbspa0/mbs_7029",
            },
            {
              "marinabaysands.com/museum/events/we-live-in-an-ocean-of-air-conversations.html":
                "mbspa0/mbs_702-",
            },
            {
              "marinabaysands.com/museum/events/digital-art.html":
                "mbspa0/mbs_700n",
            },
            {
              "marinabaysands.com/museum/events/special-event-beyond-earth.html":
                "mbspa0/mbs_701d",
            },
            {
              "marinabaysands.com/museum/exhibitions/spacewalkers.html":
                "mbspa0/mbs_701e",
            },
            {
              "marinabaysands.com/museum/events/asos-beyond-earth.html":
                "mbspa0/mbs_701f",
            },
            {
              "marinabaysands.com/attractions/digital-light-canvas.html":
                "mbs_70/mbs_7001",
            },
            {
              "marinabaysands.com/museum/artscience-friends-order/gift-order-payment.html":
                "mbspa0/mbs_702a",
            },
            {
              "marinabaysands.com/museum/artscience-friends-order/personal-order-payment.html":
                "mbspa0/mbs_702b",
            },
            {
              "marinabaysands.com/museum/artscience-friends-order/gift-order-confirmation.html":
                "mbsmusa0/mbs_7001",
            },
            {
              "marinabaysands.com/restaurants/wakuda-singapore/reservation/confirmation.html":
                "rsrvtns/mbs_700s",
            },
            { "marinabaysands.com/museum/whats-on.html": "mbspa0/mbs_702c" },
            {
              "marinabaysands.com/museum/events/hfc-in-conversation-with-prof-lam-yeng-ming.html":
                "mbspa0/mbs_702d",
            },
            {
              "marinabaysands.com/museum/events/hfc-in-conversation-with-luke-jerram.html":
                "mbspa0/mbs_702e",
            },
            {
              "marinabaysands.com/museum/events/hfc-in-conversation-with-cao-fei.html":
                "mbspa0/mbs_702f",
            },
            {
              "marinabaysands.com/campaign/it-all-starts-here.html":
                "campaign/mbs_700e",
            },
          ];
          var m = false;
          for (e = 0; e < c.length; e++) {
            for (f in utag.loader.GV(c[e])) {
              if (d.toString().indexOf(f) > -1) {
                b["DC_settings"] = c[e][f];
                m = true;
              }
            }
            if (m) break;
          }
          if (!m) b["DC_settings"] = "NOMATCH";
        }
      },
      function (a, b, c, d, e, f, g) {
        if (
          b["dom.pathname"]
            .toString()
            .toLowerCase()
            .indexOf("ang-bao-peel-and-win.html".toLowerCase()) < 0 ||
          (b["dom.pathname"]
            .toString()
            .toLowerCase()
            .indexOf("ang-bao-peel-and-win.html".toLowerCase()) > -1 &&
            b["va.current_visit.properties.12300"]
              .toString()
              .toLowerCase()
              .indexOf("MBS-iOS".toLowerCase()) < 0)
        ) {
          d = b["domain_pathname"];
          if (typeof d == "undefined") return;
          c = [
            {
              ".+.marinabaysands.com/restaurants/.*/order.html":
                "mbsre0/mbs_700r",
            },
            { ".+.marinabaysands.com/hotel/.+": "mbsla00/mbs_7005" },
            { ".+.marinabaysands.com/sands-skypark/.+": "mbsbo0/mbs_700" },
            { ".+.marinabaysands.com/entertainment/.+": "mbsfb0/mbs_7000" },
            { ".+.marinabaysands.com/shopping/.+": "mbssh0/mbs_7001" },
            { ".+.marinabaysands.com/restaurants/.+": "mbsre0/mbs_7000" },
            { ".+.marinabaysands.com/museum/.+": "mbspa0/mbs_700" },
            {
              ".+.marinabaysands.com/expo-events-and-convention-centre/.+":
                "mbsev0/mbs_700",
            },
            { ".+.marinabaysands.com/casino/.+": "mbsla0/mbs_700" },
            { "entertainment.marinabaysands.com/events/*": "mbs_t0/mbs_70" },
            { ".+.marinabaysands.com/hotel.html": "mbsla00/mbs_7000" },
            { ".+.marinabaysands.com/sands-skypark.html": "mbsbo0/mbs_70" },
            { ".+.marinabaysands.com/see-and-do.html": "mbsfb0/mbs_700" },
            { ".+.marinabaysands.com/shopping.html": "mbssh0/mbs_7000" },
            { ".+.marinabaysands.com/restaurants.html": "mbsre0/mbs_700" },
            { ".+.marinabaysands.com/museum.html": "mbspa0/mbs_70" },
            { ".+.marinabaysands.com/weddings.html": "mbsev00/mbs_700" },
            { ".+.marinabaysands.com/casino.html": "mbsla0/mbs_70" },
            { "^.+.marinabaysands.com/$": "mbsho0/mbs_70" },
            { "shoppes.marinabaysands.com/.+": "mbs_s0/mbs_700" },
            { "^.+.marinabaysands.com/homepage": "mbsho0/mbs_70" },
            {
              "ticket.*.marinabaysands.com/mbs/confirmorder/postconfirmation":
                "mbsfb0/mbs_700-",
            },
            {
              ".+.marinabaysands.com/sands-rewards-lifestyle/.+":
                "mbssr0/mbs_7002",
            },
            { ".+.marinabaysands.com/attractions/.+": "mbs_70/mbs_700" },
            { "reserve.marinabaysands.com/search": "mbsla00/mbs_7009" },
            { "reserve.marinabaysands.com/rooms": "mbsla00/mbs_700-" },
            {
              "reserve.marinabaysands.com/guestCreditCardInfo":
                "mbsla00/mbs_700a",
            },
            { "reserve.marinabaysands.com/confirmation": "mbs_h00/mbs_70" },
            { ".+.marinabaysands.com/nightlife/.+": "nightlif/mbs_700" },
            { ".+.marinabaysands.com/deals": "deals/mbs_7000" },
            { "marinabaysands.com/booking/search": "mbsla00/mbs_7009" },
            { "marinabaysands.com/booking/rooms": "mbsla00/mbs_700-" },
            { "marinabaysands.com/booking/payment": "mbsla00/mbs_700a" },
            {
              "ticketing.*.stixcloudtest.com/mbs/confirmorder/postconfirmation":
                "mbsfb0/mbs_700-",
            },
          ];
          var m = false;
          for (e = 0; e < c.length; e++) {
            for (f in utag.loader.GV(c[e])) {
              g = new RegExp(f, "i");
              if (g.test(d)) {
                b["DC_settings_regex"] = c[e][f];
                m = true;
              }
            }
            if (m) break;
          }
          if (!m) b["DC_settings_regex"] = "NOMATCH";
        }
      },
      function (a, b, c, d, e, f, g) {
        if (1) {
          d = b["dom.url"];
          if (typeof d == "undefined") return;
          c = [
            { "x.em.marinabaysands.com/ats/post.aspx": "mbsev00/mbs_7001" },
            {
              "marinabaysands.com/restaurants/view-all.html?Offers=Taste%20the%20Impossible":
                "mbsre0/mbs_700b",
            },
          ];
          var m = false;
          for (e = 0; e < c.length; e++) {
            for (f in utag.loader.GV(c[e])) {
              if (d.toString().indexOf(f) > -1) {
                b["DC_settings_url"] = c[e][f];
                m = true;
              }
            }
            if (m) break;
          }
          if (!m) b["DC_settings_url"] = "NOMATCH";
        }
      },
      function (a, b) {
        try {
          if (
            typeof b["DC_settings_url"] != "undefined" &&
            b["DC_settings_url"].toString().toLowerCase() !=
              "nomatch".toLowerCase()
          ) {
            b["DC_settings"] = b["DC_settings_url"];
          }
        } catch (e) {
          utag.DB(e);
        }
      },
      function (a, b) {
        try {
          if (1) {
            try {
              b["DC_CAT"] = utag.data["DC_settings"].split("/")[1];
            } catch (e) {}
            try {
              b["DC_TYPE"] = utag.data["DC_settings"].split("/")[0];
            } catch (e) {}
          }
        } catch (e) {
          utag.DB(e);
        }
      },
      function (a, b) {
        try {
          if (1) {
            try {
              b["DC_CAT_regex"] = b["DC_settings_regex"].split("/")[1];
            } catch (e) {}
            try {
              b["DC_TYPE_regex"] = b["DC_settings_regex"].split("/")[0];
            } catch (e) {}
          }
        } catch (e) {
          utag.DB(e);
        }
      },
      function (a, b, c, d, e, f, g) {
        if (1) {
          d = b["domain_pathname"];
          if (typeof d == "undefined") return;
          c = [
            {
              "shoppes.marinabaysands.com/pages/christmas-2019":
                "mbs_s0/mbs_7000",
            },
            {
              "marinabaysands.com/deals/christmas-goodies/confirmation.html":
                "dealss/mbs_70",
            },
            { "marinabaysands.com/lunar-new-year.html": "mbs_c00d/mbs_70" },
          ];
          var m = false;
          for (e = 0; e < c.length; e++) {
            for (f in utag.loader.GV(c[e])) {
              if (d.toString().indexOf(f) > -1) {
                b["DC_dedup_settings"] = c[e][f];
                m = true;
              }
            }
            if (m) break;
          }
          if (!m) b["DC_dedup_settings"] = "NOMATCH";
        }
      },
      function (a, b) {
        try {
          if (1) {
            try {
              b["Dedup_DC_CAT"] = utag.data["DC_dedup_settings"].split("/")[1];
            } catch (e) {}
            try {
              b["Dedup_DC_TYPE"] = utag.data["DC_dedup_settings"].split("/")[0];
            } catch (e) {}
          }
        } catch (e) {
          utag.DB(e);
        }
      },
      function (a, b) {
        try {
          utag.runonce = utag.runonce || {};
          utag.runonce.ext = utag.runonce.ext || {};
          if (typeof utag.runonce.ext[269] == "undefined") {
            utag.runonce.ext[269] = 1;
            if (
              /https:\/\/reserve.(stg.|)marinabaysands.com.*/.test(
                b["dom.url"]
              ) ||
              b["dom.url"]
                .toString()
                .indexOf("https://x.em.marinabaysands.com/ats/show.aspx") >
                -1 ||
              b["dom.url"]
                .toString()
                .indexOf("https://x.em.marinabaysands.com/ats/post.aspx") >
                -1 ||
              b["dom.url"]
                .toString()
                .indexOf("https://ticketing.stixcloudtest.com") > -1 ||
              b["dom.url"]
                .toString()
                .indexOf("https://ticket.marinabaysands.com") > -1
            ) {
              var head = document.getElementsByTagName("head")[0],
                linkTag1 = document.createElement("link"),
                linkTag2 = document.createElement("link"),
                linkTag3 = document.createElement("link"),
                script1 = document.createElement("script"),
                script2 = document.createElement("script");
              linkTag1.rel = "dns-prefetch";
              linkTag1.href = "//cdn-eu.dynamicyield.com";
              linkTag2.rel = "dns-prefetch";
              linkTag2.href = "//st-eu.dynamicyield.com";
              linkTag3.rel = "dns-prefetch";
              linkTag3.href = "//rcom-eu.dynamicyield.com";
              if (
                window.location.host.indexOf(".stg.") > -1 ||
                window.location.host.indexOf("staging") > -1
              ) {
                script1.type = "text/javascript";
                script1.src =
                  "//cdn-eu.dynamicyield.com/api/9876271/api_dynamic.js";
                script2.type = "text/javascript";
                script2.src =
                  "//cdn-eu.dynamicyield.com/api/9876271/api_static.js";
              } else {
                script1.type = "text/javascript";
                script1.src =
                  "//cdn-eu.dynamicyield.com/api/9876410/api_dynamic.js";
                script2.type = "text/javascript";
                script2.src =
                  "//cdn-eu.dynamicyield.com/api/9876410/api_static.js";
              }
              head.appendChild(linkTag1);
              head.appendChild(linkTag2);
              head.appendChild(linkTag3);
              head.appendChild(script1);
              head.appendChild(script2);
              if (typeof CryptoJS == "undefined") {
                var script_CryptoJS_core = document.createElement("script");
                script_CryptoJS_core.type = "text/javascript";
                script_CryptoJS_core.src =
                  "//cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.9/core.min.js";
                var script_CryptoJS_SHA256 = document.createElement("script");
                script_CryptoJS_SHA256.type = "text/javascript";
                script_CryptoJS_SHA256.src =
                  "//cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.9/sha256.min.js";
                head.appendChild(script_CryptoJS_core);
                head.appendChild(script_CryptoJS_SHA256);
              }
            }
          }
        } catch (e) {
          utag.DB(e);
        }
      },
      function (a, b) {
        try {
          if (
            typeof b["qp.offerCode"] != "undefined" &&
            typeof b["qp.offerCode"] != "undefined" &&
            b["qp.offerCode"] != ""
          ) {
            b["rate_code"] = b["qp.offerCode"];
          }
        } catch (e) {
          utag.DB(e);
        }
      },
      function (a, b) {
        try {
          utag.runonce = utag.runonce || {};
          utag.runonce.ext = utag.runonce.ext || {};
          if (typeof utag.runonce.ext[307] == "undefined") {
            utag.runonce.ext[307] = 1;
            if (
              /https:\/\/reserve.marinabaysands.com/.test(b["dom.url"]) ||
              b["dom.url"]
                .toString()
                .indexOf("https://x.em.marinabaysands.com/ats/show.aspx") >
                -1 ||
              b["dom.url"]
                .toString()
                .indexOf("https://x.em.marinabaysands.com/ats/post.aspx") >
                -1 ||
              b["dom.url"]
                .toString()
                .indexOf(
                  "https://ticketing.stixcloudtest.com/mbs/booking/rasputintest2020"
                ) > -1 ||
              b["dom.url"]
                .toString()
                .indexOf("https://ticket.marinabaysands.com") > -1
            ) {
              var head = document.getElementsByTagName("head")[0],
                linkTag1 = document.createElement("link"),
                linkTag2 = document.createElement("link"),
                linkTag3 = document.createElement("link"),
                script1 = document.createElement("script"),
                script2 = document.createElement("script");
              linkTag1.rel = "dns-prefetch";
              linkTag1.href = "//cdn-eu.dynamicyield.com";
              linkTag2.rel = "dns-prefetch";
              linkTag2.href = "//st-eu.dynamicyield.com";
              linkTag3.rel = "dns-prefetch";
              linkTag3.href = "//rcom-eu.dynamicyield.com";
              if (
                window.location.host.indexOf(".stg.") > -1 ||
                window.location.host.indexOf("staging") > -1
              ) {
                script1.type = "text/javascript";
                script1.src =
                  "//cdn-eu.dynamicyield.com/api/9876271/api_dynamic.js";
                script2.type = "text/javascript";
                script2.src =
                  "//cdn-eu.dynamicyield.com/api/9876271/api_static.js";
              } else {
                script1.type = "text/javascript";
                script1.src =
                  "//cdn-eu.dynamicyield.com/api/9876410/api_dynamic.js";
                script2.type = "text/javascript";
                script2.src =
                  "//cdn-eu.dynamicyield.com/api/9876410/api_static.js";
              }
              head.appendChild(linkTag1);
              head.appendChild(linkTag2);
              head.appendChild(linkTag3);
              head.appendChild(script1);
              head.appendChild(script2);
              if (typeof CryptoJS == "undefined") {
                var script_CryptoJS_core = document.createElement("script");
                script_CryptoJS_core.type = "text/javascript";
                script_CryptoJS_core.src =
                  "//cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.9/core.min.js";
                var script_CryptoJS_SHA256 = document.createElement("script");
                script_CryptoJS_SHA256.type = "text/javascript";
                script_CryptoJS_SHA256.src =
                  "//cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.9/sha256.min.js";
                head.appendChild(script_CryptoJS_core);
                head.appendChild(script_CryptoJS_SHA256);
              }
            }
          }
        } catch (e) {
          utag.DB(e);
        }
      },
      function (a, b) {
        try {
          if (
            b["dom.url"]
              .toString()
              .toLowerCase()
              .indexOf("casino".toLowerCase()) > -1 ||
            b["dom.url"]
              .toString()
              .toLowerCase()
              .indexOf("gambling".toLowerCase()) > -1 ||
            b["dom.url"]
              .toString()
              .toLowerCase()
              .indexOf("sands-rewards-club".toLowerCase()) > -1
          ) {
            b["casino_pages"] = "true";
          }
        } catch (e) {
          utag.DB(e);
        }
      },
      function (a, b, c, d, e, f, g) {
        if (1) {
          d = b["dom.pathname"];
          if (typeof d == "undefined") return;
          c = [
            {
              "/deals/rooms/stay-and-save.html":
                "//r.turn.com/r/beacon?b2=doMVcJzadBwUmifHtqb4iigP2mjbAiQ18oJbj8kY8r8fCfTEtniQrRFOoFlVSKCKItINTKmB1p_Z6wEffPZLJA&cid=",
            },
            {
              "/deals/rooms/members-staycation-signup.html":
                "//r.turn.com/r/beacon?b2=D591dTOGy-aCtlqMQ_JA87T5HaUbp_EIuyOoP_mcLsYfCfTEtniQrRFOoFlVSKCKjFzN1IXbFOjygcaEsgy2_A&cid=",
            },
          ];
          var m = false;
          for (e = 0; e < c.length; e++) {
            for (f in utag.loader.GV(c[e])) {
              if (d == f) {
                b["amobee_base_url"] = c[e][f];
                m = true;
              }
            }
            if (m) break;
          }
        }
      },
      function (a, b) {
        try {
          if (1) {
            try {
              b["userAgent"] = navigator.userAgent;
            } catch (e) {}
          }
        } catch (e) {
          utag.DB(e);
        }
      },
      function (a, b) {
        try {
          if (
            b["dom.url"]
              .toString()
              .indexOf("reserve.marinabaysands.com/search") > -1 ||
            b["dom.url"]
              .toString()
              .indexOf("marinabaysands.com/booking/search") > -1
          ) {
            delete utag_data.check_in;
            delete utag_data.check_out;
          }
        } catch (e) {
          utag.DB(e);
        }
      },
      function (a, b) {
        try {
          if (
            b["product_category"].toString().toLowerCase() ==
              "Room Reservations".toLowerCase() &&
            b["dom.url"]
              .toString()
              .toLowerCase()
              .indexOf("/booking/".toLowerCase()) > -1 &&
            b["tealium_event"].toString().toLowerCase() !=
              "hotel_booking_individual_excluded hotel_booking_individual_confirmation for sum_num_of_nights and hotel_sum_subtotal".toLowerCase()
          ) {
            if (b["hotel_subtotal"] && b["hotel_subtotal"].length > 0) {
              b["hotel_sum_subtotal"] = 0;
              for (var i = 0; i < b["hotel_subtotal"].length; i++) {
                b["hotel_sum_subtotal"] =
                  b["hotel_sum_subtotal"] + parseInt(b["hotel_subtotal"][i]);
              }
            }
            if (b["num_of_nights"] && b["num_of_nights"].length > 0) {
              b["sum_num_of_nights"] = 0;
              for (var i = 0; i < b["num_of_nights"].length; i++) {
                b["sum_num_of_nights"] =
                  b["sum_num_of_nights"] + b["num_of_nights"][i];
              }
            }
          }
        } catch (e) {
          utag.DB(e);
        }
      },
      function (a, b) {
        try {
          if (
            b["domain_pathname"]
              .toString()
              .indexOf("marinabaysands.com/restaurants/") > -1
          ) {
            (function () {
              try {
                if (/\/restaurants\//.test(window.location.pathname)) {
                  if (
                    b["tealium_event"] == "restaurant_booking_select_time" ||
                    b["tealium_event"] == "restaurant_booking_confirmation" ||
                    b["tealium_event"] == "restaurant_booking_form" ||
                    b["tealium_event"] == "restaurant_booking_submit_button"
                  ) {
                    var res_name = b["restaurant_name"];
                    var restaurant_name_Proxy = getrestaurant(res_name);
                    var r_date = b["restaurant_dine_time"].replace(":", ".");
                    var new_restaurant_data_time_category =
                      getdatetimecategory(r_date);
                    var restaurant_data_price = getCoverCharge(
                      restaurant_name_Proxy +
                        "|" +
                        new_restaurant_data_time_category
                    );
                    b["restaurant_time_category"] =
                      new_restaurant_data_time_category.split();
                    b["restaurant_unit_price"] = [restaurant_data_price];
                    b["restaurant_order_subtotal"] = (
                      parseFloat(restaurant_data_price) *
                      b["restaurant_guest_quantity"]
                    ).toFixed(2);
                  }
                }
                function getdatetimecategory(r_date) {
                  var new_restaurant_data_time_category = "";
                  if (Number(r_date) >= 6 && Number(r_date) < 11.29) {
                    new_restaurant_data_time_category = "Breakfast";
                  } else if (Number(r_date) >= 11.3 && Number(r_date) < 14.59) {
                    new_restaurant_data_time_category = "Lunch";
                  } else if (Number(r_date) >= 15 && Number(r_date) < 17.59) {
                    new_restaurant_data_time_category = "Tea";
                  } else if (Number(r_date) >= 18 && Number(r_date) < 20.29) {
                    new_restaurant_data_time_category = "Early Dinner";
                  } else if (Number(r_date) >= 20.3 && Number(r_date) < 23.59) {
                    new_restaurant_data_time_category = "Late Dinner";
                  } else if (Number(r_date) >= 0 && Number(r_date) < 5.59) {
                    new_restaurant_data_time_category = "Nightlife";
                  }
                  return new_restaurant_data_time_category;
                }
                function getrestaurant(restaurant_name) {
                  var restaurant_name_Proxy = "";
                  if (
                    restaurant_name == "Bread Street Kitchen by Gordon Ramsay"
                  ) {
                    restaurant_name_Proxy = "Bread Street Kitchen";
                  } else if (restaurant_name == "CUT by Wolfgang Puck") {
                    restaurant_name_Proxy = "CUT";
                  } else if (
                    restaurant_name == "db Bistro & Oyster Bar by Daniel Boulud"
                  ) {
                    restaurant_name_Proxy = "DB Bistro & Oyster Bar";
                  } else if (restaurant_name == "KOMA Singapore") {
                    restaurant_name_Proxy = "Koma";
                  } else if (
                    restaurant_name == "LAVO Italian Restaurant & Rooftop Bar"
                  ) {
                    restaurant_name_Proxy = "LAVO Singapore";
                  } else if (restaurant_name == "Mott 32 Singapore") {
                    restaurant_name_Proxy = "Mott32";
                  } else if (restaurant_name == "Renku Bar & Lounge") {
                    restaurant_name_Proxy = "Renku";
                  } else if (restaurant_name == "RISE Restaurant") {
                    restaurant_name_Proxy = "Rise";
                  } else if (
                    restaurant_name == "Spago Dining Room by Wolfgang Puck"
                  ) {
                    restaurant_name_Proxy = "Spago Dining";
                  } else if (restaurant_name == "Spago Bar & Lounge") {
                    restaurant_name_Proxy = "Spago Lounge";
                  } else if (
                    restaurant_name == "Yardbird Southern Table & Bar"
                  ) {
                    restaurant_name_Proxy = "Yardbird Southern Table & Bar";
                  } else if (
                    restaurant_name == "Black Tap Craft Burgers & Beer"
                  ) {
                    restaurant_name_Proxy = "Black Tap";
                  } else if (restaurant_name == "Wakuda Singapore") {
                    restaurant_name_Proxy = "Wakuda";
                  }
                  return restaurant_name_Proxy;
                }
                function getCoverCharge(restaurantNameAndTimeCategory) {
                  var coverCharge;
                  switch (restaurantNameAndTimeCategory) {
                    case "Black Tap|Breakfast":
                      coverCharge = "32.00";
                      break;
                    case "Black Tap|Lunch":
                      coverCharge = "32.00";
                      break;
                    case "Black Tap|Tea":
                      coverCharge = "32.00";
                      break;
                    case "Black Tap|Early Dinner":
                      coverCharge = "35.00";
                      break;
                    case "Black Tap|Late Dinner":
                      coverCharge = "35.00";
                      break;
                    case "Black Tap|Nightlife":
                      coverCharge = "35.00";
                      break;
                    case "Bread Street Kitchen|Breakfast":
                      coverCharge = "35.00";
                      break;
                    case "Bread Street Kitchen|Lunch":
                      coverCharge = "60.00";
                      break;
                    case "Bread Street Kitchen|Tea":
                      coverCharge = "60.00";
                      break;
                    case "Bread Street Kitchen|Early Dinner":
                      coverCharge = "75.00";
                      break;
                    case "Bread Street Kitchen|Late Dinner":
                      coverCharge = "75.00";
                      break;
                    case "Bread Street Kitchen|Nightlife":
                      coverCharge = "75.00";
                      break;
                    case "CUT|Breakfast":
                      coverCharge = "130.00";
                      break;
                    case "CUT|Lunch":
                      coverCharge = "130.00";
                      break;
                    case "CUT|Tea":
                      coverCharge = "130.00";
                      break;
                    case "CUT|Early Dinner":
                      coverCharge = "230.00";
                      break;
                    case "CUT|Late Dinner":
                      coverCharge = "230.00";
                      break;
                    case "CUT|Nightlife":
                      coverCharge = "230.00";
                      break;
                    case "DB Bistro & Oyster Bar|Breakfast":
                      coverCharge = "75.00";
                      break;
                    case "DB Bistro & Oyster Bar|Lunch":
                      coverCharge = "75.00";
                      break;
                    case "DB Bistro & Oyster Bar|Tea":
                      coverCharge = "75.00";
                      break;
                    case "DB Bistro & Oyster Bar|Early Dinner":
                      coverCharge = "110.00";
                      break;
                    case "DB Bistro & Oyster Bar|Late Dinner":
                      coverCharge = "110.00";
                      break;
                    case "DB Bistro & Oyster Bar|Nightlife":
                      coverCharge = "110.00";
                      break;
                    case "Koma|Breakfast":
                      coverCharge = "70.00";
                      break;
                    case "Koma|Lunch":
                      coverCharge = "70.00";
                      break;
                    case "Koma|Tea":
                      coverCharge = "110.00";
                      break;
                    case "Koma|Early Dinner":
                      coverCharge = "110.00";
                      break;
                    case "Koma|Late Dinner":
                      coverCharge = "150.00";
                      break;
                    case "Koma|Nightlife":
                      coverCharge = "135.00";
                      break;
                    case "LAVO Singapore|Breakfast":
                      coverCharge = "59.00";
                      break;
                    case "LAVO Singapore|Lunch":
                      coverCharge = "59.00";
                      break;
                    case "LAVO Singapore|Tea":
                      coverCharge = "59.00";
                      break;
                    case "LAVO Singapore|Early Dinner":
                      coverCharge = "88.00";
                      break;
                    case "LAVO Singapore|Late Dinner":
                      coverCharge = "88.00";
                      break;
                    case "LAVO Singapore|Nightlife":
                      coverCharge = "88.00";
                      break;
                    case "Mott32|Breakfast":
                      coverCharge = "80.00";
                      break;
                    case "Mott32|Lunch":
                      coverCharge = "80.00";
                      break;
                    case "Mott32|Tea":
                      coverCharge = "120.00";
                      break;
                    case "Mott32|Early Dinner":
                      coverCharge = "140.00";
                      break;
                    case "Mott32|Late Dinner":
                      coverCharge = "140.00";
                      break;
                    case "Mott32|Nightlife":
                      coverCharge = "140.00";
                      break;
                    case "Renku|Breakfast":
                      coverCharge = "40.00";
                      break;
                    case "Renku|Lunch":
                      coverCharge = "30.00";
                      break;
                    case "Renku|Tea":
                      coverCharge = "30.00";
                      break;
                    case "Renku|Early Dinner":
                      coverCharge = "35.00";
                      break;
                    case "Renku|Late Dinner":
                      coverCharge = "35.00";
                      break;
                    case "Renku|Nightlife":
                      coverCharge = "25.00";
                      break;
                    case "Rise|Breakfast":
                      coverCharge = "45.00";
                      break;
                    case "Rise|Lunch":
                      coverCharge = "55.00";
                      break;
                    case "Rise|Tea":
                      coverCharge = "55.00";
                      break;
                    case "Rise|Early Dinner":
                      coverCharge = "68.00";
                      break;
                    case "Rise|Late Dinner":
                      coverCharge = "68.00";
                      break;
                    case "Rise|Nightlife":
                      coverCharge = "68.00";
                      break;
                    case "Spago Dining|Breakfast":
                      coverCharge = "85.00";
                      break;
                    case "Spago Dining|Lunch":
                      coverCharge = "85.00";
                      break;
                    case "Spago Dining|Tea":
                      coverCharge = "85.00";
                      break;
                    case "Spago Dining|Early Dinner":
                      coverCharge = "160.00";
                      break;
                    case "Spago Dining|Late Dinner":
                      coverCharge = "160.00";
                      break;
                    case "Spago Dining|Nightlife":
                      coverCharge = "160.00";
                      break;
                    case "Spago Lounge|Breakfast":
                      coverCharge = "45.00";
                      break;
                    case "Spago Lounge|Lunch":
                      coverCharge = "65.00";
                      break;
                    case "Spago Lounge|Tea":
                      coverCharge = "65.00";
                      break;
                    case "Spago Lounge|Early Dinner":
                      coverCharge = "95.00";
                      break;
                    case "Spago Lounge|Late Dinner":
                      coverCharge = "95.00";
                      break;
                    case "Spago Lounge|Nightlife":
                      coverCharge = "95.00";
                      break;
                    case "Yardbird Southern Table & Bar|Breakfast":
                      coverCharge = "45.00";
                      break;
                    case "Yardbird Southern Table & Bar|Lunch":
                      coverCharge = "45.00";
                      break;
                    case "Yardbird Southern Table & Bar|Tea":
                      coverCharge = "45.00";
                      break;
                    case "Yardbird Southern Table & Bar|Early Dinner":
                      coverCharge = "60.00";
                      break;
                    case "Yardbird Southern Table & Bar|Late Dinner":
                      coverCharge = "60.00";
                      break;
                    case "Yardbird Southern Table & Bar|Nightlife":
                      coverCharge = "60.00";
                      break;
                    case "Wakuda|Early Dinner":
                      coverCharge = "230.00";
                      break;
                    case "Wakuda|Late Dinner":
                      coverCharge = "230.00";
                      break;
                    default:
                      coverCharge = "100.00";
                  }
                  return coverCharge;
                }
              } catch (catch_main) {
                console.warn(catch_main);
              }
            })();
          }
        } catch (e) {
          utag.DB(e);
        }
      },
      function (a, b) {
        try {
          if (
            /staging.marinabaysands.com\/restaurants\/(.*)\/reservation\/confirmation.html/.test(
              b["domain_pathname"]
            )
          ) {
            b["DC_CAT"] = "mbs_700v";
            b["DC_TYPE"] = "mbsre0";
          }
        } catch (e) {
          utag.DB(e);
        }
      },
      function (a, b) {
        try {
          if (
            (b["tealium_event"]
              .toString()
              .indexOf("restaurant_booking_select_time") > -1 &&
              /marinabaysands.com\/restaurants\//.test(b["domain_pathname"])) ||
            (b["tealium_event"]
              .toString()
              .indexOf("restaurant_booking_confirmation") > -1 &&
              /marinabaysands.com\/restaurants\/(.*)\/reservation\/confirmation.html/.test(
                b["domain_pathname"]
              )) ||
            (b["tealium_event"].toString().indexOf("loyalty_account ") > -1 &&
              /marinabaysands.com\/sands-rewards-lifestyle\/dashboard/.test(
                b["domain_pathname"]
              )) ||
            (b["tealium_event"].toString().indexOf("loyalty_account") > -1 &&
              /marinabaysands.com\/sands-rewards-club\/dashboard/.test(
                b["domain_pathname"]
              )) ||
            (b["tealium_event"].toString().indexOf("user_register") > -1 &&
              /marinabaysands.com\/sands-rewards-lifestyle\/sign-up/.test(
                b["domain_pathname"]
              ))
          ) {
            (function () {
              try {
                function initMainScript() {
                  console.log("New DY Script Initialized for Sevenroom.");
                  function DY_EVENT(eventName, properties) {
                    if (typeof properties === "undefined") {
                      return;
                    }
                    eventType = DY_TYPE.EVENT;
                    DY.API(eventType, {
                      name: eventName,
                      properties: properties,
                    });
                    console.log(eventName + "---" + properties);
                  }
                  function DY_SPA(context) {
                    if (typeof context === "undefined") {
                      log("Context not Set!");
                      return;
                    }
                    eventType = DY_TYPE.SPA;
                    DY.API(eventType, context);
                  }
                  if (
                    /\/restaurants\/(.*)\/reservation.html/.test(
                      document.referrer
                    )
                  ) {
                    if (
                      /\/restaurants\/(.*)\/reservation\/confirmation.html/.test(
                        window.location.pathname
                      )
                    ) {
                      if (
                        b["restaurant_order_id"] &&
                        b["tealium_event"] == "restaurant_booking_confirmation"
                      ) {
                        var ename = "Purchase";
                        var properties = {};
                        var sPageURL = window.location.pathname;
                        properties.dyType = "purchase-v1";
                        properties.uniqueTransactionId =
                          b["restaurant_order_id"];
                        properties.value = b["restaurant_order_subtotal"];
                        properties.restaurantDineDate =
                          b["restaurant_dine_date"];
                        properties.productCategory = b["product_category"];
                        properties.diet = b["restaurant_dietary_restrictions"];
                        properties.occasion = b["restaurant_occasion"];
                        properties.restaurantTimeCategory =
                          b["restaurant_time_category"];
                        properties.cart = [
                          {
                            productId: sPageURL.split("/")[2],
                            quantity: parseInt(b["restaurant_guest_quantity"]),
                            itemPrice: parseFloat(b["restaurant_unit_price"]),
                          },
                        ];
                        DY_EVENT(ename, properties);
                      }
                    }
                  }
                  if (
                    /\/restaurants\/(.*)\/reservation.html/.test(
                      window.location.pathname
                    ) ||
                    /\/restaurants/.test(window.location.pathname)
                  ) {
                    if (
                      b["tealium_event"] == "restaurant_booking_select_time"
                    ) {
                      var ename = "Add to Cart";
                      var properties = {};
                      var sPageURL = window.location.pathname;
                      properties.dyType = "add-to-cart-v1";
                      if (
                        typeof b["restaurant_order_subtotal"] != "undefined"
                      ) {
                        properties.value = b["restaurant_order_subtotal"];
                      }
                      properties.restaurantDineDate = b["restaurant_dine_date"];
                      properties.productCategory = b["product_category"];
                      properties.restaurantTimeCategory =
                        b["restaurant_time_category"];
                      properties.productId = sPageURL
                        .split("/")[2]
                        .split(".")[0];
                      properties.quantity = parseInt(
                        b["restaurant_guest_quantity"]
                      );
                      if (typeof b["restaurant_unit_price"] != "undefined") {
                        properties.cart = [
                          {
                            productId: sPageURL.split("/")[2].split(".")[0],
                            quantity: parseInt(b["restaurant_guest_quantity"]),
                            itemPrice: parseFloat(b["restaurant_unit_price"]),
                          },
                        ];
                      } else {
                        properties.cart = [
                          {
                            productId: sPageURL.split("/")[2].split(".")[0],
                            quantity: parseInt(b["restaurant_guest_quantity"]),
                          },
                        ];
                      }
                      DY_EVENT(ename, properties);
                    }
                  }
                  if (
                    /\/sands-rewards-lifestyle\/dashboard/.test(
                      window.location.pathname
                    )
                  ) {
                    if (
                      b["tealium_event"] == "loyalty_account" &&
                      b["srl_membership_id"]
                    ) {
                      var ename = "Login";
                      var properties = {};
                      properties.dyType = "login-v1";
                      properties.cuid = b["srl_membership_id"];
                      properties.cuidType = "MembershipID";
                      properties.membershipType = b["site_section"];
                      properties.membershipTier = b["member_tier"];
                      DY_EVENT(ename, properties);
                    }
                  }
                  if (
                    /\/sands-rewards-club\/dashboard/.test(
                      window.location.pathname
                    )
                  ) {
                    if (
                      b["tealium_event"] == "loyalty_account" &&
                      b["src_membership_id"]
                    ) {
                      var ename = "Login";
                      var properties = {};
                      properties.dyType = "login-v1";
                      properties.cuid = b["src_membership_id"];
                      properties.cuidType = "MembershipID";
                      properties.membershipType = b["site_section"];
                      properties.membershipTier = b["member_tier"];
                      DY_EVENT(ename, properties);
                    }
                  }
                  if (
                    /\/sands-rewards-lifestyle\/sign-up/.test(
                      window.location.pathname
                    )
                  ) {
                    if (
                      b["tealium_event"] == "user_register" &&
                      b["srl_membership_id"]
                    ) {
                      var ename = "Signup";
                      var properties = {};
                      var sPageURL = window.location.pathname;
                      properties.dyType = "signup-v1";
                      properties.cuid = b["srl_membership_id"];
                      properties.cuidType = "MembershipID";
                      properties.membershipType = sPageURL.split("/")[1];
                      properties.membershipTier = b["member_tier"];
                      DY_EVENT(ename, properties);
                    }
                  }
                }
                var eventType = "";
                var language = "";
                const DY_TYPE = {
                  EVENT: "event",
                  SPA: "spa",
                  CART: "add-to-cart-v1",
                };
                function loadDYScripts() {
                  var dyScript1 = document.createElement("script");
                  dyScript1.type = "text/javascript";
                  dyScript1.src =
                    "//cdn-eu.dynamicyield.com/api/9876410/api_dynamic.js";
                  document
                    .getElementsByTagName("head")[0]
                    .appendChild(dyScript1);
                  var dyScript2 = document.createElement("script");
                  dyScript2.type = "text/javascript";
                  dyScript2.src =
                    "//cdn-eu.dynamicyield.com/api/9876410/api_static.js";
                  document
                    .getElementsByTagName("head")[0]
                    .appendChild(dyScript2);
                }
                function initializeScript(interval, maxRetries) {
                  new Promise(function (fufilled, rejected) {
                    if (typeof DYO !== "undefined") {
                      fufilled("SUCCESS!");
                    } else {
                      rejected("Not defined!");
                    }
                  })
                    .then(function (success) {
                      initMainScript();
                    })
                    .catch(function (failed) {
                      console.error(failed);
                      setTimeout(function () {
                        maxRetries--;
                        console.error("RETRYING ...");
                        initializeScript(interval, maxRetries);
                      }, interval);
                    });
                }
                initializeScript(5000, 6);
              } catch (catch_main) {
                console.warn(catch_main);
              }
            })();
          }
        } catch (e) {
          utag.DB(e);
        }
      },
      function (a, b) {
        try {
          if (
            b["domain_pathname"]
              .toString()
              .indexOf("marinabaysands.com/sands-rewards-club") > -1 ||
            b["domain_pathname"]
              .toString()
              .indexOf("marinabaysands.com/sands-rewards-lifestyle") > -1
          ) {
            if (
              /\/sands-rewards-lifestyle\/GuestInformationPage.aspx/.test(
                window.location.pathname
              ) ||
              /\/sands-rewards-lifestyle\/RoomSelectionPage.aspx/.test(
                window.location.pathname
              ) ||
              /\/sands-rewards-lifestyle\/RoomAvailableSearch.aspx/.test(
                window.location.pathname
              ) ||
              /\/sands-rewards-lifestyle\/BookingConfirmation.aspx/.test(
                window.location.pathname
              ) ||
              /\/sands-rewards-lifestyle\/RoomBooking.aspx/.test(
                window.location.pathname
              )
            ) {
              b["product_category"] = [
                "Room Reservations - Loyalty Booking (SRL)",
              ];
            } else if (
              /\/sands-rewards-club\/GuestInformationPage.aspx/.test(
                window.location.pathname
              ) ||
              /\/sands-rewards-club\/RoomSelectionPage.aspx/.test(
                window.location.pathname
              ) ||
              /\/sands-rewards-club\/RoomAvailableSearch.aspx/.test(
                window.location.pathname
              ) ||
              /\/sands-rewards-club\/BookingConfirmation.aspx/.test(
                window.location.pathname
              ) ||
              /\/sands-rewards-club\/RoomBooking.aspx/.test(
                window.location.pathname
              )
            ) {
              b["product_category"] = [
                "Room Reservations - Loyalty Booking (SRC)",
              ];
            }
          }
        } catch (e) {
          utag.DB(e);
        }
      },
      function (a, b) {
        try {
          if (1) {
            var coco = document.cookie;
            var split_coco = coco.split("; ");
            var term = "_ga=";
            var bs = split_coco.filter(
              (item) => item.toLowerCase().indexOf(term) > -1
            );
            console.log(bs[0]);
            var myArray = bs[0].split(".");
            var custom_gcid = myArray[2] + "." + myArray[3];
            if (custom_gcid) {
              b["Google_ClientID"] = custom_gcid;
              console.log(custom_gcid);
            }
          }
        } catch (e) {
          utag.DB(e);
        }
      },
      function (a, b, c, d, e, f, g) {
        if (1) {
          d = b["domain_pathname"];
          if (typeof d == "undefined") return;
          c = [
            { "marinabaysands.com/deals/rooms/": "ViewContent" },
            { "reserve.marinabaysands.com/search": "Search" },
            { "reserve.marinabaysands.com/rooms": "Search" },
            {
              "reserve.marinabaysands.com/guestCreditCardInfo":
                "InitiateCheckout",
            },
            { "marinabaysands.com/booking/search": "Search" },
            { "marinabaysands.com/booking/rooms": "Search" },
            { "marinabaysands.com/booking/payment": "InitiateCheckout" },
            { "marinabaysands.com/booking/multirooms": "Search" },
            { "marinabaysands.com/booking/confirmation": "Purchase" },
          ];
          var m = false;
          for (e = 0; e < c.length; e++) {
            for (f in utag.loader.GV(c[e])) {
              if (d.toString().indexOf(f) > -1) {
                b["facebook_event"] = c[e][f];
                m = true;
              }
            }
            if (m) break;
          }
        }
      },
      function (a, b, c, d, e, f, g) {
        if (
          b["domain_pathname"].toString().indexOf("rise") > -1 ||
          b["domain_pathname"].toString().indexOf("spago") > -1 ||
          b["domain_pathname"].toString().indexOf("cut") > -1 ||
          b["domain_pathname"].toString().indexOf("db-bistro") > -1 ||
          b["domain_pathname"].toString().indexOf("mott32") > -1 ||
          b["domain_pathname"].toString().indexOf("endless") > -1
        ) {
          d = b["tealium_event"];
          if (typeof d == "undefined") return;
          c = [
            {
              restaurant_booking_select_time: "restaurant_booking_select_time",
            },
            { restaurants: "restaurants" },
            { restaurant_booking_search: "restaurant_booking_search" },
            { restaurant_booking_form: "restaurant_booking_form" },
            {
              restaurant_booking_confirmation:
                "restaurant_booking_confirmation",
            },
          ];
          var m = false;
          for (e = 0; e < c.length; e++) {
            for (f in utag.loader.GV(c[e])) {
              if (d == f) {
                b["facebook_event_FNB"] = c[e][f];
                m = true;
              }
            }
            if (m) break;
          }
        }
      },
      function (a, b) {
        try {
          if (
            b["tealium_event"].toString().toLowerCase() ==
            "merchandise_purchase_confirmation".toLowerCase()
          ) {
            if (!b["product_category"]) {
              b["product_category"] = "Merchandise";
            }
            if (
              !b["merchandise_order_subtotal_aft_discount"] &&
              b["merchandise_order_total"]
            ) {
              b["merchandise_order_subtotal_aft_discount"] =
                b["merchandise_order_total"];
            }
          }
        } catch (e) {
          utag.DB(e);
        }
      },
      function (a, b) {
        try {
          utag.runonce = utag.runonce || {};
          utag.runonce.ext = utag.runonce.ext || {};
          if (typeof utag.runonce.ext[424] == "undefined") {
            utag.runonce.ext[424] = 1;
            if (
              b["dom.url"]
                .toString()
                .indexOf("https://staging.marinabaysands.com/booking/") < 0
            ) {
              var pageTitle = document.title.toLowerCase();
              var hostName = document.location.hostname.toLowerCase();
              var pagePath = document.location.pathname.toLowerCase();
              var productService, userActivity;
              var Hotel_Stay_key = new RegExp(
                "reserve.marinabaysands.com|hotel|room|in-room-dining|gift-shop"
              );
              var Eat_Restaurant_key = new RegExp(
                "restaurant|restaurants|reservations|chef|sevenrooms.com|dining"
              );
              var Host_Event_key = new RegExp(
                "expo-events-and-convention|meetings-and-convention|meetings & conventions|weddings|corporate-dinners|corporate dinners|events & exhibitions|incentive-groups|incentive groups|venue-rental"
              );
              var Explore_Museum_key = new RegExp(
                "museum|artscience|exhibition-archive|(.*asm.*)"
              );
              var Shop_Shoppes_key = new RegExp(
                "shoppes.marinabaysands.com|shopping|shoppes|/collections/shoppingconcierge|/collections/clothing|/collections/shoes|/collections/bags|/collections/watch-jewellery|/collections/accessories|/collections/beauty|/pages/thank-you-order|gift-certificates"
              );
              var Rejuvenate_Spa_key = new RegExp(
                "banyan-tree-spa|banyan-tree"
              );
              var Rejuvenate_Gym_key = new RegExp(
                "banyan-tree-fitness-club|gym"
              );
              var Eat_Drink_key = new RegExp("ce-la-vi|bar");
              var Party_NightClub_key = new RegExp("nightclub|nightlife");
              var Eat_Merchandise_key = new RegExp("mooncakes-online-order");
              var Explore_Attraction_key = new RegExp(
                "attractions.html|/attractions/"
              );
              var Reward_Sandrewards_key = new RegExp(
                "sands-rewards-lifestyle|sands-rewards-club|sands-rewards-meeting|sands rewards lifestyle|sands rewards club|sands rewards meeting"
              );
              var Entertain_Show_key = new RegExp(
                "/entertainment/|shows.html|/entertainment/shows/"
              );
              var Discover_MBS_key = new RegExp(
                "jobs|careers|singapore-visitors-guide|around-mbs|company-information|environmental-sustainability|contact.html|singapore-culture-arts|faq.html"
              );
              var Play_Casino_key = new RegExp(
                "sandscasino|gambling|casino|/games/"
              );
              var positiveKeywordArr = {
                "Stay :: Hotel": Hotel_Stay_key,
                "Eat :: Restaurant": Eat_Restaurant_key,
                "Host :: Mice": Host_Event_key,
                "Explore :: Museum": Explore_Museum_key,
                "Shop :: Shoppes": Shop_Shoppes_key,
                "Rejuvenate :: Spa": Rejuvenate_Spa_key,
                "Rejuvenate :: Gym": Rejuvenate_Gym_key,
                "Eat-Drink :: Restaurant-Bar": Eat_Drink_key,
                "Party :: NightClub": Party_NightClub_key,
                "Eat :: Merchandise": Eat_Merchandise_key,
                "Explore :: Attraction": Explore_Attraction_key,
                "Reward :: Sandsreward": Reward_Sandrewards_key,
                "Entertain :: Show": Entertain_Show_key,
                "Discover :: MBS": Discover_MBS_key,
                "Play :: Casino": Play_Casino_key,
              };
              var Hotel_Stay_key_ve = new RegExp(
                "sevenrooms|expo|meeting|shopping|jobs|careers|fitness-club|banyan-tree-spa|entertainment|club55"
              );
              var Eat_Restaurant_key_ve = new RegExp(
                "bar|nightclub|hotel|meeting|careers|job|expo-events-and-convention-centre|exhibitions|wedding|museum|casino|shopping"
              );
              var Host_Event_key_ve = new RegExp(
                "sevenrooms|shopping|jobs|careers|fitness-club|banyan-tree-spa|sands-rewards-meeting"
              );
              var Explore_Museum_key_ve = new RegExp(
                "sevenrooms|shopping|jobs|careers|fitness-club|banyan-tree-spa|sands-rewards|singapore-visitors-guide|venue-rental"
              );
              var Shop_Shoppes_key_ve = new RegExp(
                "museum|artscience|exhibition-archive|sevenrooms|jobs|careers|fitness-club|banyan-tree-spa|singapore-visitors-guide|venue-rental|ticket.marinabaysands.com|around-mbs|eating|ticketing.stixcloudtest.com"
              );
              var Rejuvenate_Spa_key_ve = new RegExp(
                "restaurant|museum|artscience|exhibition-archive|sevenrooms|jobs|careers|singapore-visitors-guide|venue-rental|ticket.marinabaysands.com|around-mbs|eating|ticketing.stixcloudtest.com|spago"
              );
              var Rejuvenate_Gym_key_ve = new RegExp(
                "restaurant|museum|artscience|exhibition-archive|sevenrooms|jobs|careers|singapore-visitors-guide|venue-rental|ticket.marinabaysands.com|around-mbs|eating|ticketing.stixcloudtest.com|spago"
              );
              var Eat_Drink_key_ve = new RegExp(
                "/nightlife/|singapore-culture-arts|singapore-visitors-guide|around-mbs|bags/products"
              );
              var Party_NightClub_key_ve = new RegExp(
                "singapore-culture-arts|singapore-visitors-guide|around-mbs|bags/products|nightclubbing"
              );
              var Eat_Merchandise_key_ve = new RegExp(
                "singapore-culture-arts|singapore-visitors-guide|around-mbs|bags/products|nightclubbing"
              );
              var Explore_Attraction_key_ve = new RegExp(
                "singapore-culture-arts|singapore-visitors-guide|around-mbs|bags/products|nightclubbing"
              );
              var Reward_Sandrewards_key_ve = new RegExp(
                "singapore-culture-arts|singapore-visitors-guide|around-mbs|bags/products|nightclubbing"
              );
              var Entertain_Show_key_ve = new RegExp(
                "singapore-culture-arts|singapore-visitors-guide|around-mbs|bags/products|nightclubbing"
              );
              var Discover_MBS_key_ve = new RegExp(
                "reserve.marinabaysands.com|hotel|room|in-room-dining|gift-shop|restaurant|restaurants|reservations|chef|sevenrooms.com|dining|expo-events-and-convention|meetings-and-convention|meetings & conventions|weddings|corporate-dinners|corporate dinners|events & exhibitions|incentive-groups|incentive groups|venue-rental|museum|artscience|exhibition-archive|shoppes.marinabaysands.com|shopping|shoppes|/collections/shoppingconcierge|/collections/clothing|/collections/shoes|/collections/bags|/collections/watch-jewellery|/collections/accessories|/collections/beauty|/pages/thank-you-order|gift-certificates|banyan-tree-spa|banyan-tree|banyan-tree-fitness-club|/nightlife/|singapore-culture-arts|singapore-visitors-guide|around-mbs|bags/products|mooncakes-online-order|attractions.html|/attractions/|sands-rewards-lifestyle|sands-rewards-club|sands-rewards-meeting|sands rewards lifestyle|sands rewards club|sands rewards meeting|/entertainment/|shows.html|/entertainment/shows/|gambling|casino"
              );
              var Play_Casino_key_ve = new RegExp(
                "reserve.marinabaysands.com|hotel|/job/|careers|room|in-room-dining|gift-shop|restaurant|restaurants|reservations|chef|sevenrooms.com|dining|expo-events-and-convention|meetings-and-convention|meetings & conventions|weddings|corporate-dinners|corporate dinners|events & exhibitions|incentive-groups|incentive groups|venue-rental|museum|artscience|exhibition-archive|shoppes.marinabaysands.com|shopping|shoppes|/collections/shoppingconcierge|/collections/clothing|/collections/shoes|/collections/bags|/collections/watch-jewellery|/collections/accessories|/collections/beauty|/pages/thank-you-order|gift-certificates|banyan-tree-spa|banyan-tree|banyan-tree-fitness-club|/nightlife/|singapore-culture-arts|singapore-visitors-guide|around-mbs|bags/products|mooncakes-online-order|attractions.html|/attractions/|sands-rewards-lifestyle|sands-rewards-club|sands-rewards-meeting|sands rewards lifestyle|sands rewards club|sands rewards meeting|/entertainment/|shows.html|/entertainment/shows/"
              );
              var negativeKeywordArr = {
                "Stay :: Hotel": Hotel_Stay_key_ve,
                "Eat :: Restaurant": Eat_Restaurant_key_ve,
                "Host :: Mice": Host_Event_key_ve,
                "Explore :: Museum": Explore_Museum_key_ve,
                "Shop :: Shoppes": Shop_Shoppes_key_ve,
                "Rejuvenate :: Spa": Rejuvenate_Spa_key_ve,
                "Rejuvenate :: Gym": Rejuvenate_Gym_key_ve,
                "Eat-Drink :: Restaurant-Bar": Eat_Drink_key_ve,
                "Party :: NightClub": Party_NightClub_key_ve,
                "Eat :: Merchandise": Eat_Merchandise_key_ve,
                "Explore :: Attraction": Explore_Attraction_key_ve,
                "Reward :: Sandsreward": Reward_Sandrewards_key_ve,
                "Entertain :: Show": Entertain_Show_key_ve,
                "Discover :: MBS": Discover_MBS_key_ve,
                "Play :: Casino": Play_Casino_key_ve,
              };
              var pageTitleScoreArr = [];
              var hostNameScoreArr = [];
              var pagePathScoreArr = [];
              var pageTitleScoreArr_ve = [];
              var hostNameScoreArr_ve = [];
              var pagePathScoreArr_ve = [];
              Object.keys(positiveKeywordArr).forEach(function (key) {
                var pageTitleval,
                  hostNameval,
                  pagePathval = 0;
                if (positiveKeywordArr[key].test(pageTitle)) {
                  pageTitleval = 10;
                } else {
                  pageTitleval = 0;
                }
                pageTitleScoreArr[key] = pageTitleval;
                if (positiveKeywordArr[key].test(hostName)) {
                  hostNameval = 10;
                } else {
                  hostNameval = 0;
                }
                hostNameScoreArr[key] = hostNameval;
                if (positiveKeywordArr[key].test(pagePath)) {
                  pagePathval = 10;
                } else {
                  pagePathval = 0;
                }
                pagePathScoreArr[key] = pagePathval;
              });
              Object.keys(negativeKeywordArr).forEach(function (key) {
                var pageTitleval,
                  hostNameval,
                  pagePathval = 0;
                if (negativeKeywordArr[key].test(pageTitle)) {
                  pageTitleval = -10;
                } else {
                  pageTitleval = 0;
                }
                pageTitleScoreArr_ve[key] = pageTitleval;
                if (negativeKeywordArr[key].test(hostName)) {
                  hostNameval = -10;
                } else {
                  hostNameval = 0;
                }
                hostNameScoreArr_ve[key] = hostNameval;
                if (negativeKeywordArr[key].test(pagePath)) {
                  pagePathval = -10;
                } else {
                  pagePathval = 0;
                }
                pagePathScoreArr_ve[key] = pagePathval;
              });
              var finalScoreArr = {};
              Object.keys(positiveKeywordArr).forEach(function (key) {
                finalScoreArr[key] =
                  pageTitleScoreArr[key] +
                  hostNameScoreArr[key] +
                  pagePathScoreArr[key] +
                  pageTitleScoreArr_ve[key] +
                  hostNameScoreArr_ve[key] +
                  pagePathScoreArr_ve[key];
              });
              var sortable = [];
              for (var lob in finalScoreArr) {
                sortable.push([lob, finalScoreArr[lob]]);
              }
              sortable.sort(function (a, b) {
                return b[1] - a[1];
              });
              var lob;
              var pagePath = document.location.pathname;
              if (pagePath == "/") {
                lob = "Discover :: MBS";
              } else if (sortable[0][1] > sortable[1][1]) {
                lob = sortable[0][0];
              } else if (
                sortable[0][1] == sortable[1][1] &&
                sortable[0][1] > 0
              ) {
                lob = "multiple :: multiple";
              } else {
                lob = "other :: other";
              }
              productService = lob.split(" :: ")[1];
              userActivity = lob.split(" :: ")[0];
              utag_data = window.utag_data || {};
              utag_data.hm_product_service = productService;
              utag_data.hm_user_activity = userActivity;
            }
          }
        } catch (e) {
          utag.DB(e);
        }
      },
      function (a, b, c, d) {
        c = ["member_email", "customer_email"];
        for (d = 0; d < c.length; d++) {
          try {
            b[c[d]] =
              b[c[d]] instanceof Array
                ? b[c[d]]
                : b[c[d]] instanceof Object
                ? b[c[d]]
                : b[c[d]].toString().toLowerCase();
          } catch (e) {
            utag.DB(e);
          }
        }
      },
      function (a, b) {
        try {
          if (1) {
            if (b.customer_email) {
              b.customer_email = b.customer_email.trim();
            }
            if (b.member_email) {
              b.member_email = b.member_email.trim();
            }
          }
        } catch (e) {
          utag.DB(e);
        }
      },
      function (a, b) {
        try {
          if (
            b["dom.pathname"]
              .toString()
              .toLowerCase()
              .indexOf("mobile".toLowerCase()) > -1
          ) {
            if (b["page_name"] == "booking_confirmation") {
              b["ga_page_override"] = "/booking/Mobile/Confirmation";
            } else {
              b["ga_page_override"] = window.location.pathname;
            }
          }
        } catch (e) {
          utag.DB(e);
        }
      },
      function (a, b) {
        try {
          utag.runonce = utag.runonce || {};
          utag.runonce.ext = utag.runonce.ext || {};
          if (typeof utag.runonce.ext[246] == "undefined") {
            utag.runonce.ext[246] = 1;
            if (
              b["dom.url"].toString().indexOf("booking.marinabaysands.com") >
                -1 ||
              b["dom.url"]
                .toString()
                .indexOf("booking.staging.marinabaysands.com") > -1 ||
              b["dom.url"].toString().indexOf("booking.qa.marinabaysands.com") >
                -1
            ) {
              _vwo_code = (function () {
                var account_id = 320407,
                  settings_tolerance = 2000,
                  library_tolerance = 2500,
                  use_existing_jquery = false,
                  f = false,
                  d = document;
                return {
                  use_existing_jquery: function () {
                    return use_existing_jquery;
                  },
                  library_tolerance: function () {
                    return library_tolerance;
                  },
                  finish: function () {
                    if (!f) {
                      f = true;
                      var a = d.getElementById("_vis_opt_path_hides");
                      if (a) a.parentNode.removeChild(a);
                    }
                  },
                  finished: function () {
                    return f;
                  },
                  load: function (a) {
                    var b = d.createElement("script");
                    b.src = a;
                    b.type = "text/javascript";
                    b.innerText;
                    b.onerror = function () {
                      _vwo_code.finish();
                    };
                    d.getElementsByTagName("head")[0].appendChild(b);
                  },
                  init: function () {
                    settings_timer = setTimeout(
                      "_vwo_code.finish()",
                      settings_tolerance
                    );
                    var a = d.createElement("style"),
                      b =
                        "body{opacity:0 !important;filter:alpha(opacity=0) !important;background:none !important;}",
                      h = d.getElementsByTagName("head")[0];
                    a.setAttribute("id", "_vis_opt_path_hides");
                    a.setAttribute("type", "text/css");
                    if (a.styleSheet) a.styleSheet.cssText = b;
                    else a.appendChild(d.createTextNode(b));
                    h.appendChild(a);
                    this.load(
                      "//dev.visualwebsiteoptimizer.com/j.php?a=" +
                        account_id +
                        "&u=" +
                        encodeURIComponent(d.URL) +
                        "&r=" +
                        Math.random()
                    );
                    return settings_timer;
                  },
                };
              })();
              _vwo_settings_timer = _vwo_code.init();
            }
          }
        } catch (e) {
          utag.DB(e);
        }
      },
      function (a, b) {
        try {
          if (
            (b["dom.url"]
              .toString()
              .toLowerCase()
              .indexOf("/Booking/ItineraryConfirmation".toLowerCase()) > -1 &&
              typeof b["order_total"] != "undefined" &&
              b["order_total"] != "") ||
            (b["dom.url"]
              .toString()
              .toLowerCase()
              .indexOf("/booking/Mobile/payment".toLowerCase()) > -1 &&
              typeof b["order_total"] != "undefined" &&
              b["order_total"] != "")
          ) {
            window.VWO = window.VWO || [];
            window._vis_opt_queue = window._vis_opt_queue || [];
            window._vis_opt_queue.push(function () {
              _vis_opt_revenue_conversion(utag_data.order_total);
            });
            window.VWO.push(["track.revenueConversion", utag_data.order_total]);
          }
        } catch (e) {
          utag.DB(e);
        }
      },
      function (a, b) {
        try {
          if (b["dom.url"].toString().indexOf("zh.marinabaysands.com") > -1) {
            var _hmt = _hmt || [];
            (function () {
              var hm = document.createElement("script");
              hm.src =
                "https://hm.baidu.com/hm.js?c2f61dc91d41c3474d224a10e9b75506";
              var s = document.getElementsByTagName("script")[0];
              s.parentNode.insertBefore(hm, s);
            })();
          }
        } catch (e) {
          utag.DB(e);
        }
      },
      function (a, b) {
        try {
          if (
            (b["site_section"]
              .toString()
              .toLowerCase()
              .indexOf("hotel".toLowerCase()) < 0 &&
              b["dom.url"]
                .toString()
                .toLowerCase()
                .indexOf("reserve.marinabaysands.com".toLowerCase()) > -1) ||
            (b["site_section"]
              .toString()
              .toLowerCase()
              .indexOf("hotel".toLowerCase()) < 0 &&
              b["dom.url"]
                .toString()
                .toLowerCase()
                .indexOf("marinabaysands.com/booking/".toLowerCase()) > -1)
          ) {
            b["site_section"] = "hotel";
          }
        } catch (e) {
          utag.DB(e);
        }
      },
      function (a, b) {
        try {
          if (typeof b["qp.sc_eh"] != "undefined") {
            utag.loader.SC("utag_main", {
              sc_eh: b["qp.sc_eh"] + ";exp-session",
            });
            b["cp.utag_main_sc_eh"] = b["qp.sc_eh"];
          }
        } catch (e) {
          utag.DB(e);
        }
      },
      function (a, b) {
        try {
          if (
            typeof b["srl_membership_id"] != "undefined" &&
            b["srl_membership_id"] != "" &&
            b["tealium_event"]
              .toString()
              .toLowerCase()
              .indexOf("shoppes".toLowerCase()) > -1
          ) {
            b["srl_membership_id"] = b["srl_membership_id"].replace(/ /g, "");
            if (b["srl_membership_id"].length != 9) {
              delete b["srl_membership_id"];
            }
          }
        } catch (e) {
          utag.DB(e);
        }
      },
      function (a, b) {
        try {
          if (
            (typeof b["member_phone"] != "undefined" &&
              b["member_phone"] != "" &&
              typeof b["member_phone_country"] != "undefined" &&
              b["member_phone_country"] != "") ||
            (typeof b["customer_phone"] != "undefined" &&
              b["customer_phone"] != "" &&
              typeof b["customer_phone_country_code"] != "undefined" &&
              b["customer_phone_country_code"] != "")
          ) {
            if (
              b["customer_phone"] !== undefined &&
              b["customer_phone"] !== "" &&
              b["customer_phone_country_code"] !== undefined &&
              b["customer_phone_country_code"] !== ""
            ) {
              b["customer_phone_country_code"] =
                b["customer_phone_country_code"].trim();
              b["customer_phone_with_iso_country_code"] =
                b["customer_phone_country_code"].replace("+", "") +
                b["customer_phone"].trim();
              b["customer_phone_with_iso_country_code_plus_sign"] =
                "+" + b["customer_phone_with_iso_country_code"].trim();
            }
            if (
              b["member_phone"] !== undefined &&
              b["member_phone"] !== "" &&
              b["member_phone_country"] !== undefined &&
              b["member_phone_country"] !== ""
            ) {
              b["member_phone_country"] = b["member_phone_country"].trim();
              b["customer_phone_with_iso_country_code"] =
                b["member_phone_country"].replace("+", "") +
                b["member_phone"].trim();
              b["customer_phone_with_iso_country_code_plus_sign"] =
                "+" + b["customer_phone_with_iso_country_code"].trim();
            }
          }
        } catch (e) {
          utag.DB(e);
        }
      },
      function (a, b) {
        try {
          if (
            (typeof b["membership_id"] != "undefined" &&
              b["membership_id"] != "") ||
            (typeof b["qp.sc_customer"] != "undefined" &&
              b["qp.sc_customer"] != "")
          ) {
            var m_id;
            if (b["membership_id"]) {
              m_id = b["membership_id"] + "";
            } else {
              m_id = b["sc_customer"] + "";
            }
            if (m_id.length == 9) {
              if (m_id.substr(0, 1) == "1") {
                b["srl_membership_id"] = m_id;
                return;
              } else if (m_id.substr(0, 1) == "0") {
                b["src_membership_id"] = m_id;
                return;
              }
            }
            if (m_id.length < 9) {
              b["src_membership_id"] = m_id;
              return;
            }
          }
        } catch (e) {
          utag.DB(e);
        }
      },
      function (a, b) {
        try {
          if (
            typeof b["src_membership_id"] != "undefined" &&
            b["src_membership_id"] != ""
          ) {
            var src_id = b["src_membership_id"] + "";
            src_id = src_id.replace(/ /g, "");
            if (parseInt(src_id) == 0) {
              delete b["src_membership_id"];
              return;
            }
            if (src_id.length == 9) {
              return;
            } else {
              while (src_id.length < 9) src_id = "0" + src_id;
              b["src_membership_id"] = src_id;
            }
          }
        } catch (e) {
          utag.DB(e);
        }
      },
      function (a, b) {
        try {
          if (
            (typeof b["membership_id"] != "undefined" &&
              b["membership_id"] != "") ||
            (typeof b["srl_membership_id"] != "undefined" &&
              b["srl_membership_id"] != "") ||
            (typeof b["src_membership_id"] != "undefined" &&
              b["src_membership_id"] != "")
          ) {
            b["is_member"] = "Yes";
          }
        } catch (e) {
          utag.DB(e);
        }
      },
      function (a, b, c, d, e, f, g) {
        if (
          typeof b["srl_membership_id"] != "undefined" &&
          b["srl_membership_id"] != ""
        ) {
          d = b["srl_membership_id"];
          if (typeof d == "undefined") return;
          c = [
            { 100088085: "true" },
            { 100089512: "true" },
            { 100095499: "true" },
            { 100099576: "true" },
            { 100106302: "true" },
            { 100109809: "true" },
            { 100262564: "true" },
            { 100327659: "true" },
            { 100484336: "true" },
            { 100484343: "true" },
            { 100484347: "true" },
            { 100484351: "true" },
            { 100484353: "true" },
            { 100484357: "true" },
            { 100820001: "true" },
            { 100850390: "true" },
            { 100850391: "true" },
            { 100850392: "true" },
            { 100850393: "true" },
            { 100850394: "true" },
            { 100850395: "true" },
            { 100850396: "true" },
            { 100850397: "true" },
            { 100850398: "true" },
            { 100850399: "true" },
            { 100850400: "true" },
            { 100850401: "true" },
            { 100850402: "true" },
            { 100850403: "true" },
            { 100850404: "true" },
            { 100850900: "true" },
            { 100873574: "true" },
            { 100873575: "true" },
            { 100873576: "true" },
            { 100873577: "true" },
            { 100873578: "true" },
            { 100887293: "true" },
            { 100887295: "true" },
            { 100887296: "true" },
            { 101011750: "true" },
            { 101011940: "true" },
            { 101032239: "true" },
            { 101185982: "true" },
            { 101185983: "true" },
            { 101185987: "true" },
            { 101185988: "true" },
            { 101185991: "true" },
            { 101199726: "true" },
            { 101199728: "true" },
            { 101199732: "true" },
            { 101243230: "true" },
            { 101251531: "true" },
            { 101347662: "true" },
            { 101347680: "true" },
            { 101348911: "true" },
            { 101462010: "true" },
            { 101462018: "true" },
            { 101462020: "true" },
            { 101462021: "true" },
            { 101462060: "true" },
            { 101462108: "true" },
            { 101462839: "true" },
            { 101958905: "true" },
            { 101959051: "true" },
          ];
          var m = false;
          for (e = 0; e < c.length; e++) {
            for (f in utag.loader.GV(c[e])) {
              if (d == f) {
                b["is_test_membership_account_id"] = c[e][f];
                m = true;
              }
            }
            if (m) break;
          }
          if (!m) b["is_test_membership_account_id"] = "false";
        }
      },
      function (a, b, c, d, e, f, g) {
        if (
          typeof b["src_membership_id"] != "undefined" &&
          b["src_membership_id"] != ""
        ) {
          d = b["src_membership_id"];
          if (typeof d == "undefined") return;
          c = [
            { "000088085": "true" },
            { "000089512": "true" },
            { "000095499": "true" },
            { "000099576": "true" },
            { "000106302": "true" },
            { "000109809": "true" },
            { "000262564": "true" },
            { "000327659": "true" },
            { "000484336": "true" },
            { "000484343": "true" },
            { "000484347": "true" },
            { "000484351": "true" },
            { "000484353": "true" },
            { "000484357": "true" },
            { "000820001": "true" },
            { "000850390": "true" },
            { "000850391": "true" },
            { "000850392": "true" },
            { "000850393": "true" },
            { "000850394": "true" },
            { "000850395": "true" },
            { "000850396": "true" },
            { "000850397": "true" },
            { "000850398": "true" },
            { "000850399": "true" },
            { "000850400": "true" },
            { "000850401": "true" },
            { "000850402": "true" },
            { "000850403": "true" },
            { "000850404": "true" },
            { "000850900": "true" },
            { "000873574": "true" },
            { "000873575": "true" },
            { "000873576": "true" },
            { "000873577": "true" },
            { "000873578": "true" },
            { "000887293": "true" },
            { "000887295": "true" },
            { "000887296": "true" },
            { "001011750": "true" },
            { "001011940": "true" },
            { "001032239": "true" },
            { "001185982": "true" },
            { "001185983": "true" },
            { "001185987": "true" },
            { "001185988": "true" },
            { "001185991": "true" },
            { "001199726": "true" },
            { "001199728": "true" },
            { "001199732": "true" },
            { "001243230": "true" },
            { "001251531": "true" },
            { "001347662": "true" },
            { "001347680": "true" },
            { "001348911": "true" },
            { "001462010": "true" },
            { "001462018": "true" },
            { "001462020": "true" },
            { "001462021": "true" },
            { "001462060": "true" },
            { "001462108": "true" },
            { "001462839": "true" },
            { "001958905": "true" },
            { "001959051": "true" },
          ];
          var m = false;
          for (e = 0; e < c.length; e++) {
            for (f in utag.loader.GV(c[e])) {
              if (d == f) {
                b["is_test_membership_account_id"] = c[e][f];
                m = true;
              }
            }
            if (m) break;
          }
          if (!m) b["is_test_membership_account_id"] = "false";
        }
      },
      function (a, b) {
        try {
          if (
            b["customer_email"]
              .toString()
              .toLowerCase()
              .indexOf("@".toLowerCase()) > -1
          ) {
            b["customer_hashed_email"] = b["customer_email"];
          }
        } catch (e) {
          utag.DB(e);
        }
      },
      function (a, b) {
        try {
          if (typeof b["customer_phone_with_iso_country_code"] != "undefined") {
            b["customer_hashed_phone_with_iso_country_code"] =
              b["customer_phone_with_iso_country_code"];
          }
        } catch (e) {
          utag.DB(e);
        }
      },
      function (a, b) {
        try {
          if (
            typeof b["customer_phone_with_iso_country_code_plus_sign"] !=
            "undefined"
          ) {
            b["customer_hashed_phone_with_iso_country_code_plus_sign"] =
              b["customer_phone_with_iso_country_code_plus_sign"];
          }
        } catch (e) {
          utag.DB(e);
        }
      },
      function (a, b) {
        try {
          if (
            b["member_email"]
              .toString()
              .toLowerCase()
              .indexOf("@".toLowerCase()) > -1
          ) {
            b["customer_hashed_email"] = b["member_email"];
          }
        } catch (e) {
          utag.DB(e);
        }
      },
      function (a, b) {
        utag.ut.sha256 = (function (t, n) {
          var r;
          if (
            ("undefined" != typeof window &&
              window.crypto &&
              (r = window.crypto),
            !r &&
              "undefined" != typeof window &&
              window.msCrypto &&
              (r = window.msCrypto),
            !r &&
              "undefined" != typeof global &&
              global.crypto &&
              (r = global.crypto),
            !r && "function" == typeof require)
          )
            try {
              r = require("crypto");
            } catch (t) {}
          var e = function () {
              if (r) {
                if ("function" == typeof r.getRandomValues)
                  try {
                    return r.getRandomValues(new Uint32Array(1))[0];
                  } catch (t) {}
                if ("function" == typeof r.randomBytes)
                  try {
                    return r.randomBytes(4).readInt32LE();
                  } catch (t) {}
              }
              throw new Error(
                "Native crypto module could not be used to get secure random number."
              );
            },
            i =
              Object.create ||
              (function () {
                function t() {}
                return function (n) {
                  var r;
                  return (
                    (t.prototype = n), (r = new t()), (t.prototype = null), r
                  );
                };
              })(),
            o = {},
            s = (o.lib = {}),
            a = (s.Base = {
              extend: function (t) {
                var n = i(this);
                return (
                  t && n.mixIn(t),
                  (n.hasOwnProperty("init") && this.init !== n.init) ||
                    (n.init = function () {
                      n.$super.init.apply(this, arguments);
                    }),
                  (n.init.prototype = n),
                  (n.$super = this),
                  n
                );
              },
              create: function () {
                var t = this.extend();
                return t.init.apply(t, arguments), t;
              },
              init: function () {},
              mixIn: function (t) {
                for (var n in t) t.hasOwnProperty(n) && (this[n] = t[n]);
                t.hasOwnProperty("toString") && (this.toString = t.toString);
              },
              clone: function () {
                return this.init.prototype.extend(this);
              },
            }),
            c = (s.WordArray = a.extend({
              init: function (t, n) {
                (t = this.words = t || []),
                  (this.sigBytes = null != n ? n : 4 * t.length);
              },
              toString: function (t) {
                return (t || f).stringify(this);
              },
              concat: function (t) {
                var n = this.words,
                  r = t.words,
                  e = this.sigBytes,
                  i = t.sigBytes;
                if ((this.clamp(), e % 4))
                  for (var o = 0; o < i; o++) {
                    var s = (r[o >>> 2] >>> (24 - (o % 4) * 8)) & 255;
                    n[(e + o) >>> 2] |= s << (24 - ((e + o) % 4) * 8);
                  }
                else for (o = 0; o < i; o += 4) n[(e + o) >>> 2] = r[o >>> 2];
                return (this.sigBytes += i), this;
              },
              clamp: function () {
                var n = this.words,
                  r = this.sigBytes;
                (n[r >>> 2] &= 4294967295 << (32 - (r % 4) * 8)),
                  (n.length = t.ceil(r / 4));
              },
              clone: function () {
                var t = a.clone.call(this);
                return (t.words = this.words.slice(0)), t;
              },
              random: function (t) {
                for (var n = [], r = 0; r < t; r += 4) n.push(e());
                return new c.init(n, t);
              },
            })),
            u = (o.enc = {}),
            f = (u.Hex = {
              stringify: function (t) {
                for (
                  var n = t.words, r = t.sigBytes, e = [], i = 0;
                  i < r;
                  i++
                ) {
                  var o = (n[i >>> 2] >>> (24 - (i % 4) * 8)) & 255;
                  e.push((o >>> 4).toString(16)), e.push((15 & o).toString(16));
                }
                return e.join("");
              },
              parse: function (t) {
                for (var n = t.length, r = [], e = 0; e < n; e += 2)
                  r[e >>> 3] |=
                    parseInt(t.substr(e, 2), 16) << (24 - (e % 8) * 4);
                return new c.init(r, n / 2);
              },
            }),
            h = (u.Latin1 = {
              stringify: function (t) {
                for (
                  var n = t.words, r = t.sigBytes, e = [], i = 0;
                  i < r;
                  i++
                ) {
                  var o = (n[i >>> 2] >>> (24 - (i % 4) * 8)) & 255;
                  e.push(String.fromCharCode(o));
                }
                return e.join("");
              },
              parse: function (t) {
                for (var n = t.length, r = [], e = 0; e < n; e++)
                  r[e >>> 2] |= (255 & t.charCodeAt(e)) << (24 - (e % 4) * 8);
                return new c.init(r, n);
              },
            }),
            d = (u.Utf8 = {
              stringify: function (t) {
                try {
                  return decodeURIComponent(escape(h.stringify(t)));
                } catch (t) {
                  throw new Error("Malformed UTF-8 data");
                }
              },
              parse: function (t) {
                return h.parse(unescape(encodeURIComponent(t)));
              },
            }),
            l = (s.BufferedBlockAlgorithm = a.extend({
              reset: function () {
                (this._data = new c.init()), (this._nDataBytes = 0);
              },
              _append: function (t) {
                "string" == typeof t && (t = d.parse(t)),
                  this._data.concat(t),
                  (this._nDataBytes += t.sigBytes);
              },
              _process: function (n) {
                var r,
                  e = this._data,
                  i = e.words,
                  o = e.sigBytes,
                  s = this.blockSize,
                  a = o / (4 * s),
                  u =
                    (a = n
                      ? t.ceil(a)
                      : t.max((0 | a) - this._minBufferSize, 0)) * s,
                  f = t.min(4 * u, o);
                if (u) {
                  for (var h = 0; h < u; h += s) this._doProcessBlock(i, h);
                  (r = i.splice(0, u)), (e.sigBytes -= f);
                }
                return new c.init(r, f);
              },
              clone: function () {
                var t = a.clone.call(this);
                return (t._data = this._data.clone()), t;
              },
              _minBufferSize: 0,
            })),
            p =
              ((s.Hasher = l.extend({
                cfg: a.extend(),
                init: function (t) {
                  (this.cfg = this.cfg.extend(t)), this.reset();
                },
                reset: function () {
                  l.reset.call(this), this._doReset();
                },
                update: function (t) {
                  return this._append(t), this._process(), this;
                },
                finalize: function (t) {
                  return t && this._append(t), this._doFinalize();
                },
                blockSize: 16,
                _createHelper: function (t) {
                  return function (n, r) {
                    return new t.init(r).finalize(n);
                  };
                },
                _createHmacHelper: function (t) {
                  return function (n, r) {
                    return new p.HMAC.init(t, r).finalize(n);
                  };
                },
              })),
              (o.algo = {}));
          return o;
        })(Math);
        !(function (r) {
          var t = utag.ut.sha256,
            e = t.lib,
            a = e.WordArray,
            n = e.Hasher,
            s = t.algo,
            o = [],
            i = [];
          !(function () {
            function t(t) {
              for (var e = r.sqrt(t), a = 2; a <= e; a++)
                if (!(t % a)) return !1;
              return !0;
            }
            function e(r) {
              return (4294967296 * (r - (0 | r))) | 0;
            }
            for (var a = 2, n = 0; n < 64; )
              t(a) &&
                (n < 8 && (o[n] = e(r.pow(a, 0.5))),
                (i[n] = e(r.pow(a, 1 / 3))),
                n++),
                a++;
          })();
          var h = [],
            c = (s.SHA256 = n.extend({
              _doReset: function () {
                this._hash = new a.init(o.slice(0));
              },
              _doProcessBlock: function (r, t) {
                for (
                  var e = this._hash.words,
                    a = e[0],
                    n = e[1],
                    s = e[2],
                    o = e[3],
                    c = e[4],
                    l = e[5],
                    u = e[6],
                    f = e[7],
                    _ = 0;
                  _ < 64;
                  _++
                ) {
                  if (_ < 16) h[_] = 0 | r[t + _];
                  else {
                    var v = h[_ - 15],
                      d =
                        ((v << 25) | (v >>> 7)) ^
                        ((v << 14) | (v >>> 18)) ^
                        (v >>> 3),
                      H = h[_ - 2],
                      g =
                        ((H << 15) | (H >>> 17)) ^
                        ((H << 13) | (H >>> 19)) ^
                        (H >>> 10);
                    h[_] = d + h[_ - 7] + g + h[_ - 16];
                  }
                  var p = (a & n) ^ (a & s) ^ (n & s),
                    w =
                      ((a << 30) | (a >>> 2)) ^
                      ((a << 19) | (a >>> 13)) ^
                      ((a << 10) | (a >>> 22)),
                    y =
                      f +
                      (((c << 26) | (c >>> 6)) ^
                        ((c << 21) | (c >>> 11)) ^
                        ((c << 7) | (c >>> 25))) +
                      ((c & l) ^ (~c & u)) +
                      i[_] +
                      h[_];
                  (f = u),
                    (u = l),
                    (l = c),
                    (c = (o + y) | 0),
                    (o = s),
                    (s = n),
                    (n = a),
                    (a = (y + (w + p)) | 0);
                }
                (e[0] = (e[0] + a) | 0),
                  (e[1] = (e[1] + n) | 0),
                  (e[2] = (e[2] + s) | 0),
                  (e[3] = (e[3] + o) | 0),
                  (e[4] = (e[4] + c) | 0),
                  (e[5] = (e[5] + l) | 0),
                  (e[6] = (e[6] + u) | 0),
                  (e[7] = (e[7] + f) | 0);
              },
              _doFinalize: function () {
                var t = this._data,
                  e = t.words,
                  a = 8 * this._nDataBytes,
                  n = 8 * t.sigBytes;
                return (
                  (e[n >>> 5] |= 128 << (24 - (n % 32))),
                  (e[14 + (((n + 64) >>> 9) << 4)] = r.floor(a / 4294967296)),
                  (e[15 + (((n + 64) >>> 9) << 4)] = a),
                  (t.sigBytes = 4 * e.length),
                  this._process(),
                  this._hash
                );
              },
              clone: function () {
                var r = n.clone.call(this);
                return (r._hash = this._hash.clone()), r;
              },
            }));
          (t.SHA256 = n._createHelper(c)),
            (t.HmacSHA256 = n._createHmacHelper(c));
        })(Math);
        try {
          if (
            typeof b["customer_hashed_email"] != "undefined" &&
            b["customer_hashed_email"] != ""
          ) {
            b["customer_hashed_email"] = utag.ut.sha256
              .SHA256(b["customer_hashed_email"])
              .toString();
          }
        } catch (e) {}
      },
      function (a, b) {
        utag.ut.sha256 = (function (t, n) {
          var r;
          if (
            ("undefined" != typeof window &&
              window.crypto &&
              (r = window.crypto),
            !r &&
              "undefined" != typeof window &&
              window.msCrypto &&
              (r = window.msCrypto),
            !r &&
              "undefined" != typeof global &&
              global.crypto &&
              (r = global.crypto),
            !r && "function" == typeof require)
          )
            try {
              r = require("crypto");
            } catch (t) {}
          var e = function () {
              if (r) {
                if ("function" == typeof r.getRandomValues)
                  try {
                    return r.getRandomValues(new Uint32Array(1))[0];
                  } catch (t) {}
                if ("function" == typeof r.randomBytes)
                  try {
                    return r.randomBytes(4).readInt32LE();
                  } catch (t) {}
              }
              throw new Error(
                "Native crypto module could not be used to get secure random number."
              );
            },
            i =
              Object.create ||
              (function () {
                function t() {}
                return function (n) {
                  var r;
                  return (
                    (t.prototype = n), (r = new t()), (t.prototype = null), r
                  );
                };
              })(),
            o = {},
            s = (o.lib = {}),
            a = (s.Base = {
              extend: function (t) {
                var n = i(this);
                return (
                  t && n.mixIn(t),
                  (n.hasOwnProperty("init") && this.init !== n.init) ||
                    (n.init = function () {
                      n.$super.init.apply(this, arguments);
                    }),
                  (n.init.prototype = n),
                  (n.$super = this),
                  n
                );
              },
              create: function () {
                var t = this.extend();
                return t.init.apply(t, arguments), t;
              },
              init: function () {},
              mixIn: function (t) {
                for (var n in t) t.hasOwnProperty(n) && (this[n] = t[n]);
                t.hasOwnProperty("toString") && (this.toString = t.toString);
              },
              clone: function () {
                return this.init.prototype.extend(this);
              },
            }),
            c = (s.WordArray = a.extend({
              init: function (t, n) {
                (t = this.words = t || []),
                  (this.sigBytes = null != n ? n : 4 * t.length);
              },
              toString: function (t) {
                return (t || f).stringify(this);
              },
              concat: function (t) {
                var n = this.words,
                  r = t.words,
                  e = this.sigBytes,
                  i = t.sigBytes;
                if ((this.clamp(), e % 4))
                  for (var o = 0; o < i; o++) {
                    var s = (r[o >>> 2] >>> (24 - (o % 4) * 8)) & 255;
                    n[(e + o) >>> 2] |= s << (24 - ((e + o) % 4) * 8);
                  }
                else for (o = 0; o < i; o += 4) n[(e + o) >>> 2] = r[o >>> 2];
                return (this.sigBytes += i), this;
              },
              clamp: function () {
                var n = this.words,
                  r = this.sigBytes;
                (n[r >>> 2] &= 4294967295 << (32 - (r % 4) * 8)),
                  (n.length = t.ceil(r / 4));
              },
              clone: function () {
                var t = a.clone.call(this);
                return (t.words = this.words.slice(0)), t;
              },
              random: function (t) {
                for (var n = [], r = 0; r < t; r += 4) n.push(e());
                return new c.init(n, t);
              },
            })),
            u = (o.enc = {}),
            f = (u.Hex = {
              stringify: function (t) {
                for (
                  var n = t.words, r = t.sigBytes, e = [], i = 0;
                  i < r;
                  i++
                ) {
                  var o = (n[i >>> 2] >>> (24 - (i % 4) * 8)) & 255;
                  e.push((o >>> 4).toString(16)), e.push((15 & o).toString(16));
                }
                return e.join("");
              },
              parse: function (t) {
                for (var n = t.length, r = [], e = 0; e < n; e += 2)
                  r[e >>> 3] |=
                    parseInt(t.substr(e, 2), 16) << (24 - (e % 8) * 4);
                return new c.init(r, n / 2);
              },
            }),
            h = (u.Latin1 = {
              stringify: function (t) {
                for (
                  var n = t.words, r = t.sigBytes, e = [], i = 0;
                  i < r;
                  i++
                ) {
                  var o = (n[i >>> 2] >>> (24 - (i % 4) * 8)) & 255;
                  e.push(String.fromCharCode(o));
                }
                return e.join("");
              },
              parse: function (t) {
                for (var n = t.length, r = [], e = 0; e < n; e++)
                  r[e >>> 2] |= (255 & t.charCodeAt(e)) << (24 - (e % 4) * 8);
                return new c.init(r, n);
              },
            }),
            d = (u.Utf8 = {
              stringify: function (t) {
                try {
                  return decodeURIComponent(escape(h.stringify(t)));
                } catch (t) {
                  throw new Error("Malformed UTF-8 data");
                }
              },
              parse: function (t) {
                return h.parse(unescape(encodeURIComponent(t)));
              },
            }),
            l = (s.BufferedBlockAlgorithm = a.extend({
              reset: function () {
                (this._data = new c.init()), (this._nDataBytes = 0);
              },
              _append: function (t) {
                "string" == typeof t && (t = d.parse(t)),
                  this._data.concat(t),
                  (this._nDataBytes += t.sigBytes);
              },
              _process: function (n) {
                var r,
                  e = this._data,
                  i = e.words,
                  o = e.sigBytes,
                  s = this.blockSize,
                  a = o / (4 * s),
                  u =
                    (a = n
                      ? t.ceil(a)
                      : t.max((0 | a) - this._minBufferSize, 0)) * s,
                  f = t.min(4 * u, o);
                if (u) {
                  for (var h = 0; h < u; h += s) this._doProcessBlock(i, h);
                  (r = i.splice(0, u)), (e.sigBytes -= f);
                }
                return new c.init(r, f);
              },
              clone: function () {
                var t = a.clone.call(this);
                return (t._data = this._data.clone()), t;
              },
              _minBufferSize: 0,
            })),
            p =
              ((s.Hasher = l.extend({
                cfg: a.extend(),
                init: function (t) {
                  (this.cfg = this.cfg.extend(t)), this.reset();
                },
                reset: function () {
                  l.reset.call(this), this._doReset();
                },
                update: function (t) {
                  return this._append(t), this._process(), this;
                },
                finalize: function (t) {
                  return t && this._append(t), this._doFinalize();
                },
                blockSize: 16,
                _createHelper: function (t) {
                  return function (n, r) {
                    return new t.init(r).finalize(n);
                  };
                },
                _createHmacHelper: function (t) {
                  return function (n, r) {
                    return new p.HMAC.init(t, r).finalize(n);
                  };
                },
              })),
              (o.algo = {}));
          return o;
        })(Math);
        !(function (r) {
          var t = utag.ut.sha256,
            e = t.lib,
            a = e.WordArray,
            n = e.Hasher,
            s = t.algo,
            o = [],
            i = [];
          !(function () {
            function t(t) {
              for (var e = r.sqrt(t), a = 2; a <= e; a++)
                if (!(t % a)) return !1;
              return !0;
            }
            function e(r) {
              return (4294967296 * (r - (0 | r))) | 0;
            }
            for (var a = 2, n = 0; n < 64; )
              t(a) &&
                (n < 8 && (o[n] = e(r.pow(a, 0.5))),
                (i[n] = e(r.pow(a, 1 / 3))),
                n++),
                a++;
          })();
          var h = [],
            c = (s.SHA256 = n.extend({
              _doReset: function () {
                this._hash = new a.init(o.slice(0));
              },
              _doProcessBlock: function (r, t) {
                for (
                  var e = this._hash.words,
                    a = e[0],
                    n = e[1],
                    s = e[2],
                    o = e[3],
                    c = e[4],
                    l = e[5],
                    u = e[6],
                    f = e[7],
                    _ = 0;
                  _ < 64;
                  _++
                ) {
                  if (_ < 16) h[_] = 0 | r[t + _];
                  else {
                    var v = h[_ - 15],
                      d =
                        ((v << 25) | (v >>> 7)) ^
                        ((v << 14) | (v >>> 18)) ^
                        (v >>> 3),
                      H = h[_ - 2],
                      g =
                        ((H << 15) | (H >>> 17)) ^
                        ((H << 13) | (H >>> 19)) ^
                        (H >>> 10);
                    h[_] = d + h[_ - 7] + g + h[_ - 16];
                  }
                  var p = (a & n) ^ (a & s) ^ (n & s),
                    w =
                      ((a << 30) | (a >>> 2)) ^
                      ((a << 19) | (a >>> 13)) ^
                      ((a << 10) | (a >>> 22)),
                    y =
                      f +
                      (((c << 26) | (c >>> 6)) ^
                        ((c << 21) | (c >>> 11)) ^
                        ((c << 7) | (c >>> 25))) +
                      ((c & l) ^ (~c & u)) +
                      i[_] +
                      h[_];
                  (f = u),
                    (u = l),
                    (l = c),
                    (c = (o + y) | 0),
                    (o = s),
                    (s = n),
                    (n = a),
                    (a = (y + (w + p)) | 0);
                }
                (e[0] = (e[0] + a) | 0),
                  (e[1] = (e[1] + n) | 0),
                  (e[2] = (e[2] + s) | 0),
                  (e[3] = (e[3] + o) | 0),
                  (e[4] = (e[4] + c) | 0),
                  (e[5] = (e[5] + l) | 0),
                  (e[6] = (e[6] + u) | 0),
                  (e[7] = (e[7] + f) | 0);
              },
              _doFinalize: function () {
                var t = this._data,
                  e = t.words,
                  a = 8 * this._nDataBytes,
                  n = 8 * t.sigBytes;
                return (
                  (e[n >>> 5] |= 128 << (24 - (n % 32))),
                  (e[14 + (((n + 64) >>> 9) << 4)] = r.floor(a / 4294967296)),
                  (e[15 + (((n + 64) >>> 9) << 4)] = a),
                  (t.sigBytes = 4 * e.length),
                  this._process(),
                  this._hash
                );
              },
              clone: function () {
                var r = n.clone.call(this);
                return (r._hash = this._hash.clone()), r;
              },
            }));
          (t.SHA256 = n._createHelper(c)),
            (t.HmacSHA256 = n._createHmacHelper(c));
        })(Math);
        try {
          if (
            typeof b["customer_hashed_phone_with_iso_country_code"] !=
              "undefined" &&
            b["customer_hashed_phone_with_iso_country_code"] != ""
          ) {
            b["customer_hashed_phone_with_iso_country_code"] = utag.ut.sha256
              .SHA256(b["customer_hashed_phone_with_iso_country_code"])
              .toString();
          }
        } catch (e) {}
      },
      function (a, b) {
        utag.ut.sha256 = (function (t, n) {
          var r;
          if (
            ("undefined" != typeof window &&
              window.crypto &&
              (r = window.crypto),
            !r &&
              "undefined" != typeof window &&
              window.msCrypto &&
              (r = window.msCrypto),
            !r &&
              "undefined" != typeof global &&
              global.crypto &&
              (r = global.crypto),
            !r && "function" == typeof require)
          )
            try {
              r = require("crypto");
            } catch (t) {}
          var e = function () {
              if (r) {
                if ("function" == typeof r.getRandomValues)
                  try {
                    return r.getRandomValues(new Uint32Array(1))[0];
                  } catch (t) {}
                if ("function" == typeof r.randomBytes)
                  try {
                    return r.randomBytes(4).readInt32LE();
                  } catch (t) {}
              }
              throw new Error(
                "Native crypto module could not be used to get secure random number."
              );
            },
            i =
              Object.create ||
              (function () {
                function t() {}
                return function (n) {
                  var r;
                  return (
                    (t.prototype = n), (r = new t()), (t.prototype = null), r
                  );
                };
              })(),
            o = {},
            s = (o.lib = {}),
            a = (s.Base = {
              extend: function (t) {
                var n = i(this);
                return (
                  t && n.mixIn(t),
                  (n.hasOwnProperty("init") && this.init !== n.init) ||
                    (n.init = function () {
                      n.$super.init.apply(this, arguments);
                    }),
                  (n.init.prototype = n),
                  (n.$super = this),
                  n
                );
              },
              create: function () {
                var t = this.extend();
                return t.init.apply(t, arguments), t;
              },
              init: function () {},
              mixIn: function (t) {
                for (var n in t) t.hasOwnProperty(n) && (this[n] = t[n]);
                t.hasOwnProperty("toString") && (this.toString = t.toString);
              },
              clone: function () {
                return this.init.prototype.extend(this);
              },
            }),
            c = (s.WordArray = a.extend({
              init: function (t, n) {
                (t = this.words = t || []),
                  (this.sigBytes = null != n ? n : 4 * t.length);
              },
              toString: function (t) {
                return (t || f).stringify(this);
              },
              concat: function (t) {
                var n = this.words,
                  r = t.words,
                  e = this.sigBytes,
                  i = t.sigBytes;
                if ((this.clamp(), e % 4))
                  for (var o = 0; o < i; o++) {
                    var s = (r[o >>> 2] >>> (24 - (o % 4) * 8)) & 255;
                    n[(e + o) >>> 2] |= s << (24 - ((e + o) % 4) * 8);
                  }
                else for (o = 0; o < i; o += 4) n[(e + o) >>> 2] = r[o >>> 2];
                return (this.sigBytes += i), this;
              },
              clamp: function () {
                var n = this.words,
                  r = this.sigBytes;
                (n[r >>> 2] &= 4294967295 << (32 - (r % 4) * 8)),
                  (n.length = t.ceil(r / 4));
              },
              clone: function () {
                var t = a.clone.call(this);
                return (t.words = this.words.slice(0)), t;
              },
              random: function (t) {
                for (var n = [], r = 0; r < t; r += 4) n.push(e());
                return new c.init(n, t);
              },
            })),
            u = (o.enc = {}),
            f = (u.Hex = {
              stringify: function (t) {
                for (
                  var n = t.words, r = t.sigBytes, e = [], i = 0;
                  i < r;
                  i++
                ) {
                  var o = (n[i >>> 2] >>> (24 - (i % 4) * 8)) & 255;
                  e.push((o >>> 4).toString(16)), e.push((15 & o).toString(16));
                }
                return e.join("");
              },
              parse: function (t) {
                for (var n = t.length, r = [], e = 0; e < n; e += 2)
                  r[e >>> 3] |=
                    parseInt(t.substr(e, 2), 16) << (24 - (e % 8) * 4);
                return new c.init(r, n / 2);
              },
            }),
            h = (u.Latin1 = {
              stringify: function (t) {
                for (
                  var n = t.words, r = t.sigBytes, e = [], i = 0;
                  i < r;
                  i++
                ) {
                  var o = (n[i >>> 2] >>> (24 - (i % 4) * 8)) & 255;
                  e.push(String.fromCharCode(o));
                }
                return e.join("");
              },
              parse: function (t) {
                for (var n = t.length, r = [], e = 0; e < n; e++)
                  r[e >>> 2] |= (255 & t.charCodeAt(e)) << (24 - (e % 4) * 8);
                return new c.init(r, n);
              },
            }),
            d = (u.Utf8 = {
              stringify: function (t) {
                try {
                  return decodeURIComponent(escape(h.stringify(t)));
                } catch (t) {
                  throw new Error("Malformed UTF-8 data");
                }
              },
              parse: function (t) {
                return h.parse(unescape(encodeURIComponent(t)));
              },
            }),
            l = (s.BufferedBlockAlgorithm = a.extend({
              reset: function () {
                (this._data = new c.init()), (this._nDataBytes = 0);
              },
              _append: function (t) {
                "string" == typeof t && (t = d.parse(t)),
                  this._data.concat(t),
                  (this._nDataBytes += t.sigBytes);
              },
              _process: function (n) {
                var r,
                  e = this._data,
                  i = e.words,
                  o = e.sigBytes,
                  s = this.blockSize,
                  a = o / (4 * s),
                  u =
                    (a = n
                      ? t.ceil(a)
                      : t.max((0 | a) - this._minBufferSize, 0)) * s,
                  f = t.min(4 * u, o);
                if (u) {
                  for (var h = 0; h < u; h += s) this._doProcessBlock(i, h);
                  (r = i.splice(0, u)), (e.sigBytes -= f);
                }
                return new c.init(r, f);
              },
              clone: function () {
                var t = a.clone.call(this);
                return (t._data = this._data.clone()), t;
              },
              _minBufferSize: 0,
            })),
            p =
              ((s.Hasher = l.extend({
                cfg: a.extend(),
                init: function (t) {
                  (this.cfg = this.cfg.extend(t)), this.reset();
                },
                reset: function () {
                  l.reset.call(this), this._doReset();
                },
                update: function (t) {
                  return this._append(t), this._process(), this;
                },
                finalize: function (t) {
                  return t && this._append(t), this._doFinalize();
                },
                blockSize: 16,
                _createHelper: function (t) {
                  return function (n, r) {
                    return new t.init(r).finalize(n);
                  };
                },
                _createHmacHelper: function (t) {
                  return function (n, r) {
                    return new p.HMAC.init(t, r).finalize(n);
                  };
                },
              })),
              (o.algo = {}));
          return o;
        })(Math);
        !(function (r) {
          var t = utag.ut.sha256,
            e = t.lib,
            a = e.WordArray,
            n = e.Hasher,
            s = t.algo,
            o = [],
            i = [];
          !(function () {
            function t(t) {
              for (var e = r.sqrt(t), a = 2; a <= e; a++)
                if (!(t % a)) return !1;
              return !0;
            }
            function e(r) {
              return (4294967296 * (r - (0 | r))) | 0;
            }
            for (var a = 2, n = 0; n < 64; )
              t(a) &&
                (n < 8 && (o[n] = e(r.pow(a, 0.5))),
                (i[n] = e(r.pow(a, 1 / 3))),
                n++),
                a++;
          })();
          var h = [],
            c = (s.SHA256 = n.extend({
              _doReset: function () {
                this._hash = new a.init(o.slice(0));
              },
              _doProcessBlock: function (r, t) {
                for (
                  var e = this._hash.words,
                    a = e[0],
                    n = e[1],
                    s = e[2],
                    o = e[3],
                    c = e[4],
                    l = e[5],
                    u = e[6],
                    f = e[7],
                    _ = 0;
                  _ < 64;
                  _++
                ) {
                  if (_ < 16) h[_] = 0 | r[t + _];
                  else {
                    var v = h[_ - 15],
                      d =
                        ((v << 25) | (v >>> 7)) ^
                        ((v << 14) | (v >>> 18)) ^
                        (v >>> 3),
                      H = h[_ - 2],
                      g =
                        ((H << 15) | (H >>> 17)) ^
                        ((H << 13) | (H >>> 19)) ^
                        (H >>> 10);
                    h[_] = d + h[_ - 7] + g + h[_ - 16];
                  }
                  var p = (a & n) ^ (a & s) ^ (n & s),
                    w =
                      ((a << 30) | (a >>> 2)) ^
                      ((a << 19) | (a >>> 13)) ^
                      ((a << 10) | (a >>> 22)),
                    y =
                      f +
                      (((c << 26) | (c >>> 6)) ^
                        ((c << 21) | (c >>> 11)) ^
                        ((c << 7) | (c >>> 25))) +
                      ((c & l) ^ (~c & u)) +
                      i[_] +
                      h[_];
                  (f = u),
                    (u = l),
                    (l = c),
                    (c = (o + y) | 0),
                    (o = s),
                    (s = n),
                    (n = a),
                    (a = (y + (w + p)) | 0);
                }
                (e[0] = (e[0] + a) | 0),
                  (e[1] = (e[1] + n) | 0),
                  (e[2] = (e[2] + s) | 0),
                  (e[3] = (e[3] + o) | 0),
                  (e[4] = (e[4] + c) | 0),
                  (e[5] = (e[5] + l) | 0),
                  (e[6] = (e[6] + u) | 0),
                  (e[7] = (e[7] + f) | 0);
              },
              _doFinalize: function () {
                var t = this._data,
                  e = t.words,
                  a = 8 * this._nDataBytes,
                  n = 8 * t.sigBytes;
                return (
                  (e[n >>> 5] |= 128 << (24 - (n % 32))),
                  (e[14 + (((n + 64) >>> 9) << 4)] = r.floor(a / 4294967296)),
                  (e[15 + (((n + 64) >>> 9) << 4)] = a),
                  (t.sigBytes = 4 * e.length),
                  this._process(),
                  this._hash
                );
              },
              clone: function () {
                var r = n.clone.call(this);
                return (r._hash = this._hash.clone()), r;
              },
            }));
          (t.SHA256 = n._createHelper(c)),
            (t.HmacSHA256 = n._createHmacHelper(c));
        })(Math);
        try {
          if (
            typeof b["customer_hashed_phone_with_iso_country_code_plus_sign"] !=
              "undefined" &&
            b["customer_hashed_phone_with_iso_country_code_plus_sign"] != ""
          ) {
            b["customer_hashed_phone_with_iso_country_code_plus_sign"] =
              utag.ut.sha256
                .SHA256(
                  b["customer_hashed_phone_with_iso_country_code_plus_sign"]
                )
                .toString();
          }
        } catch (e) {}
      },
      function (a, b) {
        try {
          if (
            typeof b["customer_first_name"] != "undefined" &&
            typeof b["customer_last_name"] != "undefined"
          ) {
            b["customer_hashed_first_name"] = b["customer_first_name"];
            b["customer_hashed_last_name"] = b["customer_last_name"];
          }
        } catch (e) {
          utag.DB(e);
        }
      },
      function (a, b) {
        utag.ut.sha256 = (function (t, n) {
          var r;
          if (
            ("undefined" != typeof window &&
              window.crypto &&
              (r = window.crypto),
            !r &&
              "undefined" != typeof window &&
              window.msCrypto &&
              (r = window.msCrypto),
            !r &&
              "undefined" != typeof global &&
              global.crypto &&
              (r = global.crypto),
            !r && "function" == typeof require)
          )
            try {
              r = require("crypto");
            } catch (t) {}
          var e = function () {
              if (r) {
                if ("function" == typeof r.getRandomValues)
                  try {
                    return r.getRandomValues(new Uint32Array(1))[0];
                  } catch (t) {}
                if ("function" == typeof r.randomBytes)
                  try {
                    return r.randomBytes(4).readInt32LE();
                  } catch (t) {}
              }
              throw new Error(
                "Native crypto module could not be used to get secure random number."
              );
            },
            i =
              Object.create ||
              (function () {
                function t() {}
                return function (n) {
                  var r;
                  return (
                    (t.prototype = n), (r = new t()), (t.prototype = null), r
                  );
                };
              })(),
            o = {},
            s = (o.lib = {}),
            a = (s.Base = {
              extend: function (t) {
                var n = i(this);
                return (
                  t && n.mixIn(t),
                  (n.hasOwnProperty("init") && this.init !== n.init) ||
                    (n.init = function () {
                      n.$super.init.apply(this, arguments);
                    }),
                  (n.init.prototype = n),
                  (n.$super = this),
                  n
                );
              },
              create: function () {
                var t = this.extend();
                return t.init.apply(t, arguments), t;
              },
              init: function () {},
              mixIn: function (t) {
                for (var n in t) t.hasOwnProperty(n) && (this[n] = t[n]);
                t.hasOwnProperty("toString") && (this.toString = t.toString);
              },
              clone: function () {
                return this.init.prototype.extend(this);
              },
            }),
            c = (s.WordArray = a.extend({
              init: function (t, n) {
                (t = this.words = t || []),
                  (this.sigBytes = null != n ? n : 4 * t.length);
              },
              toString: function (t) {
                return (t || f).stringify(this);
              },
              concat: function (t) {
                var n = this.words,
                  r = t.words,
                  e = this.sigBytes,
                  i = t.sigBytes;
                if ((this.clamp(), e % 4))
                  for (var o = 0; o < i; o++) {
                    var s = (r[o >>> 2] >>> (24 - (o % 4) * 8)) & 255;
                    n[(e + o) >>> 2] |= s << (24 - ((e + o) % 4) * 8);
                  }
                else for (o = 0; o < i; o += 4) n[(e + o) >>> 2] = r[o >>> 2];
                return (this.sigBytes += i), this;
              },
              clamp: function () {
                var n = this.words,
                  r = this.sigBytes;
                (n[r >>> 2] &= 4294967295 << (32 - (r % 4) * 8)),
                  (n.length = t.ceil(r / 4));
              },
              clone: function () {
                var t = a.clone.call(this);
                return (t.words = this.words.slice(0)), t;
              },
              random: function (t) {
                for (var n = [], r = 0; r < t; r += 4) n.push(e());
                return new c.init(n, t);
              },
            })),
            u = (o.enc = {}),
            f = (u.Hex = {
              stringify: function (t) {
                for (
                  var n = t.words, r = t.sigBytes, e = [], i = 0;
                  i < r;
                  i++
                ) {
                  var o = (n[i >>> 2] >>> (24 - (i % 4) * 8)) & 255;
                  e.push((o >>> 4).toString(16)), e.push((15 & o).toString(16));
                }
                return e.join("");
              },
              parse: function (t) {
                for (var n = t.length, r = [], e = 0; e < n; e += 2)
                  r[e >>> 3] |=
                    parseInt(t.substr(e, 2), 16) << (24 - (e % 8) * 4);
                return new c.init(r, n / 2);
              },
            }),
            h = (u.Latin1 = {
              stringify: function (t) {
                for (
                  var n = t.words, r = t.sigBytes, e = [], i = 0;
                  i < r;
                  i++
                ) {
                  var o = (n[i >>> 2] >>> (24 - (i % 4) * 8)) & 255;
                  e.push(String.fromCharCode(o));
                }
                return e.join("");
              },
              parse: function (t) {
                for (var n = t.length, r = [], e = 0; e < n; e++)
                  r[e >>> 2] |= (255 & t.charCodeAt(e)) << (24 - (e % 4) * 8);
                return new c.init(r, n);
              },
            }),
            d = (u.Utf8 = {
              stringify: function (t) {
                try {
                  return decodeURIComponent(escape(h.stringify(t)));
                } catch (t) {
                  throw new Error("Malformed UTF-8 data");
                }
              },
              parse: function (t) {
                return h.parse(unescape(encodeURIComponent(t)));
              },
            }),
            l = (s.BufferedBlockAlgorithm = a.extend({
              reset: function () {
                (this._data = new c.init()), (this._nDataBytes = 0);
              },
              _append: function (t) {
                "string" == typeof t && (t = d.parse(t)),
                  this._data.concat(t),
                  (this._nDataBytes += t.sigBytes);
              },
              _process: function (n) {
                var r,
                  e = this._data,
                  i = e.words,
                  o = e.sigBytes,
                  s = this.blockSize,
                  a = o / (4 * s),
                  u =
                    (a = n
                      ? t.ceil(a)
                      : t.max((0 | a) - this._minBufferSize, 0)) * s,
                  f = t.min(4 * u, o);
                if (u) {
                  for (var h = 0; h < u; h += s) this._doProcessBlock(i, h);
                  (r = i.splice(0, u)), (e.sigBytes -= f);
                }
                return new c.init(r, f);
              },
              clone: function () {
                var t = a.clone.call(this);
                return (t._data = this._data.clone()), t;
              },
              _minBufferSize: 0,
            })),
            p =
              ((s.Hasher = l.extend({
                cfg: a.extend(),
                init: function (t) {
                  (this.cfg = this.cfg.extend(t)), this.reset();
                },
                reset: function () {
                  l.reset.call(this), this._doReset();
                },
                update: function (t) {
                  return this._append(t), this._process(), this;
                },
                finalize: function (t) {
                  return t && this._append(t), this._doFinalize();
                },
                blockSize: 16,
                _createHelper: function (t) {
                  return function (n, r) {
                    return new t.init(r).finalize(n);
                  };
                },
                _createHmacHelper: function (t) {
                  return function (n, r) {
                    return new p.HMAC.init(t, r).finalize(n);
                  };
                },
              })),
              (o.algo = {}));
          return o;
        })(Math);
        !(function (r) {
          var t = utag.ut.sha256,
            e = t.lib,
            a = e.WordArray,
            n = e.Hasher,
            s = t.algo,
            o = [],
            i = [];
          !(function () {
            function t(t) {
              for (var e = r.sqrt(t), a = 2; a <= e; a++)
                if (!(t % a)) return !1;
              return !0;
            }
            function e(r) {
              return (4294967296 * (r - (0 | r))) | 0;
            }
            for (var a = 2, n = 0; n < 64; )
              t(a) &&
                (n < 8 && (o[n] = e(r.pow(a, 0.5))),
                (i[n] = e(r.pow(a, 1 / 3))),
                n++),
                a++;
          })();
          var h = [],
            c = (s.SHA256 = n.extend({
              _doReset: function () {
                this._hash = new a.init(o.slice(0));
              },
              _doProcessBlock: function (r, t) {
                for (
                  var e = this._hash.words,
                    a = e[0],
                    n = e[1],
                    s = e[2],
                    o = e[3],
                    c = e[4],
                    l = e[5],
                    u = e[6],
                    f = e[7],
                    _ = 0;
                  _ < 64;
                  _++
                ) {
                  if (_ < 16) h[_] = 0 | r[t + _];
                  else {
                    var v = h[_ - 15],
                      d =
                        ((v << 25) | (v >>> 7)) ^
                        ((v << 14) | (v >>> 18)) ^
                        (v >>> 3),
                      H = h[_ - 2],
                      g =
                        ((H << 15) | (H >>> 17)) ^
                        ((H << 13) | (H >>> 19)) ^
                        (H >>> 10);
                    h[_] = d + h[_ - 7] + g + h[_ - 16];
                  }
                  var p = (a & n) ^ (a & s) ^ (n & s),
                    w =
                      ((a << 30) | (a >>> 2)) ^
                      ((a << 19) | (a >>> 13)) ^
                      ((a << 10) | (a >>> 22)),
                    y =
                      f +
                      (((c << 26) | (c >>> 6)) ^
                        ((c << 21) | (c >>> 11)) ^
                        ((c << 7) | (c >>> 25))) +
                      ((c & l) ^ (~c & u)) +
                      i[_] +
                      h[_];
                  (f = u),
                    (u = l),
                    (l = c),
                    (c = (o + y) | 0),
                    (o = s),
                    (s = n),
                    (n = a),
                    (a = (y + (w + p)) | 0);
                }
                (e[0] = (e[0] + a) | 0),
                  (e[1] = (e[1] + n) | 0),
                  (e[2] = (e[2] + s) | 0),
                  (e[3] = (e[3] + o) | 0),
                  (e[4] = (e[4] + c) | 0),
                  (e[5] = (e[5] + l) | 0),
                  (e[6] = (e[6] + u) | 0),
                  (e[7] = (e[7] + f) | 0);
              },
              _doFinalize: function () {
                var t = this._data,
                  e = t.words,
                  a = 8 * this._nDataBytes,
                  n = 8 * t.sigBytes;
                return (
                  (e[n >>> 5] |= 128 << (24 - (n % 32))),
                  (e[14 + (((n + 64) >>> 9) << 4)] = r.floor(a / 4294967296)),
                  (e[15 + (((n + 64) >>> 9) << 4)] = a),
                  (t.sigBytes = 4 * e.length),
                  this._process(),
                  this._hash
                );
              },
              clone: function () {
                var r = n.clone.call(this);
                return (r._hash = this._hash.clone()), r;
              },
            }));
          (t.SHA256 = n._createHelper(c)),
            (t.HmacSHA256 = n._createHmacHelper(c));
        })(Math);
        try {
          if (
            typeof b["customer_hashed_first_name"] != "undefined" &&
            b["customer_hashed_first_name"] != ""
          ) {
            b["customer_hashed_first_name"] = utag.ut.sha256
              .SHA256(b["customer_hashed_first_name"])
              .toString();
          }
        } catch (e) {}
        try {
          if (
            typeof b["customer_hashed_last_name"] != "undefined" &&
            b["customer_hashed_last_name"] != ""
          ) {
            b["customer_hashed_last_name"] = utag.ut.sha256
              .SHA256(b["customer_hashed_last_name"])
              .toString();
          }
        } catch (e) {}
      },
      function (a, b) {
        try {
          if (
            typeof b["customer_hashed_email"] == "undefined" &&
            typeof b["customer_prehashed_email_sha256encrypt"] != "undefined"
          ) {
            b["customer_hashed_email"] =
              b["customer_prehashed_email_sha256encrypt"];
          }
        } catch (e) {
          utag.DB(e);
        }
      },
      function (a, b) {
        try {
          if (
            typeof b["customer_hashed_phone_with_iso_country_code"] ==
              "undefined" &&
            typeof b["customer_prehashed_phone_with_iso_country_code"] !=
              "undefined"
          ) {
            b["customer_hashed_phone_with_iso_country_code"] =
              b["customer_prehashed_phone_with_iso_country_code"];
          }
        } catch (e) {
          utag.DB(e);
        }
      },
      function (a, b) {
        try {
          if (
            typeof b["customer_hashed_phone_with_iso_country_code_plus_sign"] ==
              "undefined" &&
            typeof b[
              "customer_prehashed_phone_with_iso_country_code_plus_sign"
            ] != "undefined"
          ) {
            b["customer_hashed_phone_with_iso_country_code_plus_sign"] =
              b["customer_prehashed_phone_with_iso_country_code_plus_sign"];
          }
        } catch (e) {
          utag.DB(e);
        }
      },
      function (a, b) {
        try {
          if (b["dom.url"].toString().indexOf("/booking/") > -1) {
            if (
              window.location.pathname.indexOf("/booking/search.html") > -1 ||
              window.location.pathname.indexOf("/booking/rooms.html") > -1 ||
              window.location.pathname.indexOf("/booking/payment.html") > -1
            ) {
              if (b.order_id) {
                delete b.order_id;
              }
              if (b.hotel_order_id) {
                delete b.hotel_order_id;
              }
            }
            if (
              window.location.pathname.indexOf("/booking/confirmation.html") >
              -1
            ) {
              b.page_name = "booking_confirm";
            }
          }
        } catch (e) {
          utag.DB(e);
        }
      },
      function (a, b) {
        try {
          if (1) {
            var baseID, SRCID, SRLID;
            SRCID = utag.data.src_membership_id;
            SRLID = utag.data.srl_membership_id;
            if (SRCID) {
              baseID = parseInt(SRCID.toString());
            } else if (SRLID) {
              SRLID = parseInt(SRLID);
              baseID = SRLID - 100000000;
            }
            if (baseID) {
              utag_data = window.utag_data || {};
              utag_data.hm_baseID = baseID;
            }
          }
        } catch (e) {
          utag.DB(e);
        }
      },
      function (a, b, c, d, e, f, g) {
        if (1) {
          d = b["event_label"];
          if (typeof d == "undefined") return;
          c = [
            { "mailto:Lavo.Reservations": "LavoEmail" },
            { "mailto:wakughinreservation": "WakuGhinEmail" },
            { "mailto:club55": "Club55Email" },
            { "mailto:cutreservations": "CUTEmail" },
            { "mailto:BreadStreetKitchen.Reservations": "BSKEmail" },
            { "mailto:chine": "JTChineEmail" },
            { "mailto:dbreservations": "DBEmail" },
            { "mailto:just.in": "JustInEmail" },
            { "mailto:SpagoReservations": "SpagoEmail" },
            { "mailto:Renku.Lounge": "RenkuEmail" },
            { "mailto:Rise": "RISEEmail" },
            {
              "www.sevenrooms.com/reservations/lavosingaporembs":
                "LavoOnlineReservation",
            },
            {
              "www.sevenrooms.com/reservations/bskmbs": "BSKOnlineReservation",
            },
            {
              "www.sevenrooms.com/reservations/cutmbs": "CUTOnlineReservation",
            },
            {
              "www.sevenrooms.com/reservations/spagoloungembs":
                "SpagoTerraceOnlineReservation",
            },
            {
              "www.sevenrooms.com/reservations/spagodiningmbs":
                "SpagoDiningOnlineReservation",
            },
            {
              "www.sevenrooms.com/reservations/risembs":
                "RISEOnlineReservation",
            },
            {
              "www.sevenrooms.com/reservations/dbmbs":
                "DBBistroOnlineReservation",
            },
            {
              "www.sevenrooms.com/reservations/club55mbs":
                "Club55OnlineReservation",
            },
            {
              "www.sevenrooms.com/reservations/theyardbirdmbs":
                "TheYardBirdReservation",
            },
            { "mailto:SweetSpot@MarinaBaySands.com": "SweetspotEmail" },
            { "mailto:BlackTap@MarinaBaySands.com": "BlackTapEmail" },
            { "mailto:Mott32.reservations@marinabaysands.com": "Mott32Email " },
            {
              "cho.pe/dineatchinoiseriesg":
                "JustinChinoiserieOnlineReservation",
            },
            {
              "book.chope.co/booking?rid=justinflavoursofasia1901sg&source=rest_justinquek.com":
                "JustinFlavoursOnlineReservation",
            },
            {
              "WakuGhinReservation@MarinaBaySands.com":
                "WakuGhinOnlineReservation",
            },
            {
              "www.sevenrooms.com/reservations/blacktapmbs":
                "BlackTapOnlineReservation",
            },
            {
              "www.sevenrooms.com/reservations/komambs":
                "KomaOnlineReservation",
            },
            {
              "www.sevenrooms.com/reservations/mott32mbs":
                "Mott32OnlineReservation",
            },
          ];
          var m = false;
          for (e = 0; e < c.length; e++) {
            for (f in utag.loader.GV(c[e])) {
              if (d.toString().indexOf(f) > -1) {
                b["facebook_reservation"] = c[e][f];
                m = true;
              }
            }
            if (m) break;
          }
        }
      },
      function (a, b, c, d, e, f, g) {
        if (
          b["tealium_event"].toString().toLowerCase() ==
            "restaurants".toLowerCase() ||
          b["tealium_event"].toString().toLowerCase() ==
            "restaurant_booking_form".toLowerCase()
        ) {
          d = b["restaurant_name"];
          if (typeof d == "undefined") return;
          c = [
            { "CUT by Wolfgang Puck": "CUTOnlineReservation" },
            { "Spago Bar & Lounge": "SpagoTerraceOnlineReservation" },
            { "RISE Restaurant": "RISEOnlineReservation" },
            {
              "LAVO Italian Restaurant & Rooftop Bar": "LavoOnlineReservation",
            },
            { "Bread Street Kitchen by Gordon Ramsay": "BSKOnlineReservation" },
            {
              "db Bistro & Oyster Bar by Daniel Boulud":
                "DBBistroOnlineReservation",
            },
            { "Yardbird Southern Table & Bar": "TheYardBirdReservation" },
            { "Black Tap Craft Burgers & Beer": "BlackTapReservation" },
            { "KOMA Singapore": "KomaOnlineReservation" },
            { "Mott 32 Singapore": "Mott32OnlineReservation" },
            { "Wakuda Singapore": "WakudaOnlineReservation" },
            {
              "Spago Dining Room by Wolfgang Puck":
                "SpagoDiningOnlineReservation",
            },
          ];
          var m = false;
          for (e = 0; e < c.length; e++) {
            for (f in utag.loader.GV(c[e])) {
              if (d.toString().indexOf(f) > -1) {
                b["facebook_reservation"] = c[e][f];
                m = true;
              }
            }
            if (m) break;
          }
        }
      },
      function (a, b) {
        try {
          if (/^(undefined|null|0|false|NaN|)$/.test(b["currency"])) {
            b["currency"] = "SGD";
          }
        } catch (e) {
          utag.DB(e);
        }
      },
      function (a, b) {
        try {
          if (
            (b["dom.url"]
              .toString()
              .toLowerCase()
              .indexOf("booking/confirmation.html".toLowerCase()) > -1 &&
              b["tealium_event"].toString().toLowerCase() ==
                "hotel_booking_confirmation".toLowerCase() &&
              typeof b["hotel_order_id"] != "undefined" &&
              b["hotel_order_id"] != "" &&
              b["ut.event"].toString().toLowerCase() == "view".toLowerCase()) ||
            (b["dom.url"]
              .toString()
              .toLowerCase()
              .indexOf("BookingConfirmation".toLowerCase()) > -1 &&
              b["tealium_event"].toString().toLowerCase() ==
                "hotel_booking_confirmation".toLowerCase() &&
              typeof b["hotel_order_id"] != "undefined" &&
              b["hotel_order_id"] != "" &&
              b["ut.event"].toString().toLowerCase() == "view".toLowerCase())
          ) {
            if (b["tealium_event"] == "hotel_booking_confirmation") {
              window.hotelRoomCount = 0;
            }
            var i = window.hotelRoomCount;
            while (i < parseInt(utag.data["num_of_rooms"])) {
              utag.data["hotel_booking_individual_" + i] = {};
              if (utag.data["avg_room_rate"]) {
                utag.data["hotel_booking_individual_" + i]["avg_room_rate"] = [
                  utag.data["avg_room_rate"][i],
                ];
              }
              if (utag.data["bed_type"]) {
                utag.data["hotel_booking_individual_" + i]["bed_type"] =
                  utag.data["bed_type"][i];
              }
              if (utag.data["check_in_date"]) {
                utag.data["hotel_booking_individual_" + i]["check_in_date"] =
                  utag.data["check_in_date"];
              }
              if (utag.data["check_in_day"]) {
                utag.data["hotel_booking_individual_" + i]["check_in_day"] =
                  utag.data["check_in_day"];
              }
              if (utag.data["check_out_date"]) {
                utag.data["hotel_booking_individual_" + i]["check_out_date"] =
                  utag.data["check_out_date"];
              }
              if (utag.data["check_out_day"]) {
                utag.data["hotel_booking_individual_" + i]["check_out_day"] =
                  utag.data["check_out_day"];
              }
              if (utag.data["currency"]) {
                utag.data["hotel_booking_individual_" + i]["currency"] =
                  utag.data["currency"];
              }
              if (utag.data["customer_country_of_residence"]) {
                utag.data["hotel_booking_individual_" + i][
                  "customer_country_of_residence"
                ] = utag.data["customer_country_of_residence"];
              }
              if (utag.data["customer_email"]) {
                utag.data["hotel_booking_individual_" + i]["customer_email"] =
                  utag.data["customer_email"];
              }
              if (utag.data["customer_first_name"]) {
                utag.data["hotel_booking_individual_" + i][
                  "customer_first_name"
                ] = utag.data["customer_first_name"];
              }
              if (utag.data["customer_last_name"]) {
                utag.data["hotel_booking_individual_" + i][
                  "customer_last_name"
                ] = utag.data["customer_last_name"];
              }
              if (utag.data["customer_phone"]) {
                utag.data["hotel_booking_individual_" + i]["customer_phone"] =
                  utag.data["customer_phone"];
              }
              if (utag.data["customer_phone_country_code"]) {
                utag.data["hotel_booking_individual_" + i][
                  "customer_phone_country_code"
                ] = utag.data["customer_phone_country_code"];
              }
              if (utag.data["days_till_check_in"]) {
                utag.data["hotel_booking_individual_" + i][
                  "days_till_check_in"
                ] = utag.data["days_till_check_in"];
              }
              if (utag.data["foreign_avg_room_rate"]) {
                utag.data["hotel_booking_individual_" + i][
                  "foreign_avg_room_rate"
                ] = utag.data["foreign_avg_room_rate"][i];
              }
              if (utag.data["foreign_currency"]) {
                utag.data["hotel_booking_individual_" + i]["foreign_currency"] =
                  utag.data["foreign_currency"];
              }
              if (utag.data["hotel_arrival_time"]) {
                utag.data["hotel_booking_individual_" + i][
                  "hotel_arrival_time"
                ] = utag.data["hotel_arrival_time"][i];
              }
              if (utag.data["hotel_booking_steps"]) {
                utag.data["hotel_booking_individual_" + i][
                  "hotel_booking_steps"
                ] = utag.data["hotel_booking_steps"];
              }
              if (utag.data["hotel_booking_type"]) {
                utag.data["hotel_booking_individual_" + i][
                  "hotel_booking_type"
                ] = utag.data["hotel_booking_type"];
              }
              if (utag.data["hotel_cancellation_policy"]) {
                utag.data["hotel_booking_individual_" + i][
                  "hotel_cancellation_policy"
                ] = utag.data["hotel_cancellation_policy"][i];
              }
              if (utag.data["hotel_iata_code"]) {
                utag.data["hotel_booking_individual_" + i]["hotel_iata_code"] =
                  utag.data["hotel_iata_code"];
              }
              if (utag.data["hotel_occupancy_detail"]) {
                utag.data["hotel_booking_individual_" + i][
                  "hotel_occupancy_detail"
                ] = utag.data["hotel_occupancy_detail"][i];
              }
              if (utag.data["hotel_offer_code"]) {
                utag.data["hotel_booking_individual_" + i]["hotel_offer_code"] =
                  [utag.data["hotel_offer_code"]];
              }
              if (utag.data["hotel_offer_name"]) {
                utag.data["hotel_booking_individual_" + i]["hotel_offer_name"] =
                  utag.data["hotel_offer_name"];
              }
              if (utag.data["hotel_order_id"]) {
                utag.data["hotel_booking_individual_" + i][
                  "hotel_order_id_individual"
                ] = utag.data["hotel_order_id"][i];
              }
              if (utag.data["hotel_payment_currency"]) {
                utag.data["hotel_booking_individual_" + i][
                  "hotel_payment_currency"
                ] = utag.data["hotel_payment_currency"];
              }
              if (utag.data["hotel_payment_method"]) {
                utag.data["hotel_booking_individual_" + i][
                  "hotel_payment_method"
                ] = utag.data["hotel_payment_method"];
              }
              if (utag.data["hotel_payment_subtotal"]) {
                utag.data["hotel_booking_individual_" + i][
                  "hotel_payment_subtotal_individual"
                ] = utag.data["hotel_payment_subtotal"][i];
              }
              if (utag.data["hotel_payment_tax"]) {
                utag.data["hotel_booking_individual_" + i][
                  "hotel_payment_tax_individual"
                ] = utag.data["hotel_payment_tax"][i];
              }
              if (utag.data["hotel_payment_total"]) {
                utag.data["hotel_booking_individual_" + i][
                  "hotel_payment_total_individual"
                ] = utag.data["hotel_payment_total"][i];
              }
              if (utag.data["hotel_subtotal"]) {
                utag.data["hotel_booking_individual_" + i][
                  "hotel_subtotal_individual"
                ] = utag.data["hotel_subtotal"][i];
              }
              if (utag.data["hotel_tax"]) {
                utag.data["hotel_booking_individual_" + i][
                  "hotel_tax_individual"
                ] = utag.data["hotel_tax"][i];
              }
              if (utag.data["hotel_total"]) {
                utag.data["hotel_booking_individual_" + i][
                  "hotel_total_individual"
                ] = utag.data["hotel_total"][i];
              }
              if (utag.data["hotel_total_occupancy"]) {
                utag.data["hotel_booking_individual_" + i][
                  "hotel_total_occupancy"
                ] = utag.data["hotel_total_occupancy"];
              }
              if (utag.data["hotel_travel_agency"]) {
                utag.data["hotel_booking_individual_" + i][
                  "hotel_travel_agency"
                ] = utag.data["hotel_travel_agency"];
              }
              if (utag.data["language_code"]) {
                utag.data["hotel_booking_individual_" + i]["language_code"] =
                  utag.data["language_code"];
              }
              if (utag.data["marketing_opt_in"]) {
                utag.data["hotel_booking_individual_" + i]["marketing_opt_in"] =
                  utag.data["marketing_opt_in"];
              }
              if (utag.data["member_city"]) {
                utag.data["hotel_booking_individual_" + i]["member_city"] =
                  utag.data["member_city"];
              }
              if (utag.data["member_country"]) {
                utag.data["hotel_booking_individual_" + i]["member_country"] =
                  utag.data["member_country"];
              }
              if (utag.data["member_email"]) {
                utag.data["hotel_booking_individual_" + i]["member_email"] =
                  utag.data["member_email"];
              }
              if (utag.data["member_first_name"]) {
                utag.data["hotel_booking_individual_" + i][
                  "member_first_name"
                ] = utag.data["member_first_name"];
              }
              if (utag.data["member_last_name"]) {
                utag.data["hotel_booking_individual_" + i]["member_last_name"] =
                  utag.data["member_last_name"];
              }
              if (utag.data["member_phone"]) {
                utag.data["hotel_booking_individual_" + i]["member_phone"] =
                  utag.data["member_phone"];
              }
              if (utag.data["member_tier"]) {
                utag.data["hotel_booking_individual_" + i]["member_tier"] =
                  utag.data["member_tier"];
              }
              if (utag.data["srl_membership_id "]) {
                utag.data["hotel_booking_individual_" + i][
                  "srl_membership_id "
                ] = utag.data["srl_membership_id "];
              }
              if (utag.data["src_membership_id"]) {
                utag.data["hotel_booking_individual_" + i][
                  "src_membership_id"
                ] = utag.data["src_membership_id"];
              }
              if (utag.data["num_of_adults"]) {
                utag.data["hotel_booking_individual_" + i]["num_of_adults"] =
                  utag.data["num_of_adults"][i];
              }
              if (utag.data["num_of_children"]) {
                utag.data["hotel_booking_individual_" + i]["num_of_children"] =
                  utag.data["num_of_children"][i];
              }
              if (utag.data["num_of_nights"]) {
                utag.data["hotel_booking_individual_" + i]["num_of_nights"] = [
                  utag.data["num_of_nights"][i],
                ];
              }
              if (utag.data["num_of_rooms"]) {
                utag.data["hotel_booking_individual_" + i]["num_of_rooms"] =
                  utag.data["num_of_rooms"];
              }
              if (utag.data["occasion_preference"]) {
                utag.data["hotel_booking_individual_" + i][
                  "occasion_preference"
                ] = utag.data["occasion_preference"][i];
              }
              if (utag.data["page_category"]) {
                utag.data["hotel_booking_individual_" + i]["page_category"] =
                  utag.data["page_category"];
              }
              if (utag.data["page_name"]) {
                utag.data["hotel_booking_individual_" + i]["page_name"] =
                  utag.data["page_name"];
              }
              if (utag.data["page_sub_category"]) {
                utag.data["hotel_booking_individual_" + i][
                  "page_sub_category"
                ] = utag.data["page_sub_category"];
              }
              if (utag.data["product_category"]) {
                utag.data["hotel_booking_individual_" + i]["product_category"] =
                  [utag.data["product_category"]];
              }
              if (utag.data["room_code"]) {
                utag.data["hotel_booking_individual_" + i]["room_code"] =
                  utag.data["room_code"][i];
              }
              if (utag.data["room_preference"]) {
                utag.data["hotel_booking_individual_" + i]["room_preference"] =
                  utag.data["room_preference"][i];
              }
              if (utag.data["room_sub_type"]) {
                utag.data["hotel_booking_individual_" + i]["room_sub_type"] =
                  utag.data["room_sub_type"][i];
              }
              if (utag.data["room_type"]) {
                utag.data["hotel_booking_individual_" + i]["room_type"] = [
                  utag.data["room_type"][i],
                ];
              }
              if (utag.data["room_view_type"]) {
                utag.data["hotel_booking_individual_" + i]["room_view_type"] =
                  utag.data["room_view_type"][i];
              }
              if (utag.data["salutation"]) {
                utag.data["hotel_booking_individual_" + i]["salutation"] =
                  utag.data["salutation"];
              }
              if (utag.data["site_section"]) {
                utag.data["hotel_booking_individual_" + i]["site_section"] =
                  utag.data["site_section"];
              }
              if (utag.data["tealium_event"]) {
                utag.data["hotel_booking_individual_" + i]["tealium_event"] =
                  "hotel_booking_individual_confirmation";
              }
              utag.data["hotel_booking_individual_" + i]["event_category"] =
                "hotel_booking";
              utag.data["hotel_booking_individual_" + i]["event_action"] =
                "confirmed";
              utag.link(utag.data["hotel_booking_individual_" + i]);
              window.hotelRoomCount++;
              i++;
            }
          }
        } catch (e) {
          utag.DB(e);
        }
      },
      function (a, b) {
        try {
          if (
            (typeof b["order_id"] != "undefined" &&
              b["order_id"] != "" &&
              b["ut.event"].toString().toLowerCase() == "view".toLowerCase() &&
              b["dom.url"]
                .toString()
                .toLowerCase()
                .indexOf("reserve.marinabaysands.com".toLowerCase()) < 0) ||
            (b["dom.pathname"]
              .toString()
              .toLowerCase()
              .indexOf("confirmation".toLowerCase()) > -1 &&
              b["ut.event"].toString().toLowerCase() == "view".toLowerCase() &&
              b["dom.url"]
                .toString()
                .toLowerCase()
                .indexOf("reserve.marinabaysands.com".toLowerCase()) < 0) ||
            (typeof b["order_id"] != "undefined" &&
              b["order_id"] != "" &&
              b["ut.event"].toString().toLowerCase() == "view".toLowerCase() &&
              b["dom.url"]
                .toString()
                .toLowerCase()
                .indexOf("marinabaysands.com/booking/".toLowerCase()) < 0) ||
            (b["dom.pathname"]
              .toString()
              .toLowerCase()
              .indexOf("confirmation".toLowerCase()) > -1 &&
              b["ut.event"].toString().toLowerCase() == "view".toLowerCase() &&
              b["dom.url"]
                .toString()
                .toLowerCase()
                .indexOf("marinabaysands.com/booking/".toLowerCase()) < 0)
          ) {
            var arrayCount = 1;
            var toName = "";
            var moreProducts = true;
            var bookingMethod =
              window.bookingMethods[getCookie("bookingMethod")];
            do {
              toName = "trackingObject" + arrayCount;
              if (window[toName] && window[toName]["orderId"]) {
                var o = window[toName],
                  numNights = 0,
                  unitPrice = o.unitPrice;
                try {
                  var t1 = o.arriveDate,
                    t2 = o.departDate,
                    date1 = new Date(t1).getTime(),
                    date2 = new Date(t2).getTime();
                  numNights = Math.round(
                    Math.abs(date2 - date1) / (1000 * 60 * 60 * 24)
                  );
                } catch (e) {}
                try {
                  var total = parseFloat(o.total),
                    tax = parseFloat(o.tax),
                    price = total - tax;
                  unitPrice = (price / numNights).toFixed(2);
                } catch (e) {}
                var roomRateRange = getRoomRateRange(parseFloat(unitPrice));
                utag.data["reservation_room_" + arrayCount] = {
                  reservation_order_affiliation: "Marina Bay Sands",
                  reservation_booking_method: [bookingMethod],
                  reservation_order_id:
                    window["trackingObject" + arrayCount]["orderId"] || "",
                  reservation_order_tax_amount:
                    window["trackingObject" + arrayCount]["tax"] || "",
                  reservation_order_total:
                    window["trackingObject" + arrayCount]["total"] || "",
                  reservation_room_category: ["Room Reservations"],
                  reservation_room_date_checkin: [
                    window["trackingObject" + arrayCount]["arriveDate"],
                  ] || [""],
                  reservation_room_date_checkout: [
                    window["trackingObject" + arrayCount]["departDate"],
                  ] || [""],
                  reservation_room_num_nights: [
                    window["trackingObject" + arrayCount]["quantity"],
                  ] || [""],
                  reservation_room_unit_price: [unitPrice] || [""],
                  reservation_room_rate_code: [
                    window["trackingObject" + arrayCount]["offerCode"],
                  ] || [""],
                  reservation_room_rate_range: [roomRateRange] || [""],
                  product_id: [
                    window["trackingObject" + arrayCount]["sku"],
                  ] || [""],
                  product_name: [
                    window["trackingObject" + arrayCount]["offerCode"],
                  ] || [""],
                  product_unit_price: [unitPrice] || [""],
                  dimension13: window["trackingObject" + arrayCount]["sku"] || [
                    "",
                  ],
                  metric7: [unitPrice] || [""],
                  booking_confirmations: 1,
                  event_category: "IBSBooking",
                  event_action: "Confirmed",
                };
                utag.DB(
                  "utag.link(" +
                    JSON.stringify(
                      utag.data["reservation_room_" + arrayCount]
                    ) +
                    ")"
                );
                if (
                  b["dom.pathname"]
                    .toString()
                    .toLowerCase()
                    .indexOf("mobile".toLowerCase()) > -1
                ) {
                  utag.data["reservation_room_" + arrayCount][
                    "ga_page_override"
                  ] = "/booking/Mobile/Confirmation";
                }
                utag.link(utag.data["reservation_room_" + arrayCount]);
                arrayCount++;
              } else {
                moreProducts = false;
              }
            } while (moreProducts);
          }
        } catch (e) {
          utag.DB(e);
        }
      },
    ];
    utag.handler.cfg_extend = [
      { id: "390", end: 0, alr: 0, bwq: 0, blr: 1 },
      { bwq: 0, alr: 0, id: "397", end: 0, blr: 1 },
      { id: "142", end: 0, bwq: 0, alr: 0, blr: 1 },
      { id: "87", end: 0, alr: 0, bwq: 0, blr: 1 },
      { blr: 1, bwq: 0, alr: 0, end: 0, id: "86" },
      { blr: 1, end: 0, id: "93", alr: 0, bwq: 0 },
      { id: "139", end: 0, alr: 0, bwq: 0, blr: 1 },
      { blr: 1, alr: 0, bwq: 0, end: 0, id: "140" },
      { id: "88", end: 0, alr: 0, bwq: 0, blr: 1 },
      { blr: 1, end: 0, id: "94", bwq: 0, alr: 0 },
      { bwq: 0, alr: 0, id: "147", end: 0, blr: 1 },
      { blr: 1, alr: 0, bwq: 0, end: 0, id: "148" },
      { alr: 0, bwq: 0, id: "269", end: 0, blr: 1 },
      { id: "299", end: 0, bwq: 0, alr: 0, blr: 1 },
      { blr: 1, bwq: 0, alr: 0, end: 0, id: "307" },
      { id: "314", end: 0, bwq: 0, alr: 0, blr: 1 },
      { blr: 1, end: 0, id: "387", bwq: 0, alr: 0 },
      { bwq: 0, alr: 0, id: "392", end: 0, blr: 1 },
      { blr: 1, end: 0, id: "413", alr: 0, bwq: 0 },
      { blr: 1, end: 0, id: "456", alr: 0, bwq: 0 },
      { blr: 1, end: 0, id: "479", bwq: 0, alr: 0 },
      { blr: 1, end: 0, id: "482", bwq: 0, alr: 0 },
      { id: "485", end: 0, alr: 0, bwq: 0, blr: 1 },
      { blr: 1, alr: 0, bwq: 0, end: 0, id: "501" },
      { blr: 1, end: 0, id: "548", bwq: 0, alr: 0 },
      { alr: 0, bwq: 0, id: "315", end: 0, blr: 1 },
      { blr: 0, end: 0, id: "555", alr: 1, bwq: 0 },
      { bwq: 0, alr: 1, id: "329", end: 0, blr: 0 },
      { blr: 0, bwq: 0, alr: 1, end: 0, id: "424" },
      { blr: 0, end: 0, id: "434", alr: 1, bwq: 0 },
      { alr: 1, bwq: 0, id: "489", end: 0, blr: 0 },
      { id: "152", end: 0, alr: 1, bwq: 0, blr: 0 },
      { blr: 0, alr: 1, bwq: 0, end: 0, id: "246" },
      { blr: 0, end: 0, id: "247", alr: 1, bwq: 0 },
      { id: "268", end: 0, bwq: 0, alr: 1, blr: 0 },
      { alr: 1, bwq: 0, id: "376", end: 0, blr: 0 },
      { id: "395", end: 0, bwq: 0, alr: 1, blr: 0 },
      { alr: 1, bwq: 0, id: "411", end: 0, blr: 0 },
      { id: "480", end: 0, alr: 1, bwq: 0, blr: 0 },
      { blr: 0, end: 0, id: "427", alr: 1, bwq: 0 },
      { blr: 0, bwq: 0, alr: 1, end: 0, id: "432" },
      { alr: 1, bwq: 0, id: "406", end: 0, blr: 0 },
      { id: "448", end: 0, alr: 1, bwq: 0, blr: 0 },
      { bwq: 0, alr: 1, id: "449", end: 0, blr: 0 },
      { blr: 0, bwq: 0, alr: 1, end: 0, id: "436" },
      { id: "493", end: 0, bwq: 0, alr: 1, blr: 0 },
      { blr: 0, end: 0, id: "494", bwq: 0, alr: 1 },
      { blr: 0, alr: 1, bwq: 0, end: 0, id: "442" },
      { id: "435", end: 0, alr: 1, bwq: 0, blr: 0 },
      { bwq: 0, alr: 1, id: "495", end: 0, blr: 0 },
      { blr: 0, end: 0, id: "496", alr: 1, bwq: 0 },
      { blr: 0, end: 0, id: "437", bwq: 0, alr: 1 },
      { alr: 1, bwq: 0, id: "438", end: 0, blr: 0 },
      { blr: 0, bwq: 0, alr: 1, end: 0, id: "463" },
      { blr: 0, end: 0, id: "497", alr: 1, bwq: 0 },
      { blr: 0, bwq: 0, alr: 1, end: 0, id: "498" },
      { blr: 0, end: 0, id: "504", bwq: 0, alr: 1 },
      { blr: 0, alr: 1, bwq: 0, end: 0, id: "526" },
      { blr: 0, end: 0, id: "145", bwq: 0, alr: 1 },
      { alr: 1, bwq: 0, id: "556", end: 0, blr: 0 },
      { blr: 0, bwq: 0, alr: 1, end: 0, id: "546" },
      { alr: 0, bwq: 0, id: "451", end: 1, blr: 0 },
      { blr: 0, end: 1, id: "144", alr: 0, bwq: 0 },
    ];
    utag.loader.initcfg = function () {
      utag.loader.cfg = {
        531: { load: 4, send: 1, v: 202107300909, wait: 0, tid: 20010 },
        545: { load: 4, send: 1, v: 202204190407, wait: 0, tid: 6037 },
        553: {
          load: utag.cond[61] || utag.cond[51],
          send: 1,
          v: 202207080638,
          wait: 0,
          tid: 6037,
        },
        587: {
          load: utag.cond[260] || utag.cond[261],
          send: 1,
          v: 202204220533,
          wait: 0,
          tid: 6037,
        },
        369: { load: 4, send: 1, v: 202206130340, wait: 1, tid: 4045 },
        35: {
          load: utag.cond[228],
          send: 1,
          v: 202110281142,
          wait: 1,
          tid: 20064,
        },
        485: {
          load: utag.cond[227],
          send: 1,
          v: 202203110641,
          wait: 1,
          tid: 20064,
        },
        357: {
          load: utag.cond[173],
          send: 1,
          v: 201907100755,
          wait: 1,
          tid: 7132,
        },
        356: {
          load: utag.cond[135] && utag.cond[75],
          send: 1,
          v: 201907300912,
          wait: 1,
          tid: 7132,
        },
        55: {
          load: 4,
          send: utag.cond[54],
          v: 202205100609,
          wait: 1,
          tid: 7110,
        },
        185: {
          load: 4,
          send: utag.cond[54],
          v: 202205100609,
          wait: 1,
          tid: 7110,
        },
        32: { load: 4, send: 1, v: 202205100609, wait: 1, tid: 7110 },
        184: { load: 4, send: 1, v: 202207131120, wait: 1, tid: 7110 },
        188: {
          load: utag.cond[97],
          send: 1,
          v: 202207131120,
          wait: 1,
          tid: 7110,
        },
        186: {
          load: utag.cond[95],
          send: 1,
          v: 202110281142,
          wait: 1,
          tid: 7110,
        },
        187: {
          load: utag.cond[96],
          send: 1,
          v: 202103290743,
          wait: 1,
          tid: 7110,
        },
        262: {
          load: 4,
          send: utag.cond[131],
          v: 202110260337,
          wait: 1,
          tid: 7127,
        },
        8: {
          load: 4,
          send: utag.cond[64],
          v: 202201201053,
          wait: 1,
          tid: 4001,
        },
        69: {
          load: 4,
          send: utag.cond[65],
          v: 202201201408,
          wait: 1,
          tid: 4001,
        },
        98: {
          load: utag.cond[135] && utag.cond[75],
          send: 1,
          v: 202012181403,
          wait: 1,
          tid: 4001,
        },
        191: {
          load: utag.cond[98],
          send: 1,
          v: 202106280439,
          wait: 1,
          tid: 4001,
        },
        219: {
          load: utag.cond[132],
          send: 1,
          v: 202004290134,
          wait: 1,
          tid: 4001,
        },
        36: {
          load: utag.cond[231],
          send: 1,
          v: 202109240528,
          wait: 1,
          tid: 20067,
        },
        72: {
          load: utag.cond[47],
          send: 1,
          v: 201801040242,
          wait: 1,
          tid: 14022,
        },
        154: {
          load: utag.cond[51] || utag.cond[216],
          send: 1,
          v: 202009160820,
          wait: 1,
          tid: 19050,
        },
        130: {
          load: utag.cond[61],
          send: 1,
          v: 201907100755,
          wait: 1,
          tid: 7132,
        },
        139: {
          load: 4,
          send: utag.cond[106],
          v: 202008310846,
          wait: 1,
          tid: 2044,
        },
        260: {
          load: utag.cond[127],
          send: 1,
          v: 201810031012,
          wait: 1,
          tid: 7110,
        },
        261: {
          load: utag.cond[128],
          send: 1,
          v: 202110281142,
          wait: 1,
          tid: 7110,
        },
        314: {
          load: utag.cond[210] && utag.cond[156],
          send: 1,
          v: 202102091030,
          wait: 1,
          tid: 4001,
        },
        448: {
          load: utag.cond[207],
          send: 1,
          v: 202105040412,
          wait: 1,
          tid: 4049,
        },
        338: {
          load: utag.cond[168],
          send: 1,
          v: 202001070901,
          wait: 1,
          tid: 7110,
        },
        347: { load: 4, send: 1, v: 202205240800, wait: 1, tid: 4049 },
        362: { load: 4, send: 1, v: 202110140749, wait: 1, tid: 20067 },
        363: {
          load: 4,
          send: utag.cond[178],
          v: 202101251833,
          wait: 1,
          tid: 7110,
        },
        366: { load: 4, send: 1, v: 201908281251, wait: 1, tid: 12047 },
        374: {
          load: utag.cond[182],
          send: 1,
          v: 201910170349,
          wait: 1,
          tid: 7110,
        },
        376: {
          load: 4,
          send: utag.cond[184] && utag.cond[252],
          v: 202202160855,
          wait: 1,
          tid: 4049,
        },
        382: { load: 4, send: 1, v: 201912101722, wait: 1, tid: 20010 },
        392: {
          load: 4,
          send: utag.cond[188],
          v: 202001130232,
          wait: 1,
          tid: 7110,
        },
        396: {
          load: utag.cond[61],
          send: 1,
          v: 202110140749,
          wait: 1,
          tid: 25019,
        },
        425: { load: 4, send: 1, v: 202110140749, wait: 1, tid: 25019 },
        410: { load: 4, send: 1, v: 202004240855, wait: 1, tid: 20010 },
        411: {
          load: 4,
          send: utag.cond[194],
          v: 202004240855,
          wait: 1,
          tid: 20010,
        },
        412: {
          load: 4,
          send: utag.cond[109],
          v: 202004240855,
          wait: 1,
          tid: 20010,
        },
        413: {
          load: utag.cond[181],
          send: 1,
          v: 202004240855,
          wait: 1,
          tid: 20010,
        },
        414: {
          load: utag.cond[132],
          send: 1,
          v: 202004240855,
          wait: 1,
          tid: 20010,
        },
        415: {
          load: 4,
          send: utag.cond[97] || utag.cond[195] || utag.cond[178],
          v: 202004240855,
          wait: 1,
          tid: 20010,
        },
        421: {
          load: 4,
          send: utag.cond[97] || utag.cond[109] || utag.cond[178],
          v: 202102030620,
          wait: 1,
          tid: 20010,
        },
        422: {
          load: utag.cond[132] || utag.cond[194] || utag.cond[181],
          send: 1,
          v: 202004240855,
          wait: 1,
          tid: 20010,
        },
        423: {
          load: 4,
          send: utag.cond[202],
          v: 202004240855,
          wait: 1,
          tid: 20010,
        },
        424: {
          load: 4,
          send: utag.cond[202],
          v: 202004240855,
          wait: 1,
          tid: 20010,
        },
        449: {
          load: utag.cond[209],
          send: 1,
          v: 202110140749,
          wait: 1,
          tid: 20067,
        },
        450: {
          load: 4,
          send: utag.cond[184],
          v: 202008310846,
          wait: 1,
          tid: 20010,
        },
        488: {
          load: utag.cond[220] && utag.cond[219],
          send: 1,
          v: 202110140749,
          wait: 1,
          tid: 20067,
        },
        491: {
          load: utag.cond[221],
          send: 1,
          v: 202010211030,
          wait: 1,
          tid: 4001,
        },
        495: {
          load: utag.cond[222],
          send: 1,
          v: 202011251529,
          wait: 1,
          tid: 4001,
        },
        500: {
          load: utag.cond[61],
          send: 1,
          v: 202204190735,
          wait: 1,
          tid: 7132,
        },
        504: {
          load: utag.cond[226],
          send: 1,
          v: 202202031211,
          wait: 1,
          tid: 20099,
        },
        507: {
          load: 4,
          send: utag.cond[66],
          v: 202101280818,
          wait: 1,
          tid: 20010,
        },
        508: {
          load: utag.cond[214],
          send: 1,
          v: 202206200643,
          wait: 1,
          tid: 7110,
        },
        509: { load: 4, send: 1, v: 202102251537, wait: 1, tid: 7132 },
        516: {
          load: utag.cond[235],
          send: 1,
          v: 202205110615,
          wait: 1,
          tid: 7110,
        },
        530: { load: 4, send: 1, v: 202207131120, wait: 1, tid: 7142 },
        533: {
          load: utag.cond[236],
          send: 1,
          v: 202107220910,
          wait: 1,
          tid: 7132,
        },
        534: {
          load: utag.cond[238],
          send: 1,
          v: 202107220910,
          wait: 1,
          tid: 7132,
        },
        537: {
          load: 4,
          send: utag.cond[239],
          v: 202108160740,
          wait: 1,
          tid: 4001,
        },
        540: {
          load: utag.cond[240],
          send: 1,
          v: 202108161253,
          wait: 1,
          tid: 4001,
        },
        542: {
          load: utag.cond[132],
          send: 1,
          v: 202204190749,
          wait: 1,
          tid: 6037,
        },
        550: { load: 4, send: 1, v: 202207131120, wait: 1, tid: 7110 },
        554: {
          load: utag.cond[243],
          send: 1,
          v: 202110061251,
          wait: 1,
          tid: 7132,
        },
        562: {
          load: 4,
          send: utag.cond[227],
          v: 202111150742,
          wait: 1,
          tid: 12047,
        },
        569: { load: 4, send: 1, v: 202207210623, wait: 1, tid: 6037 },
        576: {
          load: utag.cond[253],
          send: 1,
          v: 202203071229,
          wait: 1,
          tid: 7110,
        },
        577: {
          load: utag.cond[254],
          send: 1,
          v: 202203071229,
          wait: 1,
          tid: 7110,
        },
        614: {
          load: utag.cond[61],
          send: 1,
          v: 202207050804,
          wait: 1,
          tid: 7132,
        },
        615: {
          load: utag.cond[51] || utag.cond[19],
          send: 1,
          v: 202207050743,
          wait: 1,
          tid: 4049,
        },
      };
      utag.loader.cfgsort = [
        "531",
        "545",
        "553",
        "587",
        "369",
        "35",
        "485",
        "357",
        "356",
        "55",
        "185",
        "32",
        "184",
        "188",
        "186",
        "187",
        "262",
        "8",
        "69",
        "98",
        "191",
        "219",
        "36",
        "72",
        "154",
        "130",
        "139",
        "260",
        "261",
        "314",
        "448",
        "338",
        "347",
        "362",
        "363",
        "366",
        "374",
        "376",
        "382",
        "392",
        "396",
        "425",
        "410",
        "411",
        "412",
        "413",
        "414",
        "415",
        "421",
        "422",
        "423",
        "424",
        "449",
        "450",
        "488",
        "491",
        "495",
        "500",
        "504",
        "507",
        "508",
        "509",
        "516",
        "530",
        "533",
        "534",
        "537",
        "540",
        "542",
        "550",
        "554",
        "562",
        "569",
        "576",
        "577",
        "614",
        "615",
      ];
    };
    utag.loader.initcfg();
  };
  if (typeof utag_cfg_ovrd != "undefined") {
    for (utag._i in utag.loader.GV(utag_cfg_ovrd))
      utag.cfg[utag._i] = utag_cfg_ovrd[utag._i];
  }
  utag.loader.PINIT = function (a, b, c) {
    utag.DB("Pre-INIT");
    if (utag.cfg.noload) {
      return;
    }
    try {
      this.GET();
      if (utag.handler.RE("view", utag.data, "blr")) {
        utag.handler.LR(utag.data);
      }
    } catch (e) {
      utag.DB(e);
    }
    a = this.cfg;
    c = 0;
    for (b in this.GV(a)) {
      if (
        a[b].block == 1 ||
        (a[b].load > 0 && typeof a[b].src != "undefined" && a[b].src != "")
      ) {
        a[b].block = 1;
        c = 1;
        this.bq[b] = 1;
      }
    }
    if (c == 1) {
      for (b in this.GV(a)) {
        if (a[b].block) {
          a[b].id = b;
          if (a[b].load == 4) a[b].load = 1;
          a[b].cb = function () {
            var d = this.uid;
            utag.loader.cfg[d].cbf = 1;
            utag.loader.LOAD(d);
          };
          this.AS(a[b]);
        }
      }
    }
    if (c == 0) this.INIT();
  };
  utag.loader.INIT = function (a, b, c, d, e) {
    utag.DB("utag.loader.INIT");
    if (this.ol == 1) return -1;
    else this.ol = 1;
    if (utag.cfg.noview != true) utag.handler.RE("view", utag.data, "alr");
    utag.rpt.ts["i"] = new Date();
    d = this.cfgsort;
    for (a = 0; a < d.length; a++) {
      e = d[a];
      b = this.cfg[e];
      b.id = e;
      if (b.block != 1) {
        if (
          utag.loader.bk[b.id] ||
          ((utag.cfg.readywait || utag.cfg.noview) && b.load == 4)
        ) {
          this.f[b.id] = 0;
          utag.loader.LOAD(b.id);
        } else if (b.wait == 1 && utag.loader.rf == 0) {
          utag.DB("utag.loader.INIT: waiting " + b.id);
          this.wq.push(b);
          this.f[b.id] = 2;
        } else if (b.load > 0) {
          utag.DB("utag.loader.INIT: loading " + b.id);
          this.lq.push(b);
          this.AS(b);
        }
      }
    }
    if (this.wq.length > 0)
      utag.loader.EV("", "ready", function (a) {
        if (utag.loader.rf == 0) {
          utag.DB("READY:utag.loader.wq");
          utag.loader.rf = 1;
          utag.loader.WQ();
        }
      });
    else if (this.lq.length > 0) utag.loader.rf = 1;
    else if (this.lq.length == 0) utag.loader.END();
    return 1;
  };
  utag.loader.EV("", "ready", function (a) {
    if (utag.loader.efr != 1) {
      utag.loader.efr = 1;
      try {
        try {
          if (1) {
            var piiCheck = function (context, currentElemClass, currentElemID) {
              var pagePathVal = window.location.search;
              var piiRegex = [
                {
                  name: "EMAIL",
                  regex:
                    /([a-zA-Z0-9_\-\.]+)@([a-zA-Z0-9_\-\.]+)\.([a-zA-Z]{2,5})/g,
                },
                ,
                {
                  name: "MOBILE1",
                  regex:
                    /^(?:(?:\+?1\s*(?:[.-]\s*)?)?(?:\(\s*([2-9]1[02-9]|[2-9][02-8]1|[2-9][02-8][02-9])\s*\)|([2-9]1[02-9]|[2-9][02-8]1|[2-9][02-8][02-9]))\s*(?:[.-]\s*)?)?([2-9]1[02-9]|[2-9][02-9]1|[2-9][02-9]{2})\s*(?:[.-]\s*)?([0-9]{4})(?:\s*(?:#|x\.?|ext\.?|extension)\s*(\d+))?$/,
                },
                { name: "MOBILE2", regex: /\+65[ ]?(\d{4})?[ ]?(\d{4})/g },
                { name: "NRIC", regex: /^[STFG]\d{7}[A-Z]$/ },
                {
                  name: "CreditCard",
                  regex:
                    /^3[47][0-9]{13}$|^(6541|6556)[0-9]{12}$|^389[0-9]{11}$|^3(?:0[0-5]|[68][0-9])[0-9]{11}$|^65[4-9][0-9]{13}|64[4-9][0-9]{13}|6011[0-9]{12}|(622(?:12[6-9]|1[3-9][0-9]|[2-8][0-9][0-9]|9[01][0-9]|92[0-5])[0-9]{10})$|^63[7-9][0-9]{13}$|^(?:2131|1800|35\d{3})\d{11}$|^9[0-9]{15}$|^(6304|6706|6709|6771)[0-9]{12,15}$|^(5018|5020|5038|6304|6759|6761|6763)[0-9]{8,15}$|^5[1-5][0-9]{14}$|^(6334|6767)[0-9]{12}|(6334|6767)[0-9]{14}|(6334|6767)[0-9]{15}$|^(4903|4905|4911|4936|6333|6759)[0-9]{12}|(4903|4905|4911|4936|6333|6759)[0-9]{14}|(4903|4905|4911|4936|6333|6759)[0-9]{15}|564182[0-9]{10}|564182[0-9]{12}|564182[0-9]{13}|633110[0-9]{10}|633110[0-9]{12}|633110[0-9]{13}$|^(62[0-9]{14,17})$|^4[0-9]{12}(?:[0-9]{3})?$|^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14})$/,
                },
              ];
              piiRegex.forEach(function (pii) {
                pagePathVal = pagePathVal.replace(
                  pii.regex,
                  "[REDACTED PII" + pii.name + "]"
                );
              });
              if (pagePathVal) {
                pagePathVal = pagePathVal.replace("?", "");
              } else {
                pagePathVal = undefined;
              }
              return pagePathVal;
            };
            var finalQueryVal = piiCheck();
            var searchQuery = window.location.href.replace(
              document.location.origin,
              ""
            );
            var utmParams = [
              "utm_source",
              "utm_medium",
              "utm_campaign",
              "utm_term",
              "utm_content",
              "dclid",
              "gclid",
            ];
            function getParameterByName(name, url = window.location.href) {
              name = name.replace(/[\[\]]/g, "\\$&");
              var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),
                results = regex.exec(url);
              if (!results) return null;
              if (!results[2]) return "";
              return decodeURIComponent(results[2].replace(/\+/g, " "));
            }
            var newQuery = "";
            for (var i = 0; i < utmParams.length; i++) {
              var checkVal = getParameterByName(utmParams[i]);
              if (checkVal) {
                newQuery = newQuery + "&" + utmParams[i] + "=" + checkVal;
              }
            }
            var finalURL;
            if (newQuery) {
              var searchQuery = window.location.href.replace(
                document.location.origin,
                ""
              );
              finalURL = window.location.href.replace(
                searchQuery.split("?")[1],
                newQuery
              );
            } else {
              finalURL = window.location.href.split("?")[0];
            }
            utag_data = window.utag_data || {};
            utag_data.hm_finalURL = finalURL;
            utag_data.hm_finalQuery = finalQueryVal;
            utag.link(utag_data, null, [459, 508, 516]);
          }
        } catch (e) {
          utag.DB(e);
        }
      } catch (e) {
        utag.DB(e);
      }
      try {
        try {
          if (
            utag.data["domain_pathname"]
              .toString()
              .indexOf("restaurants/waku-ghin") > -1
          ) {
            (function () {
              try {
                $('.sidebar-section a[href*="mailto:"]').click(function () {
                  utag_data = window.utag_data || {};
                  utag_data.event_category = "EmailUs";
                  utag_data.event_action = "Waku Ghin:" + window.location.href;
                  utag_data.event_label = $(this)
                    .attr("href")
                    .replace("mailto:", "");
                  utag_data.tealium_event = "WakuGhin_email_click";
                  utag.link(utag_data);
                });
              } catch (catch_main) {
                console.warn(catch_main);
              }
              $("a").click(function () {
                if (
                  $(this).parents(".sidebar-section").length > 0 &&
                  $(this).attr("href").indexOf("tel:") > -1
                ) {
                  utag_data = window.utag_data || {};
                  utag_data.event_category = "WakuGhinPhoneLink";
                  utag_data.event_action = "WakuGhinContactPhone";
                  utag_data.event_label = $(this)
                    .attr("href")
                    .replace("tel:", "");
                  utag_data.tealium_event = "WakuGhin_phone_click";
                  utag.link(utag_data);
                }
              });
            })();
          }
        } catch (e) {
          utag.DB(e);
        }
      } catch (e) {
        utag.DB(e);
      }
      try {
        try {
          if (
            utag.data["domain_pathname"]
              .toString()
              .indexOf("marinabaysands.com/booking/rooms") > -1
          ) {
            (function () {
              try {
                $(document).on(
                  "click",
                  ".rooms_list .pricePanel .btn.mbs_button_primary",
                  function () {
                    utag_data = window.utag_data || {};
                    utag_data.event_category = "SelectRoomButtonClick";
                    utag_data.event_action = "SelectRoom";
                    utag_data.event_label = $.trim($(this).text());
                    utag.link(utag_data);
                  }
                );
              } catch (catch_main) {
                console.warn(catch_main);
              }
            })();
          }
        } catch (e) {
          utag.DB(e);
        }
      } catch (e) {
        utag.DB(e);
      }
      try {
        try {
          if (
            utag.data["domain_pathname"]
              .toString()
              .indexOf("marinabaysands.com/restaurants/") > -1
          ) {
            (function () {
              try {
                $('.sidebar-section a[href*="mailto:"]').click(function () {
                  utag_data = window.utag_data || {};
                  utag_data.event_category = "EmailUs";
                  utag_data.event_action = "Restaurant:" + window.location.href;
                  utag_data.event_label = $(this)
                    .attr("href")
                    .replace("mailto:", "");
                  utag_data.tealium_event = "restaurant_email_click";
                  utag.link(utag_data);
                });
              } catch (catch_main) {
                console.warn(catch_main);
              }
              $("a").click(function () {
                if (
                  $(this).parents(".sidebar-section").length > 0 &&
                  $(this).attr("href").indexOf("tel:") > -1
                ) {
                  utag_data = window.utag_data || {};
                  utag_data.event_category = "PhoneLink";
                  utag_data.event_action = "ContactPhone";
                  utag_data.event_label = $(this)
                    .attr("href")
                    .replace("tel:", "");
                  utag_data.tealium_event = "restaurant_phone_click";
                  utag.link(utag_data);
                }
              });
            })();
          }
        } catch (e) {
          utag.DB(e);
        }
      } catch (e) {
        utag.DB(e);
      }
      try {
        try {
          if (
            utag.data["domain_pathname"]
              .toString()
              .indexOf(
                "marinabaysands.com/hotel/amenities/banyan-tree-spa.html"
              ) > -1
          ) {
            $(window).on("load", function () {
              try {
                $(".fullpage-slider-content")
                  .find("img")
                  .click(function () {
                    var data = {
                      event_category: "ImageGallery",
                      event_action: "Thumbnail",
                      event_label: $(this).attr("src"),
                      tealium_event: "internal_link_click",
                    };
                    utag.link(data);
                  });
              } catch (catch_main) {
                console.warn(catch_main);
              }
              try {
                $(".features")
                  .find(".fullpage-slider-image")
                  .find("img")
                  .click(function () {
                    var data = {
                      event_category: "ImageGallery",
                      event_action: "View",
                      event_label: $(this).attr("src"),
                      tealium_event: "internal_link_click",
                    };
                    utag.link(data);
                  });
              } catch (catch_main) {
                console.warn(catch_main);
              }
            })();
          }
        } catch (e) {
          utag.DB(e);
        }
      } catch (e) {
        utag.DB(e);
      }
      try {
        try {
          if (
            utag.data["domain_pathname"]
              .toString()
              .indexOf(
                "marinabaysands.com/deals/restaurants/gourmet-takeaway"
              ) > -1
          ) {
            $(".btn-secondary").click(function () {
              utag_data = window.utag_data || {};
              utag_data.event_category = "Button";
              utag_data.event_action =
                $(this).text() + ":" + window.location.href;
              utag_data.event_label = $(this).attr("href");
              utag_data.tealium_event = "external_link_click";
              utag.link(utag_data);
            });
          }
        } catch (e) {
          utag.DB(e);
        }
      } catch (e) {
        utag.DB(e);
      }
      try {
        try {
          if (
            utag.data["dom.url"].toString().indexOf("marinabaysands.com") > -1
          ) {
            $(function () {
              var MBSRevamp = MBSRevamp || {};
              MBSRevamp.debug = false;
              MBSRevamp.Tagging = new (function () {
                var _this = this;
                this.CATEGORY = {
                  Button: "Button",
                  TextLink: "TextLink",
                  ImageGallery: "ImageGallery",
                  ImageLink: "ImageLink",
                  OnPageInteraction: "OnPageInteraction",
                  MainNav: "MainNav",
                  Footer: "Footer",
                  FileDownload: "FileDownload",
                  OutLink: "OutLink",
                  Video: "Video",
                  Hotspot: "Hotspot",
                };
                this.ACTION = {
                  getCurrentURL: function () {
                    return _this.getCleanCurrentURL();
                  },
                  getLinkName: function (elem) {
                    return _this.getLinkName(elem);
                  },
                };
                this.utagView = function (data) {
                  if (typeof utag !== "undefined") {
                    utag.view(data);
                  }
                };
                this.utagLink = function (data) {
                  if (
                    typeof utag !== "undefined" &&
                    typeof utag["link"] == "function"
                  ) {
                    utag.link(data);
                  }
                };
                this.getCurrentURL = function () {
                  return window.location.href;
                };
                this.getCleanCurrentURL = function () {
                  var windowLocationHref = window.location.href;
                  if (typeof windowLocationHref === "string") {
                    if (windowLocationHref.indexOf("#") > 0) {
                      windowLocationHref = windowLocationHref.split("#")[0];
                    }
                    if (windowLocationHref.indexOf("?") > 0) {
                      windowLocationHref = windowLocationHref.split("?")[0];
                    }
                  }
                  return windowLocationHref;
                };
                this.f_td_getLanguage = function () {
                  return $('meta[name="lang-cd"]').attr("content");
                };
                this.f_td_getCurrencyCode = function () {
                  var _this = this;
                  var code;
                  switch (_this.f_td_getLanguage()) {
                    case "en":
                      code = "SGD";
                      break;
                    case "zh-CN":
                      code = "CNY";
                      break;
                    case "zh-HK":
                      code = "TWD";
                      break;
                    case "ja":
                      code = "JPY";
                      break;
                    case "ko":
                      code = "KRW";
                      break;
                  }
                  return code;
                };
                this.getDesUrl = function (dom) {
                  var container = dom.parents(".time-design-container");
                  var hostname = "https://ovs.tour-list.com/Package/";
                  var GoDepPoint = container
                    .find(".td-origin .origin-select-rendered span")
                    .attr("data-code");
                  var GoArrPoint = "SIN";
                  var GoDepDate = moment(
                    container.find(".td-departing-date input").attr("data-date")
                  ).format("YYYY/MM/DD");
                  var RtnDepDate = moment(
                    container.find(".td-returning-date input").attr("data-date")
                  ).format("YYYY/MM/DD");
                  var CheckInDate = moment(
                    container.find(".td-check-in input").attr("data-date")
                  ).format("YYYY/MM/DD");
                  var CheckOutDate = moment(
                    container.find(".td-check-out input").attr("data-date")
                  ).format("YYYY/MM/DD");
                  var CabinClass = container
                    .find(".td-cabin-class select")
                    .val();
                  var Adult = container.find(".td-adults select").val();
                  var Children = "";
                  if (container.find(".td-children-age-clone").length > 0) {
                    container.find(".td-children-age-clone").each(function () {
                      Children += "&Children=" + $(this).find("select").val();
                    });
                  }
                  var Language =
                    this.f_td_getLanguage() == "zh-HK"
                      ? "zh-tw"
                      : this.f_td_getLanguage().toLowerCase();
                  var CurrencyCode = this.f_td_getCurrencyCode();
                  var HotelCode = "mbsands";
                  var url =
                    hostname +
                    "?GoDepPoint=" +
                    GoDepPoint +
                    "&GoArrPoint=" +
                    GoArrPoint +
                    "&GoDepDate=" +
                    GoDepDate +
                    "&RtnDepDate=" +
                    RtnDepDate +
                    "&CheckInDate=" +
                    CheckInDate +
                    "&CheckOutDate=" +
                    CheckOutDate +
                    "&CabinClass=" +
                    CabinClass +
                    "&Adult=" +
                    Adult +
                    Children +
                    "&Language=" +
                    Language +
                    "&CurrencyCode=" +
                    CurrencyCode +
                    "&HotelCode=" +
                    HotelCode;
                  return url;
                };
              })();
              function Tagging(MT) {
                var ACTION = MT.ACTION;
                var CATEGORY = MT.CATEGORY;
                var select_origin = "";
                $(".time-design-airport .airport-result-options").on(
                  "click",
                  ".airport-result-option",
                  function () {
                    select_origin = $(this).text().split("(")[0];
                  }
                );
                $(".time-design-container .td-search-btn").click(function () {
                  var container = $(this).parents(".time-design-container");
                  var canSend = true;
                  var checkindate = moment(
                    container.find(".td-check-in input").attr("data-date")
                  ).format("DD/MM/YYYY");
                  var checkoutdate = moment(
                    container.find(".td-check-out input").attr("data-date")
                  ).format("DD/MM/YYYY");
                  var nights = moment(
                    container.find(".td-check-out input").attr("data-date")
                  ).diff(
                    moment(
                      container.find(".td-check-in input").attr("data-date")
                    ),
                    "days"
                  );
                  var data = {
                    event_category: CATEGORY.Button,
                    event_action: $(this).text() + ":" + ACTION.getCurrentURL(),
                    event_label: MT.getDesUrl($(this)),
                    cabin_class: container
                      .find(".td-cabin-class option:selected")
                      .text(),
                    check_in_date: checkindate,
                    check_out_date: checkoutdate,
                    departing_date: moment(
                      container
                        .find(".td-departing-date input")
                        .attr("data-date")
                    ).format("DD/MM/YYYY"),
                    returning_date: moment(
                      container
                        .find(".td-returning-date input")
                        .attr("data-date")
                    ).format("DD/MM/YYYY"),
                    flight_origin_destination: select_origin,
                    num_of_adults: [
                      parseInt(container.find(".td-adults select").val()),
                    ],
                    num_of_children: [
                      parseInt(container.find(".td-children select").val()),
                    ],
                    num_of_nights: [nights],
                    product_category: "Room Reservations - Hotel and Flight",
                    tealium_event: "hotel_flight_booking_widget_search",
                  };
                  container.find(".td-form-control").each(function () {
                    if ($(this).hasClass("form-error")) {
                      canSend = false;
                    }
                  });
                  if (canSend === true) {
                    MT.utagLink(data);
                  }
                });
              }
              Tagging(MBSRevamp.Tagging);
            });
          }
        } catch (e) {
          utag.DB(e);
        }
      } catch (e) {
        utag.DB(e);
      }
      try {
        try {
          if (
            utag.data["dom.url"].toString().indexOf("/reservation") > -1 &&
            utag.data["dom.url"].toString().indexOf(".marinabaysands.com") > -1
          ) {
            (function () {
              var MBSRevamp = MBSRevamp || {};
              MBSRevamp.debug = false;
              MBSRevamp.Tagging = new (function () {
                var _this = this;
                this.trackWhat = "GA";
                this.gaTracker = [
                  "mbscombined",
                  "mbsga",
                  "mbsoldua",
                  "mbsstaging",
                ];
                this.gaTracKDefault = true;
                this.CATEGORY = {
                  Button: "Button",
                  TextLink: "TextLink",
                  ImageGallery: "ImageGallery",
                  ImageLink: "ImageLink",
                  OnPageInteraction: "OnPageInteraction",
                  MainNav: "MainNav",
                  Footer: "Footer",
                  FileDownload: "FileDownload",
                  OutboundLink: "OutboundLink",
                  Video: "Video",
                  Hotspot: "Hotspot",
                };
                this.ACTION = {
                  getCurrentURL: function () {
                    return _this.getCleanCurrentURL();
                  },
                  getLinkName: function (elem) {
                    return _this.getLinkName(elem);
                  },
                  FindID: "FindID",
                  Verification: "Verification",
                  Lightbox: "Lightbox",
                  SRL: "SRL",
                  SRC: "SRC",
                  roomAPI: window.location.href,
                };
                if ($("[data-room-api]").length) {
                  $("[data-room-api]").each(function () {
                    _this.ACTION.roomAPI =
                      $(this).data("room-api") || _this.ACTION.roomAPI;
                  });
                }
                this.LABEL = {
                  getCurrentURL: function () {
                    return _this.getCleanCurrentURL();
                  },
                  getLinkName: function (elem) {
                    return _this.getLinkName(elem);
                  },
                  ToolTipDestinationDollars: "ToolTip:DestinationDollars",
                  DestinationDollarExpiry: "DestinationDollarExpiry",
                  FastTrack: "FastTrack",
                  FastTrackLearnMore: "FastTrackLearnMore",
                  SandsDollarsExpiry: "SandsDollarsExpiry",
                  ToolTipSandsBonusDollars: "ToolTip:SandsBonusDollars",
                  SandsBonusDollarsExpiry: "SandsBonusDollarsExpiry",
                  ToolTipTierPoints: "ToolTip:TierPoints",
                  ViewPrivileges: "ViewPrivileges",
                };
                this.pushToGA = function (category, action, label, value) {
                  if (!category && !action && !label && !value) {
                    return false;
                  }
                  if (!category || !action || !label) {
                    return false;
                  }
                  if (!category || !action || !label) {
                    return false;
                  }
                  var dataToPush = {
                    event: "GAEvent",
                    eventCategory: category,
                    eventAction: action,
                    eventLabel: label,
                    eventValue: value,
                  };
                  var message =
                    "GA Debug: " +
                    "\neventCategory: " +
                    category +
                    ", \neventAction: " +
                    action +
                    ", \neventLabel: " +
                    label +
                    ", \neventValue: " +
                    value;
                  if (MBSRevamp.debug === false) {
                    if (typeof ga !== "undefined") {
                      if (
                        typeof _this.gaTracker === "object" &&
                        _this.gaTracker.length > 0
                      ) {
                        for (var i = 0; i < _this.gaTracker.length; i++) {
                          ga(
                            _this.gaTracker[i] + ".send",
                            "event",
                            category,
                            action,
                            label
                          );
                        }
                        if (_this.gaTracKDefault === true) {
                          ga("send", "event", category, action, label);
                        }
                      } else {
                        ga(
                          _this.gaTracker + ".send",
                          "event",
                          category,
                          action,
                          label
                        );
                      }
                    } else if (typeof dataLayer !== "undefined") {
                      dataLayer.push(dataToPush);
                    }
                  }
                  if (window.console) {
                    console.log(message);
                  }
                };
                this.pleasePushToGA = function (data) {
                  var category, action, label, value;
                  if (Array.isArray(data)) {
                    var _data = data,
                      category = _data[0],
                      action = _data[1],
                      label = _data[2],
                      value = _data[3];
                  } else if (typeof data !== "undefined" && data != null) {
                    if (
                      typeof data["category"] !== "undefined" &&
                      data["category"] != null
                    ) {
                      category = data["category"];
                    }
                    if (
                      typeof data["action"] !== "undefined" &&
                      data["action"] != null
                    ) {
                      action = data["action"];
                    }
                    if (
                      typeof data["label"] !== "undefined" &&
                      data["label"] != null
                    ) {
                      label = data["label"];
                    }
                    if (
                      typeof data["value"] !== "undefined" &&
                      data["value"] != null
                    ) {
                      value = data["value"];
                    }
                  }
                  this.pushToGA(category, action, label, value);
                };
                this.pushToTealium = function (category, action, label, value) {
                  if (!category && !action && !label && !value) {
                    return false;
                  }
                  if (!category || !action || !label) {
                    return false;
                  }
                  if (!category || !action || !label) {
                    return false;
                  }
                  var dataToPush = {
                    event_category: category,
                    event_action: action,
                    event_label: label,
                    eventValue: value,
                  };
                  var message =
                    "Tealium Debug: " +
                    "\nevent_category: " +
                    category +
                    ", \nevent_action: " +
                    action +
                    ", \nevent_label: " +
                    label +
                    ", \neventValue: " +
                    value;
                  if (
                    typeof utag !== "undefined" &&
                    typeof utag["link"] == "function"
                  ) {
                    utag.link(dataToPush);
                  } else {
                  }
                  if (window.console) {
                    console.log(message);
                  }
                };
                this.pleasePushToTealium = function (data) {
                  var category, action, label, value;
                  if (Array.isArray(data)) {
                    var _data = data,
                      category = _data[0],
                      action = _data[1],
                      label = _data[2],
                      value = _data[3];
                  } else if (typeof data !== "undefined" && data != null) {
                    if (
                      typeof data["category"] !== "undefined" &&
                      data["category"] != null
                    ) {
                      category = data["category"];
                    }
                    if (
                      typeof data["action"] !== "undefined" &&
                      data["action"] != null
                    ) {
                      action = data["action"];
                    }
                    if (
                      typeof data["label"] !== "undefined" &&
                      data["label"] != null
                    ) {
                      label = data["label"];
                    }
                    if (
                      typeof data["value"] !== "undefined" &&
                      data["value"] != null
                    ) {
                      value = data["value"];
                    }
                  }
                  this.pushToTealium(category, action, label, value);
                };
                this.pleaseTrackThisData = function (data) {
                  switch (_this.trackWhat) {
                    case "tealium":
                      this.pleasePushToTealium(data);
                      break;
                    case "GA":
                      this.pleasePushToGA(data);
                      break;
                    default:
                      this.pleasePushToGA(data);
                      break;
                  }
                };
                this.getCurrentURL = function () {
                  return window.location.href;
                };
                this.getCleanCurrentURL = function () {
                  var windowLocationHref = window.location.href;
                  if (typeof windowLocationHref === "string") {
                    var cleanHref = "";
                    if (windowLocationHref.indexOf("#") > 0) {
                      windowLocationHref = windowLocationHref.split("#")[0];
                    }
                    if (windowLocationHref.indexOf("?") > 0) {
                      windowLocationHref = windowLocationHref.split("?")[0];
                    }
                  }
                  return windowLocationHref;
                };
                this.cleanTheURL = function (url) {
                  if (typeof url === "undefined") {
                    return;
                  }
                  if (typeof url === "string") {
                    if (url.indexOf("#") > 0) {
                      url = url.split("#")[0];
                    }
                    if (url.indexOf("?") > 0) {
                      url = url.split("?")[0];
                    }
                  }
                  return url;
                };
                this.getLinkName = function (elem) {
                  return $(elem).text().trim();
                };
                $.fn.getBtnNameAndDestUrl = function (destUrl) {
                  return $(this).text().trim() + ":" + destUrl;
                };
                $.fn.getDestinationUrl = function () {
                  return (
                    $(this).attr("href") ||
                    $(this).find("a").first().attr("href") ||
                    $(this).closest("a").attr("href") ||
                    ""
                  );
                };
                $.fn.getViewPrivilegesTierName = function () {
                  var cardTypeName = $(this)
                    .closest(".flipster__item__content")
                    .find(".cardType")
                    .text()
                    .trim();
                  return LABEL.ViewPrivileges + ":" + cardTypeName;
                };
                $.fn.getRoomFromCookie = function () {
                  var cookieValue = getCookie("selectedrooms");
                  if (cookieValue && cookieValue.length) {
                    var cookieRooms = JSON.parse(cookieValue);
                    if (Array.isArray(cookieRooms)) {
                      var cookieRoomObj = cookieRooms[0];
                      if (
                        cookieRoomObj.hasOwnProperty("roomNo") &&
                        cookieRoomObj.hasOwnProperty("adults") &&
                        cookieRoomObj.hasOwnProperty("childs") &&
                        cookieRoomObj.hasOwnProperty("childages")
                      ) {
                        return cookieRooms;
                      }
                    }
                  }
                  return [];
                };
                window.isDesktop =
                  window.isDesktop ||
                  function () {
                    return window.matchMedia("(min-width: 992px)").matches
                      ? true
                      : false;
                  };
              })();
              (function (MT) {
                var ACTION = MT.ACTION;
                var CATEGORY = MT.CATEGORY;
                var LABEL = MT.LABEL;
                if ($("#loyalty_login_container").length) {
                  function f_isSRLType(memberID) {
                    if (memberID.length < 9) {
                      return false;
                    } else if (memberID.length == 9 && memberID[0] == "0") {
                      return false;
                    } else {
                      return true;
                    }
                  }
                  function f_hasRestaurantName() {
                    var SRSearchInfo = JSON.parse(
                      sessionStorage.getItem("SRSearchInfo")
                    );
                    if (SRSearchInfo) {
                      return SRSearchInfo.restaurant_name;
                    } else {
                      return false;
                    }
                  }
                  $("#loyalty_login").click(function () {
                    var loyalty22042021_1 = setInterval(function () {
                      if (
                        $("#loyalty_login_membership_id").is(":visible") &&
                        !$("#loyalty_login").hasClass("tag_added")
                      ) {
                        var loyaltyInfo = JSON.parse(
                          sessionStorage.getItem("loyaltyloginData")
                        );
                        if (
                          typeof utag !== "undefined" &&
                          typeof utag["link"] == "function" &&
                          loyaltyInfo
                        ) {
                          var inputnum = $(
                            "#loyalty_login_membership_id"
                          ).text();
                          var srlNum = inputnum;
                          var srcNum = inputnum;
                          if (f_isSRLType(inputnum)) {
                            srcNum = "";
                          } else {
                            srlNum = "";
                          }
                          utag.link({
                            event_category: "Button",
                            event_action:
                              $("#loyalty_login>span").text() +
                              ":" +
                              location.href,
                            event_label: window.location.href,
                            page_name: (pageName = f_hasRestaurantName())
                              ? pageName
                              : utag_data.page_name,
                            site_section: utag_data.site_section,
                            srl_membership_id: srlNum,
                            src_membership_id: srcNum,
                            customer_email: loyaltyInfo.PrimaryEmail,
                            tealium_event: "user_login",
                          });
                        }
                        $("#loyalty_login").addClass("tag_added");
                        var tealiumTemp = loyaltyInfo;
                        sessionStorage.setItem(
                          "tealiumTemp",
                          JSON.stringify(tealiumTemp)
                        );
                      }
                    }, 1500);
                  });
                  $("#loyalty_sign_in").click(function () {
                    if (
                      typeof utag !== "undefined" &&
                      typeof utag["link"] == "function"
                    ) {
                      utag.link({
                        event_category: "Button",
                        event_action: $(this).text() + ":" + location.href,
                        event_label: window.location.href,
                        page_name: (pageName = f_hasRestaurantName())
                          ? pageName
                          : utag_data.page_name,
                        site_section: utag_data.site_section,
                        tealium_event: "user_register_click",
                      });
                      var loyalty22042021_3 = setInterval(function () {
                        if (
                          $("#loyalty_sign_up").length &&
                          !$("#loyalty_sign_up").hasClass("added")
                        ) {
                          $("#loyalty_sign_up").click(function () {
                            var loyalty22042021_2 = setInterval(function () {
                              var loyaltyInfo = JSON.parse(
                                sessionStorage.getItem("loyaltyloginData")
                              );
                              if (
                                $("#loyalty_sign_up_have_acount button>a")
                                  .length &&
                                !$(
                                  "#loyalty_sign_up_have_acount button>a"
                                ).hasClass("added")
                              ) {
                                $(
                                  "#loyalty_sign_up_have_acount button>a"
                                ).click(function () {
                                  if (
                                    typeof utag !== "undefined" &&
                                    typeof utag["link"] == "function"
                                  ) {
                                    utag.link({
                                      event_category: "Button",
                                      event_action:
                                        $(this).text() + ":" + location.href,
                                      event_label: window.location.href,
                                      page_name: (pageName =
                                        f_hasRestaurantName())
                                        ? pageName
                                        : utag_data.page_name,
                                      site_section: utag_data.site_section,
                                      tealium_event: "reset_pin_click",
                                    });
                                  }
                                });
                                $(
                                  "#loyalty_sign_up_have_acount button>a"
                                ).addClass("added");
                              }
                              if (
                                $("#loyalty_create_an_count").length &&
                                !$("#loyalty_create_an_count").hasClass("added")
                              ) {
                                $(
                                  "#loyalty_sign_up_have_acount button>a"
                                ).click(function () {
                                  if (
                                    typeof utag !== "undefined" &&
                                    typeof utag["link"] == "function"
                                  ) {
                                    utag.link({
                                      event_category: "Button",
                                      event_action:
                                        $(this).text() + ":" + location.href,
                                      event_label: window.location.href,
                                      page_name: (pageName =
                                        f_hasRestaurantName())
                                        ? pageName
                                        : utag_data.page_name,
                                      site_section: utag_data.site_section,
                                      tealium_event: "user_register_click",
                                    });
                                    $("#loyalty_create_an_count").addClass(
                                      "added"
                                    );
                                  }
                                });
                                $(
                                  "#loyalty_sign_up_have_acount button>a"
                                ).addClass("added");
                              }
                              if (
                                loyaltyInfo &&
                                $("#loyalty_sign_up_success_btn").length &&
                                !$("#loyalty_sign_up_success_btn").hasClass(
                                  "sended"
                                )
                              ) {
                                if (
                                  typeof utag !== "undefined" &&
                                  typeof utag["link"] == "function"
                                ) {
                                  utag.link({
                                    event_category: "Button",
                                    event_action:
                                      JSON.parse(
                                        $("#loyalty_content_data").html()
                                      ).signUpLightboxSignUpButtonLabel +
                                      ":" +
                                      window.location.href,
                                    event_label: window.location.href,
                                    page_name: (pageName =
                                      f_hasRestaurantName())
                                      ? pageName
                                      : utag_data.page_name,
                                    customer_email: loyaltyInfo.PrimaryEmail,
                                    customer_first_name: loyaltyInfo.FirstName,
                                    customer_last_name: loyaltyInfo.LastName,
                                    marketing_opt_in:
                                      loyaltyInfo.MarketingConsent == "Y"
                                        ? "True"
                                        : "false",
                                    customer_phone_with_country_code:
                                      loyaltyInfo.HomePhone,
                                    site_section: utag_data.site_section,
                                    tealium_event: "user_register",
                                  });
                                  $("#loyalty_sign_up_success_btn").addClass(
                                    "sended"
                                  );
                                }
                              }
                            }, 1500);
                          });
                          $("#loyalty_sign_up").addClass("added");
                        }
                      }, 1000);
                    }
                  });
                  $("#loyalty_logout_a").click(function () {
                    var tealiumTemp = JSON.parse(
                      sessionStorage.getItem("tealiumTemp")
                    );
                    if (
                      typeof utag !== "undefined" &&
                      typeof utag["link"] == "function" &&
                      tealiumTemp
                    ) {
                      var inputnum = tealiumTemp.PatronID;
                      var srlNum = inputnum;
                      var srcNum = inputnum;
                      if (f_isSRLType(inputnum)) {
                        srcNum = "";
                      } else {
                        srlNum = "";
                      }
                      utag.link({
                        event_category: "Button",
                        event_action: $(this).text() + ":" + location.href,
                        event_label: window.location.href,
                        page_name: (pageName = f_hasRestaurantName())
                          ? pageName
                          : utag_data.page_name,
                        site_section: utag_data.site_section,
                        srl_membership_id: srlNum,
                        src_membership_id: srcNum,
                        customer_email: tealiumTemp.PrimaryEmail,
                        tealium_event: "user_logout",
                      });
                      $("#loyalty_login").removeClass("tag_added");
                      sessionStorage.removeItem("tealiumTemp");
                    }
                  });
                  var loyalty22042021_4 = setInterval(function () {
                    if (
                      $("#loyalty_sign_up_success_btn").length &&
                      !$("#loyalty_sign_up_success_btn").hasClass("tag_added")
                    ) {
                      var loyaltyInfo = JSON.parse(
                        sessionStorage.getItem("loyaltyloginData")
                      );
                      if (loyaltyInfo) {
                        $("#loyalty_sign_up_success_btn").click(function () {
                          var loyaltyInfo = JSON.parse(
                            sessionStorage.getItem("loyaltyloginData")
                          );
                          if (
                            typeof utag !== "undefined" &&
                            typeof utag["link"] == "function" &&
                            loyaltyInfo
                          ) {
                            var inputnum = loyaltyInfo.PatronID;
                            var srlNum = inputnum;
                            var srcNum = inputnum;
                            if (f_isSRLType(inputnum)) {
                              srcNum = "";
                            } else {
                              srlNum = "";
                            }
                            utag.link({
                              event_category: "Button",
                              event_action:
                                $(this).text() + ":" + location.href,
                              event_label: window.location.href,
                              page_name: (pageName = f_hasRestaurantName())
                                ? pageName
                                : utag_data.page_name,
                              customer_email: loyaltyInfo.PrimaryEmail,
                              customer_first_name: loyaltyInfo.FirstName,
                              customer_last_name: loyaltyInfo.LastName,
                              marketing_opt_in:
                                loyaltyInfo.MarketingConsent == "Y"
                                  ? "True"
                                  : "false",
                              customer_country_of_residence:
                                loyaltyInfo.countryData
                                  ? loyaltyInfo.countryData.name
                                  : "",
                              customer_phone_with_country_code:
                                loyaltyInfo.HomePhone,
                              srl_membership_id: srlNum,
                              src_membership_id: srcNum,
                              site_section: utag_data.site_section,
                              tealium_event: "user_login",
                            });
                            var tealiumTemp = loyaltyInfo;
                            sessionStorage.setItem(
                              "tealiumTemp",
                              JSON.stringify(tealiumTemp)
                            );
                          }
                        });
                        $("#loyalty_sign_up_success_btn").addClass("tag_added");
                      }
                    }
                  }, 500);
                }
              })(MBSRevamp.Tagging);
            })();
          }
        } catch (e) {
          utag.DB(e);
        }
      } catch (e) {
        utag.DB(e);
      }
      try {
        try {
          if (
            utag.data["dom.url"].toString().indexOf("/booking/verifybooking") >
              -1 ||
            utag.data["dom.url"].toString().indexOf("/booking/cancelBooking") >
              -1 ||
            utag.data["dom.url"].toString().indexOf("/booking/verify") > -1 ||
            utag.data["dom.url"].toString().indexOf("/booking/manage") > -1
          ) {
            var MBS = MBS || {};
            MBS.Tagging = MBS.Tagging || {};
            MBS.Tagging = {
              initEvents: function () {
                var _this = this;
                _this.initHarakoVideoClick();
              },
              triggerTealiumEvent: function (data) {
                utag.link(data);
                console.log("Tealium Event Triggered: ");
                console.log(data);
              },
              getWeek: function (date) {
                let week = moment(date).day();
                switch (week) {
                  case 1:
                    return "Monday";
                  case 2:
                    return "Tuesday";
                  case 3:
                    return "Wednesday";
                  case 4:
                    return "Thursday";
                  case 5:
                    return "Friday";
                  case 6:
                    return "Saturday";
                  case 0:
                    return "Sunday";
                }
              },
              f_getCurrRoom: function (roomCode, rateCode) {
                var storeState = f_getSessionStorage();
                var bookingEngine_global_data = JSON.parse(
                  sessionStorage.getItem("bookingEngine_global_data")
                );
                var curr_room = bookingEngine_global_data.roomList.filter(
                  function (item) {
                    return (
                      item.primaryArea &&
                      item.primaryArea.codeList.indexOf(roomCode) > -1
                    );
                  }
                )[0];
                var curr_offer = bookingEngine_global_data.offerList.filter(
                  function (item) {
                    return item.code === rateCode;
                  }
                )[0];
                var bedType = curr_room.primaryArea[roomCode];
                var bedTypeName = bedType ? bedType : "";
                return {
                  room: curr_room
                    ? {
                        image: curr_room.descriptionArea.thumbnailImage,
                        roomName:
                          curr_room.primaryArea.roomType.value +
                          " - " +
                          curr_room.primaryArea.roomView.value,
                        roomType: curr_room.primaryArea.roomType.value,
                        roomView: curr_room.primaryArea.roomView.value,
                        bedTypeName: bedTypeName,
                      }
                    : {},
                  offer: curr_offer
                    ? { offerName: curr_offer.primaryArea.name }
                    : {},
                };
              },
              initHarakoVideoClick: function () {
                var _this = this;
                if (window.location.pathname.indexOf("verify") > -1) {
                  utag.view({
                    language_code: "en",
                    page_category: "booking_verify",
                    page_name: "booking_verify",
                    page_sub_category: "booking_verify",
                    site_section: "hotel",
                    tealium_event: "hotel_manage_booking",
                  });
                } else {
                  var storeState = f_getSessionStorage();
                  var paymentResult =
                    storeState.guestPaymentResult[0].Resultset[0];
                  var checkIn = paymentResult.StartDate.split("T")[0];
                  var checkOut = paymentResult.EndDate.split("T")[0];
                  var room_sub_type = [];
                  var roomData = _this.f_getCurrRoom(
                    paymentResult.RoomType,
                    paymentResult.RatePlanCode
                  );
                  room_sub_type.push(roomData.room.roomType);
                  var room_view_type = [];
                  room_view_type.push(roomData.room.roomView);
                  utag.view({
                    language_code: "en",
                    page_category: "booking_manage",
                    page_name: "booking_manage",
                    page_sub_category: "booking_manage",
                    site_section: "hotel",
                    tealium_event: "hotel_manage_booking",
                    hotel_manage_booking_reservation_id:
                      storeState.guestConfirmCodeInput,
                    hotel_offer_code: paymentResult.RatePlanCode,
                    hotel_offer_name: roomData.offer.offerName,
                    room_type: [
                      roomData.room.roomType + " - " + roomData.room.roomView,
                    ],
                    check_in_date: moment(checkIn).format("DD/MM/YYYY"),
                    check_out_date: moment(checkOut).format("DD/MM/YYYY"),
                    days_till_check_in: moment(checkIn).diff(
                      moment(new Date()),
                      "day"
                    ),
                    check_in_day: _this.getWeek(checkIn),
                    check_out_day: _this.getWeek(checkOut),
                    room_code: [paymentResult.RoomType],
                    room_sub_type: room_sub_type,
                    room_view_type: room_view_type,
                  });
                }
                $(".be-btn.mbs_btn_secondary.confirm-page-button")
                  .eq(1)
                  .on("click", function () {
                    var storeState = f_getSessionStorage();
                    var paymentResult =
                      storeState.guestPaymentResult[0].Resultset[0];
                    var checkIn = paymentResult.StartDate.split("T")[0];
                    var checkOut = paymentResult.EndDate.split("T")[0];
                    var room_sub_type = [];
                    var roomData = _this.f_getCurrRoom(
                      paymentResult.RoomType,
                      paymentResult.RatePlanCode
                    );
                    room_sub_type.push(roomData.room.roomType);
                    var room_view_type = [];
                    room_view_type.push(roomData.room.roomView);
                    _this.triggerTealiumEvent({
                      hotel_manage_booking_reservation_id:
                        storeState.guestConfirmCodeInput,
                      tealium_event: "hotel_cancel_booking",
                      hotel_offer_code: paymentResult.RatePlanCode,
                      hotel_offer_name: $(".txt-lg-lr.ls-x-sm.txt-black-three")
                        .eq(3)
                        .text(),
                      room_type: [
                        $(".txt-lg-lr.ls-x-sm.txt-black-three").eq(2).text(),
                      ],
                      check_in_date: moment(checkIn).format("DD/MM/YYYY"),
                      check_out_date: moment(checkOut).format("DD/MM/YYYY"),
                      days_till_check_in: moment(checkIn).diff(
                        moment(new Date()),
                        "day"
                      ),
                      check_in_day: _this.getWeek(checkIn),
                      check_out_day: _this.getWeek(checkOut),
                      room_code: [paymentResult.RoomType],
                      room_sub_type: room_sub_type,
                      room_view_type: room_view_type,
                    });
                  });
                var myVar07042021 = setInterval(function () {
                  if (
                    $("#managebooking_cancel_proceed").length &&
                    !$("#managebooking_cancel_proceed").hasClass("added")
                  ) {
                    $("#managebooking_cancel_proceed").addClass("added");
                    $("#managebooking_cancel_proceed").on("click", function () {
                      var storeState = f_getSessionStorage();
                      var paymentResult =
                        storeState.guestPaymentResult[0].Resultset[0];
                      var checkIn = paymentResult.StartDate.split("T")[0];
                      var checkOut = paymentResult.EndDate.split("T")[0];
                      var room_sub_type = [];
                      var roomData = _this.f_getCurrRoom(
                        paymentResult.RoomType,
                        paymentResult.RatePlanCode
                      );
                      room_sub_type.push(roomData.room.roomType);
                      var room_view_type = [];
                      room_view_type.push(roomData.room.roomView);
                      _this.triggerTealiumEvent({
                        hotel_manage_booking_reservation_id:
                          storeState.guestConfirmCodeInput,
                        tealium_event: "hotel_cancel_booking_confirm",
                        hotel_offer_code: paymentResult.RatePlanCode,
                        hotel_offer_name: $(
                          ".txt-lg-lr.ls-x-sm.txt-black-three"
                        )
                          .eq(3)
                          .text(),
                        room_type: [
                          $(".txt-lg-lr.ls-x-sm.txt-black-three").eq(2).text(),
                        ],
                        check_in_date: moment(checkIn).format("DD/MM/YYYY"),
                        check_out_date: moment(checkOut).format("DD/MM/YYYY"),
                        days_till_check_in: moment(checkIn).diff(
                          moment(new Date()),
                          "day"
                        ),
                        hotel_cancellation_reason: $(
                          ".time_dropdown_selected"
                        ).text(),
                        check_in_day: _this.getWeek(checkIn),
                        check_out_day: _this.getWeek(checkOut),
                        room_code: [paymentResult.RoomType],
                        room_sub_type: room_sub_type,
                        room_view_type: room_view_type,
                      });
                      utag.view({
                        language_code: "en",
                        page_category: "booking_manage",
                        page_name: "booking_manage",
                        page_sub_category: "booking_manage",
                        site_section: "hotel",
                        tealium_event: "hotel_cancel_booking_confirmation",
                        hotel_manage_booking_reservation_id:
                          storeState.guestConfirmCodeInput,
                        hotel_offer_code: paymentResult.RatePlanCode,
                        hotel_offer_name: $(
                          ".txt-lg-lr.ls-x-sm.txt-black-three"
                        )
                          .eq(3)
                          .text(),
                        room_type: [
                          $(".txt-lg-lr.ls-x-sm.txt-black-three").eq(2).text(),
                        ],
                        check_in_date: moment(checkIn).format("DD/MM/YYYY"),
                        check_out_date: moment(checkOut).format("DD/MM/YYYY"),
                        days_till_check_in: moment(checkIn).diff(
                          moment(new Date()),
                          "day"
                        ),
                        check_in_day: _this.getWeek(checkIn),
                        check_out_day: _this.getWeek(checkOut),
                        room_code: [paymentResult.RoomType],
                        room_sub_type: room_sub_type,
                        room_view_type: room_view_type,
                      });
                    });
                  }
                }, 1000);
                $(
                  "#Booking_Canceled_Res_Box .enhance-your-stay-button>button"
                ).on("click", function () {
                  _this.triggerTealiumEvent({
                    tealium_event: "hotel_make_new_reservation",
                  });
                });
              },
            };
            MBS.Tagging.initEvents();
          }
        } catch (e) {
          utag.DB(e);
        }
      } catch (e) {
        utag.DB(e);
      }
      try {
        try {
          if (
            /.*.marinabaysands.com\/museum\/(artscience-friends-order|asfOrder).html/.test(
              utag.data["dom.url"]
            )
          ) {
            var MBS = MBS || {};
            MBS.Tagging = MBS.Tagging || {};
            MBS.Tagging = {
              initEvents: function () {
                var _this = this;
                _this.initHarakoVideoClick();
              },
              triggerTealiumEvent: function (data) {
                utag.link(data);
                console.log("Tealium Event Triggered: ");
                console.log(data);
              },
              initHarakoVideoClick: function () {
                var _this = this;
                $(".product-listing-item a.card-box").on("click", function () {
                  _this.triggerTealiumEvent({
                    event_action: "Lightbox",
                    event_category: "OnPageInteraction",
                    event_label: $(this).find(".product-title").text(),
                    tealium_event: "internal_link_click",
                  });
                });
                $(".product-listing-item .count-box").on("click", function (e) {
                  e.stopPropagation();
                });
                $(".collection-box")
                  .find("a")
                  .on("click", function () {
                    if ($(this).attr("data-toggle") === "modal") {
                      _this.triggerTealiumEvent({
                        event_action: "Lightbox",
                        event_category: "OnPageInteraction",
                        event_label: $(this).text(),
                        tealium_event: "internal_link_click",
                      });
                    }
                  });
                $(".order-container")
                  .find("a")
                  .on("click", function () {
                    if ($(this).attr("href")) {
                      if ($(this).attr("href").indexOf("mailto") > -1) {
                        var email_address = $(this)
                          .attr("href")
                          .split("mailto:")[1];
                        _this.triggerTealiumEvent({
                          event_action: "Contact",
                          event_category: "TextLink",
                          event_label: email_address,
                          tealium_event: "email_click",
                          mailto_email: email_address,
                          page_name: utag_data.page_name,
                          site_section: utag_data.site_section,
                        });
                      } else if (
                        $(this).attr("data-toggle") === "modal" &&
                        $(this).hasClass("btn")
                      ) {
                        _this.triggerTealiumEvent({
                          event_action: "Lightbox",
                          event_category: "OnPageInteraction",
                          event_label: $(this).text().trim(),
                          tealium_event: "member_login_click",
                          page_name: utag_data.page_name,
                          site_section: utag_data.site_section,
                        });
                      } else if ($(this).attr("data-toggle") === "modal") {
                        _this.triggerTealiumEvent({
                          event_action: "Lightbox",
                          event_category: "OnPageInteraction",
                          event_label: $(this).text(),
                          tealium_event: "internal_link_click",
                        });
                      } else if ($(this).attr("href").indexOf("tel") > -1) {
                        var sUserAgent = navigator.userAgent.toLowerCase();
                        var bIsIpad = sUserAgent.match(/ipad/i) == "ipad";
                        var bIsIphoneOs =
                          sUserAgent.match(/iphone os/i) == "iphone os";
                        var bIsMidp = sUserAgent.match(/midp/i) == "midp";
                        var bIsUc7 =
                          sUserAgent.match(/rv:1.2.3.4/i) == "rv:1.2.3.4";
                        var bIsUc = sUserAgent.match(/ucweb/i) == "ucweb";
                        var bIsAndroid =
                          sUserAgent.match(/android/i) == "android";
                        var bIsCE =
                          sUserAgent.match(/windows ce/i) == "windows ce";
                        var bIsWM =
                          sUserAgent.match(/windows mobile/i) ==
                          "windows mobile";
                        var call_number = $(this).attr("href").split("tel:")[1];
                        if (
                          bIsIpad ||
                          bIsIphoneOs ||
                          bIsMidp ||
                          bIsUc7 ||
                          bIsUc ||
                          bIsAndroid ||
                          bIsCE ||
                          bIsWM
                        ) {
                          _this.triggerTealiumEvent({
                            event_action: "Contact",
                            event_category: "TextLink",
                            event_label: call_number,
                            tealium_event: "call_click",
                            call_number: call_number,
                            page_name: utag_data.page_name,
                            product_category: "Merchandise",
                            site_section: utag_data.site_section,
                          });
                        }
                      } else if (
                        $(this).attr("href").indexOf("https://") > -1
                      ) {
                        _this.triggerTealiumEvent({
                          event_action:
                            $(this).text().trim() + ":" + window.location.href,
                          event_category: "TextLink",
                          event_label: $(this).attr("href"),
                          tealium_event: "internal_link_click",
                        });
                      }
                    }
                  });
                $("#memberCard-default-title")
                  .find(".tips-parent")
                  .on("mouseout", function () {
                    _this.triggerTealiumEvent({
                      event_action: "Hover",
                      event_category: "OnPageInteraction",
                      event_label: "SRL tooltip",
                    });
                  });
                $("#memberCard-default-title")
                  .find(".tips-parent")
                  .on("touchstart", function () {
                    _this.triggerTealiumEvent({
                      event_action: "Hover",
                      event_category: "OnPageInteraction",
                      event_label: "SRL tooltip",
                    });
                  });
                $(".memberCard-container")
                  .find("a")
                  .on("click", function () {
                    if ($(this).attr("data-toggle") === "modal") {
                      _this.triggerTealiumEvent({
                        event_action: "Lightbox",
                        event_category: "OnPageInteraction",
                        event_label: "SRL card image",
                        tealium_event: "internal_link_click",
                      });
                    } else {
                      _this.triggerTealiumEvent({
                        event_action:
                          $(this).text() + ":" + window.location.href,
                        event_category: "TextLink",
                        event_label: $(this).attr("href"),
                        tealium_event: "internal_link_click",
                      });
                    }
                  });
                $("#terms-check1")
                  .find("a")
                  .on("click", function () {
                    if ($(this).attr("data-toggle") === "modal") {
                      _this.triggerTealiumEvent({
                        event_action: "Lightbox",
                        event_category: "OnPageInteraction",
                        event_label: $(this).text(),
                        tealium_event: "internal_link_click",
                      });
                    }
                  });
                $("#terms-check2")
                  .find("a")
                  .on("click", function () {
                    if (!$(this).attr("data-toggle")) {
                      _this.triggerTealiumEvent({
                        event_action:
                          $(this).text() + ":" + window.location.href,
                        event_category: "TextLink",
                        event_label: $(this).attr("href"),
                        tealium_event: "internal_link_click",
                      });
                    }
                  });
                $("#s_btn_view_rooms").on("click", function () {
                  _this.triggerTealiumEvent({
                    event_action:
                      $(this).text().trim() + ":" + window.location.href,
                    event_category: "Button",
                    event_label: "Pop up payment lightbox",
                  });
                });
                $("#payButton").on("click", function () {
                  _this.triggerTealiumEvent({
                    event_action:
                      $(this).text().trim() + ":" + window.location.href,
                    event_category: "Button",
                    event_label: JSON.parse($("#emaliSettingMsg").html())
                      .thankYouPageUrl,
                    tealium_event: "internal_link_click",
                  });
                });
                $("#order-promotion-container")
                  .find(".tips-parent")
                  .on("mouseout", function () {
                    _this.triggerTealiumEvent({
                      event_action: "Lightbox",
                      event_category: "OnPageInteraction",
                      event_label: "Promotion tooltip",
                    });
                  });
                $("#order-promotion-container")
                  .find(".tips-parent")
                  .on("touchstart", function () {
                    _this.triggerTealiumEvent({
                      event_action: "Lightbox",
                      event_category: "OnPageInteraction",
                      event_label: "Promotion tooltip",
                    });
                  });
                $("#order-mobile").on("click", function () {
                  _this.triggerTealiumEvent({
                    event_action: "Accordion",
                    event_category: "OnPageInteraction",
                    event_label: "fold shopping cart",
                    tealium_event: "internal_link_click",
                  });
                });
                $(".order-list-title").on("click", function () {
                  _this.triggerTealiumEvent({
                    event_action: "Accordion",
                    event_category: "OnPageInteraction",
                    event_label: "Unfold shopping cart",
                    tealium_event: "internal_link_click",
                  });
                });
                $(".card.card-box").on("click", function () {
                  _this.triggerTealiumEvent({
                    event_action: "Lightbox",
                    event_category: "OnPageInteraction",
                    event_label: $(this).find(".product-title h5").text(),
                    tealium_event: "internal_link_click",
                  });
                });
                $("#memberCard-l-form a").on("click", function () {
                  if ($(this).attr("href") != "#") {
                    _this.triggerTealiumEvent({
                      event_action:
                        $(this).text().trim() + ":" + window.location.href,
                      event_category: "TextLink",
                      event_label: $(this).attr("href"),
                      tealium_event: "internal_link_click",
                    });
                  }
                });
              },
            };
            MBS.Tagging.initEvents();
          }
        } catch (e) {
          utag.DB(e);
        }
      } catch (e) {
        utag.DB(e);
      }
      try {
        try {
          if (
            utag.data["dom.url"]
              .toString()
              .indexOf("restaurants/private-dining") > -1
          ) {
            var MBS = MBS || {};
            MBS.Tagging = MBS.Tagging || {};
            MBS.Tagging = {
              initEvents: function () {
                console.log("Private Dining Form Tagging Init");
                var _this = this;
                if (_this.getCurrentURL().indexOf("/reservation.html") >= 0) {
                  _this.reservationView();
                  _this.restaurantName();
                  _this.restaurantDate();
                  _this.restaurantTime();
                  _this.formSubmit();
                }
                if (_this.getCurrentURL().indexOf("/confirmation.html") >= 0) {
                  _this.thankyouView();
                }
              },
              utagLink: function (data) {
                if (
                  typeof utag !== "undefined" &&
                  typeof utag.link == "function"
                ) {
                  utag.link(data);
                }
              },
              utagView: function (data) {
                if (
                  typeof utag !== "undefined" &&
                  typeof utag.view == "function"
                ) {
                  utag.view(data);
                }
              },
              getCurrentURL: function () {
                return window.location.href;
              },
              getLangCode: function () {
                return $('meta[name="lang-cd"]').attr("content");
              },
              getPageCategory: function () {
                return window.location.pathname.split("/")[1];
              },
              getPageSubCategory: function () {
                return window.location.pathname.split("/")[2];
              },
              formatDate: function (date) {
                var months = [
                  "Jan",
                  "Feb",
                  "Mar",
                  "Apr",
                  "May",
                  "Jun",
                  "Jul",
                  "Aug",
                  "Sep",
                  "Oct",
                  "Nov",
                  "Dec",
                ];
                var day = date.split(" ")[0];
                var month;
                for (var i = 0; i < months.length; i++) {
                  if (months[i] == date.split(" ")[1]) {
                    month = i + 1;
                  }
                }
                var year = date.split(" ")[2];
                return moment(year + "-" + month + "-" + day);
              },
              formatTime: function (hour, minute, ampm) {
                return ampm == "AM"
                  ? hour + ":" + minute
                  : parseInt(hour) + 12 + ":" + minute;
              },
              reservationView: function () {
                var _this = this;
                _this.utagView({
                  language_code: _this.getLangCode(),
                  page_category: _this.getPageCategory(),
                  page_name: "private events enquiry form",
                  page_sub_category: _this.getPageSubCategory(),
                  site_section: "restaurants",
                  tealium_event: "restaurants_private_event",
                });
              },
              thankyouView: function () {
                var _this = this;
                var data = JSON.parse(
                  sessionStorage.getItem("private_dining_form_data")
                );
                _this.utagView({
                  language_code: _this.getLangCode(),
                  page_category: _this.getPageCategory(),
                  page_name: "private events enquiry form",
                  page_sub_category: _this.getPageSubCategory(),
                  site_section: "restaurants",
                  tealium_event: "restaurants_private_event_confirmation",
                  restaurant_dine_date: data.restaurant_dine_date,
                  restaurant_dine_time: data.restaurant_dine_time,
                  restaurant_name: data.restaurant_name,
                });
              },
              getFormData: function () {
                var _this = this;
                var restaurant_name = $(".form-group")
                  .eq(0)
                  .find("option:selected")
                  .text()
                  .trim();
                var restaurant_dine_date = _this
                  .formatDate(
                    $(".form-group")
                      .eq(1)
                      .find(".form-row")
                      .eq(0)
                      .find("input")
                      .val()
                      .trim()
                  )
                  .format("DD/MM/YYYY");
                var hour = $(".form-group")
                  .eq(1)
                  .find(".form-row")
                  .eq(1)
                  .find("option:selected")
                  .eq(0)
                  .text()
                  .trim();
                var minute = $(".form-group")
                  .eq(1)
                  .find(".form-row")
                  .eq(1)
                  .find("option:selected")
                  .eq(1)
                  .text()
                  .trim();
                var second = $(".form-group")
                  .eq(1)
                  .find(".form-row")
                  .eq(1)
                  .find("option:selected")
                  .eq(2)
                  .text()
                  .trim();
                var restaurant_dine_time = _this.formatTime(
                  hour,
                  minute,
                  second
                );
                var data = {
                  restaurant_dine_date: restaurant_dine_date,
                  restaurant_dine_time: restaurant_dine_time,
                  restaurant_name: restaurant_name,
                };
                return data;
              },
              formSubmit: function () {
                var _this = this;
                $(".form-group-buttons button").click(function () {
                  var formData = _this.getFormData();
                  var data = {
                    event_category: "Button",
                    event_action: $(this).text() + ":" + _this.getCurrentURL(),
                    event_label: _this
                      .getCurrentURL()
                      .replace(".html", "/confirmation.html"),
                    page_name: "Private Events Enquiry Form",
                    restaurant_dine_date: formData.restaurant_dine_date,
                    restaurant_dine_time: formData.restaurant_dine_time,
                    restaurant_name: formData.restaurant_name,
                    site_section: "restaurants",
                    tealium_event: "restaurant_private_event_submit",
                  };
                  _this.utagLink(data);
                  sessionStorage.setItem(
                    "private_dining_form_data",
                    JSON.stringify(data)
                  );
                });
              },
              restaurantName: function () {
                var _this = this;
                $("form .form-group")
                  .eq(0)
                  .find("select")
                  .change(function () {
                    _this.utagLink({
                      event_category: "OnPageInteraction",
                      event_action:
                        "Edit:" +
                        $(this)
                          .parents(".form-row")
                          .find(".form-label")
                          .text()
                          .replace("*", "")
                          .trim(),
                      event_label: $(this)
                        .find("option:selected")
                        .text()
                        .trim(),
                      tealium_event: "restaurant_private_event_select",
                    });
                  });
              },
              restaurantDate: function () {
                var _this = this;
                $("form .form-group")
                  .eq(1)
                  .find(".form-datepicker-container td")
                  .has("a")
                  .on("click", function () {
                    _this.utagLink({
                      event_category: "OnPageInteraction",
                      event_action:
                        "Edit:" +
                        $("form .form-group")
                          .eq(1)
                          .find(".form-row")
                          .eq(0)
                          .find(".form-label")
                          .text()
                          .replace("*", "")
                          .trim(),
                      event_label: $(".form-datepicker-container input").val(),
                      tealium_event: "restaurant_private_event_select",
                    });
                  });
              },
              restaurantTime: function () {
                var _this = this;
                $("form .form-group")
                  .eq(1)
                  .find(".form-row")
                  .eq(1)
                  .find("select")
                  .each(function () {
                    $(this).change(function () {
                      _this.utagLink({
                        event_category: "OnPageInteraction",
                        event_action:
                          "Edit:" +
                          $(this)
                            .parents(".form-row")
                            .find(".form-label")
                            .text()
                            .replace("*", "")
                            .trim(),
                        event_label: $(this)
                          .find("option:selected")
                          .text()
                          .trim(),
                        tealium_event: "restaurant_private_event_select",
                      });
                    });
                  });
              },
            };
            MBS.Tagging.initEvents();
          }
        } catch (e) {
          utag.DB(e);
        }
      } catch (e) {
        utag.DB(e);
      }
      try {
        try {
          if (
            utag.data["dom.url"]
              .toString()
              .indexOf("/hotel/amenities/banyan-tree-spa/reservation") > -1 ||
            utag.data["dom.url"]
              .toString()
              .indexOf("/spa/banyan-tree-spa/reservation") > -1 ||
            utag.data["dom.url"]
              .toString()
              .indexOf("/hotel/amenities/banyan-tree-spa.html") > -1
          ) {
            var MBS = MBS || {};
            MBS.Tagging = MBS.Tagging || {};
            MBS.Tagging = {
              initEvents: function () {
                console.log("Spa Form Tagging Init");
                var _this = this;
                if (
                  _this.getCurrentURL().indexOf("/banyan-tree-spa.html") >= 0
                ) {
                  _this.spaView();
                  _this.sandRewards();
                  _this.offerView();
                  _this.spaBook();
                  _this.viewAll();
                  _this.rightArrow();
                  _this.leftArrow();
                  _this.sidebarMap();
                  _this.sidebarEmail1();
                  _this.sidebarPhone();
                  _this.sidebarUrl();
                  _this.offersCard();
                }
                if (_this.getCurrentURL().indexOf("/reservation.html") >= 0) {
                  _this.reservationView();
                  _this.formSubmit();
                }
                if (
                  _this
                    .getCurrentURL()
                    .indexOf("/reservation/confirmation.html") >= 0 ||
                  _this
                    .getCurrentURL()
                    .indexOf("/reservation/thank-you.html") >= 0
                ) {
                  _this.submitTag();
                  _this.thankyouView();
                  _this.detailsUrl();
                  _this.sidebarMap();
                  _this.sidebarEmail();
                  _this.sidebarPhone();
                  _this.sidebarUrl();
                  _this.offersCard();
                }
                if (
                  _this.getCurrentURL().indexOf("/reservation/error.html") >= 0
                ) {
                  _this.submitTag();
                  _this.errorView();
                  _this.errorpageEmail();
                  _this.errorpagePhone();
                }
              },
              utagLink: function (data) {
                if (
                  typeof utag !== "undefined" &&
                  typeof utag.link == "function"
                ) {
                  utag.link(data);
                }
              },
              utagView: function (data) {
                if (
                  typeof utag !== "undefined" &&
                  typeof utag.view == "function"
                ) {
                  utag.view(data);
                }
              },
              getCurrentURL: function () {
                return window.location.href;
              },
              getLangCode: function () {
                return $('meta[name="lang-cd"]').attr("content");
              },
              getPageCategory: function () {
                return window.location.pathname.split("/")[1];
              },
              getPageSubCategory: function () {
                return window.location.pathname.split("/")[2];
              },
              formatDate: function (date) {
                var months = [
                  "Jan",
                  "Feb",
                  "Mar",
                  "Apr",
                  "May",
                  "Jun",
                  "Jul",
                  "Aug",
                  "Sep",
                  "Oct",
                  "Nov",
                  "Dec",
                ];
                var day = date.split(" ")[0];
                var month;
                for (var i = 0; i < months.length; i++) {
                  if (months[i] == date.split(" ")[1]) {
                    month = i + 1;
                  }
                }
                var year = date.split(" ")[2];
                return moment(year + "-" + month + "-" + day);
              },
              formatTime: function (time) {
                var format_time;
                var ampm = time.indexOf("am") >= 0 ? "am" : "pm";
                var time = parseInt(time.replace(ampm, ""));
                switch (ampm) {
                  case "am":
                    format_time = time;
                    break;
                  case "pm":
                    format_time = time == 12 ? time : time + 12;
                    break;
                }
                return format_time + ":00";
              },
              arraySum: function (arr) {
                var sum = 0;
                if (typeof arr == "object") {
                  for (var i = 0; i < arr.length; i++) {
                    sum += parseFloat(arr[i]);
                  }
                } else {
                  sum = arr;
                }
                if (typeof sum == "number") {
                  return sum.toFixed(2);
                } else {
                  return Number(sum).toFixed(2);
                }
              },
              spaView: function () {
                var _this = this;
                _this.utagView({
                  language_code: _this.getLangCode(),
                  page_category: _this.getPageCategory(),
                  page_name: "banyan-tree-spa",
                  page_sub_category: _this.getPageSubCategory(),
                  product_category: "Spa Reservations",
                  site_section: "spa",
                  tealium_event: "spa",
                });
              },
              offerView: function () {
                var _this = this;
                $(".button_cta_1")
                  .find("a")
                  .eq(1)
                  .click(function () {
                    _this.utagLink({
                      event_category: "Button",
                      event_action: $(this).text() + ":" + window.location.href,
                      event_label: $(this).attr("href"),
                      page_name: "banyan-tree-spa",
                      product_category: "Spa Reservations",
                      site_section: "spa",
                      tealium_event: "view_spa_offer",
                    });
                  });
              },
              spaBook: function () {
                var _this = this;
                $(".button_cta_1")
                  .find("a")
                  .eq(0)
                  .click(function () {
                    _this.utagLink({
                      event_category: "Button",
                      event_action: $(this).text() + ":" + window.location.href,
                      event_label: $(this).attr("href"),
                      page_name: "banyan-tree-spa",
                      product_category: "Spa Reservations",
                      site_section: "spa",
                      tealium_event: "book_spa",
                    });
                  });
              },
              sandRewards: function () {
                var _this = this;
                $(".notice-box")
                  .find("a")
                  .eq(0)
                  .click(function () {
                    _this.utagLink({
                      event_category: "OnPageInteraction",
                      event_action: "Lightbox",
                      event_label: $(this).text(),
                    });
                  });
              },
              sidebarEmail1: function () {
                var _this = this;
                $(".details .sidebar_general_content_1")
                  .eq(0)
                  .find("a")
                  .eq(1)
                  .click(function () {
                    _this.utagLink({
                      event_category: "TextLink",
                      event_action: "Contact",
                      event_label: $(this).attr("href").replace("mailto:", ""),
                      mailto_mail: "mbs@mbs.com",
                      page_name: "banyan-tree-spa",
                      product_category: "Spa Reservations",
                      site_section: "spa",
                      tealium_event: "email_click",
                    });
                  });
              },
              viewAll: function () {
                var _this = this;
                $(".lead")
                  .find("a")
                  .eq(0)
                  .click(function () {
                    _this.utagLink({
                      event_category: "FileDownload",
                      event_action: $(this).text(),
                      event_label: $(this).attr("href"),
                      document_name: "Banyan Tree Spa Menu",
                      page_name: "banyan-tree-spa",
                      product_category: "Spa Reservations",
                      site_section: "spa",
                      tealium_event: "pdf_click",
                    });
                  });
              },
              rightArrow: function () {
                var _this = this;
                $(".features")
                  .find(".swiper-button-next")
                  .eq(0)
                  .click(function () {
                    _this.utagLink({
                      event_category: "ImageGallery",
                      event_action: "Arrow",
                      event_label: "Next slide",
                      tealium_event: "internal_link_click",
                    });
                  });
              },
              leftArrow: function () {
                var _this = this;
                $(".features")
                  .find(".swiper-button-prev")
                  .eq(0)
                  .click(function () {
                    _this.utagLink({
                      event_category: "ImageGallery",
                      event_action: "Arrow",
                      event_label: "Previous slide",
                      tealium_event: "internal_link_click",
                    });
                  });
              },
              reservationView: function () {
                var _this = this;
                _this.utagView({
                  language_code: _this.getLangCode(),
                  page_category: _this.getPageCategory(),
                  page_name: "banyan-tree-spa-reservation",
                  page_sub_category: _this.getPageSubCategory(),
                  product_category: "Spa Reservations",
                  site_section: "spa",
                  tealium_event: "spa",
                });
              },
              thankyouView: function () {
                var _this = this;
                var spa_form_data = JSON.parse(
                  sessionStorage.getItem("spa_form_data")
                );
                if (spa_form_data) {
                  _this.utagView({
                    customer_email: spa_form_data.customer_email,
                    salutation: spa_form_data.salutation,
                    customer_first_name: spa_form_data.customer_first_name,
                    customer_last_name: spa_form_data.customer_last_name,
                    customer_phone: spa_form_data.customer_phone,
                    customer_phone_country_code:
                      spa_form_data.customer_phone_country_code,
                    language_code: _this.getLangCode(),
                    marketing_opt_in: spa_form_data.marketing_opt_in,
                    page_category: _this.getPageCategory(),
                    page_name: "banyan-tree-spa-confirmation",
                    page_sub_category: _this.getPageSubCategory(),
                    product_category: "Spa Reservations",
                    site_section: "spa",
                    spa_date: spa_form_data.spa_date,
                    spa_guest_quantity: spa_form_data.spa_guest_quantity,
                    spa_time: spa_form_data.spa_time,
                    spa_total_price: spa_form_data.spa_total_price,
                    spa_treatment: spa_form_data.spa_treatment,
                    spa_unit_price: spa_form_data.spa_unit_price,
                    spa_order_id: spa_form_data.spa_order_id,
                    membership_id: spa_form_data.membership_id,
                    tealium_event: "spa_confirmation",
                    spa_treatment_duration:
                      spa_form_data.spa_treatment_duration,
                  });
                }
              },
              errorView: function () {
                var _this = this;
                _this.utagView({
                  language_code: _this.getLangCode(),
                  page_category: _this.getPageCategory(),
                  page_name: "banyan-tree-spa-error",
                  page_sub_category: _this.getPageSubCategory(),
                  product_category: "Spa Reservations",
                  site_section: "spa",
                  tealium_event: "spa",
                });
              },
              getFormData: function () {
                var _this = this;
                var salutation = [];
                var date = [];
                var time = [];
                var treatment = [];
                var duration = [];
                var unitprice = [];
                $("#formAccordion")
                  .children(".card")
                  .each(function () {
                    salutation.push(
                      $(this)
                        .find(".form-row")
                        .eq(0)
                        .find("option:selected")
                        .text()
                        .trim()
                    );
                    date.push(
                      _this
                        .formatDate(
                          $(this).find(".form-row").eq(3).find("input").val()
                        )
                        .format("DD/MM/YYYY")
                    );
                    time.push(
                      _this.formatTime(
                        $(this)
                          .find(".form-row")
                          .eq(4)
                          .find("select")
                          .val()
                          .replace("string:", "")
                      )
                    );
                    var checkedDom = $(this)
                      .find(".form-row")
                      .eq(5)
                      .find("input[type=radio]:checked")
                      .parents(".radio-card");
                    treatment.push(checkedDom.find(".radio").text().trim());
                    duration.push(
                      checkedDom.find(".card-text").text().trim().split("-")[0]
                    );
                    var day = _this
                      .formatDate(
                        $(this).find(".form-row").eq(3).find("input").val()
                      )
                      .day();
                    var price;
                    if (day >= 1 && day <= 4) {
                      price = checkedDom
                        .find(".card-footer strong")
                        .eq(1)
                        .text()
                        .replace("S$", "");
                    } else {
                      price = checkedDom
                        .find(".card-footer strong")
                        .eq(0)
                        .text()
                        .replace("S$", "");
                    }
                    price = parseFloat(price.replace(",", "")).toFixed(2);
                    unitprice.push(price);
                  });
                var spa_form_data = {
                  salutation:
                    salutation.length > 1 ? salutation : salutation.toString(),
                  date: date.length > 1 ? date : date.toString(),
                  time: time.length > 1 ? time : time.toString(),
                  treatment:
                    treatment.length > 1 ? treatment : treatment.toString(),
                  duration:
                    duration.length > 1 ? duration : duration.toString(),
                  unitprice:
                    unitprice.length > 1 ? unitprice : unitprice.toString(),
                };
                return spa_form_data;
              },
              submitTag: function () {
                var _this = this;
                var data = JSON.parse(sessionStorage.getItem("spa_form_data"));
                _this.utagLink({
                  event_category: "Button",
                  event_action: data.event_action,
                  event_label: data.event_label,
                  spa_guest_quantity: data.spa_guest_quantity,
                  spa_date: data.spa_date,
                  spa_time: data.spa_time,
                  spa_treatment: data.spa_treatment,
                  spa_treatment_duration: data.spa_treatment_duration,
                  spa_unit_price: data.spa_unit_price,
                  spa_total_price: data.spa_total_price,
                  salutation: data.salutation,
                  customer_first_name: data.customer_first_name,
                  customer_last_name: data.customer_last_name,
                  customer_phone_country_code: data.customer_phone_country_code,
                  customer_phone: data.customer_phone,
                  customer_email: data.customer_email,
                  membership_id: data.membership_id,
                  marketing_opt_in: data.marketing_opt_in,
                  product_category: "Spa Reservations",
                  tealium_event: "spa_submit",
                });
              },
              formSubmit: function () {
                var _this = this;
                $(".form-group-buttons button").click(function () {
                  var spa_form_data = _this.getFormData();
                  var spa_date = spa_form_data.date;
                  var spa_time = spa_form_data.time;
                  var spa_treatment = spa_form_data.treatment;
                  var spa_treatment_duration = spa_form_data.duration;
                  var spa_unit_price = spa_form_data.unitprice;
                  var spa_total_price = _this.arraySum(spa_form_data.unitprice);
                  var salutation = spa_form_data.salutation;
                  var customer_first_name = $(
                    'input[name="contactName"]'
                  ).val();
                  var customer_last_name = $(
                    'input[name="contactLastName"]'
                  ).val();
                  var customer_phone_country_code = $(
                    ".selected-dial-code"
                  ).text();
                  var customer_phone = $("input[type=tel]").val();
                  var customer_email = $('input[name="email"]').val();
                  var marketing_opt_in = $(".form-group")
                    .eq(3)
                    .find("li")
                    .eq(1)
                    .find("input[type=checkbox]")
                    .is(":checked");
                  var is_treatment_empty = true;
                  if (typeof spa_treatment == "object") {
                    if (
                      spa_treatment.every(function (a) {
                        return a !== "";
                      })
                    ) {
                      is_treatment_empty = false;
                    }
                  } else if (typeof spa_treatment == "string") {
                    if (spa_treatment !== "") {
                      is_treatment_empty = false;
                    }
                  }
                  var is_duration_empty = true;
                  if (typeof spa_treatment_duration == "object") {
                    if (
                      spa_treatment_duration.every(function (a) {
                        return a !== "";
                      })
                    ) {
                      is_duration_empty = false;
                    }
                  } else if (typeof spa_treatment_duration == "string") {
                    if (spa_treatment_duration !== "") {
                      is_duration_empty = false;
                    }
                  }
                  var acceptTC = $("#terms").is(":checked");
                  var emptyCaptcha = $("#cq_captcha").val();
                  var membership_id = $("input[name=srlMember]").val();
                  if (
                    customer_first_name != "" &&
                    customer_last_name != "" &&
                    customer_phone != "" &&
                    customer_email != "" &&
                    salutation.toString().indexOf("Select") < 0 &&
                    spa_date.toString().indexOf("Invalid date") < 0 &&
                    spa_time.toString().indexOf("NaN:00") < 0 &&
                    spa_total_price != "NaN" &&
                    spa_total_price != "" &&
                    spa_unit_price.toString().indexOf("NaN") < 0 &&
                    acceptTC &&
                    emptyCaptcha != ""
                  ) {
                    var data = {
                      event_category: "Button",
                      event_action:
                        $(".form-group-buttons button").text() +
                        ":" +
                        _this.getCurrentURL(),
                      event_label: _this
                        .getCurrentURL()
                        .replace(".html", "/confirmation.html"),
                      spa_guest_quantity: $(".form-group")
                        .eq(1)
                        .find(".row")
                        .eq(0)
                        .find("select")
                        .val()
                        .replace("number:", ""),
                      spa_date: spa_date,
                      spa_time: spa_time,
                      spa_treatment: spa_treatment,
                      spa_treatment_duration: spa_treatment_duration,
                      spa_unit_price: spa_unit_price,
                      spa_total_price: spa_total_price,
                      salutation: salutation,
                      customer_first_name: customer_first_name,
                      customer_last_name: customer_last_name,
                      customer_phone_country_code: customer_phone_country_code,
                      customer_phone: customer_phone,
                      customer_email: customer_email,
                      membership_id: membership_id,
                      marketing_opt_in: marketing_opt_in,
                      product_category: "Spa Reservations",
                      tealium_event: "spa_submit",
                    };
                    sessionStorage.setItem(
                      "spa_form_data",
                      JSON.stringify(data)
                    );
                  }
                });
                $(".form-group")
                  .eq(3)
                  .find("a")
                  .click(function () {
                    var data = {
                      event_category: "OutLink",
                      event_action:
                        $(this).text() + ":" + _this.getCurrentURL(),
                      event_label: $(this).attr("href"),
                      tealium_event: "external_link_click",
                    };
                    _this.utagLink(data);
                  });
              },
              detailsUrl: function () {
                var _this = this;
                $(".details .details-block-body a").click(function () {
                  _this.utagLink({
                    event_category: "OutLink",
                    event_action: $(this).text() + ":" + window.location.href,
                    event_label: window.location.host + $(this).attr("href"),
                    tealium_event: "external_link_click",
                  });
                });
              },
              sidebarMap: function () {
                var _this = this;
                $(".details .location_sidebar_1 a").click(function () {
                  _this.utagLink({
                    event_category: "OnPageInteraction",
                    event_action: "Lightbox",
                    event_label: $(this).text(),
                  });
                });
              },
              sidebarPhone: function () {
                var _this = this;
                if ($(window).width() <= 768) {
                  $("a").click(function () {
                    if (
                      $(this).parents(".sidebar-section").length > 0 &&
                      $(this).attr("href").indexOf("tel:") > -1
                    ) {
                      _this.utagLink({
                        call_number: $(this).text(),
                        event_category: "TextLink",
                        event_action: "Contact",
                        event_label: $(this).text(),
                        page_name: "banyan-tree-spa",
                        product_category: "SPA Reservations",
                        site_section: "spa",
                        tealium_event: "call_click",
                      });
                    }
                  });
                }
              },
              sidebarEmail: function () {
                var _this = this;
                $(".details .sidebar_general_content_1")
                  .eq(0)
                  .find("a")
                  .eq(1)
                  .click(function () {
                    _this.utagLink({
                      event_category: "TextLink",
                      event_action: "Contact",
                      event_label: $(this).attr("href").replace("mailto:", ""),
                      tealium_event: "email_click",
                    });
                  });
              },
              sidebarUrl: function () {
                var _this = this;
                $(".details .sidebar_general_content_1")
                  .eq(1)
                  .find("a")
                  .click(function () {
                    _this.utagLink({
                      event_category: "OutLink",
                      event_action: $(this).text() + ":" + window.location.href,
                      event_label: $(this).attr("href"),
                      tealium_event: "external_link_click",
                    });
                  });
              },
              offersCard: function () {
                var _this = this;
                $(".offers .card").click(function () {
                  _this.utagLink({
                    event_category: "ImageLink",
                    event_action:
                      $(this).find(".card-title").text() +
                      ":" +
                      window.location.href,
                    event_label: window.location.host + $(this).attr("href"),
                    tealium_event: "internal_link_click",
                  });
                });
              },
              errorpagePhone: function () {
                var _this = this;
                if ($(window).width() <= 768) {
                  $(".features a")
                    .eq(0)
                    .click(function () {
                      var data = {
                        call_number: $(this).text(),
                        event_category: "TextLink",
                        event_action: "Contact",
                        event_label: $(this).text(),
                        page_name: "banyan-tree-spa",
                        product_category: "SPA Reservations",
                        site_section: "spa",
                        tealium_event: "call_click",
                      };
                      _this.utagLink(data);
                    });
                }
              },
              errorpageEmail: function () {
                var _this = this;
                $(".features a")
                  .eq(1)
                  .click(function () {
                    var data = {
                      event_category: "TextLink",
                      event_action: "Contact",
                      event_label: $(this).text(),
                      tealium_event: "email_click",
                    };
                    _this.utagLink(data);
                  });
              },
            };
            MBS.Tagging.initEvents();
          }
        } catch (e) {
          utag.DB(e);
        }
      } catch (e) {
        utag.DB(e);
      }
      try {
        try {
          if (1) {
            if (
              window.location.hostname == "ticket.marinabaysands.com" ||
              window.location.hostname == "ticketing.stixcloudtest.com"
            ) {
              if (typeof $j != "undefined" && typeof jQuery != "undefined") {
                window.$ = jQuery;
              }
            }
          }
        } catch (e) {
          utag.DB(e);
        }
      } catch (e) {
        utag.DB(e);
      }
      try {
        try {
          if (
            utag.data["dom.url"]
              .toString()
              .indexOf("/booking/confirmation.html") > -1
          ) {
            (function ($) {
              const SPECIFICATION_SKU_MAPPING = [
                {
                  code: "DKN,DTN",
                  sku: "deluxe-room-lower-floor",
                  skuOriginal: "Deluxe Room-Deluxe Room Lower Floor",
                  group_id: "Deluxe Lower Floor ",
                  name: "Deluxe Lower Floor",
                  url: "https://www.marinabaysands.com/hotel/rooms-suites/deluxe-room-lower-floor.html",
                  categories: "Hotel|Deluxe",
                  lng_en: "DeluxeRoom-LowerFloor",
                  lng_en_king_bed: "DeluxeKingLowerFloor",
                  lng_en_twin_bed: "DeluxeTwinLowerFloor",
                  lng_hk: "豪华客房-低层景观",
                  lng_zh: "豪華客房-低层景观",
                  lng_ja: "デラックスルーム-低層階(窓ありビューなし)",
                  lng_ko: "디럭스룸-낮은층",
                  lng_id: "DeluxeRoom-LantaiBawah",
                  lng_hk_king_bed: "DeluxeKingLowerFloor",
                  lng_hk_twin_bed: "DeluxeTwinLowerFloor",
                },
                {
                  code: "DKG,DTG",
                  sku: "deluxe-room-garden-view",
                  skuOriginal: "Deluxe Room-Deluxe Room Garden View",
                  group_id: "Deluxe Garden View",
                  name: "Deluxe Garden View",
                  url: "https://www.marinabaysands.com/hotel/rooms-suites/deluxe-room-garden-view.html",
                  categories: "Hotel|Deluxe",
                  lng_en: "DeluxeRoom-GardenView",
                  lng_hk: "豪华客房-园景",
                  lng_zh: "豪華客房-園景",
                  lng_ja: "デラックスルーム-ガーデンビュー",
                  lng_ko: "디럭스룸-가든뷰",
                  lng_id: "DeluxeRoom-PemandanganTaman",
                  lng_en_king_bed: "DeluxeKingGardenView",
                  lng_en_twin_bed: "DeluxeTwinGardenView",
                  lng_hk_king_bed: "DeluxeKingLowerFloor",
                  lng_hk_twin_bed: "豪华客房-园景(2 张单人床)",
                },
                {
                  code: "DKV,DTV",
                  sku: "deluxe-room-city-view",
                  skuOriginal: "Deluxe Room-Deluxe Room City View",
                  group_id: "Deluxe City View",
                  name: "Deluxe City View",
                  url: "https://www.marinabaysands.com/hotel/rooms-suites/deluxe-room-city-view.html",
                  categories: "Hotel|Deluxe",
                  lng_en: "DeluxeRoom-CityView",
                  lng_hk: "豪华客房-城景",
                  lng_zh: "豪華客房-城景",
                  lng_ja: "デラックスルーム-シティビュー",
                  lng_ko: "디럭스룸-시티뷰",
                  lng_id: "DeluxeRoom-PemandanganKota",
                  lng_en_king_bed: "DeluxeKingCityView",
                  lng_en_twin_bed: "DeluxeTwinCityView",
                  lng_hk_king_bed: "DeluxeKingLowerFloor",
                  lng_hk_twin_bed: "DeluxeTwinLowerFloor",
                },
                {
                  code: "DKH",
                  sku: "deluxe-room-harbour-view",
                  skuOriginal: "Deluxe Room-Deluxe Room Harbour View",
                  group_id: "Deluxe Room",
                  name: "Deluxe Harbour View",
                  url: "https://www.marinabaysands.com/hotel/rooms-suites/deluxe-room-harbour-view.html",
                  categories: "Hotel|Deluxe",
                  lng_en: "DeluxeRoom-HarbourView",
                  lng_hk: "豪华客房-湾景",
                  lng_zh: "豪華客房-灣景",
                  lng_ja: "デラックスルーム-ハーバービュー",
                  lng_ko: "디럭스룸-하버뷰",
                  lng_id: "DeluxeRoom-PemandanganPelabuhan",
                  lng_en_king_bed: "DeluxeKingHarbourView",
                  lng_en_twin_bed: "DeluxeTwinHarbourView",
                  lng_hk_king_bed: "DeluxeKingLowerFloor",
                  lng_hk_twin_bed: "DeluxeTwinLowerFloor",
                },
                {
                  code: "DKS",
                  sku: "deluxe-room-sky-view",
                  skuOriginal: "Deluxe Room-Deluxe Room Sky View",
                  group_id: "Deluxe Room",
                  name: "Deluxe Sky View",
                  url: "https://www.marinabaysands.com/hotel/rooms-suites/deluxe-room-sky-view.html",
                  categories: "Hotel|Premier",
                  lng_en: "DeluxeRoom-SkyView",
                  lng_hk: "豪华客房-天际景观",
                  lng_zh: "豪華客房-天際景觀",
                  lng_ja: "デラックスルーム-スカイビュー",
                  lng_ko: "디럭스룸-스카이뷰",
                  lng_id: "DeluxeRoom-PemandanganCakrawala",
                  lng_en_king_bed: "DeluxeKingSkyView",
                  lng_en_twin_bed: "DeluxeTwinSkyView",
                  lng_hk_king_bed: "豪华客房-天际景观（超大双人床）",
                  lng_hk_twin_bed: "DeluxeTwinLowerFloor",
                },
                {
                  code: "PKN,PTN",
                  sku: "premier-room-lower-floor",
                  skuOriginal: "Premier Room-Premier Room Lower Floor",
                  group_id: "Premier Room",
                  name: "Premier Lower Floor",
                  url: "https://www.marinabaysands.com/hotel/rooms-suites/premier-room-lower-floor.html",
                  categories: "Hotel|Premier",
                  lng_en: "PremierRoom-LowerFloor",
                  lng_en_king_bed: "PremierKingLowerFloor",
                  lng_en_twin_bed: "PremierTwinLowerFloor",
                  lng_hk: "尊贵客房-低层景观",
                  lng_zh: "尊貴客房-低层景观",
                  lng_ja: "プレミアルーム-低層階(窓ありビューなし)",
                  lng_ko: "프리미어룸-낮은층",
                  lng_id: "PremierRoom-LantaiBawah",
                  lng_hk_king_bed: "DeluxeKingLowerFloor",
                  lng_hk_twin_bed: "DeluxeTwinLowerFloor",
                },
                {
                  code: "PTG,PKG",
                  sku: "premier-room-garden-view",
                  skuOriginal: "Premier Room-Premier Room Garden View",
                  group_id: "Premier Room",
                  name: "Premier Garden View",
                  url: "https://www.marinabaysands.com/hotel/rooms-suites/premier-room-garden-view.html",
                  categories: "Hotel|Premier",
                  lng_en: "PremierRoom-GardenView",
                  lng_hk: "尊贵客房-园景",
                  lng_zh: "尊貴客房-園景",
                  lng_ja: "プレミアルーム-ガーデンビュー",
                  lng_ko: "프리미어룸-가든뷰",
                  lng_id: "PremierRoom-PemandanganTaman",
                  lng_en_king_bed: "PremierKingGardenView",
                  lng_en_twin_bed: "PremierTwinGardenView",
                  lng_hk_king_bed: "远景尊贵客房-超大双人床",
                  lng_hk_twin_bed: "园景尊贵客房-2张单人床",
                },
                {
                  code: "PKV,PTV",
                  sku: "premier-room-city-view",
                  skuOriginal: "Premier Room-Premier Room City View",
                  group_id: "Premier Room",
                  name: "Premier City View",
                  url: "https://www.marinabaysands.com/hotel/rooms-suites/premier-room-city-view.html",
                  categories: "Hotel|Premier",
                  lng_en: "PremierRoom-CityView",
                  lng_hk: "尊贵客房-城景",
                  lng_zh: "尊貴客房-城景",
                  lng_ja: "プレミアルーム-シティビュー",
                  lng_ko: "프리미어룸-시티뷰",
                  lng_id: "PremierRoom-PemandanganKota",
                  lng_en_king_bed: "PremierKingCityView",
                  lng_en_twin_bed: "PremierTwinCityView",
                  lng_hk_king_bed: "尊贵客房-城景（超大双人床）",
                  lng_hk_twin_bed: "尊贵客房-城景（2 张单人床）",
                },
                {
                  code: "PKH",
                  sku: "premier-room-harbour-view",
                  skuOriginal: "Premier Room-Premier Room Harbour View",
                  group_id: "Premier Room",
                  name: "Premier Harbour View",
                  url: "https://www.marinabaysands.com/hotel/rooms-suites/premier-room-harbour-view.html",
                  categories: "Hotel|Premier",
                  lng_en: "PremierRoom-HarbourView",
                  lng_hk: "尊贵客房-湾景",
                  lng_zh: "尊貴客房-灣景",
                  lng_ja: "プレミアルーム-ハーバービュー",
                  lng_ko: "프리미어룸-하버뷰",
                  lng_id: "PremierRoom-PemandanganPelabuhan",
                  lng_en_king_bed: "PremierKingHarbourView",
                  lng_en_twin_bed: "PremierTwinHarbourView",
                  lng_hk_king_bed: "DeluxeKingLowerFloor",
                  lng_hk_twin_bed: "DeluxeTwinLowerFloor",
                },
                {
                  code: "PKS",
                  sku: "premier-room-sky-view",
                  skuOriginal: "Premier Room-Premier Room Sky View",
                  group_id: "Premier Room",
                  name: "Premier Sky View",
                  url: "https://www.marinabaysands.com/hotel/rooms-suites/premier-room-sky-view.html",
                  categories: "Hotel|Premier",
                  lng_en: "PremierRoom-SkyView",
                  lng_hk: "尊贵客房-天际景观",
                  lng_zh: "尊貴客房-天際景觀",
                  lng_ja: "プレミアルーム-スカイビュー",
                  lng_ko: "프리미어룸-스카이뷰",
                  lng_id: "PremierRoom-PemandanganCakrawala",
                  lng_en_king_bed: "PremierKingSkyView",
                  lng_en_twin_bed: "PremierTwinSkyView",
                  lng_hk_king_bed: "DeluxeKingLowerFloor",
                  lng_hk_twin_bed: "DeluxeTwinLowerFloor",
                },
                {
                  code: "FMR",
                  sku: "family-room-lower-floor",
                  skuOriginal: "Family Room-Family Room Lower Floor",
                  group_id: "Family Room",
                  name: "Family Room",
                  url: "https://www.marinabaysands.com/hotel/rooms-suites/family-room-lower-floor.html",
                  categories: "Hotel|Family",
                  lng_en: "FamilyRoom-LowerFloor",
                  lng_hk: "家庭客房-低层景观",
                  lng_zh: "家庭客房-低层景观",
                  lng_ja: "ファミリールーム-低層階(窓ありビューなし)",
                  lng_ko: "패밀리룸-낮은층",
                  lng_id: "FamilyRoom-LantaiBawah",
                },
                {
                  code: "FM1",
                  sku: "family-1-bedroom-lower-floor",
                  skuOriginal: "Family 1 Bedroom-Family 1 Bedroom Lower Floor",
                  group_id: "Family Room",
                  name: "Family 1 Bedroom",
                  url: "https://www.marinabaysands.com/hotel/rooms-suites/family-1-bedroom-lower-floor.html",
                  categories: "Hotel|Family",
                  lng_en: "Family1Bedroom-LowerFloor",
                  lng_hk: "一居室家庭客房-低层景观",
                  lng_zh: "一居室家庭客房-低层景观",
                  lng_ja: "ファミリー1ベッドルーム-低層階(窓ありビューなし)",
                  lng_ko: "패밀리원베드룸-낮은층",
                  lng_id: "Family1KamarTidur-LantaiBawah",
                },
                {
                  code: "FMS",
                  sku: "family-studio-lower-floor",
                  skuOriginal: "Family Studio-Family Studio Lower Floor",
                  group_id: "Family Room",
                  name: "Family Studio*",
                  url: "https://www.marinabaysands.com/hotel/rooms-suites/family-studio-lower-floor.html",
                  categories: "Hotel|Family",
                  lng_en: "FamilyStudio-LowerFloor",
                  lng_hk: "公寓式家庭客房-低层景观",
                  lng_zh: "公寓式家庭客房-低层景观",
                  lng_ja: "ファミリースタジオ-低層階(窓ありビューなし)",
                  lng_ko: "패밀리스튜디오-낮은층",
                  lng_id: "FamilyStudio-LantaiBawah",
                },
                {
                  code: "FM2",
                  sku: "family-2-bedroom-harbour-view",
                  skuOriginal: "Family 2 Bedroom",
                  group_id: "Family Room",
                  name: "Family 2 Bedroom",
                  url: "https://www.marinabaysands.com/hotel/rooms-suites/family-2-bedroom-harbour-view.html",
                  categories: "Hotel|Family",
                  lng_en: "Family2Bedroom-HarbourView",
                  lng_hk: "两居室家庭客房-湾景",
                  lng_zh: "兩居室家庭客房-灣景",
                  lng_ja: "ファミリー2ベッドルーム-ハーバービュー",
                  lng_ko: "패밀리투베드룸-하버뷰",
                  lng_id: "Family2KamarTidur-PemandanganPelabuhan",
                },
                {
                  code: "CKG",
                  sku: "club-room-garden-view",
                  skuOriginal: "Club Room-Club Room Garden View",
                  group_id: "Club Room",
                  name: "Club Garden View",
                  url: "https://www.marinabaysands.com/hotel/rooms-suites/club-room-garden-view.html",
                  categories: "Hotel|Club",
                  lng_en: "ClubRoom-GardenView",
                  lng_hk: "俱乐部客房 - 园景",
                },
                {
                  code: "CKV",
                  sku: "club-room-city-view",
                  skuOriginal: "Club Room-Club Room City View",
                  group_id: "Club Room",
                  name: "Club City View",
                  url: "https://www.marinabaysands.com/hotel/rooms-suites/club-room-city-view.html",
                  categories: "Hotel|Club",
                  lng_en: "ClubRoom-CityView",
                  lng_hk: "俱乐部客房-城景",
                  lng_zh: "俱樂部客房-城景",
                  lng_ja: "クラブルーム-シティビュー",
                  lng_ko: "클럽룸-시티뷰",
                  lng_id: "ClubRoom-PemandanganKota",
                },
                {
                  code: "GKG",
                  sku: "grand-club-room-garden-view",
                  skuOriginal: "Grand Club Room-Grand Club Room Garden View",
                  group_id: "Club Room",
                  name: "Grand Club Garden View",
                  url: "https://www.marinabaysands.com/hotel/rooms-suites/grand-club-room-garden-view.html",
                  categories: "Hotel|Club",
                  lng_en: "GrandClubRoom-GardenView",
                  lng_hk: "顶级俱乐部客房-园景",
                  lng_zh: "頂級俱樂部客房-園景",
                  lng_ja: "グランドクラブルーム-ガーデンビュー",
                  lng_ko: "그랜드클럽룸-가든뷰",
                  lng_id: "GrandClubRoom-PemandanganTaman",
                },
                {
                  code: "GKV",
                  sku: "grand-club-room-city-view",
                  skuOriginal: "Grand Club Room-Grand Club Room City View",
                  group_id: "Club Room",
                  name: "Grand Club City View",
                  url: "https://www.marinabaysands.com/hotel/rooms-suites/grand-club-room-city-view.html",
                  categories: "Hotel|Club",
                  lng_en: "GrandClubRoom-CityView",
                  lng_hk: "顶级俱乐部客房-城景",
                  lng_zh: "頂級俱樂部客房-城景",
                  lng_ja: "グランドクラブルーム-シティビュー",
                  lng_ko: "그랜드클럽룸-시티뷰",
                  lng_id: "GrandClubRoom-PemandanganKota",
                },
                {
                  code: "ORG",
                  sku: "orchid-suite-garden-view",
                  skuOriginal: "Orchid Suite-Orchid Suite Garden View",
                  group_id: "Suites",
                  name: "Orchid Suite Garden View",
                  url: "https://www.marinabaysands.com/hotel/rooms-suites/orchid-suite-garden-view.html",
                  categories: "Hotel|Suites",
                  lng_en: "OrchidSuite-GardenView",
                  lng_hk: "姬花套房-园景",
                  lng_zh: "姬花套房-園景",
                  lng_ja: "オーキッドスイート-ガーデンビュー",
                  lng_ko: "오키드스위트-가든뷰",
                  lng_id: "OrchidSuite-PemandanganTaman",
                },
                {
                  code: "ORV",
                  sku: "orchid-suite-city-view",
                  skuOriginal: "Orchid Suite-Orchid Suite City View",
                  group_id: "Suites",
                  name: "Orchid Suite City View",
                  url: "https://www.marinabaysands.com/hotel/rooms-suites/orchid-suite-city-view.html",
                  categories: "Hotel|Suites",
                  lng_en: "OrchidSuite-CityView",
                  lng_hk: "姬花套房-城景",
                  lng_zh: "姬花套房-城景",
                  lng_ja: "オーキッドスイート-シティビュー",
                  lng_ko: "오키드스위트-시티뷰",
                  lng_id: "OrchidSuite-PemandanganKota",
                },
                {
                  code: "SAG",
                  sku: "sands-suite-garden-view",
                  skuOriginal: "Sands Suite-Sands Suite Garden View",
                  group_id: "Suites",
                  name: "Sands Suite Garden View",
                  url: "https://www.marinabaysands.com/hotel/rooms-suites/sands-suite.html",
                  categories: "Hotel|Suites",
                  lng_en: "SandsSuite-GardenView",
                  lng_hk: "金沙套房-园景",
                  lng_zh: "金沙套房-園景",
                  lng_ja: "サンズスイート-ガーデンビュー",
                  lng_ko: "샌즈스위트-가든뷰",
                  lng_id: "SandsSuite-PemandanganTaman",
                },
                {
                  code: "BAY",
                  sku: "bay-suite-garden-view",
                  skuOriginal: "Bay Suite-Bay Suite Garden View",
                  group_id: "Suites",
                  name: "Bay Suite",
                  url: "https://www.marinabaysands.com/hotel/rooms-suites/bay-suite.html",
                  categories: "Hotel|Suites",
                  lng_en: "BaySuite-GardenView",
                  lng_hk: "海湾套房-园景",
                  lng_zh: "海灣套房-園景",
                  lng_ja: "ベイスイート-ガーデンビュー",
                  lng_ko: "베이스위트-가든뷰",
                  lng_id: "BaySuite-PemandanganTaman",
                },
                {
                  code: "ORH",
                  sku: "harbour-suite-harbour-view",
                  skuOriginal: "Harbour Suite-Harbour Suite Harbour View",
                  group_id: "Suites",
                  name: "Harbour Suite",
                  url: "https://www.marinabaysands.com/hotel/rooms-suites/harbour-suite.html",
                  categories: "Hotel|Suites",
                  lng_en: "HarbourSuite-HarbourView",
                  lng_hk: "港湾套房-湾景",
                  lng_zh: "港灣套房-灣景",
                  lng_ja: "ハーバースイート-ハーバービュー",
                  lng_ko: "하버스위트-하버뷰",
                  lng_id: "HarbourSuite-PemandanganPelabuhan",
                },
                {
                  code: "MAR",
                  sku: "marina-suite-harbour-view",
                  skuOriginal: "Marina Suite-Marina Suite Harbour View",
                  group_id: "Suites",
                  name: "Marina Suite",
                  url: "https://www.marinabaysands.com/hotel/rooms-suites/marina-suite.html",
                  categories: "Hotel|Suites",
                  lng_en: "MarinaSuite-HarbourView",
                  lng_hk: "滨海套房-湾景",
                  lng_zh: "濱海套房-灣景",
                  lng_ja: "マリーナスイート-ハーバービュー",
                  lng_ko: "마리나스위트-하버뷰",
                  lng_id: "MarinaSuite-PemandanganPelabuhan",
                },
                {
                  code: "SAV",
                  sku: "skyline-suite-sky-view",
                  skuOriginal: "Skyline Suite-Skyline Suite Sky View",
                  group_id: "Suites",
                  name: "Skyline Suite",
                  url: "https://www.marinabaysands.com/hotel/rooms-suites/skyline-suite.html",
                  categories: "Hotel|Suites",
                  lng_en: "SkylineSuite-SkyView",
                  lng_hk: "天际套房-天际景观",
                  lng_zh: "天際套房-天際景觀",
                  lng_ja: "スカイラインスイート-スカイビュー",
                  lng_ko: "스카이라인스위트-스카이뷰",
                  lng_id: "SkylineSuite-PemandanganCakrawala",
                },
                {
                  code: "MER",
                  sku: "merlion-suite-harbour-view",
                  skuOriginal: "Merlion Suite-Merlion Suite Harbour View",
                  group_id: "Suites",
                  name: "Merlion Suite",
                  url: "https://www.marinabaysands.com/hotel/rooms-suites/merlion-suite.html",
                  categories: "Hotel|Suites",
                  lng_en: "MerlionSuite-HarbourView",
                  lng_hk: "鱼尾狮套房 - 灣景",
                  lng_zh: "鱼尾狮套房 - 湾景",
                  lng_ja: "マーライオンスイート - ハーバービュー",
                  lng_ko: "머라이언 스위트 - 하버뷰",
                  lng_id: "Merlion Suite - Pemandangan Pelabuhan",
                },
                {
                  code: "STR",
                  sku: "straits-suite-sky-view",
                  skuOriginal: "Straits Suite-Straits Suite Sky View",
                  group_id: "Suites",
                  name: "Straits Suite",
                  url: "https://www.marinabaysands.com/hotel/rooms-suites/straits-suite.html",
                  categories: "Hotel|Suites",
                  lng_en: "StraitsSuite-SkyView",
                  lng_hk: "海峡套房-天际景观",
                  lng_zh: "海峽套房-天際景觀",
                  lng_ja: "ストレイツスイート-スカイビュー",
                  lng_ko: "스트레이츠스위트-스카이뷰",
                  lng_id: "StraitsSuite-PemandanganCakrawala",
                },
              ];
              function DY_MBE(eventType, context) {
                if (DY) {
                  if (typeof context === "undefined") {
                    console.log("Context not Set!");
                    return;
                  }
                  DY.API(eventType, context);
                } else {
                  console.log("Missing: DY variable is not defined");
                }
              }
              function f_getOfferCodeFromURL(key) {
                var reg = new RegExp("(^|&)" + key + "=([^&]*)(&|$)");
                var r = window.location.search.substr(1).match(reg);
                if (r != null) return unescape(r[2]);
                return null;
              }
              function f_initDY() {
                var storeState = f_getSessionStorage();
                for (var i = 0; i < storeState.guests.length; i++) {
                  var productId = SPECIFICATION_SKU_MAPPING.filter(function (
                    room
                  ) {
                    return room.code == storeState.guests[i].selectedRoom.code;
                  });
                  var roomValue =
                    storeState.offerTotalPrice.currencyPerRoomPrice[i];
                  var context = {
                    name: "Purchase",
                    properties: {
                      checkIn: moment(storeState.checkindate).format(
                        "DD/MM/YYYY"
                      ),
                      checkOut: moment(storeState.checkoutdate).format(
                        "DD/MM/YYYY"
                      ),
                      uniqueTransactionId:
                        storeState.guestPaymentResult[i].confirmationCode,
                      rateCode: f_getOfferCodeFromURL("offerCode"),
                      numOfChildren: storeState.guests[i].children,
                      value: roomValue,
                      currency: storeState.currency,
                      cart: [
                        {
                          productId: productId[0].sku,
                          quantity: storeState.los,
                          itemPrice: roomValue / storeState.los,
                          size: "XL",
                        },
                      ],
                      dyType: "purchase-v1",
                    },
                  };
                  DY_MBE("event", context);
                }
              }
              f_initDY();
            })(jQuery);
          }
        } catch (e) {
          utag.DB(e);
        }
      } catch (e) {
        utag.DB(e);
      }
      try {
        try {
          if (
            utag.data["domain_pathname"]
              .toString()
              .toLowerCase()
              .indexOf(
                "forms.marinabaysands.com/email-signup-en/index.html".toLowerCase()
              ) > -1 ||
            utag.data["domain_pathname"]
              .toString()
              .toLowerCase()
              .indexOf(
                "forms.marinabaysands.com/email-signup-sc/index.html".toLowerCase()
              ) > -1 ||
            utag.data["domain_pathname"]
              .toString()
              .toLowerCase()
              .indexOf(
                "forms.marinabaysands.com/email-signup-tc/index.html".toLowerCase()
              ) > -1 ||
            utag.data["domain_pathname"]
              .toString()
              .toLowerCase()
              .indexOf(
                "forms.marinabaysands.com/email-signup-jp/index.html".toLowerCase()
              ) > -1 ||
            utag.data["domain_pathname"]
              .toString()
              .toLowerCase()
              .indexOf(
                "forms.marinabaysands.com/email-signup-ko/index.html".toLowerCase()
              ) > -1 ||
            utag.data["domain_pathname"]
              .toString()
              .toLowerCase()
              .indexOf(
                "forms.marinabaysands.com/email-signup-id/index.html".toLowerCase()
              ) > -1
          ) {
            $("#submit").on("click", function () {
              var salutation,
                firstname,
                lastname,
                email_address,
                country,
                pl,
                phone_number,
                country_code;
              if ($("#salutation").val()) {
                salutation = $("#salutation :selected").text();
              }
              if ($("#firstname").val()) {
                firstname = $("#firstname").val();
              }
              if ($("#lastname").val()) {
                lastname = $("#lastname").val();
              }
              if ($("#email_address").val()) {
                email_address = $("#email_address").val();
              }
              if ($("#country").val()) {
                country = $("#country :selected").text();
              }
              if ($("#preferred_language").val()) {
                pl = $("#preferred_language :selected").text();
              }
              if ($("#formBody div.Opt_cover div.col_3 label input").val()) {
                phone_number = $(
                  "#formBody div.Opt_cover div.col_3 label input"
                ).val();
              }
              if (
                $(
                  "#formBody div.Opt_cover div.col_3 select[name ='country_code']"
                ).val()
              ) {
                country_code = $(
                  "#formBody div.Opt_cover div.col_3 select[name ='country_code']"
                ).val();
              }
              var c = grecaptcha.getResponse();
              if (
                salutation != "" &&
                typeof salutation != "undefined" &&
                firstname != "" &&
                typeof firstname != "undefined" &&
                lastname != "" &&
                typeof lastname != "undefined" &&
                email_address != "" &&
                typeof email_address != "undefined" &&
                phone_number != "" &&
                typeof phone_number != "undefined" &&
                country_code != "" &&
                typeof country_code != "undefined" &&
                pl != "" &&
                typeof pl != "undefined" &&
                c != ""
              ) {
                utag.data["email_signup"] = {
                  customer_email: email_address,
                  customer_phone: phone_number,
                  customer_phone_country_code: country_code,
                  tealium_event: "email_signup",
                };
                utag.link(utag.data["email_signup"]);
              }
              if (
                salutation != "" &&
                typeof salutation != "undefined" &&
                firstname != "" &&
                typeof firstname != "undefined" &&
                lastname != "" &&
                typeof lastname != "undefined" &&
                email_address != "" &&
                typeof email_address != "undefined" &&
                pl != "" &&
                typeof pl != "undefined" &&
                c != "" &&
                (phone_number == "" ||
                  typeof phone_number == "undefined" ||
                  country_code == "" ||
                  typeof country_code == "undefined")
              ) {
                utag.data["email_signup"] = {
                  customer_email: email_address,
                  tealium_event: "email_signup",
                };
                utag.link(utag.data["email_signup"]);
              }
            });
          }
        } catch (e) {
          utag.DB(e);
        }
      } catch (e) {
        utag.DB(e);
      }
      try {
        try {
          if (1) {
            console.log("Step0");
            var EngagementPOCVal = utag.data["va.properties.10367"];
            console.log(EngagementPOCVal);
            $(
              "#navbarNavAltMarkup.justify-content-end.navbar-collapse.collapse ul.navbar-nav li.dropdown-booking.dropdown.nav-item a.d-lg-inline-block.d-none.btn-secondary.btn"
            ).on("click", function () {
              DY.API("event", {
                name: "EngagementPOC",
                properties: { FindEngaPOC: EngagementPOCVal },
              });
              console.log("Step1");
            });
          }
        } catch (e) {
          utag.DB(e);
        }
      } catch (e) {
        utag.DB(e);
      }
      try {
        if (1) {
          if (typeof utag.runonce == "undefined") utag.runonce = {};
          if (typeof utag.runonce[70] == "undefined") {
            utag.runonce[70] = 1;
            jQuery(
              "#nav-list li.parent-nav a span.nav_link_text span.000000"
            ).bind("click", function (e) {
              utag.link({
                event_name: "Top Navigation",
                link_category: "utag.data.domain_pathname",
                link_name: $(this).text().trim(),
              });
            });
          }
        }
      } catch (e) {
        utag.DB(e);
      }
      try {
        try {
          if (
            /^((?!deals\/.*online-ordering).)*$/.test(utag.data["dom.url"]) &&
            /^((?!restaurants\/.*\/order.*).)*$/.test(utag.data["dom.url"]) &&
            /^((?!hotel.*\/in-room-dining).)*$/.test(utag.data["dom.url"]) &&
            /^((?!.*(mooncakes-online-order|mooncakes-2020-test).*).)*$/.test(
              utag.data["dom.url"]
            ) &&
            /^((?!museum\/asfOrder.*).)*$/.test(utag.data["dom.url"]) &&
            /^((?!museum\/artscience-friends-order.*).)*$/.test(
              utag.data["dom.url"]
            )
          ) {
            var MBS = MBS || {};
            MBS.Tagging = MBS.Tagging || {};
            MBS.Tagging = {
              initEvents: function () {
                var _this = this;
                _this.initTopNavigationLinks();
                _this.initSelected();
                _this.initRoomFilterChange();
                _this.initSocialClick();
                _this.initBannerClick();
                _this.initLanguageHeader();
                _this.initPDFDwonloads();
                _this.initLinkClick();
                _this.initTileClick();
                _this.initOutBoundLink();
                _this.initViewVideo();
                _this.initPercentWatchedVideo();
              },
              initTopNavigationLinks: function () {
                var _this = this;
                $("#nav-list a").on("click", function (event) {
                  if ($(this).closest("#main_nav").size() > 0) {
                    _this.triggerTealiumEvent({
                      event_name: "Top Navigation",
                      event_action: window.location.href,
                      event_label: $(this).attr("href"),
                    });
                  }
                });
              },
              initLanguageHeader: function () {
                var _this = this;
                $(".nav-lang-switch-lang").on("click", function () {
                  $(this).addClass("ttracked");
                  _this.triggerTealiumEvent({
                    event_name: "Language Header",
                    event_action: $(this).attr("href"),
                    event_label: window.location.href,
                  });
                });
              },
              initSelected: function () {
                var _this = this;
                $(".multi li").on("click", function () {
                  setTimeout(function () {
                    var changeselected = _this.getSelectedCheckbox();
                    if (_this.getPathName() === "store-directory.html") {
                      _this.triggerTealiumEvent({
                        event_name: "storecategorychange",
                        store_category: changeselected,
                      });
                    }
                    if (_this.getPathName() === "shoppes-exclusives.html") {
                      _this.triggerTealiumEvent({
                        event_name: "storecollectionchange",
                        store_collection: changeselected,
                      });
                    }
                    if (_this.getPathName() === "view-all.html") {
                      _this.triggerTealiumEvent({
                        event_name: "restaurantcuisinechange",
                        restaurant_cuisine: changeselected,
                      });
                    }
                  }, 400);
                });
              },
              initRoomFilterChange: function () {
                var _this = this;
                $(".filter_bar select").on("selectmenuchange", function (e) {
                  var roomSelected = _this.getRoomFilterChangeForDropdown();
                  setTimeout(function () {
                    var displayRoomTypes = _this.getDisplayRoomTypes();
                    _this.triggerTealiumEvent({
                      event_name: "roomfilterchange",
                      filter_room_type: roomSelected.filter_room_type,
                      filter_no_of_rooms: roomSelected.filter_no_of_rooms,
                      filter_amenities: roomSelected.filter_amenities,
                      displayed_room_types: displayRoomTypes,
                    });
                    var errormessage = _this.getErrorMessage();
                    if (errormessage) {
                      _this.triggerTealiumEvent({
                        error_message: errormessage,
                        event_name: "error_message",
                      });
                    }
                  }, 400);
                });
              },
              initSocialClick: function () {
                var _this = this;
                $(".cnt_paragraph_1 a[href^='http']").click(function () {
                  _this.triggerTealiumEvent({
                    event_name: "social_click",
                    event_action: $(this).text(),
                    link_category: "SocialMedia",
                    link_name: $(this).text(),
                  });
                });
              },
              initBannerClick: function () {
                var _this = this;
                $(".mh_item_1 a").on("click", function () {
                  _this.triggerTealiumEvent({
                    event_name: "Banner",
                    event_action: window.location.href,
                    event_label: $(this).attr("href"),
                  });
                });
              },
              initPDFDwonloads: function () {
                var _this = this;
                $('a[href$=".pdf"]').on("click", function () {
                  $(this).addClass("ttracked");
                  _this.triggerTealiumEvent({
                    event_name: "PDF",
                    event_action: window.location.href,
                    event_label: $(this).attr("href"),
                  });
                });
              },
              initLinkClick: function () {
                var _this = this;
                $(".detailBtnWrapper a").on("click", function () {
                  var linkName = $(this).attr("href");
                  _this.triggerTealiumEvent({
                    event_name: "link_click",
                    event_action: linkName,
                    link_category: "Page",
                    link_name: linkName,
                    page_name: linkName.substring(
                      linkName.lastIndexOf("/") + 1
                    ),
                  });
                });
              },
              initGenericEvent: function () {
                var _this = this;
                $("#nav-list a").on("click", function () {
                  if ($(this).closest("#main_nav").size() > 0) {
                    _this.triggerTealiumEvent({
                      event_interaction: "click",
                      event_action: $(this).text(),
                      event_name: "generic_event",
                      event_ui_element: "Navigation",
                    });
                  }
                });
              },
              initTileClick: function () {
                var _this = this;
                $(".cnt_image_1 a").on("click", function () {
                  _this.triggerTealiumEvent({
                    event_name: "tile_click",
                    event_action: $(this).attr("href"),
                    link_category: "Tile",
                    link_name: $(this).attr("href"),
                  });
                });
              },
              initOutBoundLink: function () {
                var _this = this;
                $(document).on("click", "a:not(.ttracked)", function () {
                  var url = $(this).attr("href");
                  if (url) {
                    var hostname = $("<a>").prop("href", url).prop("hostname");
                    if (window.location.href.indexOf(hostname) == -1) {
                      _this.triggerTealiumEvent({
                        event_name: "Outbound Link",
                        event_action: window.location.href,
                        event_label: url.replace(/(^\w+:|^)\/\//, ""),
                        link_name: hostname,
                        outbound_url: url,
                      });
                    }
                  }
                });
              },
              initOutBoundLink2: function () {
                var _this = this;
                $("a").on("click", function () {
                  var url = $(this).attr("href");
                  var hostname = $("<a>").prop("href", url).prop("hostname");
                  if (hostname != "www.marinabaysands.com") {
                    _this.triggerTealiumEvent({
                      event_name: "outbound_link",
                      link_category: "Link",
                      link_name: hostname,
                      outbound_url: url,
                    });
                  } else {
                    _this.triggerTealiumEvent({
                      event_name: "outbound_link",
                      link_category: "Link",
                      link_name: "InternalLink",
                    });
                  }
                });
              },
              initBackToTop: function () {
                var _this = this;
                $("div#scroll").on("click", function () {
                  _this.triggerTealiumEvent({
                    event_name: "Back To Top",
                    event_action: window.location.href,
                    event_label: $(this).attr("title"),
                  });
                });
              },
              initViewVideo: function () {
                var _this = this;
                window._wq = window._wq || [];
                $("div[data-videoid]").each(function () {
                  var videoid = $(this).data("videoid");
                  _wq.push({
                    id: videoid,
                    onReady: function (video) {
                      video.bind("play", function () {
                        _this.triggerTealiumEvent({
                          event_name: "view_video",
                          event_action: this.src,
                          link_category: "video",
                          link_name: this.src,
                        });
                      });
                    },
                  });
                });
              },
              initPercentWatchedVideo: function () {
                var _this = this;
                window._wq = window._wq || [];
                $("div[data-videoid]").each(function () {
                  var videoid = $(this).data("videoid");
                  _wq.push({
                    id: videoid,
                    onReady: function (video) {
                      video.bind(
                        "percentwatchedchanged",
                        function (percent, lastPercent) {
                          if (percent >= 0.25 && lastPercent < 0.25) {
                            _this.triggerTealiumEvent({
                              event_name: "percent_watched_video",
                              link_category: "video",
                              percent_watched:
                                "The viewer has watched 25% of the video!",
                            });
                          }
                          if (percent >= 0.5 && lastPercent < 0.5) {
                            _this.triggerTealiumEvent({
                              event_name: "percent_watched_video",
                              link_category: "video",
                              percent_watched:
                                "The viewer has watched 50% of the video!",
                            });
                          }
                          if (percent >= 0.75 && lastPercent < 0.75) {
                            _this.triggerTealiumEvent({
                              event_name: "percent_watched_video",
                              link_category: "video",
                              percent_watched:
                                "The viewer has watched 75% of the video!",
                            });
                          }
                        }
                      );
                    },
                  });
                });
              },
              getPDFDownloads: function ($elem) {
                if ($elem.parents(".wrap").length > 0) {
                  return (
                    $(".cnt-title-1 p").text() +
                    ":" +
                    $(this).closest("div.wrap").find("h3").text() +
                    ":" +
                    $(this).text()
                  );
                } else {
                  return (
                    $(".cnt-title-1 p").text() +
                    ":" +
                    $(this).text() +
                    ":" +
                    $(this).text()
                  );
                }
              },
              getSelectedCheckbox: function () {
                var selected = [];
                $(".multi li").each(function () {
                  if ($(this).hasClass("checked")) {
                    selected.push($(this).text().trim());
                  }
                });
                return selected;
              },
              getRoomFilterChangeForDropdown: function () {
                var roomFilter = {};
                $(".filter_bar select").each(function () {
                  if ($(this).is("#filter_1")) {
                    roomFilter.filter_room_type = $(this).val().trim();
                  }
                  if ($(this).is("#filter_2")) {
                    roomFilter.filter_no_of_rooms = $(this).val().trim();
                  }
                  if ($(this).is("#filter_3")) {
                    roomFilter.filter_amenities = $(this).val().trim();
                  }
                });
                return roomFilter;
              },
              getDisplayRoomTypes: function () {
                var displayedRoomTypes = [];
                $(".listpage-title").each(function () {
                  displayedRoomTypes.push($(this).find("h2>a").text());
                });
                return displayedRoomTypes;
              },
              getErrorMessage: function () {
                if ($(".listingContentContainer div").hasClass("hidden")) {
                  return "";
                } else {
                  return $(".no_results").text().trim();
                }
              },
              getPathName: function () {
                var url = window.location.pathname;
                var filename = url.substring(url.lastIndexOf("/") + 1);
                return filename;
              },
              triggerTealiumEvent: function (data) {
                utag.link(data);
                console.log("Tealium Event Triggered: ");
                console.log(data);
              },
            };
            MBS.Tagging.initEvents();
          }
        } catch (e) {
          utag.DB(e);
        }
      } catch (e) {
        utag.DB(e);
      }
      try {
        if (typeof utag.runonce == "undefined") utag.runonce = {};
        utag.jdh = function (h, i, j, k) {
          h = utag.jdhc.length;
          if (h == 0) window.clearInterval(utag.jdhi);
          else {
            for (i = 0; i < h; i++) {
              j = utag.jdhc[i];
              k = jQuery(j.i).is(":visible") ? 1 : 0;
              if (k != j.s) {
                if (j.e == (j.s = k))
                  jQuery(j.i).trigger(j.e ? "afterShow" : "afterHide");
              }
            }
          }
        };
        utag.jdhi = window.setInterval(utag.jdh, 250);
        utag.jdhc = [];
        if (1) {
          if (typeof utag.runonce[84] == "undefined") {
            utag.runonce[84] = 1;
            jQuery(document.body).on(
              "click",
              "a.cnt_button_1,div#main-content span a[linktype=page]",
              function (e) {
                utag.link({
                  event_name: "button click",
                  event_label: $(this).attr("href"),
                  event_action: utag.data.domain_pathname,
                });
              }
            );
          }
        }
      } catch (e) {
        utag.DB(e);
      }
      try {
        if (
          utag.data["dom.domain"]
            .toString()
            .toLowerCase()
            .indexOf("bookarestaurant".toLowerCase()) > -1 ||
          /marinabaysands.com\/restaurants\/(.*)\/reservation\/confirmation.html/.test(
            utag.data["domain_pathname"]
          )
        ) {
          if (typeof utag.runonce[116] == "undefined") {
            utag.runonce[116] = 1;
            utag.jdhc.push({ i: "#confirmation_DisplayString", e: 1 });
            jQuery(document.body).on(
              "afterShow",
              "#confirmation_DisplayString",
              function (e) {
                if (jQuery("#confirmation_DisplayString").is(":visible")) {
                  utag.view({
                    restaurant_category: ["Restaurant Reservations"],
                    restaurant_order_id: $("#BookingReferenceTD").text(),
                    restaurant_name: utag.data._pathname4.split(),
                    restaurant_time_category: $("#meal_option_selected")
                      .text()
                      .split(),
                    restaurant_guest_quantity: $("#partySize_option_selected")
                      .text()
                      .match(/\d+/)[0]
                      .split(),
                    restaurant_unit_price: ["150"],
                    ga_page_override: "/booking/widget/confirmation",
                  });
                }
              }
            );
          }
        }
      } catch (e) {
        utag.DB(e);
      }
      try {
        if (1) {
          if (typeof utag.runonce[122] == "undefined") {
            utag.runonce[122] = 1;
            jQuery(document.body).on("mouseover", "#Sticky2", function (e) {
              utag.link({
                event_name: "Hover",
                event_action: "Book Direct",
                domain_pathname: $(this).text().trim(),
              });
            });
          }
        }
      } catch (e) {
        utag.DB(e);
      }
      try {
        if (1) {
          if (typeof utag.runonce[132] == "undefined") {
            utag.runonce[132] = 1;
            jQuery(document.body).on(
              "click",
              "#horz_2.default.modCnt_tab_1.mod.cnt-tab-1 ul.horz_2.resp-tabs-list li.resp-tab-active.horz_2.resp-tab-item",
              function (e) {
                utag.link({
                  event_name: "In Page Tab",
                  event_label: $(this).text().trim(),
                  event_action: utag.data.domain_pathname,
                });
              }
            );
          }
        }
      } catch (e) {
        utag.DB(e);
      }
      try {
        try {
          if (
            utag.data["dom.pathname"]
              .toString()
              .toLowerCase()
              .indexOf("/Booking/Listing".toLowerCase()) > -1
          ) {
            var bookingMethod,
              nights,
              arrDate,
              depDate,
              offerCode,
              roomsAvailable;
            var qParams = {};
            var qs = document.location.search;
            var params = qs.slice(1).split("&");
            for (var n = 0; n < params.length; n++) {
              var keyVal = params[n].split("=");
              qParams[keyVal[0].toLowerCase()] = keyVal[1];
            }
            var currencyCode = $("#currency_select_title .ddlabel")
              .text()
              .split(" ")[0];
            if (currencyCode === "" || currencyCode.length < 1) {
              currencyCode = "SGD";
            }
            var searchType = "Normal";
            if (getCookie("bookingMethod") === 2) {
              searchType = "Refine";
            }
            if (window && window.trackingObject) {
              var obj = window.trackingObject;
              if (obj.quantity !== undefined) {
                nights = obj.quantity;
              } else if (qParams.los && qParams.los !== "") {
                nights = qParams.los;
              }
              if (obj.arriveDate !== undefined) {
                arrDate = obj.arriveDate;
              } else if (qParams.checkindate && qParams.checkindate !== "") {
                arrDate = qParams.checkindate;
              }
              if (arrDate.indexOf("0") === 0) {
                arrDate = arrDate.slice(1);
              }
              if (obj.departDate !== undefined) {
                depDate = obj.departDate;
              } else {
                var datein = new Date(arrDate);
                var days = parseInt(nights, 10);
                if (!isNaN(datein.getTime())) {
                  datein.setDate(datein.getDate() + days);
                  depDate = datein.toInputFormat();
                } else {
                  depDate = "";
                }
              }
              offerCode = "";
              if (obj.offerCode !== undefined && obj.offerCode !== "") {
                offerCode = obj.offerCode;
              } else if (qParams.offercode && qParams.offercode !== "") {
                offerCode = qParams.offercode;
              }
              nights = parseInt(nights, 10);
              var nights_ = nights;
              if (isNaN(nights) || nights < 1) {
                nights = 0;
                nights_ = "-";
              }
              bookingMethod = window.bookingMethods[getCookie("bookingMethod")];
            }
            utag.data["reservation_room"] = {
              currency: currencyCode,
              reservation_booking_method: bookingMethod,
              search_type: searchType,
              reservation_room_num_nights: nights_,
              reservation_room_date_checkin: arrDate.replace(/\b0(?=\d)/g, ""),
              reservation_room_date_checkout: depDate.replace(/\b0(?=\d)/g, ""),
              reservation_room_rate_code: offerCode.toUpperCase(),
              searches: 1,
              tealium_event: "checkout",
              checkout_step: 1,
              event_category: "Booking",
              event_action: "Searched",
            };
            if ($(".errormsgbox").is(":visible")) {
              var event_obj = utag.data["reservation_room"];
              event_obj["event_label"] = "No Rooms Available";
              event_obj["metric4"] = 1;
              event_obj["dimension10"] = "No";
            } else {
              event_obj = utag.data["reservation_room"];
              event_obj["event_label"] = "Rooms Available";
              event_obj["metric1"] = 1;
              event_obj["dimension10"] = "Yes";
            }
            utag.link(event_obj);
            utag.data["reservation_room"] = {
              currency: currencyCode,
              reservation_booking_method: bookingMethod,
              search_type: searchType,
              reservation_room_num_nights: nights_,
              reservation_room_date_checkin: arrDate.replace(/\b0(?=\d)/g, ""),
              reservation_room_date_checkout: depDate.replace(/\b0(?=\d)/g, ""),
              reservation_room_rate_code: offerCode.toUpperCase(),
              searches: 1,
              tealium_event: "checkout",
              checkout_step: 1,
              event_category: "Booking",
              event_action: "Searched",
            };
            $(".button").click(function (e) {
              var currencyCode = $("#currency_select_title .ddlabel")
                .text()
                .split(" ")[0];
              if (currencyCode === "" || currencyCode.length < 1) {
                currencyCode = "SGD";
              }
              var roomRate = $(this).prev("td").find(".room_rate").attr("rate");
              var suiteName = $(this).parent().find("th").text();
              suiteName = suiteName.replace(/(^\s+)|(\s+$)/g, "");
              var roomRateRange = getRoomRateRange(parseFloat(roomRate));
              var event_obj = utag.data["reservation_room"];
              (event_obj["currency"] = currencyCode),
                (event_obj["product_id"] = [offerCode]),
                (event_obj["product_name"] = [suiteName]),
                (event_obj["product_unit_price"] = [parseFloat(roomRate)]),
                (event_obj["reservation_room_num_nights"] = [nights]),
                (event_obj["reservation_room_date_checkin"] = [
                  arrDate.replace(/\b0(?=\d)/g, ""),
                ]),
                (event_obj["reservation_room_date_checkout"] = [
                  depDate.replace(/\b0(?=\d)/g, ""),
                ]),
                (event_obj["reservation_booking_method"] = [bookingMethod]),
                (event_obj["reservation_room_rate_range"] = [roomRateRange]),
                (event_obj["dimension13"] = suiteName),
                (event_obj["metric7"] = parseFloat(roomRate)),
                (event_obj["suites_added"] = 1),
                (event_obj["searches"] = "0"),
                (event_obj["tealium_event"] = "checkout"),
                (event_obj["checkout_step"] = 2),
                (event_obj["event_category"] = "Booking"),
                (event_obj["event_action"] = "Room Selected"),
                utag.link(event_obj);
            });
          }
        } catch (e) {
          utag.DB(e);
        }
      } catch (e) {
        utag.DB(e);
      }
      try {
        try {
          if (
            utag.data["dom.pathname"]
              .toString()
              .toLowerCase()
              .indexOf("/Booking/Enhance".toLowerCase()) > -1
          ) {
            var bookingMethod =
              window.bookingMethods[getCookie("bookingMethod")];
            utag.data["reservation_room"] = {
              reservation_booking_method: bookingMethod,
              metric9: 1,
              tealium_event: "checkout",
              checkout_step: 3,
              event_category: "Booking",
              event_action: "Upgrade Offer",
            };
            utag.link(utag.data["reservation_room"]);
            $(
              "input[id^\x3d'ContentPlaceHolder1_rptUpgrades_checkboxAdd_']"
            ).on("click", function () {
              if (this.checked) {
                var elmId = this.id.split("_").reverse()[0];
                var offerTitle = $.trim(
                  $(
                    "#ContentPlaceHolder1_rptUpgrades_dvUpgradeItems_" +
                      elmId +
                      " h3"
                  ).text()
                );
                var offerRate = $.trim(
                  $(
                    "#ContentPlaceHolder1_rptUpgrades_dvUpgradeItems_" +
                      elmId +
                      " label.price"
                  ).text()
                ).split(" ")[1];
                offerRate = parseFloat(offerRate.replace(",", ""));
                setSessionCookie("upgradeOffer", offerTitle + "||" + offerRate);
              } else setSessionCookie("upgradeOffer", "");
            });
          }
        } catch (e) {
          utag.DB(e);
        }
      } catch (e) {
        utag.DB(e);
      }
      try {
        try {
          if (
            utag.data["dom.pathname"]
              .toString()
              .toLowerCase()
              .indexOf("/Booking/FormDetails".toLowerCase()) > -1
          ) {
            var bookingMethod =
              window.bookingMethods[getCookie("bookingMethod")];
            var uoString = getCookie("upgradeOffer");
            if (uoString && uoString !== "" && uoString.length > 0) {
              var offerDetails = uoString.split("||");
              var offerTitle = offerDetails[0];
              var offerRate = offerDetails[1];
              var eventObj = {
                reservation_booking_method: bookingMethod,
                upgrade_offer_title: offerTitle,
                upgrade_offer_accepted: 1,
                upgrade_offer_rate: parseFloat(offerRate),
                event_category: "Booking",
                event_action: "Upgrade Offer Accepted",
              };
              utag.link(eventObj);
            }
            var i = 1;
            while (typeof window["trackingObject" + i] === "object") {
              window["trackingObject" + i]["price"] =
                window["trackingObject" + i]["unitPrice"];
              try {
                window["trackingObject" + i]["price"] =
                  parseFloat(window["trackingObject" + i]["price"]) -
                  parseFloat(window["trackingObject" + i]["tax"]);
              } catch (e) {}
              utag.data["reservation_room_" + i] = {
                currency: "SGD",
                product_id: [window["trackingObject" + i]["offerCode"]] || [""],
                product_name: [window["trackingObject" + i]["sku"]] || [""],
                product_unit_price: [window["trackingObject" + i]["price"]] || [
                  "",
                ],
                reservation_room_num_nights: [
                  window["trackingObject" + i]["quantity"],
                ] || [""],
                reservation_room_category: ["Room Reservations"],
                reservation_room_date_checkin: [
                  window["trackingObject" + i]["arriveDate"],
                ] || [""],
                reservation_room_date_checkout: [
                  window["trackingObject" + i]["departDate"],
                ] || [""],
                reservation_booking_method: [
                  window.bookingMethods[getCookie("bookingMethod")],
                ] || [""],
                reservation_room_rate_range: [
                  window.getRoomRateRange(
                    window["trackingObject" + i]["price"]
                  ),
                ] || [""],
                reservation_room_rate_code:
                  window["trackingObject" + i]["offerCode"].toUpperCase() || "",
                dimension13: window["trackingObject" + i]["offerCode"] || "",
                billing_info_views: 1,
                metric7: window["trackingObject" + i]["price"],
                searches: "0",
                tealium_event: "checkout",
                checkout_step: 4,
                event_category: "Booking",
                event_action: "Billing Info",
              };
              utag.link(utag.data["reservation_room_" + i]);
              i++;
            }
          }
        } catch (e) {
          utag.DB(e);
        }
      } catch (e) {
        utag.DB(e);
      }
      try {
        try {
          if (1) {
            setTimeout(
              utag.link(
                {
                  eventCategory: "adjusted bounce rate",
                  eventAction: "page visit 30 seconds or more",
                },
                null,
                ["185"]
              ),
              20000
            );
          }
        } catch (e) {
          utag.DB(e);
        }
      } catch (e) {
        utag.DB(e);
      }
      try {
        try {
          if (
            utag.data["dom.url"]
              .toString()
              .toLowerCase()
              .indexOf("/sandsrewardsclub/".toLowerCase()) > -1 ||
            utag.data["dom.url"]
              .toString()
              .toLowerCase()
              .indexOf("/sands-rewards-club/".toLowerCase()) > -1
          ) {
            (function ($) {
              var tractWhat = "GA";
              var gaTracker = [
                "mbsgasrctest",
                "mbsgasrc",
                "mbsoldua",
                "mbscombined",
              ];
              var CATEGORY = {
                Button: "Button",
                TextLink: "TextLink",
                ImageLink: "ImageLink",
                OnPageInteraction: "OnPageInteraction",
                Login: "Login",
                FileDownload: "FileDownload",
              };
              var ACTION = {
                getCurrentURL: function () {
                  return getCleanCurrentURL();
                },
                getLinkName: function (elem) {
                  return getLinkName(elem);
                },
                FindID: "FindID",
                Verification: "Verification",
                Lightbox: "Lightbox",
                SRL: "SRL",
                SRC: "SRC",
              };
              var LABEL = {
                getCurrentURL: function () {
                  return getCleanCurrentURL();
                },
                getLinkName: function (elem) {
                  return getLinkName(elem);
                },
                ToolTipSandsDollars: "ToolTip:SandsDollars",
                SandsDollarExpiry: "SandsDollarExpiry",
                FastTrack: "FastTrack",
                FastTrackLearnMore: "FastTrackLearnMore",
                SandsDollarsExpiry: "SandsDollarsExpiry",
                ToolTipSandsBonusDollars: "ToolTip:SandsBonusDollars",
                SandsBonusDollarsExpiry: "SandsBonusDollarsExpiry",
                ToolTipTierPoints: "ToolTip:TierPoints",
                ViewPrivileges: "ViewPrivileges",
              };
              function pushToGA(category, action, label, value) {
                if (!category && !action && !label && !value) {
                  console.log("Unable to trigger event! No data to push");
                  return false;
                }
                if (!category || !action || !label) {
                  console.log(
                    "Unable to trigger event! category: " +
                      category +
                      ", action: " +
                      action +
                      ", label: " +
                      label
                  );
                  return false;
                }
                if (!category || !action || !label) {
                  console.log(
                    "Unable to trigger event! category: " +
                      category +
                      ", action: " +
                      action +
                      ", label: " +
                      label
                  );
                  return false;
                }
                var dataToPush = {
                  event: "GAEvent",
                  eventCategory: category,
                  eventAction: action,
                  eventLabel: label,
                  eventValue: value,
                };
                var message =
                  "GA Debug: " +
                  "eventCategory: " +
                  category +
                  ", eventAction: " +
                  action +
                  ", eventLabel: " +
                  label +
                  ", eventValue: " +
                  value;
                if (typeof ga !== "undefined") {
                  if (typeof gaTracker === "object" && gaTracker.length > 0) {
                    for (var i = 0; i < gaTracker.length; i++) {
                      ga(
                        gaTracker[i] + ".send",
                        "event",
                        category,
                        action,
                        label
                      );
                    }
                  } else {
                    ga(gaTracker + ".send", "event", category, action, label);
                  }
                } else if (typeof dataLayer !== "undefined") {
                  dataLayer.push(dataToPush);
                }
                if (window.console) {
                  console.log(message);
                }
              }
              function pleasePushToGA(data) {
                var category, action, label, value;
                if (Array.isArray(data)) {
                  var _data = data,
                    category = _data[0],
                    action = _data[1],
                    label = _data[2],
                    value = _data[3];
                } else if (typeof data !== "undefined" && data != null) {
                  if (
                    typeof data["category"] !== "undefined" &&
                    data["category"] != null
                  ) {
                    category = data["category"];
                  }
                  if (
                    typeof data["action"] !== "undefined" &&
                    data["action"] != null
                  ) {
                    action = data["action"];
                  }
                  if (
                    typeof data["label"] !== "undefined" &&
                    data["label"] != null
                  ) {
                    label = data["label"];
                  }
                  if (
                    typeof data["value"] !== "undefined" &&
                    data["value"] != null
                  ) {
                    value = data["value"];
                  }
                }
                pushToGA(category, action, label, value);
              }
              function pushToTealium(category, action, label, value) {
                if (!category && !action && !label && !value) {
                  return false;
                }
                if (!category || !action || !label) {
                  console.log(
                    "Unable to trigger event! category: " +
                      category +
                      ", action: " +
                      action +
                      ", label: " +
                      label
                  );
                  return false;
                }
                if (!category || !action || !label) {
                  console.log(
                    "Unable to trigger event! category: " +
                      category +
                      ", action: " +
                      action +
                      ", label: " +
                      label
                  );
                  return false;
                }
                var dataToPush = {
                  event_name: "GAEvent",
                  event_category: category,
                  event_action: action,
                  event_label: label,
                  eventValue: value,
                };
                var message =
                  "Tealium Debug: " +
                  "event_category: " +
                  category +
                  ", event_action: " +
                  action +
                  ", event_label: " +
                  label +
                  ", eventValue: " +
                  value;
                if (
                  typeof utag !== "undefined" &&
                  typeof typeof utag["link"] == "function"
                ) {
                  console.log("Tealium utag.link should be triggered here...");
                  console.log(dataToPush);
                } else {
                  console.error("Tealium utag link is NOT available");
                  console.log(dataToPush);
                }
                if (window.console) {
                  console.log(message);
                }
              }
              function pleasePushToTealium(data) {
                var category, action, label, value;
                if (Array.isArray(data)) {
                  var category = data[0],
                    action = data[1],
                    label = data[2],
                    value = data[3];
                } else if (typeof data !== "undefined" && data != null) {
                  if (
                    typeof data["category"] !== "undefined" &&
                    data["category"] != null
                  ) {
                    category = data["category"];
                  }
                  if (
                    typeof data["action"] !== "undefined" &&
                    data["action"] != null
                  ) {
                    action = data["action"];
                  }
                  if (
                    typeof data["label"] !== "undefined" &&
                    data["label"] != null
                  ) {
                    label = data["label"];
                  }
                  if (
                    typeof data["value"] !== "undefined" &&
                    data["value"] != null
                  ) {
                    value = data["value"];
                  }
                }
                pushToTealium(category, action, label, value);
              }
              function pleaseTrackThisData(data) {
                switch (tractWhat) {
                  case "tealium":
                    pleasePushToTealium(data);
                    break;
                  case "GA":
                    pleasePushToGA(data);
                    break;
                  default:
                    pleasePushToGA(data);
                    break;
                }
              }
              function getCurrentURL() {
                return window.location.href;
              }
              function getCleanCurrentURL() {
                var windowLocationHref = window.location.href;
                if (typeof windowLocationHref === "string") {
                  if (windowLocationHref.indexOf("#") > 0) {
                    windowLocationHref = windowLocationHref.split("#")[0];
                  }
                  if (windowLocationHref.indexOf("?") > 0) {
                    windowLocationHref = windowLocationHref.split("?")[0];
                  }
                }
                return windowLocationHref;
              }
              function cleanTheURL(url) {
                if (typeof url === "undefined") {
                  return;
                }
                if (typeof url === "string") {
                  if (url.indexOf("#") > 0) {
                    url = url.split("#")[0];
                  }
                  if (url.indexOf("?") > 0) {
                    url = url.split("?")[0];
                  }
                }
                return url;
              }
              function getLinkName(elem) {
                return $(elem).text();
              }
              $.fn.getBtnNameAndDestUrl = function (destUrl) {
                return $(this).text() + ":" + destUrl;
              };
              $.fn.getDestinationUrl = function () {
                return $(this).attr("href") || "";
              };
              $.fn.getViewPrivilegesTierName = function () {
                var cardTypeName = $(this)
                  .closest(".flipster__item__content")
                  .find(".cardType")
                  .text();
                return LABEL.ViewPrivileges + ":" + cardTypeName;
              };
              $(".footer .siteLink a").on("click", function () {
                var data = {
                  category: CATEGORY.TextLink,
                  action: ACTION.getLinkName($(this)),
                  label: $(this).getDestinationUrl(),
                };
                pleaseTrackThisData(data);
              });
              if ($("form#mbsUserlogin").length > 0) {
                $(window).on(
                  "Loyalty.Tracking.LoginSuccess",
                  function (e, args) {
                    if (e.namespace !== "LoginSuccess.Tracking") {
                      return;
                    }
                    var userID = "";
                    if (
                      typeof args["userID"] !== "undefined" &&
                      args["userID"] != null
                    ) {
                      userID = args["userID"];
                    }
                    var data = {
                      category: CATEGORY.Login,
                      action: ACTION.SRC,
                      label: userID,
                    };
                    pleaseTrackThisData(data);
                  }
                );
                $(window).on(
                  "Loyalty.Tracking.LoginSuccessDestination",
                  function (e, args) {
                    if (e.namespace !== "LoginSuccessDestination.Tracking") {
                      return;
                    }
                    var destinationUrl = "";
                    if (
                      typeof args["destinationUrl"] !== "undefined" &&
                      args["destinationUrl"] != null
                    ) {
                      destinationUrl = cleanTheURL(args["destinationUrl"]);
                    }
                    var data = {
                      category: CATEGORY.Button,
                      action: $(
                        ".button-primary.btn-login"
                      ).getBtnNameAndDestUrl(ACTION.getCurrentURL()),
                      label: destinationUrl,
                    };
                    pleaseTrackThisData(data);
                  }
                );
                $(".loginBlock .userToggle").on("click", function () {
                  var data = {
                    category: CATEGORY.OnPageInteraction,
                    action: ACTION.FindID,
                    label: ACTION.getCurrentURL(),
                  };
                  pleaseTrackThisData(data);
                });
                $(".loginBlock .user").on(
                  "click",
                  "#mbUser-error a",
                  function () {
                    var data = {
                      category: CATEGORY.TextLink,
                      action: ACTION.getLinkName($(this)),
                      label: $(this).getDestinationUrl(),
                    };
                    pleaseTrackThisData(data);
                  }
                );
                $(".loginBlock .text-center a").on("click", function () {
                  var data = {
                    category: CATEGORY.TextLink,
                    action: ACTION.getLinkName($(this)),
                    label: $(this).getDestinationUrl(),
                  };
                  pleaseTrackThisData(data);
                });
              }
              if ($("body").hasClass("reset")) {
                $(window).on(
                  "Loyalty.Tracking.ResetVerificationSuccess",
                  function (e, args) {
                    if (e.namespace !== "ResetVerificationSuccess.Tracking") {
                      return;
                    }
                    var verificationMethod = "";
                    if (
                      typeof args["verificationMethod"] !== "undefined" &&
                      args["verificationMethod"] != null
                    ) {
                      verificationMethod = args["verificationMethod"];
                    }
                    var data = {
                      category: CATEGORY.Button,
                      action: ACTION.Verification,
                      label: verificationMethod,
                    };
                    pleaseTrackThisData(data);
                  }
                );
                $(".resetBlock .userToggle").on("click", function () {
                  var data = {
                    category: CATEGORY.OnPageInteraction,
                    action: ACTION.FindID,
                    label: ACTION.getCurrentURL(),
                  };
                  pleaseTrackThisData(data);
                });
              }
              $(window).on("Loyalty.Ready", function () {
                if ($("body[class*='tier']").length > 0) {
                  $(
                    ".blockTitle .linkInfo[data-tooltip-content='#sandsDollar']"
                  ).on("click", function () {
                    var data = {
                      category: CATEGORY.OnPageInteraction,
                      action: ACTION.Lightbox,
                      label: LABEL.ToolTipSandsDollars,
                    };
                    pleaseTrackThisData(data);
                  });
                  $(".viewExpiring a").on("click", function () {
                    var labelForData = LABEL.SandsDollarExpiry;
                    if ($(this).closest("#sandsBonusblock").length > 0) {
                      labelForData = LABEL.SandsBonusDollarsExpiry;
                    }
                    var data = {
                      category: CATEGORY.OnPageInteraction,
                      action: ACTION.Lightbox,
                      label: labelForData,
                    };
                    pleaseTrackThisData(data);
                  });
                  $(".cardUpgrade.usedfasttrack a").on("click", function () {
                    var data = {
                      category: CATEGORY.OnPageInteraction,
                      action: ACTION.Lightbox,
                      label: LABEL.FastTrack,
                    };
                    pleaseTrackThisData(data);
                  });
                  $(
                    ".blockTitle .linkInfo[data-tooltip-content='#sandsBonus']"
                  ).on("click", function () {
                    var data = {
                      category: CATEGORY.OnPageInteraction,
                      action: ACTION.Lightbox,
                      label: LABEL.ToolTipSandsBonusDollars,
                    };
                    pleaseTrackThisData(data);
                  });
                  $(".pointsTitle.totalTier .linkInfo").on(
                    "click",
                    function () {
                      var data = {
                        category: CATEGORY.OnPageInteraction,
                        action: ACTION.Lightbox,
                        label: LABEL.ToolTipTierPoints,
                      };
                      pleaseTrackThisData(data);
                    }
                  );
                  $(".cardPrivilege a").on("click", function () {
                    var data = {
                      category: CATEGORY.OnPageInteraction,
                      action: ACTION.Lightbox,
                      label: $(this).getViewPrivilegesTierName(),
                    };
                    pleaseTrackThisData(data);
                  });
                  $(".cuspcp .accordionContent a[href*='.pdf']").on(
                    "click",
                    function () {
                      var data = {
                        category: CATEGORY.FileDownload,
                        action: ACTION.getLinkName($(this)),
                        label: $(this).getDestinationUrl(),
                      };
                      pleaseTrackThisData(data);
                    }
                  );
                }
              });
              if ($("body").hasClass("inside")) {
                $(window).on(
                  "Loyalty.Tracking.ProfileUpdateSuccess",
                  function (e, args) {
                    if (e.namespace !== "ProfileUpdateSuccess.Tracking") {
                      return;
                    }
                    var destinationUrl,
                      buttonName,
                      currentUrl = "";
                    if (
                      typeof args["destinationUrl"] !== "undefined" &&
                      args["destinationUrl"] != null
                    ) {
                      destinationUrl = cleanTheURL(args["destinationUrl"]);
                    }
                    if (
                      typeof args["buttonName"] !== "undefined" &&
                      args["buttonName"] != null
                    ) {
                      buttonName = cleanTheURL(args["buttonName"]);
                    }
                    if (
                      typeof args["currentUrl"] !== "undefined" &&
                      args["currentUrl"] != null
                    ) {
                      currentUrl = cleanTheURL(args["currentUrl"]);
                    }
                    var data = {
                      category: CATEGORY.Button,
                      action: buttonName + ":" + currentUrl,
                      label: destinationUrl,
                    };
                    pleaseTrackThisData(data);
                  }
                );
              }
            })(jQuery);
          }
        } catch (e) {
          utag.DB(e);
        }
      } catch (e) {
        utag.DB(e);
      }
      try {
        try {
          if (
            utag.data["dom.url"]
              .toString()
              .toLowerCase()
              .indexOf("/sandsrewardslifestyle/".toLowerCase()) > -1 ||
            utag.data["dom.url"]
              .toString()
              .toLowerCase()
              .indexOf("/sands-rewards-lifestyle/".toLowerCase()) > -1
          ) {
            (function ($) {
              var tractWhat = "GA";
              var gaTracker = [
                "mbsgasrltest",
                "mbsgasrl",
                "mbsoldua",
                "mbscombined",
              ];
              var CATEGORY = {
                Button: "Button",
                TextLink: "TextLink",
                ImageLink: "ImageLink",
                OnPageInteraction: "OnPageInteraction",
                Login: "Login",
                FileDownload: "FileDownload",
              };
              var ACTION = {
                getCurrentURL: function () {
                  return getCleanCurrentURL();
                },
                getLinkName: function (elem) {
                  return getLinkName(elem);
                },
                FindID: "FindID",
                Verification: "Verification",
                Lightbox: "Lightbox",
                SRL: "SRL",
                SRC: "SRC",
              };
              var LABEL = {
                getCurrentURL: function () {
                  return getCleanCurrentURL();
                },
                getLinkName: function (elem) {
                  return getLinkName(elem);
                },
                ToolTipDestinationDollars: "ToolTip:DestinationDollars",
                DestinationDollarExpiry: "DestinationDollarExpiry",
                FastTrack: "FastTrack",
                FastTrackLearnMore: "FastTrackLearnMore",
                SandsDollarsExpiry: "SandsDollarsExpiry",
                ToolTipSandsBonusDollars: "ToolTip:SandsBonusDollars",
                SandsBonusDollarsExpiry: "SandsBonusDollarsExpiry",
                ToolTipTierPoints: "ToolTip:TierPoints",
                ViewPrivileges: "ViewPrivileges",
              };
              function pushToGA(category, action, label, value) {
                if (!category && !action && !label && !value) {
                  return false;
                }
                if (!category || !action || !label) {
                  console.log(
                    "Unable to trigger event! category: " +
                      category +
                      ", action: " +
                      action +
                      ", label: " +
                      label
                  );
                  return false;
                }
                if (!category || !action || !label) {
                  console.log(
                    "Unable to trigger event! category: " +
                      category +
                      ", action: " +
                      action +
                      ", label: " +
                      label
                  );
                  return false;
                }
                var dataToPush = {
                  event: "GAEvent",
                  eventCategory: category,
                  eventAction: action,
                  eventLabel: label,
                  eventValue: value,
                };
                var message =
                  "GA Debug: " +
                  "eventCategory: " +
                  category +
                  ", eventAction: " +
                  action +
                  ", eventLabel: " +
                  label +
                  ", eventValue: " +
                  value;
                if (typeof ga !== "undefined") {
                  if (typeof gaTracker === "object" && gaTracker.length > 0) {
                    for (var i = 0; i < gaTracker.length; i++) {
                      ga(
                        gaTracker[i] + ".send",
                        "event",
                        category,
                        action,
                        label
                      );
                    }
                  } else {
                    ga(gaTracker + ".send", "event", category, action, label);
                  }
                } else if (typeof dataLayer !== "undefined") {
                  dataLayer.push(dataToPush);
                }
                if (window.console) {
                  console.log(message);
                }
              }
              function pleasePushToGA(data) {
                var category, action, label, value;
                if (Array.isArray(data)) {
                  var category = data[0],
                    action = data[1],
                    label = data[2],
                    value = data[3];
                } else if (typeof data !== "undefined" && data != null) {
                  if (
                    typeof data["category"] !== "undefined" &&
                    data["category"] != null
                  ) {
                    category = data["category"];
                  }
                  if (
                    typeof data["action"] !== "undefined" &&
                    data["action"] != null
                  ) {
                    action = data["action"];
                  }
                  if (
                    typeof data["label"] !== "undefined" &&
                    data["label"] != null
                  ) {
                    label = data["label"];
                  }
                  if (
                    typeof data["value"] !== "undefined" &&
                    data["value"] != null
                  ) {
                    value = data["value"];
                  }
                }
                pushToGA(category, action, label, value);
              }
              function pushToTealium(category, action, label, value) {
                if (!category && !action && !label && !value) {
                  return false;
                }
                if (!category || !action || !label) {
                  console.log(
                    "Unable to trigger event! category: " +
                      category +
                      ", action: " +
                      action +
                      ", label: " +
                      label
                  );
                  return false;
                }
                if (!category || !action || !label) {
                  console.log(
                    "Unable to trigger event! category: " +
                      category +
                      ", action: " +
                      action +
                      ", label: " +
                      label
                  );
                  return false;
                }
                var dataToPush = {
                  event_name: "GAEvent",
                  event_category: category,
                  event_action: action,
                  event_label: label,
                  eventValue: value,
                };
                var message =
                  "Tealium Debug: " +
                  "event_category: " +
                  category +
                  ", event_action: " +
                  action +
                  ", event_label: " +
                  label +
                  ", eventValue: " +
                  value;
                if (
                  typeof utag !== "undefined" &&
                  typeof typeof utag["link"] == "function"
                ) {
                  console.log("Tealium utag.link should be triggered here...");
                  console.log(dataToPush);
                } else {
                  console.error("Tealium utag link is NOT available");
                  console.log(dataToPush);
                }
                if (window.console) {
                  console.log(message);
                }
              }
              function pleasePushToTealium(data) {
                var category, action, label, value;
                if (Array.isArray(data)) {
                  var category = data[0],
                    action = data[1],
                    label = data[2],
                    value = data[3];
                } else if (typeof data !== "undefined" && data != null) {
                  if (
                    typeof data["category"] !== "undefined" &&
                    data["category"] != null
                  ) {
                    category = data["category"];
                  }
                  if (
                    typeof data["action"] !== "undefined" &&
                    data["action"] != null
                  ) {
                    action = data["action"];
                  }
                  if (
                    typeof data["label"] !== "undefined" &&
                    data["label"] != null
                  ) {
                    label = data["label"];
                  }
                  if (
                    typeof data["value"] !== "undefined" &&
                    data["value"] != null
                  ) {
                    value = data["value"];
                  }
                }
                pushToTealium(category, action, label, value);
              }
              function pleaseTrackThisData(data) {
                switch (tractWhat) {
                  case "tealium":
                    pleasePushToTealium(data);
                    break;
                  case "GA":
                    pleasePushToGA(data);
                    break;
                  default:
                    pleasePushToGA(data);
                    break;
                }
              }
              function getCurrentURL() {
                return window.location.href;
              }
              function getCleanCurrentURL() {
                var windowLocationHref = window.location.href;
                if (typeof windowLocationHref === "string") {
                  var cleanHref = "";
                  if (windowLocationHref.indexOf("#") > 0) {
                    windowLocationHref = windowLocationHref.split("#")[0];
                  }
                  if (windowLocationHref.indexOf("?") > 0) {
                    windowLocationHref = windowLocationHref.split("?")[0];
                  }
                }
                return windowLocationHref;
              }
              function cleanTheURL(url) {
                if (typeof url === "undefined") {
                  return;
                }
                if (typeof url === "string") {
                  if (url.indexOf("#") > 0) {
                    url = url.split("#")[0];
                  }
                  if (url.indexOf("?") > 0) {
                    url = url.split("?")[0];
                  }
                }
                return url;
              }
              function getLinkName(elem) {
                return $(elem).text();
              }
              $.fn.getBtnNameAndDestUrl = function (destUrl) {
                return $(this).text() + ":" + destUrl;
              };
              $.fn.getDestinationUrl = function () {
                return $(this).attr("href") || "";
              };
              $.fn.getViewPrivilegesTierName = function () {
                var cardTypeName = $(this)
                  .closest(".flipster__item__content")
                  .find(".cardType")
                  .text();
                return LABEL.ViewPrivileges + ":" + cardTypeName;
              };
              $(".footer .siteLink a").on("click", function () {
                var data = {
                  category: CATEGORY.TextLink,
                  action: ACTION.getLinkName($(this)),
                  label: $(this).getDestinationUrl(),
                };
                pleaseTrackThisData(data);
              });
              if ($("body").hasClass("srl-loginemail")) {
                $(window).on(
                  "Loyalty.Tracking.LoginSuccess",
                  function (e, args) {
                    if (e.namespace !== "LoginSuccess.Tracking") {
                      return;
                    }
                    var userID = "";
                    if (
                      typeof args["userID"] !== "undefined" &&
                      args["userID"] != null
                    ) {
                      userID = args["userID"];
                    }
                    var data = {
                      category: CATEGORY.Login,
                      action: ACTION.SRL,
                      label: userID,
                    };
                    pleaseTrackThisData(data);
                  }
                );
                $(window).on(
                  "Loyalty.Tracking.LoginSuccessDestination",
                  function (e, args) {
                    if (e.namespace !== "LoginSuccessDestination.Tracking") {
                      return;
                    }
                    var destinationUrl = "";
                    if (
                      typeof args["destinationUrl"] !== "undefined" &&
                      args["destinationUrl"] != null
                    ) {
                      destinationUrl = cleanTheURL(args["destinationUrl"]);
                    }
                    var data = {
                      category: CATEGORY.Button,
                      action: $(
                        ".button-primary.btn-login"
                      ).getBtnNameAndDestUrl(ACTION.getCurrentURL()),
                      label: destinationUrl,
                    };
                    pleaseTrackThisData(data);
                  }
                );
                $(".loginBlock .userToggle").on("click", function () {
                  var data = {
                    category: CATEGORY.OnPageInteraction,
                    action: ACTION.FindID,
                    label: ACTION.getCurrentURL(),
                  };
                  pleaseTrackThisData(data);
                });
                $(".loginBlock .user").on(
                  "click",
                  "#mbUser-error a",
                  function () {
                    var data = {
                      category: CATEGORY.TextLink,
                      action: ACTION.getLinkName($(this)),
                      label: $(this).getDestinationUrl(),
                    };
                    pleaseTrackThisData(data);
                  }
                );
                $(".loginBlock .text-center a").on("click", function () {
                  var data = {
                    category: CATEGORY.TextLink,
                    action: ACTION.getLinkName($(this)),
                    label: $(this).getDestinationUrl(),
                  };
                  pleaseTrackThisData(data);
                });
              }
              if ($("body").hasClass("signup")) {
                $(window).on(
                  "Loyalty.Tracking.SignUpSuccess",
                  function (e, args) {
                    if (e.namespace !== "SignUpSuccess.Tracking") {
                      return;
                    }
                    var destinationUrl = "";
                    if (
                      typeof args["destinationUrl"] !== "undefined" &&
                      args["destinationUrl"] != null
                    ) {
                      destinationUrl = cleanTheURL(args["destinationUrl"]);
                    }
                    var data = {
                      category: CATEGORY.Button,
                      action: $("#submitSignUp").getBtnNameAndDestUrl(
                        ACTION.getCurrentURL()
                      ),
                      label: destinationUrl,
                    };
                    pleaseTrackThisData(data);
                  }
                );
              }
              if ($("body").hasClass("reset")) {
                $(window).on(
                  "Loyalty.Tracking.ResetVerificationSuccess",
                  function (e, args) {
                    if (e.namespace !== "ResetVerificationSuccess.Tracking") {
                      return;
                    }
                    var verificationMethod = "";
                    if (
                      typeof args["verificationMethod"] !== "undefined" &&
                      args["verificationMethod"] != null
                    ) {
                      verificationMethod = args["verificationMethod"];
                    }
                    var data = {
                      category: CATEGORY.Button,
                      action: ACTION.Verification,
                      label: verificationMethod,
                    };
                    pleaseTrackThisData(data);
                  }
                );
                $(".resetBlock .userToggle").on("click", function () {
                  var data = {
                    category: CATEGORY.OnPageInteraction,
                    action: ACTION.FindID,
                    label: ACTION.getCurrentURL(),
                  };
                  pleaseTrackThisData(data);
                });
              }
              $(window).on("Loyalty.Ready", function () {
                if ($("body[class*='tier']").length > 0) {
                  $(".blockTitle .linkInfo").on("click", function () {
                    var data = {
                      category: CATEGORY.OnPageInteraction,
                      action: ACTION.Lightbox,
                      label: LABEL.ToolTipDestinationDollars,
                    };
                    pleaseTrackThisData(data);
                  });
                  $(".viewExpiring a").on("click", function () {
                    var data = {
                      category: CATEGORY.OnPageInteraction,
                      action: ACTION.Lightbox,
                      label: LABEL.DestinationDollarExpiry,
                    };
                    pleaseTrackThisData(data);
                  });
                  $(".cardUpgrade.usedfasttrack a").on("click", function () {
                    var data = {
                      category: CATEGORY.OnPageInteraction,
                      action: ACTION.Lightbox,
                      label: LABEL.FastTrack,
                    };
                    pleaseTrackThisData(data);
                  });
                  $(".cardUpgrade.unusedfastrack a").on("click", function () {
                    var data = {
                      category: CATEGORY.OnPageInteraction,
                      action: ACTION.Lightbox,
                      label: LABEL.FastTrackLearnMore,
                    };
                    pleaseTrackThisData(data);
                  });
                  $(".cardPrivilege a").on("click", function () {
                    var data = {
                      category: CATEGORY.OnPageInteraction,
                      action: ACTION.Lightbox,
                      label: $(this).getViewPrivilegesTierName(),
                    };
                    pleaseTrackThisData(data);
                  });
                }
              });
            })(jQuery);
          }
        } catch (e) {
          utag.DB(e);
        }
      } catch (e) {
        utag.DB(e);
      }
      try {
        try {
          if (
            (utag.data["dom.url"]
              .toString()
              .toLowerCase()
              .indexOf("/sandsrewardsclub/".toLowerCase()) < 0 &&
              utag.data["dom.url"]
                .toString()
                .toLowerCase()
                .indexOf("/sandsrewardslifestyle/".toLowerCase()) < 0 &&
              utag.data["dom.domain"]
                .toString()
                .toLowerCase()
                .indexOf("reserve.marinabaysands.com".toLowerCase()) < 0 &&
              utag.data["dom.domain"]
                .toString()
                .toLowerCase()
                .indexOf("ticket.marinabaysands.com".toLowerCase()) < 0 &&
              utag.data["dom.domain"]
                .toString()
                .toLowerCase()
                .indexOf("sevenrooms.com".toLowerCase()) < 0 &&
              !/^\/museum/i.test(utag.data["dom.pathname"]) &&
              /^((?!deals\/.*online-ordering).)*$/.test(utag.data["dom.url"]) &&
              /^((?!restaurants\/.*\/order.*).)*$/.test(utag.data["dom.url"]) &&
              /^((?!hotel.*\/in-room-dining).)*$/.test(utag.data["dom.url"]) &&
              /^((?!.*(mooncakes-online-order|mooncakes-2020-test).*).)*$/.test(
                utag.data["dom.url"]
              ) &&
              /^((?!marinabaysands.com\/restaurants\/(.*)\/reservation).)*$/.test(
                utag.data["dom.url"]
              ) &&
              utag.data["domain_pathname"]
                .toString()
                .toLowerCase()
                .indexOf("marinabaysands.com/booking".toLowerCase()) < 0 &&
              /^((?!.*(asfOrder|artscience-friends-order).*).)*$/.test(
                utag.data["dom.url"]
              )) ||
            (utag.data["dom.url"]
              .toString()
              .toLowerCase()
              .indexOf("/sands-rewards-club/".toLowerCase()) < 0 &&
              utag.data["dom.url"]
                .toString()
                .toLowerCase()
                .indexOf(".aspx".toLowerCase()) < 0 &&
              /^((?!deals\/.*online-ordering).)*$/.test(utag.data["dom.url"]) &&
              /^((?!restaurants\/.*\/order.*).)*$/.test(utag.data["dom.url"]) &&
              /^((?!hotel.*\/in-room-dining).)*$/.test(utag.data["dom.url"]) &&
              /^((?!.*(mooncakes-online-order|mooncakes-2020-test).*).)*$/.test(
                utag.data["dom.url"]
              ) &&
              /^((?!.*(asfOrder|artscience-friends-order).*).)*$/.test(
                utag.data["dom.url"]
              )) ||
            (utag.data["dom.url"]
              .toString()
              .toLowerCase()
              .indexOf("/sands-rewards-lifestyle/".toLowerCase()) < 0 &&
              utag.data["dom.url"]
                .toString()
                .toLowerCase()
                .indexOf(".aspx".toLowerCase()) < 0 &&
              /^((?!deals\/.*online-ordering).)*$/.test(utag.data["dom.url"]) &&
              /^((?!restaurants\/.*\/order.*).)*$/.test(utag.data["dom.url"]) &&
              /^((?!hotel.*\/in-room-dining).)*$/.test(utag.data["dom.url"]) &&
              /^((?!.*(mooncakes-online-order|mooncakes-2020-test).*).)*$/.test(
                utag.data["dom.url"]
              ) &&
              /^((?!.*(asfOrder|artscience-friends-order).*).)*$/.test(
                utag.data["dom.url"]
              ))
          ) {
            (function () {
              var MBSRevamp = MBSRevamp || {};
              MBSRevamp.debug = false;
              MBSRevamp.Tagging = new (function () {
                var _this = this;
                this.trackWhat = "GA";
                this.gaTracker = [
                  "mbscombined",
                  "mbsga",
                  "mbsoldua",
                  "mbsstaging",
                ];
                this.gaTracKDefault = true;
                this.CATEGORY = {
                  Button: "Button",
                  TextLink: "TextLink",
                  ImageGallery: "ImageGallery",
                  ImageLink: "ImageLink",
                  OnPageInteraction: "OnPageInteraction",
                  MainNav: "MainNav",
                  Footer: "Footer",
                  FileDownload: "FileDownload",
                  OutboundLink: "OutboundLink",
                  Video: "Video",
                  Hotspot: "Hotspot",
                };
                this.ACTION = {
                  getCurrentURL: function () {
                    return _this.getCleanCurrentURL();
                  },
                  getLinkName: function (elem) {
                    return _this.getLinkName(elem);
                  },
                  FindID: "FindID",
                  Verification: "Verification",
                  Lightbox: "Lightbox",
                  SRL: "SRL",
                  SRC: "SRC",
                  roomAPI: window.location.href,
                };
                if ($("[data-room-api]").length) {
                  $("[data-room-api]").each(function () {
                    _this.ACTION.roomAPI =
                      $(this).data("room-api") || _this.ACTION.roomAPI;
                  });
                }
                this.LABEL = {
                  getCurrentURL: function () {
                    return _this.getCleanCurrentURL();
                  },
                  getLinkName: function (elem) {
                    return _this.getLinkName(elem);
                  },
                  ToolTipDestinationDollars: "ToolTip:DestinationDollars",
                  DestinationDollarExpiry: "DestinationDollarExpiry",
                  FastTrack: "FastTrack",
                  FastTrackLearnMore: "FastTrackLearnMore",
                  SandsDollarsExpiry: "SandsDollarsExpiry",
                  ToolTipSandsBonusDollars: "ToolTip:SandsBonusDollars",
                  SandsBonusDollarsExpiry: "SandsBonusDollarsExpiry",
                  ToolTipTierPoints: "ToolTip:TierPoints",
                  ViewPrivileges: "ViewPrivileges",
                };
                this.pushToGA = function (category, action, label, value) {
                  if (!category && !action && !label && !value) {
                    return false;
                  }
                  if (!category || !action || !label) {
                    return false;
                  }
                  if (!category || !action || !label) {
                    return false;
                  }
                  var dataToPush = {
                    event: "GAEvent",
                    eventCategory: category,
                    eventAction: action,
                    eventLabel: label,
                    eventValue: value,
                  };
                  var message =
                    "GA Debug: " +
                    "\neventCategory: " +
                    category +
                    ", \neventAction: " +
                    action +
                    ", \neventLabel: " +
                    label +
                    ", \neventValue: " +
                    value;
                  if (MBSRevamp.debug === false) {
                    if (typeof ga !== "undefined") {
                      if (
                        typeof _this.gaTracker === "object" &&
                        _this.gaTracker.length > 0
                      ) {
                        for (var i = 0; i < _this.gaTracker.length; i++) {
                          ga(
                            _this.gaTracker[i] + ".send",
                            "event",
                            category,
                            action,
                            label
                          );
                        }
                        if (_this.gaTracKDefault === true) {
                          ga("send", "event", category, action, label);
                        }
                      } else {
                        ga(
                          _this.gaTracker + ".send",
                          "event",
                          category,
                          action,
                          label
                        );
                      }
                    } else if (typeof dataLayer !== "undefined") {
                      dataLayer.push(dataToPush);
                    }
                  }
                  if (window.console) {
                    console.log(message);
                  }
                };
                this.pleasePushToGA = function (data) {
                  var category, action, label, value;
                  if (Array.isArray(data)) {
                    var _data = data,
                      category = _data[0],
                      action = _data[1],
                      label = _data[2],
                      value = _data[3];
                  } else if (typeof data !== "undefined" && data != null) {
                    if (
                      typeof data["category"] !== "undefined" &&
                      data["category"] != null
                    ) {
                      category = data["category"];
                    }
                    if (
                      typeof data["action"] !== "undefined" &&
                      data["action"] != null
                    ) {
                      action = data["action"];
                    }
                    if (
                      typeof data["label"] !== "undefined" &&
                      data["label"] != null
                    ) {
                      label = data["label"];
                    }
                    if (
                      typeof data["value"] !== "undefined" &&
                      data["value"] != null
                    ) {
                      value = data["value"];
                    }
                  }
                  this.pushToGA(category, action, label, value);
                };
                this.pushToTealium = function (category, action, label, value) {
                  if (!category && !action && !label && !value) {
                    return false;
                  }
                  if (!category || !action || !label) {
                    return false;
                  }
                  if (!category || !action || !label) {
                    return false;
                  }
                  var dataToPush = {
                    event_category: category,
                    event_action: action,
                    event_label: label,
                    eventValue: value,
                  };
                  var message =
                    "Tealium Debug: " +
                    "\nevent_category: " +
                    category +
                    ", \nevent_action: " +
                    action +
                    ", \nevent_label: " +
                    label +
                    ", \neventValue: " +
                    value;
                  if (
                    typeof utag !== "undefined" &&
                    typeof utag["link"] == "function"
                  ) {
                    utag.link(dataToPush);
                  } else {
                  }
                  if (window.console) {
                    console.log(message);
                  }
                };
                this.pleasePushToTealium = function (data) {
                  var category, action, label, value;
                  if (Array.isArray(data)) {
                    var _data = data,
                      category = _data[0],
                      action = _data[1],
                      label = _data[2],
                      value = _data[3];
                  } else if (typeof data !== "undefined" && data != null) {
                    if (
                      typeof data["category"] !== "undefined" &&
                      data["category"] != null
                    ) {
                      category = data["category"];
                    }
                    if (
                      typeof data["action"] !== "undefined" &&
                      data["action"] != null
                    ) {
                      action = data["action"];
                    }
                    if (
                      typeof data["label"] !== "undefined" &&
                      data["label"] != null
                    ) {
                      label = data["label"];
                    }
                    if (
                      typeof data["value"] !== "undefined" &&
                      data["value"] != null
                    ) {
                      value = data["value"];
                    }
                  }
                  this.pushToTealium(category, action, label, value);
                };
                this.pleaseTrackThisData = function (data) {
                  switch (_this.trackWhat) {
                    case "tealium":
                      this.pleasePushToTealium(data);
                      break;
                    case "GA":
                      this.pleasePushToGA(data);
                      break;
                    default:
                      this.pleasePushToGA(data);
                      break;
                  }
                };
                this.getCurrentURL = function () {
                  return window.location.href;
                };
                this.getCleanCurrentURL = function () {
                  var windowLocationHref = window.location.href;
                  if (typeof windowLocationHref === "string") {
                    var cleanHref = "";
                    if (windowLocationHref.indexOf("#") > 0) {
                      windowLocationHref = windowLocationHref.split("#")[0];
                    }
                    if (windowLocationHref.indexOf("?") > 0) {
                      windowLocationHref = windowLocationHref.split("?")[0];
                    }
                  }
                  return windowLocationHref;
                };
                this.cleanTheURL = function (url) {
                  if (typeof url === "undefined") {
                    return;
                  }
                  if (typeof url === "string") {
                    if (url.indexOf("#") > 0) {
                      url = url.split("#")[0];
                    }
                    if (url.indexOf("?") > 0) {
                      url = url.split("?")[0];
                    }
                  }
                  return url;
                };
                this.getLinkName = function (elem) {
                  return $(elem).text().trim();
                };
                $.fn.getBtnNameAndDestUrl = function (destUrl) {
                  return $(this).text().trim() + ":" + destUrl;
                };
                $.fn.getDestinationUrl = function () {
                  return (
                    $(this).attr("href") ||
                    $(this).find("a").first().attr("href") ||
                    $(this).closest("a").attr("href") ||
                    ""
                  );
                };
                $.fn.getViewPrivilegesTierName = function () {
                  var cardTypeName = $(this)
                    .closest(".flipster__item__content")
                    .find(".cardType")
                    .text()
                    .trim();
                  return LABEL.ViewPrivileges + ":" + cardTypeName;
                };
                $.fn.getRoomFromCookie = function () {
                  var cookieValue = getCookie("selectedrooms");
                  if (cookieValue && cookieValue.length) {
                    var cookieRooms = JSON.parse(cookieValue);
                    if (Array.isArray(cookieRooms)) {
                      var cookieRoomObj = cookieRooms[0];
                      if (
                        cookieRoomObj.hasOwnProperty("roomNo") &&
                        cookieRoomObj.hasOwnProperty("adults") &&
                        cookieRoomObj.hasOwnProperty("childs") &&
                        cookieRoomObj.hasOwnProperty("childages")
                      ) {
                        return cookieRooms;
                      }
                    }
                  }
                  return [];
                };
                window.isDesktop =
                  window.isDesktop ||
                  function () {
                    return window.matchMedia("(min-width: 992px)").matches
                      ? true
                      : false;
                  };
              })();
              (function (MT) {
                var ACTION = MT.ACTION;
                var CATEGORY = MT.CATEGORY;
                var LABEL = MT.LABEL;
                $(
                  ".benefits a.benefits-container:not(.external), .benefits-container .lead"
                ).on("click", function (e) {
                  var data = {
                    category: CATEGORY.TextLink,
                    action: $(this).getBtnNameAndDestUrl(
                      ACTION.getCurrentURL()
                    ),
                    label: $(this).getDestinationUrl(),
                  };
                  MT.pleaseTrackThisData(data);
                });
                $(".nav-tabs .nav-item .nav-link").on("click", function (e) {
                  targetURL = $(e.target).getDestinationUrl();
                  var a = /^#/;
                  if (a.test(targetURL) || targetURL == "") {
                    var data = {
                      category: CATEGORY.OnPageInteraction,
                      action: "Tab",
                      label:
                        ACTION.getLinkName($(this)).trim() +
                        ":" +
                        ACTION.getCurrentURL($(this)),
                    };
                  } else {
                    var data = {
                      category: CATEGORY.TextLink,
                      action:
                        ACTION.getLinkName($(this)).trim() +
                        ":" +
                        ACTION.getCurrentURL($(this)),
                      label: targetURL,
                    };
                  }
                  MT.pleaseTrackThisData(data);
                });
                $(".select-tab-container .select-tab").ready(function (e) {
                  $(".select-tab-container .select-tab").on(
                    "change",
                    function (e) {
                      var data = {
                        category: CATEGORY.OnPageInteraction,
                        action: "Tab",
                        label: $(".select-tab option:selected").text().trim(),
                      };
                      MT.pleaseTrackThisData(data);
                    }
                  );
                });
                $(document).on(
                  "click",
                  ".dropdown-menu .dropdown-filter-block input[type=checkbox]:checked, .dropdown-filter-block .collapse-toggle, .list-inline-item .search-filters",
                  function (e) {
                    if ($(this).closest(".collapse-toggle").length > 0) {
                      var data = {
                        category: CATEGORY.OnPageInteraction,
                        action: "Accordion",
                        label: $(this)
                          .closest(".filter-item")
                          .find(".checkbox")
                          .text()
                          .trim(),
                      };
                    } else if ($(this).closest(".search-filters").length > 0) {
                      var data = {
                        category: CATEGORY.OnPageInteraction,
                        action: "Filter",
                        label: $(this)
                          .closest(".search-filters")
                          .attr("placeholder"),
                      };
                    } else {
                      var data = {
                        category: CATEGORY.OnPageInteraction,
                        action: "Filter",
                        label: $(this).closest("label").text().trim(),
                      };
                    }
                    MT.pleaseTrackThisData(data);
                  }
                );
                $(".btn-filters").on("click", function (e) {
                  var data = {
                    category: CATEGORY.OnPageInteraction,
                    action: "Filter",
                    label:
                      $(this).text().trim() ||
                      $(this).closest(".list-inline-item").text().trim(),
                  };
                  MT.pleaseTrackThisData(data);
                });
                $(
                  ".listing .listing-tools ul.text-left.daterangepicker-container .list-inline-item .daterangepicker"
                ).on("click", function (e) {
                  var data = {
                    category: CATEGORY.OnPageInteraction,
                    action: "Filter",
                    label: $(".daterangepicker-from", this).attr("placeholder"),
                  };
                  MT.pleaseTrackThisData(data);
                });
                $(".section-content .chef-content-block > p > a").on(
                  "click",
                  function (e) {
                    if ($(e.target).data("toggle") != "modal") {
                      var data = {
                        category: CATEGORY.TextLink,
                        action:
                          ACTION.getLinkName($(e.target)) +
                          ":" +
                          ACTION.getCurrentURL($(e.target)),
                        label: $(e.target).getDestinationUrl(),
                      };
                    } else if ($(e.target).data("toggle") == "modal") {
                      var data = {
                        category: CATEGORY.OnPageInteraction,
                        action: "Lightbox",
                        label: ACTION.getLinkName(e.target),
                      };
                    }
                    MT.pleaseTrackThisData(data);
                  }
                );
                $(document).on(
                  "click",
                  '.details-block .details-block-body a[href$=pdf], .accordion .card-body a.ttracked, .details-block .d-lg-block a.ttracked, .sidebar-block .details-block-list a.ttracked, .sidebar-block a[href$=pdf], .modal[aria-labelledby="viewModalLabel"] a[href$=pdf], .card-footer .card-text a[href$=pdf], .card-footer .card-text a[href$=jpg]',
                  function (e) {
                    var data = {
                      category: CATEGORY.FileDownload,
                      action: ACTION.getLinkName($(e.target)),
                      label: $(e.target).getDestinationUrl(),
                    };
                    MT.pleaseTrackThisData(data);
                  }
                );
                $(document).on(
                  "click",
                  ".section-content-body .tripadvisor-review-content, .details-block-body .tripadvisor-review-content, .details-block-body .tripadvisor-more-reviews, .benefits-block .media-body, .benefits-block .tripadvisor-review-content",
                  function (e) {
                    if ($(e.target).hasClass("tripadvisor-more-reviews")) {
                      var data = {
                        category: CATEGORY.TextLink,
                        action:
                          ACTION.getLinkName($(e.target)) +
                          ":" +
                          ACTION.getCurrentURL($(e.target)),
                        label: $(e.target).getDestinationUrl(),
                      };
                    } else if ($(e.target).data("toggle") === "anchor-scroll") {
                      var data = {
                        category: CATEGORY.TextLink,
                        action:
                          ACTION.getLinkName($(e.target)) +
                          ":" +
                          ACTION.getCurrentURL($(e.target)),
                        label: $(e.target).getDestinationUrl(),
                      };
                    } else {
                      var data = {
                        category: CATEGORY.OutboundLink,
                        action:
                          ACTION.getLinkName($(e.target)) +
                          ":" +
                          ACTION.getCurrentURL($(e.target)),
                        label: $(e.target).getDestinationUrl(),
                      };
                    }
                    MT.pleaseTrackThisData(data);
                  }
                );
                $(document).on(
                  "click",
                  ".imagemap-list .list-group .list-group-item, .imagemap-content .imagemap-pin",
                  function (e) {
                    var data = {
                      category: CATEGORY.OnPageInteraction,
                      action: "Hotspot",
                      label:
                        $(this).closest(".d-flex").find("p").text().trim() ||
                        $(this)
                          .closest(".imagemap-pin")
                          .attr("data-original-title"),
                    };
                    MT.pleaseTrackThisData(data);
                  }
                );
                $(document).on(
                  "click",
                  ".imagemap-list-content .simplebar-content",
                  function (e) {
                    var data = {
                      category: CATEGORY.TextLink,
                      action:
                        ACTION.getLinkName($(e.target)) +
                        ":" +
                        ACTION.getCurrentURL($(e.target)),
                      label: $(e.target).getDestinationUrl(),
                    };
                    MT.pleaseTrackThisData(data);
                  }
                );
                $(".pt-md-5 .accordion").ready(function (e) {
                  $(
                    '.pt-md-5 .accordion a[href^="tel:"]:not([data-tagged]), .section-content-body a[href^="tel:"]'
                  ).on("click", function (e) {
                    var data = {
                      category: CATEGORY.TextLink,
                      action: "Contact",
                      label: ACTION.getLinkName($(this)),
                    };
                    MT.pleaseTrackThisData(data);
                  });
                  $('.pt-md-5 .accordion a[href^="tel:"]').attr(
                    "data-tagged",
                    true
                  );
                });
                $(document).on(
                  "click",
                  ".section-content-body .subscribe-box-button",
                  function (e) {
                    var data = {
                      category: CATEGORY.Button,
                      action: $(e.target).getBtnNameAndDestUrl(
                        ACTION.getCurrentURL()
                      ),
                      label: $(e.target).getDestinationUrl(),
                    };
                    MT.pleaseTrackThisData(data);
                  }
                );
                $(document).on(
                  "click",
                  ".section-content-footer .btn-primary",
                  function (e) {
                    if (!$("body").hasClass("mice")) {
                      var data = {
                        category: CATEGORY.Button,
                        action: $(e.target).getBtnNameAndDestUrl(
                          ACTION.getCurrentURL()
                        ),
                        label: $(e.target).getDestinationUrl(),
                      };
                    }
                    MT.pleaseTrackThisData(data);
                  }
                );
                $(
                  ".section-content .chef-content-block .card .card-link, section.chef-details+section.list-section .card .card-body, .section-content-body .collection-list .card-body, .accordion-slider .fullpage-slider-image>img, .accordion-slider-content .card"
                ).on("click", function (e) {
                  var data = "";
                  if (
                    window.location.href.indexOf("signature-restaurants") > -1
                  ) {
                    data = {
                      category: CATEGORY.OnPageInteraction,
                      action: "Lightbox",
                      label: $(this)
                        .closest(".card-body")
                        .find(".card-title")
                        .text()
                        .trim(),
                    };
                  } else if (
                    window.location.href.indexOf("celebrity-chefs.html") > -1
                  ) {
                    data = {
                      category: CATEGORY.ImageLink,
                      action:
                        ACTION.getLinkName($(e.target)) +
                        ":" +
                        ACTION.getCurrentURL($(e.target)),
                      label: $(this).closest("a").getDestinationUrl(),
                    };
                  } else if (
                    window.location.href.indexOf(
                      "wine-dinners-and-promotions.html"
                    ) > -1
                  ) {
                    data = {
                      category: CATEGORY.ImageLink,
                      action:
                        ACTION.getLinkName($(e.target)) +
                        ":" +
                        ACTION.getCurrentURL($(e.target)),
                      label: $(this).closest("a").getDestinationUrl(),
                    };
                  } else if ($(this).closest(".accordion-slider").length > 0) {
                    var title = "";
                    if ($(this).closest(".fullpage-slider-image").length > 0) {
                      title = $(this).closest("img").attr("alt");
                    } else if (
                      $(this).closest(".accordion-slider-content").length > 0
                    ) {
                      title = $(this).find("h5").text().trim();
                    }
                    data = {
                      category: CATEGORY.ImageLink,
                      action: title + ":" + ACTION.getCurrentURL($(e.target)),
                      label: $(this).closest("a").attr("href"),
                    };
                  } else {
                    data = {
                      category: CATEGORY.OnPageInteraction,
                      action: "Lightbox",
                      label: $(this)
                        .closest(".card-body")
                        .find(".card-title")
                        .text()
                        .trim(),
                    };
                  }
                  MT.pleaseTrackThisData(data);
                });
                $(document).on("click", ".card", function (e) {
                  if (
                    $(this)
                      .closest(".section-content-body")
                      .find(".fullpage-slider").length > 0
                  ) {
                    if ($(e.target).hasClass("card-link")) {
                      var data = {
                        category: CATEGORY.TextLink,
                        action: $(e.target).getBtnNameAndDestUrl(
                          ACTION.getCurrentURL()
                        ),
                        label: $(e.target).getDestinationUrl(),
                      };
                      MT.pleaseTrackThisData(data);
                    }
                    if (
                      $(e.target).hasClass("btn-primary") ||
                      $(e.target).hasClass("btn-secondary")
                    ) {
                      var data = {
                        category: CATEGORY.Button,
                        action: $(e.target).getBtnNameAndDestUrl(
                          ACTION.getCurrentURL()
                        ),
                        label: $(e.target).getDestinationUrl(),
                      };
                      MT.pleaseTrackThisData(data);
                    }
                  } else if (
                    $(this)
                      .closest(".section-content-body")
                      .find(".gallery-slider").length > 0
                  ) {
                    if ($(this).hasClass("gallery-card")) {
                      var data = {
                        category: CATEGORY.ImageLink,
                        action: $(
                          ".card-body .card-title",
                          this
                        ).getBtnNameAndDestUrl(ACTION.getCurrentURL()),
                        label: $(this).closest("a").attr("href"),
                      };
                      MT.pleaseTrackThisData(data);
                    }
                  } else {
                    if (
                      $(this)
                        .closest(".section-content-footer")
                        .find(".shoppes-rewards").length > 0
                    ) {
                      if ($(e.target).hasClass("lazyloaded")) {
                        var data = {};
                        var title = $(this).closest(".row").find("h2");
                        data = {
                          category: CATEGORY.ImageLink,
                          action: $(title).getBtnNameAndDestUrl(
                            ACTION.getCurrentURL()
                          ),
                          label: $(this).closest("a").attr("href"),
                        };
                        MT.pleaseTrackThisData(data);
                      } else if ($(e.target).hasClass("btn-secondary")) {
                        var data = {
                          category: CATEGORY.Button,
                          action: $(e.target).getBtnNameAndDestUrl(
                            ACTION.getCurrentURL()
                          ),
                          label:
                            $(this).getDestinationUrl() ||
                            $(e.target).getDestinationUrl(),
                        };
                        MT.pleaseTrackThisData(data);
                      }
                    } else if (
                      $(this)
                        .closest(".section-content-body")
                        .find(".shoppes-rewards").length > 0
                    ) {
                      if ($(e.target).hasClass("lazyloaded")) {
                        var title =
                          $(this)
                            .closest(".row")
                            .find("h5.card-title")
                            .text()
                            .trim() ||
                          $(this).closest(".row").find("h3").text().trim();
                        var data = {
                          category: CATEGORY.ImageLink,
                          action:
                            title + ":" + ACTION.getCurrentURL($(e.target)),
                          label: $(this).closest("a").attr("href"),
                        };
                      } else if ($(e.target).hasClass("btn-secondary")) {
                        var data = {
                          category: CATEGORY.Button,
                          action: $(e.target).getBtnNameAndDestUrl(
                            ACTION.getCurrentURL()
                          ),
                          label:
                            $(this).getDestinationUrl() ||
                            $(e.target).getDestinationUrl(),
                        };
                      } else {
                        var data = {
                          category: CATEGORY.TextLink,
                          action:
                            ACTION.getLinkName($(e.target)) +
                            ":" +
                            ACTION.getCurrentURL($(e.target)),
                          label:
                            $(this).getDestinationUrl() ||
                            $(e.target).getDestinationUrl(),
                        };
                      }
                      MT.pleaseTrackThisData(data);
                    } else if (
                      $(this).closest("section.offers").length > 0 ||
                      $(this).closest("section.additional_privileges").length >
                        0
                    ) {
                      var data = {};
                      if ($(e.target).hasClass("btn")) {
                        data = {
                          category: CATEGORY.Button,
                          action:
                            ACTION.getLinkName($(e.target)) +
                            ":" +
                            ACTION.getCurrentURL($(e.target)),
                          label: $(this).getDestinationUrl(),
                        };
                        MT.pleaseTrackThisData(data);
                      } else if ($("button", this).length === 0) {
                        var internallink = new RegExp(location.host);
                        var relativepath = /^\/[a-z0-9]/;
                        var pdf = /^.*\.(pdf|PDF)$/;
                        var lightbox = /^\#[a-z0-9]/;
                        var email = /^\mailto/;
                        if (
                          !internallink.test($(e.target).getDestinationUrl()) &&
                          !relativepath.test($(e.target).getDestinationUrl()) &&
                          !lightbox.test($(e.target).getDestinationUrl()) &&
                          !email.test($(e.target).getDestinationUrl())
                        ) {
                          var data = {
                            category: CATEGORY.OutboundLink,
                            action: $(e.target).getBtnNameAndDestUrl(
                              ACTION.getCurrentURL()
                            ),
                            label: $(e.target).getDestinationUrl(),
                          };
                          MT.pleaseTrackThisData(data);
                        } else if (pdf.test($(e.target).getDestinationUrl())) {
                          var data = {
                            category: CATEGORY.FileDownload,
                            action: ACTION.getLinkName($(e.target)),
                            label: $(e.target).getDestinationUrl(),
                          };
                          MT.pleaseTrackThisData(data);
                        } else if ($(e.target).data("toggle") === "modal") {
                          var data = {
                            category: CATEGORY.OnPageInteraction,
                            action: "Lightbox",
                            label: ACTION.getLinkName(e.target),
                          };
                          MT.pleaseTrackThisData(data);
                        } else if ($(this).hasClass("card-box")) {
                          var data = {
                            category: CATEGORY.ImageLink,
                            action:
                              $(this).find(".card-title").text() +
                              ":" +
                              ACTION.getCurrentURL($(e.target)),
                            label: $(this).attr("href"),
                          };
                          MT.pleaseTrackThisData(data);
                        } else if (
                          email.test($(e.target).getDestinationUrl())
                        ) {
                          var data = {
                            category: CATEGORY.TextLink,
                            action: "Contact",
                            label: $(e.target).closest("a").attr("href"),
                          };
                          MT.pleaseTrackThisData(data);
                        } else {
                          var data = {
                            category: CATEGORY.TextLink,
                            action:
                              ACTION.getLinkName($(e.target)) +
                                ":" +
                                ACTION.getCurrentURL($(e.target)) ||
                              $(
                                ".card-body .card-title",
                                this
                              ).getBtnNameAndDestUrl(ACTION.getCurrentURL()),
                            label: $(this).getDestinationUrl(),
                          };
                          MT.pleaseTrackThisData(data);
                        }
                      }
                    } else if (
                      $(this).closest("section.listing").length > 0 &&
                      !(
                        $(e.target).hasClass("btn-secondary") ||
                        $(e.target).hasClass("btn-primary") ||
                        $(e.target).hasClass("card-link")
                      )
                    ) {
                      var data = {
                        category: CATEGORY.ImageLink,
                        action: $(
                          ".card-body .card-title",
                          this
                        ).getBtnNameAndDestUrl(ACTION.getCurrentURL()),
                        label: $(this).closest("a").attr("href"),
                      };
                      MT.pleaseTrackThisData(data);
                    } else if (
                      $(this).closest("section.chef-details").length > 0 ||
                      $(this)
                        .closest(".section-content-body")
                        .find(".tab-pane-inner").length > 0
                    ) {
                      if (
                        window.location.href.indexOf(
                          "services-and-amenities.html"
                        ) > -1
                      ) {
                        var data = {
                          category: CATEGORY.OnPageInteraction,
                          action: "Lightbox",
                          label: $(this).closest("a").attr("href"),
                        };
                      } else if (
                        $(this).closest(".tab-pane-inner").length > 0
                      ) {
                        var targetURL = $(e.target).getDestinationUrl();
                        if (
                          $(this).hasClass("card") &&
                          $(this).hasClass("card-sm-horizontal")
                        ) {
                          var data = {
                            category: CATEGORY.ImageLink,
                            action: $(
                              ".card-body .card-title",
                              this
                            ).getBtnNameAndDestUrl(ACTION.getCurrentURL()),
                            label: $(this).getDestinationUrl(),
                          };
                        } else if (
                          e.target.tagName == "A" ||
                          (e.target.tagName == "IMG" && targetURL)
                        ) {
                          var a = new RegExp(location.host);
                          var b = /^\/[a-z0-9]/;
                          var c = /^#/;
                          var jpg = /\.jpg$/;
                          if (!a.test(targetURL) && !b.test(targetURL)) {
                            if (c.test(targetURL)) {
                              if ($(e.target).parents("p.small").length == 0) {
                                var data = {
                                  category: CATEGORY.OnPageInteraction,
                                  action: "Lightbox",
                                  label: ACTION.getLinkName(e.target),
                                };
                              }
                            } else if (targetURL.indexOf("ticket") >= 0) {
                              var data = {
                                category: CATEGORY.TextLink,
                                action:
                                  ACTION.getLinkName($(e.target)) +
                                    ":" +
                                    ACTION.getCurrentURL($(e.target)) ||
                                  $(
                                    ".card-body .card-title",
                                    this
                                  ).getBtnNameAndDestUrl(
                                    ACTION.getCurrentURL()
                                  ),
                                label: $(this).getDestinationUrl(),
                              };
                            } else if (!$("body").hasClass("ticket-booking")) {
                              var data = {
                                category: CATEGORY.OutboundLink,
                                action: $(
                                  ".card-body .card-title",
                                  this
                                ).getBtnNameAndDestUrl(ACTION.getCurrentURL()),
                                label: targetURL,
                              };
                            }
                          } else {
                            if (
                              e.target.tagName == "IMG" ||
                              $(e.target).find("img").length > 0 ||
                              $(e.target).parents("img").length > 0
                            ) {
                              var data = {
                                category: CATEGORY.ImageLink,
                                action: $(
                                  ".card-body .card-title",
                                  this
                                ).getBtnNameAndDestUrl(ACTION.getCurrentURL()),
                                label: $(this).getDestinationUrl(),
                              };
                            } else if (
                              jpg.test($(e.target).getDestinationUrl())
                            ) {
                              var data = {
                                category: CATEGORY.FileDownload,
                                action: ACTION.getLinkName($(e.target)),
                                label: $(this).getDestinationUrl(),
                              };
                            } else {
                              var data = {
                                category: CATEGORY.TextLink,
                                action: $(
                                  ".card-body .card-title",
                                  this
                                ).getBtnNameAndDestUrl(ACTION.getCurrentURL()),
                                label: $(e.target).getDestinationUrl(),
                              };
                            }
                          }
                        }
                      } else {
                        var data = {
                          category: CATEGORY.ImageLink,
                          action: $(
                            ".card-body .card-title",
                            this
                          ).getBtnNameAndDestUrl(ACTION.getCurrentURL()),
                          label: $(this).closest("a").attr("href"),
                        };
                      }
                      MT.pleaseTrackThisData(data);
                    } else if (
                      $(this).closest("section.room_offer_container").length > 0
                    ) {
                      if (
                        $(e.target).closest(".view-more-collapse").length > 0
                      ) {
                        var targetURL = $(e.target).getDestinationUrl();
                        var c = /^#/;
                        if (c.test(targetURL)) {
                          var data = {
                            category: CATEGORY.TextLink,
                            action:
                              ACTION.getLinkName($(e.target)).trim() +
                              ":" +
                              ACTION.getCurrentURL($(e.target)),
                            label: targetURL,
                          };
                          MT.pleaseTrackThisData(data);
                        }
                      } else if (
                        $(e.target).closest(".btn-primary").length > 0
                      ) {
                        var data = {
                          category: CATEGORY.Button,
                          action:
                            ACTION.getLinkName($(e.target)) +
                            ":" +
                            ACTION.getCurrentURL($(e.target)),
                          label: $(e.target).closest("a").attr("href"),
                        };
                        MT.pleaseTrackThisData(data);
                      }
                    } else if (
                      $(this)
                        .closest(".section-content-body")
                        .find(".shoppes-rows").length === 0 &&
                      $(this).closest("section.offers").length === 0 &&
                      $(this).closest("section.chef-details").length === 0 &&
                      $(this).closest(
                        "section.list-section .chef-content-block"
                      ).length === 0
                    ) {
                      if ($(e.target).hasClass("card-img-top", "lazyloaded")) {
                        var title = "";
                        if ($(".card-body .card-title", this).length > 0) {
                          title = $(".card-body .card-title", this);
                        } else {
                          title = $(this).closest(".row").find("h2");
                        }
                        var data = {
                          category: CATEGORY.ImageLink,
                          action:
                            $(this).find("img").attr("alt") +
                            ":" +
                            ACTION.getCurrentURL($(e.target)),
                          label: $(this).closest("a").attr("href"),
                        };
                        MT.pleaseTrackThisData(data);
                      }
                      if (
                        $(this)
                          .parents(".ambassador")
                          .find(".section-content-body").length > 0 &&
                        !(
                          $(e.target).hasClass("btn-primary") &&
                          $(e.target).closest(".card-footer")
                        ) &&
                        !(
                          $(e.target).hasClass("btn-secondary") &&
                          $(e.target).closest(".card-footer")
                        )
                      ) {
                        if (!$(e.target).hasClass("card-link")) {
                          var title =
                            $(this).find("h2").text().trim() ||
                            $(this).find("h5").text().trim() ||
                            $(this).find("img").attr("alt");
                          var data = {
                            category: CATEGORY.ImageLink,
                            action: title + ":" + ACTION.getCurrentURL($(this)),
                            label: $(this).closest("a").attr("href"),
                          };
                        }
                        MT.pleaseTrackThisData(data);
                      }
                      if (
                        $(e.target).hasClass("btn-secondary") ||
                        $(e.target).hasClass("btn-primary")
                      ) {
                        var data = {
                          category: CATEGORY.Button,
                          action:
                            ACTION.getLinkName($(e.target)).trim() +
                            ":" +
                            ACTION.getCurrentURL($(e.target)),
                          label:
                            $(this).getDestinationUrl() ||
                            $(e.target).getDestinationUrl(),
                        };
                        MT.pleaseTrackThisData(data);
                      }
                      if (
                        $(this)
                          .closest(".section-content-body")
                          .find(".accordion-slider-content").length === 0
                      ) {
                        var phone = /tel:/;
                        var pdf = /\.pdf$/;
                        if (
                          $(e.target).hasClass("card-link") &&
                          !phone.test($(e.target).closest("a").attr("href")) &&
                          $(e.target).parents(".modal-section").length == 0 &&
                          !pdf.test($(e.target).getDestinationUrl())
                        ) {
                          var data = {
                            category: CATEGORY.TextLink,
                            action:
                              ACTION.getLinkName($(e.target)).trim() +
                              ":" +
                              ACTION.getCurrentURL($(e.target)),
                            label: $(e.target).closest("a").attr("href"),
                          };
                          MT.pleaseTrackThisData(data);
                        }
                      }
                      if ($(e.target).hasClass("card-img-left", "lazyloaded")) {
                        var data = {
                          category: CATEGORY.ImageLink,
                          action:
                            ACTION.getLinkName($(e.target)) +
                            ":" +
                            ACTION.getCurrentURL($(e.target)),
                          label: $(this).closest("a").attr("href"),
                        };
                        MT.pleaseTrackThisData(data);
                      }
                      if (
                        $(this)
                          .closest("section.notice-banner")
                          .find(".card-footer").length > 0
                      ) {
                        var pdf = /\.pdf$/;
                        if ($(e.target).hasClass("btn-primary")) {
                          var data = {
                            category: CATEGORY.Button,
                            action: $(e.target).getBtnNameAndDestUrl(
                              ACTION.getCurrentURL()
                            ),
                            label: $(e.target).getDestinationUrl(),
                          };
                          MT.pleaseTrackThisData(data);
                        } else if (pdf.test($(e.target).getDestinationUrl())) {
                          var data = {
                            category: CATEGORY.FileDownload,
                            action: ACTION.getLinkName($(e.target)),
                            label: $(e.target).getDestinationUrl(),
                          };
                          MT.pleaseTrackThisData(data);
                        }
                      }
                    }
                  }
                });
                $(document).on("click", ".benefits-list", function (e) {
                  if (e.target.tagName == "A") {
                    if ($(this).closest(".media-body")) {
                      var data = {
                        category: CATEGORY.TextLink,
                        action:
                          $(this)
                            .closest(".benefits-container")
                            .find(".benefits-title h4")
                            .text()
                            .trim() +
                          " " +
                          $(e.target)
                            .closest("p")
                            .prev()
                            .getBtnNameAndDestUrl(ACTION.getCurrentURL()),
                        label: e.target.href,
                      };
                      MT.pleaseTrackThisData(data);
                    } else {
                    }
                  }
                });
                $(
                  ".fullpage-slider .swiper-nav-buttons > div, .gallery-slider .swiper-nav-buttons > div, .offer-slider .swiper-nav-buttons > div, .restaurant-swipers .swiper-nav-buttons > div,.swiper-fullpage .swiper-nav-buttons > div, .accordion-collection-main .swiper-nav-buttons > div, .accordion-slider-main .swiper-nav-buttons > div, .container .swiper-nav-buttons > div, .table-swiper-container > div"
                ).on("click", function (e) {
                  function directions(nav) {
                    if (nav.hasClass("swiper-button-prev")) {
                      return "Left";
                    } else if (nav.hasClass("swiper-button-next")) {
                      return "Right";
                    }
                  }
                  var data = {
                    category: CATEGORY.ImageGallery,
                    action: "Arrow",
                    label: directions($(this)),
                  };
                  MT.pleaseTrackThisData(data);
                });
                $(document).on(
                  "click",
                  ".fullpage-slider .swiper-pagination-bullets span.swiper-pagination-bullet img.lazyloaded, .thumbnail-img-wrapper .icon-video-play",
                  function (e) {
                    var data = {
                      category: CATEGORY.ImageGallery,
                      action: "Thumbnail",
                      label:
                        $(this).attr("alt") ||
                        $(this)
                          .parent(".thumbnail-img-wrapper")
                          .find(".lazyloaded")
                          .attr("alt"),
                    };
                    MT.pleaseTrackThisData(data);
                  }
                );
                $(
                  ".accordion-collection-main .accordion-collection-image > img, .restaurant-swipers a.gallery-img-wrp:not(.gallery-is-video) > img, .fullpage-slider a.fullpage-slider-image:not(.fullpage-slider-video)>img, .accordion-collection-text"
                ).on("click", function (e) {
                  if (
                    $(this)
                      .closest(".swiper-slide")
                      .find(".fullpage-slider-360").length == 0 &&
                    $(this).find(".icon-video-play").length == 0
                  ) {
                    var data = {
                      category: CATEGORY.ImageGallery,
                      action: "View",
                      label:
                        $(this).closest("img").attr("alt") ||
                        $(this).find(".lazyloaded").attr("alt") ||
                        $(this)
                          .closest(".accordion-collection-text")
                          .text()
                          .trim(),
                    };
                  }
                  MT.pleaseTrackThisData(data);
                });
                $(".fullpage-slider-360").on("click", function (e) {
                  var data = {
                    category: CATEGORY.ImageGallery,
                    action: "View",
                    label: "360 View: " + $(this).find("img").attr("alt"),
                  };
                  MT.pleaseTrackThisData(data);
                });
                $("a.gallery-restaurant.gallery-is-pic > .gallery-img-wrp").on(
                  "click",
                  function (e) {
                    var data = {
                      category: CATEGORY.ImageGallery,
                      action: "View",
                      label: $(this).find("img").attr("alt"),
                    };
                    MT.pleaseTrackThisData(data);
                  }
                );
                $(
                  ".fullpage-slider-video>img, .fullpage-slider-video .icon-video-play, .gallery-is-video .gallery-img-wrp>img, .gallery-is-video .icon-video-play, .thumbnail-video .icon-video-play, .multi_tab_1 .card-image >img, .multi_tab_1 .card-image .icon-video-play, .multi_tab_1 .card .card-body .card-title, .chef-details .chef-list-image > a"
                ).on("click", function (e) {
                  if ($(e.target).next(".icon-video-play").length > 0) {
                    var data = {
                      category: CATEGORY.Video,
                      action: ACTION.getCurrentURL($(this)),
                      label:
                        $(this).closest("img").attr("alt") ||
                        $(this).find(".lazyloaded").attr("alt"),
                    };
                  } else if ($(this).hasClass("icon-video-play")) {
                    var data = {
                      category: CATEGORY.Video,
                      action: ACTION.getCurrentURL($(this)),
                      label:
                        $(this)
                          .parent(".fullpage-slider-video")
                          .find(".lazyloaded")
                          .attr("alt") ||
                        $(this)
                          .parent(".card-image")
                          .find(".lazyloaded")
                          .attr("alt"),
                    };
                  } else if (
                    $(this).hasClass("card-title") &&
                    $(this).parents(".card").find(".icon-video-play").length > 0
                  ) {
                    var data = {
                      category: CATEGORY.Video,
                      action: ACTION.getCurrentURL($(this)),
                      label: $(this).parents(".card").find("img").attr("alt"),
                    };
                  }
                  MT.pleaseTrackThisData(data);
                });
                $(document).on(
                  "click",
                  ".social-container .instagram-post-image, .social .container",
                  function (e) {
                    var data = {
                      category: CATEGORY.OutboundLink,
                      action: "SocialMedia",
                      label:
                        $(this).closest("a").attr("href") ||
                        $(this).find("a").attr("href"),
                    };
                    MT.pleaseTrackThisData(data);
                  }
                );
                $(".fullpage-video a.fullpage-video-container").on(
                  "click",
                  function (e) {
                    var data = {
                      category: CATEGORY.Video,
                      action: ACTION.getCurrentURL(),
                      label:
                        $(".swiper-pagination-bullet-active figcaption")
                          .text()
                          .trim() ||
                        $(this)
                          .closest(".single_video_1")
                          .find(".section-content-title")
                          .text()
                          .trim() ||
                        $(this).find("img").attr("alt"),
                    };
                    MT.pleaseTrackThisData(data);
                  }
                );
                $(".main-nav .navbar-brand").on("click", function (e) {
                  var data = {
                    category: CATEGORY.MainNav,
                    action: "Homepage",
                    label: $(this).getDestinationUrl(),
                  };
                  MT.pleaseTrackThisData(data);
                });
                $(
                  ".main-nav .navbar-nav:not(.navbar-sub) .nav-item > a.nav-link"
                ).on("click", function (e) {
                  var data = {
                    category: CATEGORY.MainNav,
                    action: ACTION.getLinkName($(this)),
                    label: $(this).getDestinationUrl(),
                  };
                  MT.pleaseTrackThisData(data);
                });
                $(
                  ".sub-nav .nav-item:not(.dropdown) a:not(.dropdown-toggle)"
                ).on("click", function (e) {
                  var data = {
                    category: CATEGORY.MainNav,
                    action: ACTION.getLinkName($(this)),
                    label: $(this).getDestinationUrl(),
                  };
                  MT.pleaseTrackThisData(data);
                });
                $(
                  ".sub-nav .nav-item a.dropdown-toggle+.dropdown-menu a.dropdown-item"
                ).on("click", function (e) {
                  var data = {
                    category: CATEGORY.MainNav,
                    action: ACTION.getLinkName($(this)),
                    label: $(this).getDestinationUrl(),
                  };
                  MT.pleaseTrackThisData(data);
                });
                $(
                  ".navbar-sub .nav-item:not(.dropdown) a:not(.dropdown-toggle)"
                ).on("click", function (e) {
                  var data = {
                    category: CATEGORY.MainNav,
                    action: ACTION.getLinkName($(this)),
                    label: $(this).getDestinationUrl(),
                  };
                  MT.pleaseTrackThisData(data);
                });
                $(
                  ".main-nav .navbar-nav:not(.navbar-sub) .nav-item > a.btn-secondary, .main-nav .navbar-expand-lg a.btn-secondary"
                ).on("click", function (e) {
                  var data = {
                    category: CATEGORY.Button,
                    action: $(this).getBtnNameAndDestUrl(
                      ACTION.getCurrentURL()
                    ),
                    label: ACTION.getLinkName($(this)),
                  };
                  MT.pleaseTrackThisData(data);
                });
                $(
                  ".main-nav .navbar-nav:not(.navbar-sub) .nav-item #dropdownBooking button.btn, .booking-form-container .btn-primary:not(.roompicker-done)"
                ).on("click", function (e) {
                  var data = {
                    category: CATEGORY.Button,
                    action: $(this).getBtnNameAndDestUrl(
                      ACTION.getCurrentURL()
                    ),
                    label: isDesktop()
                      ? $(".datepicker-range").data("url")
                      : $(".datepicker-range").data("mobile-url"),
                  };
                  MT.pleaseTrackThisData(data);
                });
                $('[data-toggle="bookroom"]').on("click", function (e) {
                  var data = {
                    category: CATEGORY.Button,
                    action: $(this).getBtnNameAndDestUrl(
                      ACTION.getCurrentURL()
                    ),
                    label: ACTION.roomAPI,
                  };
                  MT.pleaseTrackThisData(data);
                });
                $(".room-selector").on("click", function (e) {
                  var data = {
                    category: CATEGORY.OnPageInteraction,
                    action: "Filter",
                    label: "CalendarWidget:RoomPicker",
                  };
                  MT.pleaseTrackThisData(data);
                });
                $(".roompicker").on("click", function (e) {
                  if (
                    $(e.target).hasClass("btn-minus") ||
                    $(e.target).parents(".btn-minus").length > 0 ||
                    $(e.target).hasClass("btn-plus") ||
                    $(e.target).parents(".btn-plus").length > 0
                  ) {
                    labelCat = "";
                    if (
                      $(e.target)
                        .closest(".btn-group")
                        .find(".btn-text")
                        .first()
                        .hasClass("roompicker-room-adult")
                    ) {
                      labelCat = "Adults";
                    } else if (
                      $(e.target)
                        .closest(".btn-group")
                        .find(".btn-text")
                        .first()
                        .hasClass("roompicker-room-child")
                    ) {
                      labelCat = "Child";
                    }
                    var data = {
                      category: CATEGORY.OnPageInteraction,
                      action: "Filter",
                      label: "CalendarWidget:" + labelCat,
                    };
                    MT.pleaseTrackThisData(data);
                  } else if (
                    $(e.target).hasClass("roompicker-room-add") ||
                    $(e.target).parents(".roompicker-room-add").length > 0
                  ) {
                    var data = {
                      category: CATEGORY.OnPageInteraction,
                      action: "Filter",
                      label: "CalendarWidget:AddRoom",
                    };
                    MT.pleaseTrackThisData(data);
                  } else if (
                    $(e.target).hasClass("roompicker-room-remove") ||
                    $(e.target).parents(".roompicker-room-remove").length > 0
                  ) {
                    var data = {
                      category: CATEGORY.OnPageInteraction,
                      action: "Filter",
                      label: "CalendarWidget:RemoveRoom",
                    };
                    MT.pleaseTrackThisData(data);
                  } else if ($(e.target).hasClass("roompicker-done")) {
                    var data = {
                      category: CATEGORY.Button,
                      action: $(e.target).getBtnNameAndDestUrl(
                        ACTION.getCurrentURL()
                      ),
                      label: "#",
                    };
                    MT.pleaseTrackThisData(data);
                  }
                });
                $(".main-nav .navbar .nav-item .dropdown-menu a").on(
                  "click",
                  function (e) {
                    var data = {
                      category: CATEGORY.MainNav,
                      action: ACTION.getLinkName($(this)),
                      label: $(this).getDestinationUrl(),
                    };
                    MT.pleaseTrackThisData(data);
                  }
                );
                $(
                  "footer .row > .col-lg-8 > .footer-block li > a, footer .row > .col > .footer-block li > a, footer ol.breadcrumb li.breadcrumb-item > a"
                ).on("click", function (e) {
                  var data = {
                    category: CATEGORY.Footer,
                    action: ACTION.getLinkName($(this)),
                    label: $(this).getDestinationUrl(),
                  };
                  MT.pleaseTrackThisData(data);
                });
                $("footer .row > .col-lg-4 > .footer-block li > a").on(
                  "click",
                  function (e) {
                    var data = {};
                    if ($(this).hasClass("icon-link-email")) {
                      data = {
                        category: CATEGORY.Footer,
                        action: "Contact",
                        label:
                          $("a", this).text().trim() ||
                          $("span", this).text().trim(),
                      };
                    } else if ($(this).hasClass("icon-link-mobile")) {
                      data = {
                        category: CATEGORY.Footer,
                        action: "Contact",
                        label: $(this).text().trim(),
                      };
                    } else if ($(this).hasClass("share-icon-link")) {
                      data = {
                        category: CATEGORY.Footer,
                        action: "SocialMedia",
                        label: $(this).getDestinationUrl(),
                      };
                    } else {
                      data = {
                        category: CATEGORY.Footer,
                        action: ACTION.getLinkName($(this)),
                        label: $(this).getDestinationUrl(),
                      };
                    }
                    if (Object.keys(data).length) {
                      MT.pleaseTrackThisData(data);
                    }
                  }
                );
                $(".accordion .card-header").on("click", function (e) {
                  var data = {
                    category: CATEGORY.OnPageInteraction,
                    action: "Accordion",
                    label: $(this).find("h5").text().trim(),
                  };
                  MT.pleaseTrackThisData(data);
                });
                $(document).on("click", "p.small a", function (e) {
                  var data = {
                    category: CATEGORY.OnPageInteraction,
                    action: "Lightbox",
                    label: ACTION.getLinkName($(this)),
                  };
                  MT.pleaseTrackThisData(data);
                });
                $(document).on(
                  "click",
                  '.details .details-block .details-block-body a[data-toggle="modal"]:not(.tripadvisor-more-reviews)',
                  function (e) {
                    var data = {
                      category: CATEGORY.OnPageInteraction,
                      action: "Lightbox",
                      label: ACTION.getLinkName($(this)),
                    };
                    MT.pleaseTrackThisData(data);
                  }
                );
                $(document).on(
                  "click",
                  '.details .details-block .details-block-body a:not([data-toggle="modal"]):not([href^="mailto:"]):not([href$=pdf]):not(.external):not(.btn-block):not(.tripadvisor-more-reviews), .modal[aria-labelledby="viewModalLabel"] a:not([href$=pdf]):not(.btn-primary):not([href^="tel:"]), .accordion .media-body a:not([href$=pdf]), .accordion .card-body > p > a',
                  function (e) {
                    var a = new RegExp(location.host);
                    var b = /^\/[a-z0-9]/;
                    var c = /^#/;
                    if (
                      !a.test($(this).getDestinationUrl()) &&
                      !b.test($(this).getDestinationUrl())
                    ) {
                      if (c.test($(this).getDestinationUrl())) {
                        var data = {
                          category: CATEGORY.TextLink,
                          action:
                            ACTION.getLinkName($(this)) +
                            ":" +
                            ACTION.getCurrentURL($(this)),
                          label: $(this).getDestinationUrl(),
                        };
                      } else if (
                        $(this).closest(
                          '.modal[aria-labelledby="viewModalLabel"]'
                        )
                      ) {
                        var data = {
                          category: CATEGORY.OutboundLink,
                          action:
                            ACTION.getLinkName($(this)) +
                            ":" +
                            ACTION.getCurrentURL($(this)),
                          label: $(this).closest("a").attr("href"),
                        };
                      } else {
                        var data = {
                          category: CATEGORY.OutboundLink,
                          action: $(
                            ".card-body .card-title",
                            this
                          ).getBtnNameAndDestUrl(ACTION.getCurrentURL()),
                          label: $(this).closest("a").attr("href"),
                        };
                      }
                    } else {
                      var data = {
                        category: CATEGORY.TextLink,
                        action: $(this).getBtnNameAndDestUrl(
                          ACTION.getCurrentURL()
                        ),
                        label: $(this).getDestinationUrl(),
                      };
                    }
                    MT.pleaseTrackThisData(data);
                  }
                );
                $(document).on(
                  "click",
                  ".btn-link, .component-section .lead > a, .ambassador .lead > a, .component-section a.btn.btn-secondary, .banner-component .lead-2 > em > p > a, .banner-component .lead-2 > em > p > small > i > a, .component-section a.btn-primary, .component-section .notice-box .card-btn-list > li > a, .notice-box .media-body > p > b > a, .notice-box .media-body > p > small > a, .offer-rewards-slider .container > div > p > a",
                  function (e) {
                    if (
                      $(e.target).hasClass("icon-link-mobile") ||
                      $(e.target).hasClass("icon-dining")
                    ) {
                      var data = {
                        category: CATEGORY.TextLink,
                        action: "Contact",
                        label:
                          ACTION.getLinkName($(this)) ||
                          ACTION.getLinkName($(this).next("a")),
                      };
                      MT.pleaseTrackThisData(data);
                    } else if (
                      $(e.target).hasClass("btn") &&
                      ($(e.target).hasClass("btn-secondary") ||
                        $(e.target).hasClass("btn-primary"))
                    ) {
                      var data = {
                        category: CATEGORY.Button,
                        action:
                          ACTION.getLinkName($(e.target)) +
                          ":" +
                          ACTION.getCurrentURL($(e.target)),
                        label: $(this).getDestinationUrl(),
                      };
                      MT.pleaseTrackThisData(data);
                    } else if (
                      !$(e.target).hasClass("roompicker-room-add") &&
                      $(e.target).parents(".roompicker-room-add").length == 0
                    ) {
                      var url = $(this).getDestinationUrl();
                      var pageFormat = url.substring(url.lastIndexOf(".") + 1);
                      if (pageFormat == "pdf") {
                        var data = {
                          category: CATEGORY.FileDownload,
                          action:
                            ACTION.getLinkName($(e.target)) +
                            ":" +
                            ACTION.getCurrentURL($(e.target)),
                          label: $(e.target).getDestinationUrl(),
                        };
                      } else if ($(e.target).data("toggle") === "modal") {
                        var data = {
                          category: CATEGORY.OnPageInteraction,
                          action: "Lightbox",
                          label: ACTION.getLinkName(e.target),
                        };
                      } else {
                        var email = $(e.target).closest("a").attr("href");
                        if (email.indexOf("mailto:") == -1) {
                          var data = {
                            category: CATEGORY.TextLink,
                            action:
                              ACTION.getLinkName($(e.target)) +
                              ":" +
                              ACTION.getCurrentURL($(e.target)),
                            label: $(this).getDestinationUrl(),
                          };
                        }
                      }
                      MT.pleaseTrackThisData(data);
                    }
                  }
                );
                $(document).on(
                  "click",
                  ".details .sidebar-block .btn-block, .details .details-block .btn-block",
                  function (e) {
                    if (e.target.tagName === "A") {
                      var data = {
                        category: CATEGORY.Button,
                        action: $(this).getBtnNameAndDestUrl(
                          ACTION.getCurrentURL()
                        ),
                        label: $(this).getDestinationUrl(),
                      };
                    } else {
                      var data = {
                        category: CATEGORY.Button,
                        action: $(this).getBtnNameAndDestUrl(
                          ACTION.getCurrentURL()
                        ),
                        label: $(this).getDestinationUrl(),
                      };
                    }
                    MT.pleasePushToTealium(data);
                  }
                );
                $(document).on(
                  "click",
                  ".section-content-body .list-bullet > p > a, section.features .btn-primary, .section-content-body .card-btn-last .ttracked, section.features .row > div > p > a, section.features .container > p > a, section.features .container > div > small > ol > li > a, section.features .container > div > small > a",
                  function (e) {
                    var pdf = /^.*\.(pdf|PDF)$/;
                    if ($(this).closest(".btn-primary").length > 0) {
                      var data = {
                        category: CATEGORY.Button,
                        action:
                          ACTION.getLinkName($(this)) +
                          ":" +
                          ACTION.getCurrentURL($(this)),
                        label: $(this).getDestinationUrl(),
                      };
                    } else if (pdf.test($(e.target).getDestinationUrl())) {
                      var data = {
                        category: CATEGORY.FileDownload,
                        action: ACTION.getLinkName($(e.target)),
                        label: $(e.target).getDestinationUrl(),
                      };
                    } else if ($(e.target).data("toggle") == "modal") {
                      var data = {
                        category: CATEGORY.OnPageInteraction,
                        action: "Lightbox",
                        label: ACTION.getLinkName(e.target),
                      };
                    } else {
                      var data = {
                        category: CATEGORY.TextLink,
                        action:
                          ACTION.getLinkName($(this)) +
                          ":" +
                          ACTION.getCurrentURL($(this)),
                        label: $(this).getDestinationUrl(),
                      };
                    }
                    MT.pleaseTrackThisData(data);
                  }
                );
                $(document).on(
                  "click",
                  ".multi_rows_1 .sponsors-link, .multi_rows_1 .lead > a",
                  function (e) {
                    var a = new RegExp(location.host);
                    var b = /^\/[a-z0-9]/;
                    if ($(this).hasClass("sponsors-link")) {
                      if (
                        !a.test($(this).getDestinationUrl()) &&
                        !b.test($(this).getDestinationUrl())
                      ) {
                        var data = {
                          category: CATEGORY.OutboundLink,
                          action:
                            $(this).find("p").text() +
                            ":" +
                            ACTION.getCurrentURL($(this)),
                          label: $(this).closest("a").attr("href"),
                        };
                      } else {
                        var data = {
                          category: CATEGORY.ImageLink,
                          action:
                            $(this).closest("a").text().trim() +
                            ":" +
                            ACTION.getCurrentURL($(this)),
                          label: $(this).getDestinationUrl(),
                        };
                      }
                      MT.pleaseTrackThisData(data);
                    } else if ($(this).closest(".lead > a").length > -1) {
                      var data = {
                        category: CATEGORY.TextLink,
                        action:
                          $(this).closest("a").text().trim() +
                          ":" +
                          ACTION.getCurrentURL($(e.target)),
                        label: $(this).closest("a").attr("href"),
                      };
                      MT.pleaseTrackThisData(data);
                    }
                  }
                );
                $(document).on(
                  "click",
                  ".multi_tab_1 .card-list-item > a",
                  function (e) {
                    if ($(this).find(".icon-video-play").length == 0) {
                      if ($("body").hasClass("ticket-booking")) {
                        var data = {
                          category: CATEGORY.ImageLink,
                          action:
                            $(this).closest("a").find("img").attr("alt") +
                            ":" +
                            ACTION.getCurrentURL($(e.target)),
                          label: $(this).closest("a").getDestinationUrl(),
                        };
                      } else if (!$("body").hasClass("ticket-booking")) {
                        var data = {
                          category: CATEGORY.ImageGallery,
                          action: "View",
                          label:
                            $(this).closest("img").attr("alt") ||
                            $(this).find(".lazyloaded").attr("alt") ||
                            $(this)
                              .closest(".accordion-collection-text")
                              .text()
                              .trim(),
                        };
                      }
                    }
                    MT.pleaseTrackThisData(data);
                  }
                );
                $(document).on(
                  "click",
                  ".layout_structure .general-div-component > p > a",
                  function (e) {
                    var data = {
                      category: CATEGORY.TextLink,
                      action:
                        ACTION.getLinkName($(this)) +
                        ":" +
                        ACTION.getCurrentURL($(this)),
                      label: $(this).getDestinationUrl(),
                    };
                    MT.pleaseTrackThisData(data);
                  }
                );
                $(document).on(
                  "click",
                  ".component-section .card-text > a",
                  function (e) {
                    var data = {
                      category: CATEGORY.TextLink,
                      action:
                        ACTION.getLinkName($(this)) +
                        ":" +
                        ACTION.getCurrentURL($(this)),
                      label: $(this).getDestinationUrl(),
                    };
                    MT.pleaseTrackThisData(data);
                  }
                );
                $(document).on(
                  "click",
                  ".christmas_event_calendar .giftbox",
                  function (e) {
                    var data = {
                      category: CATEGORY.OnPageInteraction,
                      action: "Lightbox",
                      label:
                        $(this).find("span:first-child").text() +
                        " " +
                        $(this).find("span:last-child").text() +
                        " - " +
                        $(this).find("strong").text(),
                    };
                    MT.pleaseTrackThisData(data);
                  }
                );
                if ($("body").hasClass("shopping")) {
                  $(".accordion-slider .swiper-slide a").on(
                    "click",
                    function (e) {
                      if ($(this).find("img").length == 0) {
                        var data = {
                          category: CATEGORY.ImageLink,
                          action:
                            $(this).find("h5").text().trim() +
                            ":" +
                            ACTION.getCurrentURL($(e.target)),
                          label: $(this).closest("a").attr("href"),
                        };
                        MT.pleaseTrackThisData(data);
                      }
                    }
                  );
                }
                var originalslidenum;
                $(
                  ".gallery-rooms, .column-content, .swiper-fullpage, .social-swiper-container, .restaurant-swiper-container, .offers, .shoppes-container, .accordion-slider-main, .accordion-collection-main"
                ).on("touchstart", function (e) {
                  var $parent = $(this);
                  if (
                    $parent
                      .closest(".swiper-container")
                      .find(".swiper-pagination-bullet").length
                  ) {
                    originalslidenum =
                      $parent
                        .closest(".swiper-container")
                        .find(
                          ".swiper-pagination-bullet.swiper-pagination-bullet-active"
                        )
                        .index() + 1;
                  } else if (
                    $parent
                      .find(".swiper-container")
                      .find(".swiper-pagination-bullet").length
                  ) {
                    originalslidenum =
                      $parent
                        .find(".swiper-container")
                        .find(
                          ".swiper-pagination-bullet.swiper-pagination-bullet-active"
                        )
                        .index() + 1;
                  } else {
                    originalslidenum =
                      $parent
                        .find(".swiper-slide.swiper-slide-active")
                        .index() + 1;
                  }
                });
                $(
                  ".gallery-rooms, .column-content, .swiper-fullpage, .social-swiper-container, .restaurant-swiper-container, .offers, .shoppes-container, .accordion-slider-main, .accordion-collection-main"
                ).on("touchend", function (e) {
                  var $parent = $(this);
                  setTimeout(function () {
                    var newslidenum;
                    if (
                      $parent
                        .closest(".swiper-container")
                        .find(".swiper-pagination-bullet").length
                    ) {
                      newslidenum =
                        $parent
                          .closest(".swiper-container")
                          .find(
                            ".swiper-pagination-bullet.swiper-pagination-bullet-active"
                          )
                          .index() + 1;
                    } else if (
                      $parent
                        .find(".swiper-container")
                        .find(".swiper-pagination-bullet").length
                    ) {
                      newslidenum =
                        $parent
                          .find(".swiper-container")
                          .find(
                            ".swiper-pagination-bullet.swiper-pagination-bullet-active"
                          )
                          .index() + 1;
                    } else {
                      newslidenum =
                        $parent
                          .find(".swiper-slide.swiper-slide-active")
                          .index() + 1;
                    }
                    if (originalslidenum != newslidenum) {
                      if (
                        $parent
                          .find(".swiper-button-next")
                          .hasClass("swiper-button-disabled")
                      ) {
                        if ($("body").hasClass("members-privileges")) {
                          newslidenum =
                            $(".sticky-table").find(".swiper-slide").length;
                        } else {
                          newslidenum = $parent.find(".swiper-slide").length;
                        }
                      }
                      var data = {
                        category: CATEGORY.ImageGallery,
                        action: "Swipe",
                        label: "Slide" + ":" + newslidenum,
                      };
                      MT.pleaseTrackThisData(data);
                    }
                  });
                });
              })(MBSRevamp.Tagging);
            })();
          }
        } catch (e) {
          utag.DB(e);
        }
      } catch (e) {
        utag.DB(e);
      }
      try {
        try {
          if (
            (utag.data["dom.url"]
              .toString()
              .toLowerCase()
              .indexOf("/sandsrewardsclub/".toLowerCase()) < 0 &&
              utag.data["dom.url"]
                .toString()
                .toLowerCase()
                .indexOf("/sandsrewardslifestyle/".toLowerCase()) < 0 &&
              utag.data["dom.domain"]
                .toString()
                .toLowerCase()
                .indexOf("reserve.marinabaysands.com".toLowerCase()) < 0 &&
              utag.data["dom.domain"]
                .toString()
                .toLowerCase()
                .indexOf("ticket.marinabaysands.com".toLowerCase()) < 0 &&
              utag.data["dom.domain"]
                .toString()
                .toLowerCase()
                .indexOf("sevenrooms.com".toLowerCase()) < 0 &&
              !/^\/museum/i.test(utag.data["dom.pathname"]) &&
              /^((?!marinabaysands.com\/restaurants\/(.*)\/reservation).)*$/.test(
                utag.data["dom.url"]
              ) &&
              utag.data["domain_pathname"]
                .toString()
                .toLowerCase()
                .indexOf("marinabaysands.com/booking".toLowerCase()) < 0) ||
            (utag.data["dom.url"]
              .toString()
              .toLowerCase()
              .indexOf("/sands-rewards-club/".toLowerCase()) < 0 &&
              utag.data["dom.url"]
                .toString()
                .toLowerCase()
                .indexOf(".aspx".toLowerCase()) < 0) ||
            (utag.data["dom.url"]
              .toString()
              .toLowerCase()
              .indexOf("/sands-rewards-lifestyle/".toLowerCase()) < 0 &&
              utag.data["dom.url"]
                .toString()
                .toLowerCase()
                .indexOf(".aspx".toLowerCase()) < 0)
          ) {
            (function () {
              var MBSRevamp = MBSRevamp || {};
              MBSRevamp.debug = false;
              MBSRevamp.Tagging = new (function () {
                var _this = this;
                this.trackWhat = "GA";
                this.gaTracker = [
                  "mbscombined",
                  "mbsga",
                  "mbsoldua",
                  "mbsstaging",
                ];
                this.gaTracKDefault = true;
                this.CATEGORY = {
                  Button: "Button",
                  TextLink: "TextLink",
                  ImageGallery: "ImageGallery",
                  ImageLink: "ImageLink",
                  OnPageInteraction: "OnPageInteraction",
                  MainNav: "MainNav",
                  Footer: "Footer",
                  FileDownload: "FileDownload",
                  OutboundLink: "OutboundLink",
                  Video: "Video",
                };
                this.ACTION = {
                  getCurrentURL: function () {
                    return _this.getCleanCurrentURL();
                  },
                  getLinkName: function (elem) {
                    return _this.getLinkName(elem);
                  },
                  FindID: "FindID",
                  Verification: "Verification",
                  Lightbox: "Lightbox",
                  SRL: "SRL",
                  SRC: "SRC",
                };
                this.LABEL = {
                  getCurrentURL: function () {
                    return _this.getCleanCurrentURL();
                  },
                  getLinkName: function (elem) {
                    return _this.getLinkName(elem);
                  },
                  ToolTipDestinationDollars: "ToolTip:DestinationDollars",
                  DestinationDollarExpiry: "DestinationDollarExpiry",
                  FastTrack: "FastTrack",
                  FastTrackLearnMore: "FastTrackLearnMore",
                  SandsDollarsExpiry: "SandsDollarsExpiry",
                  ToolTipSandsBonusDollars: "ToolTip:SandsBonusDollars",
                  SandsBonusDollarsExpiry: "SandsBonusDollarsExpiry",
                  ToolTipTierPoints: "ToolTip:TierPoints",
                  ViewPrivileges: "ViewPrivileges",
                };
                this.pushToGA = function (category, action, label, value) {
                  if (!category && !action && !label && !value) {
                    return false;
                  }
                  if (!category || !action || !label) {
                    return false;
                  }
                  if (!category || !action || !label) {
                    return false;
                  }
                  var dataToPush = {
                    event: "GAEvent",
                    eventCategory: category,
                    eventAction: action,
                    eventLabel: label,
                    eventValue: value,
                  };
                  var message =
                    "GA Debug: " +
                    "\neventCategory: " +
                    category +
                    ", \neventAction: " +
                    action +
                    ", \neventLabel: " +
                    label +
                    ", \neventValue: " +
                    value;
                  if (MBSRevamp.debug === false) {
                    if (typeof ga !== "undefined") {
                      if (
                        typeof _this.gaTracker === "object" &&
                        _this.gaTracker.length > 0
                      ) {
                        for (var i = 0; i < _this.gaTracker.length; i++) {
                          ga(
                            _this.gaTracker[i] + ".send",
                            "event",
                            category,
                            action,
                            label
                          );
                        }
                        if (_this.gaTracKDefault === true) {
                          ga("send", "event", category, action, label);
                        }
                      } else {
                        ga(
                          _this.gaTracker + ".send",
                          "event",
                          category,
                          action,
                          label
                        );
                      }
                    } else if (typeof dataLayer !== "undefined") {
                      dataLayer.push(dataToPush);
                    }
                  }
                };
                this.pleasePushToGA = function (data) {
                  var category, action, label, value;
                  if (Array.isArray(data)) {
                    var _data = data,
                      category = _data[0],
                      action = _data[1],
                      label = _data[2],
                      value = _data[3];
                  } else if (typeof data !== "undefined" && data != null) {
                    if (
                      typeof data["category"] !== "undefined" &&
                      data["category"] != null
                    ) {
                      category = data["category"];
                    }
                    if (
                      typeof data["action"] !== "undefined" &&
                      data["action"] != null
                    ) {
                      action = data["action"];
                    }
                    if (
                      typeof data["label"] !== "undefined" &&
                      data["label"] != null
                    ) {
                      label = data["label"];
                    }
                    if (
                      typeof data["value"] !== "undefined" &&
                      data["value"] != null
                    ) {
                      value = data["value"];
                    }
                  }
                  this.pushToGA(category, action, label, value);
                };
                this.pushToTealium = function (category, action, label, value) {
                  if (!category && !action && !label && !value) {
                    return false;
                  }
                  if (!category || !action || !label) {
                    return false;
                  }
                  if (!category || !action || !label) {
                    return false;
                  }
                  var dataToPush = {
                    event_name: "GAEvent",
                    event_category: category,
                    event_action: action,
                    event_label: label,
                    eventValue: value,
                  };
                  var message =
                    "Tealium Debug: " +
                    "\nevent_category: " +
                    category +
                    ", \nevent_action: " +
                    action +
                    ", \nevent_label: " +
                    label +
                    ", \neventValue: " +
                    value;
                  if (
                    typeof utag !== "undefined" &&
                    typeof typeof utag["link"] == "function"
                  ) {
                  } else {
                  }
                };
                this.pleasePushToTealium = function (data) {
                  var category, action, label, value;
                  if (Array.isArray(data)) {
                    var _data = data,
                      category = _data[0],
                      action = _data[1],
                      label = _data[2],
                      value = _data[3];
                  } else if (typeof data !== "undefined" && data != null) {
                    if (
                      typeof data["category"] !== "undefined" &&
                      data["category"] != null
                    ) {
                      category = data["category"];
                    }
                    if (
                      typeof data["action"] !== "undefined" &&
                      data["action"] != null
                    ) {
                      action = data["action"];
                    }
                    if (
                      typeof data["label"] !== "undefined" &&
                      data["label"] != null
                    ) {
                      label = data["label"];
                    }
                    if (
                      typeof data["value"] !== "undefined" &&
                      data["value"] != null
                    ) {
                      value = data["value"];
                    }
                  }
                  this.pushToTealium(category, action, label, value);
                };
                this.pleaseTrackThisData = function (data) {
                  switch (_this.trackWhat) {
                    case "tealium":
                      this.pleasePushToTealium(data);
                      break;
                    case "GA":
                      this.pleasePushToGA(data);
                      break;
                    default:
                      this.pleasePushToGA(data);
                      break;
                  }
                };
                this.getCurrentURL = function () {
                  return window.location.href;
                };
                this.getCleanCurrentURL = function () {
                  var windowLocationHref = window.location.href;
                  if (typeof windowLocationHref === "string") {
                    var cleanHref = "";
                    if (windowLocationHref.indexOf("#") > 0) {
                      windowLocationHref = windowLocationHref.split("#")[0];
                    }
                    if (windowLocationHref.indexOf("?") > 0) {
                      windowLocationHref = windowLocationHref.split("?")[0];
                    }
                  }
                  return windowLocationHref;
                };
                this.cleanTheURL = function (url) {
                  if (typeof url === "undefined") {
                    return;
                  }
                  if (typeof url === "string") {
                    if (url.indexOf("#") > 0) {
                      url = url.split("#")[0];
                    }
                    if (url.indexOf("?") > 0) {
                      url = url.split("?")[0];
                    }
                  }
                  return url;
                };
                this.getLinkName = function (elem) {
                  return $(elem).text();
                };
                $.fn.getBtnNameAndDestUrl = function (destUrl) {
                  return $(this).text() + ":" + destUrl;
                };
                $.fn.getDestinationUrl = function () {
                  return $(this).attr("href") || "";
                };
                $.fn.getViewPrivilegesTierName = function () {
                  var cardTypeName = $(this)
                    .closest(".flipster__item__content")
                    .find(".cardType")
                    .text();
                  return LABEL.ViewPrivileges + ":" + cardTypeName;
                };
                window.isDesktop =
                  window.isDesktop ||
                  function () {
                    return window.matchMedia("(min-width: 992px)").matches
                      ? true
                      : false;
                  };
              })();
              if ($("body").hasClass("homepage")) {
                (function (MT) {
                  var ACTION = MT.ACTION;
                  var CATEGORY = MT.CATEGORY;
                  var LABEL = MT.LABEL;
                  $(".booking-form-container button").on("click", function (e) {
                    if (
                      !$(e.target).hasClass("roompicker-room-add") &&
                      $(e.target).parents(".roompicker-room-add").length == 0 &&
                      !$(e.target).hasClass("roompicker-done") &&
                      $(e.target).parents(".roompicker-done").length == 0
                    ) {
                      var data = {
                        category: CATEGORY.Button,
                        action: $(this).getBtnNameAndDestUrl(
                          ACTION.getCurrentURL()
                        ),
                        label: isDesktop()
                          ? $(".datepicker-range").data("url")
                          : $(".datepicker-range").data("mobile-url"),
                      };
                      MT.pleaseTrackThisData(data);
                    }
                  });
                  $(".shoppes-container:not(.active)").on(
                    "click",
                    function (e) {
                      var parent = $(this).closest(".shoppes-container");
                      if (
                        parent.hasClass("active") ||
                        e.target.tagName === "A" ||
                        $(e.target).parent().hasClass("close")
                      )
                        return;
                      var data = {
                        category: CATEGORY.OnPageInteraction,
                        action: "Expand",
                        label: $(this)
                          .closest(".shoppes-container")
                          .find(".shoppes-label")
                          .text(),
                      };
                      MT.pleaseTrackThisData(data);
                    }
                  );
                  $(".shoppes-container").on(
                    "click",
                    ".swiper-slide a.card-default",
                    function (e) {
                      var parent = $(this).closest(".shoppes-container");
                      if (!parent.hasClass("active")) return;
                      var data = {
                        category: CATEGORY.ImageLink,
                        action: $(".card-title", this).getBtnNameAndDestUrl(
                          ACTION.getCurrentURL()
                        ),
                        label: $(this).getDestinationUrl(),
                      };
                      MT.pleaseTrackThisData(data);
                    }
                  );
                  $(".shoppes-container .shoppes-link").on(
                    "click",
                    function (e) {
                      var data = {
                        category: CATEGORY.Button,
                        action: $(this).getBtnNameAndDestUrl(
                          ACTION.getCurrentURL()
                        ),
                        label: $(this).getDestinationUrl(),
                      };
                      MT.pleaseTrackThisData(data);
                    }
                  );
                })(MBSRevamp.Tagging);
              }
            })();
          }
        } catch (e) {
          utag.DB(e);
        }
      } catch (e) {
        utag.DB(e);
      }
      try {
        try {
          if (
            (utag.data["dom.url"]
              .toString()
              .toLowerCase()
              .indexOf("/sandsrewardsclub/".toLowerCase()) < 0 &&
              utag.data["dom.url"]
                .toString()
                .toLowerCase()
                .indexOf("/sandsrewardslifestyle/".toLowerCase()) < 0 &&
              utag.data["dom.domain"]
                .toString()
                .toLowerCase()
                .indexOf("reserve.marinabaysands.com".toLowerCase()) < 0 &&
              utag.data["dom.domain"]
                .toString()
                .toLowerCase()
                .indexOf("ticket.marinabaysands.com".toLowerCase()) < 0 &&
              utag.data["dom.domain"]
                .toString()
                .toLowerCase()
                .indexOf("sevenrooms.com".toLowerCase()) < 0 &&
              !/^\/museum/i.test(utag.data["dom.pathname"]) &&
              /^((?!deals\/.*online-ordering).)*$/.test(utag.data["dom.url"]) &&
              /^((?!restaurants\/.*\/order.*).)*$/.test(utag.data["dom.url"]) &&
              /^((?!.*(mooncakes-online-order|mooncakes-2020-test).*).)*$/.test(
                utag.data["dom.url"]
              ) &&
              utag.data["domain_pathname"]
                .toString()
                .toLowerCase()
                .indexOf("marinabaysands.com/booking".toLowerCase()) < 0 &&
              /^((?!marinabaysands.com\/restaurants\/(.*)\/reservation).)*$/.test(
                utag.data["dom.url"]
              ) &&
              /^((?!.*(asfOrder|artscience-friends-order).*).)*$/.test(
                utag.data["dom.url"]
              )) ||
            (utag.data["dom.url"]
              .toString()
              .toLowerCase()
              .indexOf("/sands-rewards-club/".toLowerCase()) < 0 &&
              utag.data["dom.url"]
                .toString()
                .toLowerCase()
                .indexOf(".aspx".toLowerCase()) < 0 &&
              /^((?!deals\/.*online-ordering).)*$/.test(utag.data["dom.url"]) &&
              /^((?!restaurants\/.*\/order.*).)*$/.test(utag.data["dom.url"]) &&
              /^((?!.*(mooncakes-online-order|mooncakes-2020-test).*).)*$/.test(
                utag.data["dom.url"]
              ) &&
              /^((?!.*(asfOrder|artscience-friends-order).*).)*$/.test(
                utag.data["dom.url"]
              )) ||
            (utag.data["dom.url"]
              .toString()
              .toLowerCase()
              .indexOf("/sands-rewards-lifestyle/".toLowerCase()) < 0 &&
              utag.data["dom.url"]
                .toString()
                .toLowerCase()
                .indexOf(".aspx".toLowerCase()) < 0 &&
              /^((?!deals\/.*online-ordering).)*$/.test(utag.data["dom.url"]) &&
              /^((?!restaurants\/.*\/order.*).)*$/.test(utag.data["dom.url"]) &&
              /^((?!.*(mooncakes-online-order|mooncakes-2020-test).*).)*$/.test(
                utag.data["dom.url"]
              ) &&
              /^((?!.*(asfOrder|artscience-friends-order).*).)*$/.test(
                utag.data["dom.url"]
              ))
          ) {
            (function () {
              var MBSRevamp = MBSRevamp || {};
              MBSRevamp.debug = false;
              MBSRevamp.Tagging = new (function () {
                var _this = this;
                this.trackWhat = "GA";
                this.gaTracker = [
                  "mbscombined",
                  "mbsga",
                  "mbsoldua",
                  "mbsstaging",
                ];
                this.gaTracKDefault = true;
                this.CATEGORY = {
                  Button: "Button",
                  TextLink: "TextLink",
                  ImageGallery: "ImageGallery",
                  ImageLink: "ImageLink",
                  OnPageInteraction: "OnPageInteraction",
                  MainNav: "MainNav",
                  Footer: "Footer",
                  FileDownload: "FileDownload",
                  OutboundLink: "OutboundLink",
                  Video: "Video",
                };
                this.ACTION = {
                  getCurrentURL: function () {
                    return _this.getCleanCurrentURL();
                  },
                  getLinkName: function (elem) {
                    return _this.getLinkName(elem);
                  },
                  FindID: "FindID",
                  Verification: "Verification",
                  Lightbox: "Lightbox",
                  SRL: "SRL",
                  SRC: "SRC",
                };
                this.LABEL = {
                  getCurrentURL: function () {
                    return _this.getCleanCurrentURL();
                  },
                  getLinkName: function (elem) {
                    return _this.getLinkName(elem);
                  },
                  ToolTipDestinationDollars: "ToolTip:DestinationDollars",
                  DestinationDollarExpiry: "DestinationDollarExpiry",
                  FastTrack: "FastTrack",
                  FastTrackLearnMore: "FastTrackLearnMore",
                  SandsDollarsExpiry: "SandsDollarsExpiry",
                  ToolTipSandsBonusDollars: "ToolTip:SandsBonusDollars",
                  SandsBonusDollarsExpiry: "SandsBonusDollarsExpiry",
                  ToolTipTierPoints: "ToolTip:TierPoints",
                  ViewPrivileges: "ViewPrivileges",
                };
                this.pushToGA = function (category, action, label, value) {
                  if (!category && !action && !label && !value) {
                    return false;
                  }
                  if (!category || !action || !label) {
                    return false;
                  }
                  if (!category || !action || !label) {
                    return false;
                  }
                  var dataToPush = {
                    event: "GAEvent",
                    eventCategory: category,
                    eventAction: action,
                    eventLabel: label,
                    eventValue: value,
                  };
                  var message =
                    "GA Debug: " +
                    "\neventCategory: " +
                    category +
                    ", \neventAction: " +
                    action +
                    ", \neventLabel: " +
                    label +
                    ", \neventValue: " +
                    value;
                  if (MBSRevamp.debug === false) {
                    if (typeof ga !== "undefined") {
                      if (
                        typeof _this.gaTracker === "object" &&
                        _this.gaTracker.length > 0
                      ) {
                        for (var i = 0; i < _this.gaTracker.length; i++) {
                          ga(
                            _this.gaTracker[i] + ".send",
                            "event",
                            category,
                            action,
                            label
                          );
                        }
                        if (_this.gaTracKDefault === true) {
                          ga("send", "event", category, action, label);
                        }
                      } else {
                        ga(
                          _this.gaTracker + ".send",
                          "event",
                          category,
                          action,
                          label
                        );
                      }
                    } else if (typeof dataLayer !== "undefined") {
                      dataLayer.push(dataToPush);
                    }
                  }
                  if (window.console) {
                    console.log(message);
                  }
                };
                this.pleasePushToGA = function (data) {
                  var category, action, label, value;
                  if (Array.isArray(data)) {
                    var _data = data,
                      category = _data[0],
                      action = _data[1],
                      label = _data[2],
                      value = _data[3];
                  } else if (typeof data !== "undefined" && data != null) {
                    if (
                      typeof data["category"] !== "undefined" &&
                      data["category"] != null
                    ) {
                      category = data["category"];
                    }
                    if (
                      typeof data["action"] !== "undefined" &&
                      data["action"] != null
                    ) {
                      action = data["action"];
                    }
                    if (
                      typeof data["label"] !== "undefined" &&
                      data["label"] != null
                    ) {
                      label = data["label"];
                    }
                    if (
                      typeof data["value"] !== "undefined" &&
                      data["value"] != null
                    ) {
                      value = data["value"];
                    }
                  }
                  this.pushToGA(category, action, label, value);
                };
                this.pushToTealium = function (category, action, label, value) {
                  if (!category && !action && !label && !value) {
                    return false;
                  }
                  if (!category || !action || !label) {
                    return false;
                  }
                  if (!category || !action || !label) {
                    return false;
                  }
                  var dataToPush = {
                    event_category: category,
                    event_action: action,
                    event_label: label,
                    eventValue: value,
                  };
                  var message =
                    "Tealium Debug: " +
                    "\nevent_category: " +
                    category +
                    ", \nevent_action: " +
                    action +
                    ", \nevent_label: " +
                    label +
                    ", \neventValue: " +
                    value;
                  if (
                    typeof utag !== "undefined" &&
                    typeof utag["link"] == "function"
                  ) {
                    utag.link(dataToPush);
                  } else {
                  }
                  if (window.console) {
                    console.log(message);
                  }
                };
                this.pleasePushToTealium = function (data) {
                  var category, action, label, value;
                  if (Array.isArray(data)) {
                    var _data = data,
                      category = _data[0],
                      action = _data[1],
                      label = _data[2],
                      value = _data[3];
                  } else if (typeof data !== "undefined" && data != null) {
                    if (
                      typeof data["category"] !== "undefined" &&
                      data["category"] != null
                    ) {
                      category = data["category"];
                    }
                    if (
                      typeof data["action"] !== "undefined" &&
                      data["action"] != null
                    ) {
                      action = data["action"];
                    }
                    if (
                      typeof data["label"] !== "undefined" &&
                      data["label"] != null
                    ) {
                      label = data["label"];
                    }
                    if (
                      typeof data["value"] !== "undefined" &&
                      data["value"] != null
                    ) {
                      value = data["value"];
                    }
                  }
                  this.pushToTealium(category, action, label, value);
                };
                this.pleaseTrackThisData = function (data) {
                  switch (_this.trackWhat) {
                    case "tealium":
                      this.pleasePushToTealium(data);
                      break;
                    case "GA":
                      this.pleasePushToGA(data);
                      break;
                    default:
                      this.pleasePushToGA(data);
                      break;
                  }
                };
                this.getCurrentURL = function () {
                  return window.location.href;
                };
                this.getCleanCurrentURL = function () {
                  var windowLocationHref = window.location.href;
                  if (typeof windowLocationHref === "string") {
                    var cleanHref = "";
                    if (windowLocationHref.indexOf("#") > 0) {
                      windowLocationHref = windowLocationHref.split("#")[0];
                    }
                    if (windowLocationHref.indexOf("?") > 0) {
                      windowLocationHref = windowLocationHref.split("?")[0];
                    }
                  }
                  return windowLocationHref;
                };
                this.cleanTheURL = function (url) {
                  if (typeof url === "undefined") {
                    return;
                  }
                  if (typeof url === "string") {
                    if (url.indexOf("#") > 0) {
                      url = url.split("#")[0];
                    }
                    if (url.indexOf("?") > 0) {
                      url = url.split("?")[0];
                    }
                  }
                  return url;
                };
                this.getLinkName = function (elem) {
                  return $(elem).text().trim();
                };
                $.fn.getBtnNameAndDestUrl = function (destUrl) {
                  return $(this).text().trim() + ":" + destUrl;
                };
                $.fn.getDestinationUrl = function () {
                  return (
                    $(this).attr("href") ||
                    $(this).find("a").first().attr("href") ||
                    $(this).closest("a").attr("href") ||
                    ""
                  );
                };
                $.fn.getViewPrivilegesTierName = function () {
                  var cardTypeName = $(this)
                    .closest(".flipster__item__content")
                    .find(".cardType")
                    .text()
                    .trim();
                  return LABEL.ViewPrivileges + ":" + cardTypeName;
                };
                window.isDesktop =
                  window.isDesktop ||
                  function () {
                    return window.matchMedia("(min-width: 992px)").matches
                      ? true
                      : false;
                  };
              })();
              if (true) {
                (function (MT) {
                  var ACTION = MT.ACTION;
                  var CATEGORY = MT.CATEGORY;
                  var LABEL = MT.LABEL;
                  $(
                    '.listing .listing-tools-box .list-inline-item input[type="radio"]'
                  ).on("change", function (e) {
                    var data = {
                      category: CATEGORY.OnPageInteraction,
                      action: "Filter",
                      label: $(this).parent().text().trim(),
                    };
                    MT.pleaseTrackThisData(data);
                  });
                  $(
                    ".listing .listing-tools-box .list-inline-item .daterangepicker"
                  ).on("click", function (e) {
                    var data = {
                      category: CATEGORY.OnPageInteraction,
                      action: "Filter",
                      label: $(".daterangepicker-from", this).attr(
                        "placeholder"
                      ),
                    };
                    MT.pleaseTrackThisData(data);
                  });
                })(MBSRevamp.Tagging);
              }
              if (true) {
                (function (MT) {
                  var ACTION = MT.ACTION;
                  var CATEGORY = MT.CATEGORY;
                  var LABEL = MT.LABEL;
                  $(
                    ".details .sidebar-block a.collapse-toggle, .details-block a.collapse-toggle"
                  ).on("click", function (e) {
                    var data = {
                      category: CATEGORY.OnPageInteraction,
                      action: "Accordion",
                      label:
                        $(this)
                          .closest(".sidebar-section")
                          .find("h4")
                          .text()
                          .trim() ||
                        $(this).closest(".d-none").find("h4").text().trim() ||
                        $(this)
                          .closest(".collapse-toggle")
                          .find(".collapse-item-show")
                          .text()
                          .trim(),
                    };
                    MT.pleaseTrackThisData(data);
                  });
                  $(document).on(
                    "click",
                    '.details .sidebar-block .sidebar-section a[data-toggle="modal"]',
                    function (e) {
                      var data = {
                        category: CATEGORY.OnPageInteraction,
                        action: "Lightbox",
                        label: ACTION.getLinkName($(this)),
                      };
                      MT.pleaseTrackThisData(data);
                    }
                  );
                })(MBSRevamp.Tagging);
              }
              if (true) {
                (function (MT) {
                  var ACTION = MT.ACTION;
                  var CATEGORY = MT.CATEGORY;
                  var LABEL = MT.LABEL;
                  $(".details .sidebar-block .sidebar-section").ready(function (
                    e
                  ) {
                    $(
                      '.details .sidebar-block .sidebar-section a[href^="tel:"]'
                    ).on("click", function (e) {
                      var data = {
                        category: CATEGORY.TextLink,
                        action: "Contact",
                        label: ACTION.getLinkName($(this)),
                      };
                      MT.pleaseTrackThisData(data);
                    });
                  });
                  $(
                    '.details .sidebar-block .sidebar-section a[href^="mailto:"], .section-content a[href^="mailto:"]'
                  ).on("click", function (e) {
                    if (
                      !$(e.target).hasClass("btn-block") &&
                      !$(e.target).hasClass("btn-secondary")
                    ) {
                      var data = {
                        category: CATEGORY.TextLink,
                        action: "Contact",
                        label: $(this).getDestinationUrl(),
                      };
                    }
                    MT.pleasePushToTealium(data);
                  });
                  $("div.pt_5.cnt_paragraph_1.tx.pb_5 a[href^='mailto:']").on(
                    "click",
                    function () {
                      var data = {
                        category: CATEGORY.TextLink,
                        action: "Contact",
                        label: $(this).getDestinationUrl(),
                      };
                      MT.pleasePushToTealium(data);
                    }
                  );
                  $(".details .sidebar-block .sidebar-section").ready(function (
                    e
                  ) {
                    $(
                      '.details .sidebar-block .sidebar-section a:not(.btn-block):not([href$=pdf]):not([data-toggle="modal"]):not([href^="mailto:"]):not([href^="tel:"]):not([data-toggle="collapse"])'
                    ).on("click", function (e) {
                      var a = new RegExp(location.host);
                      var b = /^\/[a-z0-9]/;
                      var appImageFullURL = $(this)
                        .closest("div")
                        .find("img")
                        .attr("src");
                      if (appImageFullURL == null) {
                        var appImageURL = "";
                      } else {
                        var appImageURL = appImageFullURL.substr(
                          appImageFullURL.lastIndexOf("/") + 1
                        );
                      }
                      if (
                        !a.test($(this).getDestinationUrl()) &&
                        !b.test($(this).getDestinationUrl())
                      ) {
                        if (
                          $(this)
                            .closest(".sidebar-section")
                            .find(".share-icon-link").length > 0
                        ) {
                          var data = {
                            category: CATEGORY.OutboundLink,
                            action: "SocialMedia",
                            label: $(this).getDestinationUrl(),
                          };
                        }
                        if (appImageURL === "app-store-badge.png") {
                          var data = {
                            category: "AppDownload",
                            action: "Apple" + ":" + "Sands Rewards Lifestyle",
                            label: ACTION.getCurrentURL($(this)),
                          };
                        } else if (appImageURL === "google-play-badge.png") {
                          var data = {
                            category: "AppDownload",
                            action: "Google" + ":" + "Sands Rewards Lifestyle",
                            label: ACTION.getCurrentURL($(this)),
                          };
                        } else if (
                          $(this).closest(".sidebar-section").find(".img-fluid")
                            .length > 0
                        ) {
                          var data = {
                            category: CATEGORY.OutboundLink,
                            action:
                              $(this).closest("a").find("img").attr("alt") +
                              ":" +
                              ACTION.getCurrentURL($(this)),
                            label: $(this).getDestinationUrl(),
                          };
                        } else {
                          var data = {
                            category: CATEGORY.OutboundLink,
                            action:
                              ACTION.getLinkName($(this)) +
                              ":" +
                              ACTION.getCurrentURL($(this)),
                            label: $(this).getDestinationUrl(),
                          };
                        }
                        MT.pleaseTrackThisData(data);
                      } else {
                        if (appImageURL === "app-store-badge.png") {
                          var data = {
                            category: "AppDownload",
                            action: "Apple" + ":" + "Sands Rewards Lifestyle",
                            label: ACTION.getCurrentURL($(this)),
                          };
                        } else if (appImageURL === "google-play-badge.png") {
                          var data = {
                            category: "AppDownload",
                            action: "Google" + ":" + "Sands Rewards Lifestyle",
                            label: ACTION.getCurrentURL($(this)),
                          };
                        } else {
                          var data = {
                            category: CATEGORY.TextLink,
                            action:
                              ACTION.getLinkName($(this)) +
                              ":" +
                              ACTION.getCurrentURL($(this)),
                            label: $(this).getDestinationUrl(),
                          };
                        }
                        MT.pleaseTrackThisData(data);
                      }
                    });
                  });
                })(MBSRevamp.Tagging);
              }
            })();
          }
        } catch (e) {
          utag.DB(e);
        }
      } catch (e) {
        utag.DB(e);
      }
      try {
        try {
          if (1) {
            (function (m) {
              if ("function" === typeof define && define.amd) {
                if ("undefined" !== typeof requirejs) {
                  var s = requirejs,
                    j = "[history" + new Date().getTime() + "]",
                    y = s.onError;
                  m.toString = function () {
                    return j;
                  };
                  s.onError = function (m) {
                    -1 === m.message.indexOf(j) && y.call(s, m);
                  };
                }
                define([], m);
              }
              if ("object" === typeof exports && "undefined" !== typeof module)
                module.exports = m();
              else return m();
            })(function () {
              var h = !0,
                i = null,
                p = !1;
              function m(a, b) {
                var c = d.history !== q;
                c && (d.history = q);
                a.apply(q, b);
                c && (d.history = k);
              }
              function s() {}
              function j(a, b, c) {
                if (a != i && "" !== a && !b) {
                  var b = j(),
                    f = g.getElementsByTagName("base")[0];
                  !c &&
                    f &&
                    f.getAttribute("href") &&
                    ((f.href = f.href), (b = j(f.href, i, h)));
                  c = b.d;
                  f = b.h;
                  a = "" + a;
                  a = /^(?:\w+\:)?\/\//.test(a)
                    ? 0 === a.indexOf("/")
                      ? f + a
                      : a
                    : f +
                      "//" +
                      b.g +
                      (0 === a.indexOf("/")
                        ? a
                        : 0 === a.indexOf("?")
                        ? c + a
                        : 0 === a.indexOf("#")
                        ? c + b.e + a
                        : c.replace(/[^\/]+$/g, "") + a);
                } else if (((a = b ? a : e.href), !o || c)) (a = a.replace(/^[^#]*/, "") || "#"), (a = e.protocol.replace(/:.*$|$/, ":") + "//" + e.host + l.basepath + a.replace(RegExp("^#[/]?(?:" + l.type + ")?"), ""));
                O.href = a;
                var a =
                    /(?:([a-zA-Z0-9\-]+\:))?(?:\/\/(?:[^@]*@)?([^\/:\?#]+)(?::([0-9]+))?)?([^\?#]*)(?:(\?[^#]+)|\?)?(?:(#.*))?/.exec(
                      O.href
                    ),
                  b = a[2] + (a[3] ? ":" + a[3] : ""),
                  c = a[4] || "/",
                  f = a[5] || "",
                  d = "#" === a[6] ? "" : a[6] || "",
                  k = c + f + d,
                  m = c.replace(RegExp("^" + l.basepath, "i"), l.type) + f;
                return {
                  b: a[1] + "//" + b + k,
                  h: a[1],
                  g: b,
                  i: a[2],
                  k: a[3] || "",
                  d: c,
                  e: f,
                  a: d,
                  c: k,
                  j: m,
                  f: m + d,
                };
              }
              function y(a) {
                return a &&
                  d &&
                  d.EventTarget &&
                  "function" ===
                    typeof d.EventTarget.prototype.addEventListener &&
                  "function" === typeof a.bind
                  ? a.bind(d)
                  : a;
              }
              function $() {
                var a;
                try {
                  (a = d.sessionStorage),
                    a.setItem(C + "t", "1"),
                    a.removeItem(C + "t");
                } catch (b) {
                  a = {
                    getItem: function (a) {
                      a = g.cookie.split(a + "=");
                      return (
                        (1 < a.length && a.pop().split(";").shift()) || "null"
                      );
                    },
                    setItem: function (a) {
                      var b = {};
                      if ((b[e.href] = k.state))
                        g.cookie = a + "=" + t.stringify(b);
                    },
                  };
                }
                try {
                  r = t.parse(a.getItem(C)) || {};
                } catch (c) {
                  r = {};
                }
                u(
                  v + "unload",
                  function () {
                    a.setItem(C, t.stringify(r));
                  },
                  p
                );
              }
              function D(a, b, c, f) {
                var e = 0;
                c || ((c = { set: s }), (e = 1));
                var g = !c.set,
                  j = !c.get,
                  k = {
                    configurable: h,
                    set: function () {
                      g = 1;
                    },
                    get: function () {
                      j = 1;
                    },
                  };
                try {
                  z(a, b, k), (a[b] = a[b]), z(a, b, c);
                } catch (l) {}
                if (!g || !j)
                  if (
                    (a.__defineGetter__ &&
                      (a.__defineGetter__(b, k.get),
                      a.__defineSetter__(b, k.set),
                      (a[b] = a[b]),
                      c.get && a.__defineGetter__(b, c.get),
                      c.set && a.__defineSetter__(b, c.set)),
                    !g || !j)
                  ) {
                    if (e) return p;
                    if (a === d) {
                      try {
                        var m = a[b];
                        a[b] = i;
                      } catch (o) {}
                      if ("execScript" in d)
                        d.execScript("Public " + b, "VBScript"),
                          d.execScript("var " + b + ";", "JavaScript");
                      else
                        try {
                          z(a, b, { value: s });
                        } catch (r) {
                          "onpopstate" === b &&
                            (u(
                              "popstate",
                              (c = function () {
                                I("popstate", c, p);
                                var b = a.onpopstate;
                                a.onpopstate = i;
                                setTimeout(function () {
                                  a.onpopstate = b;
                                }, 1);
                              }),
                              p
                            ),
                            (P = 0));
                        }
                      a[b] = m;
                    } else
                      try {
                        try {
                          var n = J.create(a);
                          z(J.getPrototypeOf(n) === a ? n : a, b, c);
                          for (var q in a)
                            "function" === typeof a[q] && (n[q] = a[q].bind(a));
                          try {
                            f.call(n, n, a);
                          } catch (t) {}
                          a = n;
                        } catch (v) {
                          z(a.constructor.prototype, b, c);
                        }
                      } catch (w) {
                        return p;
                      }
                  }
                return a;
              }
              function aa(a, b, c) {
                c = c || {};
                a = a === Q ? e : a;
                c.set =
                  c.set ||
                  function (c) {
                    a[b] = c;
                  };
                c.get =
                  c.get ||
                  function () {
                    return a[b];
                  };
                return c;
              }
              function ba(a, b, c) {
                a in w
                  ? w[a].push(b)
                  : 3 < arguments.length
                  ? u(a, b, c, arguments[3])
                  : u(a, b, c);
              }
              function ca(a, b, c) {
                var d = w[a];
                if (d)
                  for (a = d.length; a--; ) {
                    if (d[a] === b) {
                      d.splice(a, 1);
                      break;
                    }
                  }
                else I(a, b, c);
              }
              function E(a, b) {
                var c = ("" + ("string" === typeof a ? a : a.type)).replace(
                    /^on/,
                    ""
                  ),
                  f = w[c];
                if (f) {
                  b = "string" === typeof a ? b : a;
                  if (b.target == i)
                    for (
                      var e = ["target", "currentTarget", "srcElement", "type"];
                      (a = e.pop());

                    )
                      b = D(b, a, {
                        get:
                          "type" === a
                            ? function () {
                                return c;
                              }
                            : function () {
                                return d;
                              },
                      });
                  P &&
                    (
                      ("popstate" === c ? d.onpopstate : d.onhashchange) || s
                    ).call(d, b);
                  for (var e = 0, g = f.length; e < g; e++) f[e].call(d, b);
                  return h;
                }
                return da(a, b);
              }
              function R() {
                var a = g.createEvent
                  ? g.createEvent("Event")
                  : g.createEventObject();
                a.initEvent
                  ? a.initEvent("popstate", p, p)
                  : (a.type = "popstate");
                a.state = k.state;
                E(a);
              }
              function A(a, b, c, d) {
                o
                  ? (B = e.href)
                  : (0 === n && (n = 2),
                    (b = j(b, 2 === n && -1 !== ("" + b).indexOf("#"))),
                    b.c !== j().c &&
                      ((B = d), c ? e.replace("#" + b.f) : (e.hash = b.f)));
                !F && a && (r[e.href] = a);
                G = p;
              }
              function S(a) {
                var b = B;
                B = e.href;
                if (b) {
                  T !== e.href && R();
                  var a = a || d.event,
                    b = j(b, h),
                    c = j();
                  a.oldURL || ((a.oldURL = b.b), (a.newURL = c.b));
                  b.a !== c.a && E(a);
                }
              }
              function U(a) {
                setTimeout(function () {
                  u(
                    "popstate",
                    function (a) {
                      T = e.href;
                      F ||
                        (a = D(a, "state", {
                          get: function () {
                            return k.state;
                          },
                        }));
                      E(a);
                    },
                    p
                  );
                }, 0);
                !o &&
                  a !== h &&
                  "location" in k &&
                  (V(H.hash), G && ((G = p), R()));
              }
              function ea(a) {
                var a = a || d.event,
                  b;
                a: {
                  for (b = a.target || a.srcElement; b; ) {
                    if ("A" === b.nodeName) break a;
                    b = b.parentNode;
                  }
                  b = void 0;
                }
                var c =
                  "defaultPrevented" in a
                    ? a.defaultPrevented
                    : a.returnValue === p;
                b &&
                  "A" === b.nodeName &&
                  !c &&
                  ((c = j()),
                  (b = j(b.getAttribute("href", 2))),
                  c.b.split("#").shift() === b.b.split("#").shift() &&
                    b.a &&
                    (c.a !== b.a && (H.hash = b.a),
                    V(b.a),
                    a.preventDefault
                      ? a.preventDefault()
                      : (a.returnValue = p)));
              }
              function V(a) {
                var b = g.getElementById((a = (a || "").replace(/^#/, "")));
                b &&
                  b.id === a &&
                  "A" === b.nodeName &&
                  ((a = b.getBoundingClientRect()),
                  d.scrollTo(
                    K.scrollLeft || 0,
                    a.top + (K.scrollTop || 0) - (K.clientTop || 0)
                  ));
              }
              var d = ("object" === typeof window ? window : this) || {};
              if (!d.history || "emulate" in d.history) return d.history;
              var g = d.document,
                K = g.documentElement,
                J = d.Object,
                t = d.JSON,
                e = d.location,
                q = d.history,
                k = q,
                L = q.pushState,
                W = q.replaceState,
                o = (function () {
                  var a = d.navigator.userAgent;
                  return (-1 !== a.indexOf("Android 2.") ||
                    -1 !== a.indexOf("Android 4.0")) &&
                    -1 !== a.indexOf("Mobile Safari") &&
                    -1 === a.indexOf("Chrome") &&
                    -1 === a.indexOf("Windows Phone")
                    ? p
                    : !!L;
                })(),
                F = "state" in q,
                z = J.defineProperty,
                H = D({}, "t") ? {} : g.createElement("a"),
                v = "",
                M = d.addEventListener
                  ? "addEventListener"
                  : (v = "on") && "attachEvent",
                X = d.removeEventListener
                  ? "removeEventListener"
                  : "detachEvent",
                Y = d.dispatchEvent ? "dispatchEvent" : "fireEvent",
                u = y(d[M]),
                I = y(d[X]),
                da = y(d[Y]),
                l = { basepath: "/", redirect: 0, type: "/", init: 0 },
                C = "__historyAPI__",
                O = g.createElement("a"),
                B = e.href,
                T = "",
                P = 1,
                G = p,
                n = 0,
                r = {},
                w = {},
                x = g.title,
                N,
                fa = { onhashchange: i, onpopstate: i },
                Z = {
                  setup: function (a, b, c) {
                    l.basepath = ("" + (a == i ? l.basepath : a)).replace(
                      /(?:^|\/)[^\/]*$/,
                      "/"
                    );
                    l.type = b == i ? l.type : b;
                    l.redirect = c == i ? l.redirect : !!c;
                  },
                  redirect: function (a, b) {
                    k.setup(b, a);
                    b = l.basepath;
                    if (d.top == d.self) {
                      var c = j(i, p, h).c,
                        f = e.pathname + e.search;
                      o
                        ? ((f = f.replace(/([^\/])$/, "$1/")),
                          c != b &&
                            RegExp("^" + b + "$", "i").test(f) &&
                            e.replace(c))
                        : f != b &&
                          ((f = f.replace(/([^\/])\?/, "$1/?")),
                          RegExp("^" + b, "i").test(f) &&
                            e.replace(
                              b +
                                "#" +
                                f.replace(RegExp("^" + b, "i"), l.type) +
                                e.hash
                            ));
                    }
                  },
                  pushState: function (a, b, c) {
                    var d = g.title;
                    x != i && (g.title = x);
                    L && m(L, arguments);
                    A(a, c);
                    g.title = d;
                    x = b;
                  },
                  replaceState: function (a, b, c) {
                    var d = g.title;
                    x != i && (g.title = x);
                    delete r[e.href];
                    W && m(W, arguments);
                    A(a, c, h);
                    g.title = d;
                    x = b;
                  },
                  location: {
                    set: function (a) {
                      0 === n && (n = 1);
                      d.location = a;
                    },
                    get: function () {
                      0 === n && (n = 1);
                      return H;
                    },
                  },
                  state: {
                    get: function () {
                      return "object" === typeof r[e.href]
                        ? t.parse(t.stringify(r[e.href]))
                        : "undefined" !== typeof r[e.href]
                        ? r[e.href]
                        : i;
                    },
                  },
                },
                Q = {
                  assign: function (a) {
                    !o && 0 === ("" + a).indexOf("#") ? A(i, a) : e.assign(a);
                  },
                  reload: function (a) {
                    e.reload(a);
                  },
                  replace: function (a) {
                    !o && 0 === ("" + a).indexOf("#")
                      ? A(i, a, h)
                      : e.replace(a);
                  },
                  toString: function () {
                    return this.href;
                  },
                  origin: {
                    get: function () {
                      return void 0 !== N
                        ? N
                        : !e.origin
                        ? e.protocol +
                          "//" +
                          e.hostname +
                          (e.port ? ":" + e.port : "")
                        : e.origin;
                    },
                    set: function (a) {
                      N = a;
                    },
                  },
                  href: o
                    ? i
                    : {
                        get: function () {
                          return j().b;
                        },
                      },
                  protocol: i,
                  host: i,
                  hostname: i,
                  port: i,
                  pathname: o
                    ? i
                    : {
                        get: function () {
                          return j().d;
                        },
                      },
                  search: o
                    ? i
                    : {
                        get: function () {
                          return j().e;
                        },
                      },
                  hash: o
                    ? i
                    : {
                        set: function (a) {
                          A(i, ("" + a).replace(/^(#|)/, "#"), p, B);
                        },
                        get: function () {
                          return j().a;
                        },
                      },
                };
              if (
                (function () {
                  var a = g.getElementsByTagName("script"),
                    a = (a[a.length - 1] || {}).src || "";
                  (-1 !== a.indexOf("?") ? a.split("?").pop() : "").replace(
                    /(\w+)(?:=([^&]*))?/g,
                    function (a, b, c) {
                      l[b] = (c || "").replace(/^(0|false)$/, "");
                    }
                  );
                  u(v + "hashchange", S, p);
                  var b = [Q, H, fa, d, Z, k];
                  F && delete Z.state;
                  for (var c = 0; c < b.length; c += 2)
                    for (var e in b[c])
                      if (b[c].hasOwnProperty(e))
                        if ("object" !== typeof b[c][e]) b[c + 1][e] = b[c][e];
                        else {
                          a = aa(b[c], e, b[c][e]);
                          if (
                            !D(b[c + 1], e, a, function (a, e) {
                              if (e === k) d.history = k = b[c + 1] = a;
                            })
                          )
                            return I(v + "hashchange", S, p), p;
                          b[c + 1] === d && (w[e] = w[e.substr(2)] = []);
                        }
                  k.setup();
                  l.redirect && k.redirect();
                  l.init && (n = 1);
                  !F && t && $();
                  if (!o) g[M](v + "click", ea, p);
                  "complete" === g.readyState
                    ? U(h)
                    : (!o && j().c !== l.basepath && (G = h),
                      u(v + "load", U, p));
                  return h;
                })()
              )
                return (
                  (k.emulate = !o), (d[M] = ba), (d[X] = ca), (d[Y] = E), k
                );
            });
          }
        } catch (e) {
          utag.DB(e);
        }
      } catch (e) {
        utag.DB(e);
      }
      try {
        try {
          if (
            utag.data["dom.domain"]
              .toString()
              .toLowerCase()
              .indexOf("reserve.marinabaysands.com".toLowerCase()) > -1
          ) {
            (function () {
              if (typeof window.CustomEvent === "function") return false;
              function CustomEvent(event, params) {
                params = params || {
                  bubbles: false,
                  cancelable: false,
                  detail: null,
                };
                var evt = document.createEvent("CustomEvent");
                evt.initCustomEvent(
                  event,
                  params.bubbles,
                  params.cancelable,
                  params.detail
                );
                return evt;
              }
              CustomEvent.prototype = window.Event.prototype;
              window.CustomEvent = CustomEvent;
            })();
            window.getUrlParameter = function (name) {
              name = name.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
              var regex = new RegExp("[\\?&]" + name + "=([^&#]*)");
              var results = regex.exec(location.search);
              return results === null
                ? ""
                : decodeURIComponent(results[1].replace(/\+/g, " "));
            };
            if (
              typeof history != "undefined" &&
              typeof window.CustomEvent != "undefined"
            ) {
              if (
                typeof history.pushState == "undefined" ||
                typeof history.replaceState == "undefined"
              )
                return false;
            } else {
              return false;
            }
            history.pushState = (function (f) {
              return function pushState() {
                var ret = f.apply(this, arguments);
                window.dispatchEvent(new CustomEvent("pushState"));
                window.dispatchEvent(new CustomEvent("locationchange"));
                return ret;
              };
            })(history.pushState);
            history.replaceState = (function (f) {
              return function replaceState() {
                var ret = f.apply(this, arguments);
                window.dispatchEvent(new CustomEvent("replaceState"));
                window.dispatchEvent(new CustomEvent("locationchange"));
                return ret;
              };
            })(history.replaceState);
            window.addEventListener("popstate", function () {
              window.dispatchEvent(new CustomEvent("locationchange"));
            });
            window.addEventListener("locationchange", function () {
              var pathname = window.location.pathname;
              var udo_var = {};
              if (pathname == "/rooms") {
                udo_var.language_code = getUrlParameter("locale");
                udo_var.page_type = "booking_select_room";
                udo_var.page_name = "booking_select_room";
                udo_var.num_of_rooms = getUrlParameter("Rooms");
                udo_var.num_of_nights = utag_data.num_of_nights;
                udo_var.num_of_adults = utag_data.num_of_adults;
                udo_var.num_of_children = utag_data.num_of_children;
                udo_var.check_in = utag_data.check_in;
                udo_var.check_out = utag_data.check_out;
                udo_var.rate_code =
                  getUrlParameter("offerCode") || utag_data.rate_code;
                udo_var.ga_page_override = "abort";
                udo_var.currency = utag_data.currency;
                utag.view(udo_var);
              } else if (pathname == "/guestCreditCardInfo") {
              } else if (pathname == "/confirmation") {
                var udo_array = [];
                var udo_array_length = 1;
                if (utag_data.order_total instanceof Array) {
                  udo_array_length = utag_data.order_total.length;
                }
                for (var i = 0; i < udo_array_length; i++) {
                  udo_array[i] = {};
                  udo_array[i]["language_code"] = utag_data.language_code;
                  udo_array[i]["page_type"] = "booking_confirmation";
                  udo_array[i]["page_name"] = "booking_confirmation";
                  udo_array[i]["num_of_rooms"] = utag_data.num_of_rooms;
                  udo_array[i]["check_in"] = utag_data.check_in[i];
                  udo_array[i]["check_out"] = utag_data.check_out[i];
                  udo_array[i]["currency"] = utag_data.currency;
                  udo_array[i]["foreign_currency"] = utag_data.foreign_currency;
                  udo_array[i]["rate_code"] =
                    getUrlParameter("offerCode") || utag_data.rate_code[i];
                  udo_array[i]["order_id"] = utag_data.order_id[i];
                  udo_array[i]["order_subtotal"] = utag_data.avg_room_rate[i];
                  udo_array[i]["order_tax_amount"] =
                    utag_data["order_tax_amount"] / utag_data["num_of_rooms"] ||
                    "";
                  udo_array[i]["order_total"] =
                    parseFloat(udo_array[i]["order_subtotal"]) +
                    parseFloat(udo_array[i]["order_tax_amount"]);
                  udo_array[i]["order_total_occupancy"] =
                    utag_data.order_total_occupancy;
                  udo_array[i]["order_room_type"] =
                    utag_data.order_room_type[i];
                  udo_array[i]["order_room_occupancy"] =
                    utag_data.order_room_occupancy[i];
                  udo_array[i]["num_of_children"] =
                    utag_data.num_of_children[i];
                  udo_array[i]["num_of_adults"] = utag_data.num_of_adults[i];
                  udo_array[i]["num_of_nights"] = utag_data.num_of_nights[i];
                  udo_array[i]["days_till_checkin"] =
                    utag_data.days_till_checkin[i];
                  try {
                    udo_array[i]["days_till_checkin_minus_seven"] =
                      utag_data.days_till_checkin[i] <= 7
                        ? "0"
                        : parseInt(utag_data.days_till_checkin[i]) - 7 + "";
                  } catch (err) {
                    udo_array[i]["days_till_checkin_minus_seven"] = "0";
                  }
                  udo_array[i].ga_page_override = "abort";
                }
              }
            });
          }
        } catch (e) {
          utag.DB(e);
        }
      } catch (e) {
        utag.DB(e);
      }
      try {
        try {
          if (
            utag.data["dom.url"]
              .toString()
              .indexOf(
                ".marinabaysands.com/singapore-visitors-guide/around-mbs/"
              ) > -1
          ) {
            var MBS = MBS || {};
            MBS.Tagging = MBS.Tagging || {};
            MBS.Tagging = {
              initEvents: function () {
                var _this = this;
                _this.initTopNavigationLinks();
                _this.initLanguageHeader();
                _this.initViewVideo();
                _this.initPercentWatchedVideo();
                _this.initBackToTop();
                _this.initTextLinkClick();
                _this.initSocialMediaButtonClick();
              },
              initTopNavigationLinks: function () {
                var _this = this;
                $("#main_nav a").on("click", function (event) {
                  if ($(this).closest("#main_nav").size() > 0) {
                    _this.triggerTealiumEvent({
                      event_name: "Top Navigation",
                      event_action: window.location.href,
                      event_label: $(this).attr("href"),
                    });
                  }
                });
              },
              initLanguageHeader: function () {
                var _this = this;
                $(".navbar-nav .dropdown-toggle").on("click", function () {
                  $(this).addClass("ttracked");
                  _this.triggerTealiumEvent({
                    event_name: "Language Header",
                    event_action: $(this).attr("href"),
                    event_label: window.location.href,
                  });
                });
              },
              initTextLinkClick: function () {
                var _this = this;
                $("#sect-title a").on("click", function () {
                  var TextLinkName = $(this)[0].innerText;
                  _this.triggerTealiumEvent({
                    event_action: TextLinkName + ":" + window.location.href,
                    event_category: "TextLink",
                    event_label: $(this).attr("href"),
                  });
                });
                $(".card-link").on("click", function () {
                  var TextLinkName = $(this)[0].innerText;
                  _this.triggerTealiumEvent({
                    event_action: TextLinkName + ":" + window.location.href,
                    event_category: "TextLink",
                    event_label: $(this).attr("href"),
                  });
                });
                $("#visit-sect a").on("click", function () {
                  var TextLinkName = $(this)[0].innerText;
                  _this.triggerTealiumEvent({
                    event_action: TextLinkName + ":" + window.location.href,
                    event_category: "TextLink",
                    event_label: $(this).attr("href"),
                  });
                });
                $(".cnt_paragraph_1 a").on("click", function () {
                  var TextLinkName = $(this)[0].innerText;
                  _this.triggerTealiumEvent({
                    event_action: TextLinkName + ":" + window.location.href,
                    event_category: "TextLink",
                    event_label: $(this).attr("href"),
                  });
                });
              },
              initSocialMediaButtonClick: function () {
                var _this = this;
                $(".iShare_box a i").click(function () {
                  var D_sharelink = $(this).parent();
                  var label = D_sharelink.attr("href");
                  if (label == "javascript:;") {
                    label = D_sharelink.attr("title");
                  }
                  _this.triggerTealiumEvent({
                    event_category: "Button",
                    event_action:
                      D_sharelink.attr("title") + ":" + window.location.href,
                    event_label: label,
                  });
                });
              },
              initBackToTop: function () {
                var _this = this;
                $("#scroll").on("click", function () {
                  _this.triggerTealiumEvent({
                    event_name: "Back To Top",
                    event_action: window.location.href,
                    event_label: $(this).attr("title"),
                  });
                });
              },
              initViewVideo: function () {
                var _this = this;
                window._wq = window._wq || [];
                $("div[data-videoid]").each(function () {
                  var videoid = $(this).data("videoid");
                  _wq.push({
                    id: videoid,
                    onReady: function (video) {
                      video.bind("play", function () {
                        _this.triggerTealiumEvent({
                          event_name: "view_video",
                          event_action: this.src,
                          link_category: "video",
                          link_name: this.src,
                        });
                      });
                    },
                  });
                });
              },
              initPercentWatchedVideo: function () {
                var _this = this;
                window._wq = window._wq || [];
                $("div[data-videoid]").each(function () {
                  var videoid = $(this).data("videoid");
                  _wq.push({
                    id: videoid,
                    onReady: function (video) {
                      video.bind(
                        "percentwatchedchanged",
                        function (percent, lastPercent) {
                          if (percent >= 0.25 && lastPercent < 0.25) {
                            _this.triggerTealiumEvent({
                              event_name: "percent_watched_video",
                              link_category: "video",
                              percent_watched:
                                "The viewer has watched 25% of the video!",
                            });
                          }
                          if (percent >= 0.5 && lastPercent < 0.5) {
                            _this.triggerTealiumEvent({
                              event_name: "percent_watched_video",
                              link_category: "video",
                              percent_watched:
                                "The viewer has watched 50% of the video!",
                            });
                          }
                          if (percent >= 0.75 && lastPercent < 0.75) {
                            _this.triggerTealiumEvent({
                              event_name: "percent_watched_video",
                              link_category: "video",
                              percent_watched:
                                "The viewer has watched 75% of the video!",
                            });
                          }
                        }
                      );
                    },
                  });
                });
              },
              getPathName: function () {
                var url = window.location.pathname;
                var filename = url.substring(url.lastIndexOf("/") + 1);
                return filename;
              },
              triggerTealiumEvent: function (data) {
                utag.link(data);
                console.log("Tealium Event Triggered: ");
                console.log(data);
              },
            };
            MBS.Tagging.initEvents();
          }
        } catch (e) {
          utag.DB(e);
        }
      } catch (e) {
        utag.DB(e);
      }
      try {
        try {
          if (
            utag.data["dom.url"]
              .toString()
              .indexOf(".marinabaysands.com/hotel/rooms-suites/") > -1
          ) {
            var MBS = MBS || {};
            MBS.Tagging = MBS.Tagging || {};
            MBS.Tagging = {
              initEvents: function () {
                var _this = this;
                _this.initHarakoVideoClick();
                _this.initHarakoThumbnailClick();
              },
              initHarakoVideoClick: function () {
                var _this = this;
                $(".harako_control_board").on("click", function () {
                  _this.triggerTealiumEvent({
                    event_action: "View",
                    event_category: "ImageGallery",
                    event_label: _this.getPathName(),
                  });
                });
              },
              initHarakoThumbnailClick: function () {
                var _this = this;
                $(".harako_thumb_board").each(function () {
                  $(this)
                    .parents("li")
                    .on("click", function () {
                      _this.triggerTealiumEvent({
                        event_action: "Thumbnail",
                        event_category: "ImageGallery",
                        event_label: _this.getPathName(),
                      });
                    });
                });
              },
              getPathName: function () {
                var url = window.location.pathname;
                var filename = url.substring(url.lastIndexOf("/") + 1);
                return filename;
              },
              triggerTealiumEvent: function (data) {
                utag.link(data);
                console.log("Tealium Event Triggered: ");
                console.log(data);
              },
            };
            MBS.Tagging.initEvents();
          }
        } catch (e) {
          utag.DB(e);
        }
      } catch (e) {
        utag.DB(e);
      }
      try {
        try {
          if (
            /staging.marinabaysands.com\/deals\/.*online-ordering.html/.test(
              utag.data["dom.url"]
            ) ||
            /.*.marinabaysands.com\/restaurants\/.*\/order.html/.test(
              utag.data["dom.url"]
            ) ||
            /.*(mooncakes-online-order|mooncakes-2020-test|christmas-goodies-2020).html/.test(
              utag.data["dom.url"]
            )
          ) {
            var MBS = MBS || {};
            MBS.Tagging = MBS.Tagging || {};
            MBS.Tagging = {
              initEvents: function () {
                var _this = this;
                _this.initHarakoVideoClick();
              },
              triggerTealiumEvent: function (data) {
                utag.link(data);
                console.log("Tealium Event Triggered: ");
                console.log(data);
              },
              initHarakoVideoClick: function () {
                var _this = this;
                $(".product-listing-item a.card-box").on("click", function () {
                  _this.triggerTealiumEvent({
                    event_action: "Lightbox",
                    event_category: "OnPageInteraction",
                    event_label: $(this).find(".product-title").text(),
                    tealium_event: "internal_link_click",
                  });
                });
                $(".product-listing-item .count-box").on("click", function (e) {
                  e.stopPropagation();
                });
                $(".collection-box")
                  .find("a")
                  .on("click", function () {
                    if ($(this).attr("data-toggle") === "modal") {
                      _this.triggerTealiumEvent({
                        event_action: "Lightbox",
                        event_category: "OnPageInteraction",
                        event_label: $(this).text(),
                        tealium_event: "internal_link_click",
                      });
                    }
                  });
                $(".order-container")
                  .find("a")
                  .on("click", function () {
                    if ($(this).attr("href")) {
                      if ($(this).attr("href").indexOf("mailto") > -1) {
                        var email_address = $(this)
                          .attr("href")
                          .split("mailto:")[1];
                        _this.triggerTealiumEvent({
                          event_action: "Contact",
                          event_category: "TextLink",
                          event_label: email_address,
                          tealium_event: "email_click",
                          mailto_email: email_address,
                          page_name: utag_data.page_name,
                          product_category: "Merchandise",
                          site_section: "restaurants",
                        });
                      } else if (
                        $(this).attr("data-toggle") === "modal" &&
                        $(this).hasClass("btn")
                      ) {
                        _this.triggerTealiumEvent({
                          event_action:
                            $(this).text().trim() + ":" + window.location.href,
                          event_category: "Button",
                          event_label:
                            window.location.href + $(this).attr("href"),
                          tealium_event: "member_login_click",
                          page_name: utag_data.page_name,
                          product_category: "Merchandise",
                          site_section: "restaurants",
                        });
                      } else if ($(this).attr("data-toggle") === "modal") {
                        _this.triggerTealiumEvent({
                          event_action: "Lightbox",
                          event_category: "OnPageInteraction",
                          event_label: $(this).text(),
                          tealium_event: "internal_link_click",
                        });
                      } else if ($(this).attr("href").indexOf("tel") > -1) {
                        var sUserAgent = navigator.userAgent.toLowerCase();
                        var bIsIpad = sUserAgent.match(/ipad/i) == "ipad";
                        var bIsIphoneOs =
                          sUserAgent.match(/iphone os/i) == "iphone os";
                        var bIsMidp = sUserAgent.match(/midp/i) == "midp";
                        var bIsUc7 =
                          sUserAgent.match(/rv:1.2.3.4/i) == "rv:1.2.3.4";
                        var bIsUc = sUserAgent.match(/ucweb/i) == "ucweb";
                        var bIsAndroid =
                          sUserAgent.match(/android/i) == "android";
                        var bIsCE =
                          sUserAgent.match(/windows ce/i) == "windows ce";
                        var bIsWM =
                          sUserAgent.match(/windows mobile/i) ==
                          "windows mobile";
                        var call_number = $(this).attr("href").split("tel:")[1];
                        if (
                          bIsIpad ||
                          bIsIphoneOs ||
                          bIsMidp ||
                          bIsUc7 ||
                          bIsUc ||
                          bIsAndroid ||
                          bIsCE ||
                          bIsWM
                        ) {
                          _this.triggerTealiumEvent({
                            event_action: "Contact",
                            event_category: "TextLink",
                            event_label: call_number,
                            tealium_event: "call_click",
                            call_number: call_number,
                            page_name: utag_data.page_name,
                            product_category: "Merchandise",
                            site_section: utag_data.site_section,
                          });
                        }
                      }
                    }
                  });
                $("#memberCard-default-title")
                  .find(".tips-parent")
                  .on("mouseout", function () {
                    _this.triggerTealiumEvent({
                      event_action: "Lightbox",
                      event_category: "OnPageInteraction",
                      event_label: "SRL tooltip",
                      tealium_event: "internal_link_click",
                    });
                  });
                $("#memberCard-default-title")
                  .find(".tips-parent")
                  .on("touchstart", function () {
                    _this.triggerTealiumEvent({
                      event_action: "Lightbox",
                      event_category: "OnPageInteraction",
                      event_label: "SRL tooltip",
                      tealium_event: "internal_link_click",
                    });
                  });
                $(".memberCard-container")
                  .find("a")
                  .on("click", function () {
                    if ($(this).attr("data-toggle") === "modal") {
                      _this.triggerTealiumEvent({
                        event_action: "Lightbox",
                        event_category: "OnPageInteraction",
                        event_label: "SRL card image",
                        tealium_event: "internal_link_click",
                      });
                    } else {
                      _this.triggerTealiumEvent({
                        event_action:
                          $(this).text() + ":" + window.location.href,
                        event_category: "TextLink",
                        event_label: $(this).attr("href"),
                        tealium_event: "internal_link_click",
                      });
                    }
                  });
                $("#terms-check1")
                  .find("a")
                  .on("click", function () {
                    if ($(this).attr("data-toggle") === "modal") {
                      _this.triggerTealiumEvent({
                        event_action: "Lightbox",
                        event_category: "OnPageInteraction",
                        event_label: $(this).text(),
                        tealium_event: "internal_link_click",
                      });
                    }
                  });
                $("#terms-check2")
                  .find("a")
                  .on("click", function () {
                    if (!$(this).attr("data-toggle")) {
                      _this.triggerTealiumEvent({
                        event_action:
                          $(this).text() + ":" + window.location.href,
                        event_category: "TextLink",
                        event_label: $(this).attr("href"),
                        tealium_event: "internal_link_click",
                      });
                    }
                  });
                $("#s_btn_view_rooms").on("click", function () {
                  _this.triggerTealiumEvent({
                    event_action:
                      $(this).text().trim() + ":" + window.location.href,
                    event_category: "Button",
                    event_label: "Pop up payment lightbox",
                  });
                });
                $("#payButton").on("click", function () {
                  _this.triggerTealiumEvent({
                    event_action:
                      $(this).text().trim() + ":" + window.location.href,
                    event_category: "Button",
                    event_label: JSON.parse($("#emaliSettingMsg").html())
                      .thankYouPageUrl,
                    tealium_event: "internal_link_click",
                  });
                });
                $("#order-promotion-container")
                  .find(".tips-parent")
                  .on("mouseout", function () {
                    _this.triggerTealiumEvent({
                      event_action: "Lightbox",
                      event_category: "OnPageInteraction",
                      event_label: "Promotion tooltip",
                    });
                  });
                $("#order-promotion-container")
                  .find(".tips-parent")
                  .on("touchstart", function () {
                    _this.triggerTealiumEvent({
                      event_action: "Lightbox",
                      event_category: "OnPageInteraction",
                      event_label: "Promotion tooltip",
                    });
                  });
                $("#order-mobile").on("click", function () {
                  _this.triggerTealiumEvent({
                    event_action: "Accordion",
                    event_category: "OnPageInteraction",
                    event_label: "fold shopping cart",
                    tealium_event: "internal_link_click",
                  });
                });
                $(".order-list-title").on("click", function () {
                  _this.triggerTealiumEvent({
                    event_action: "Accordion",
                    event_category: "OnPageInteraction",
                    event_label: "Unfold shopping cart",
                    tealium_event: "internal_link_click",
                  });
                });
              },
            };
            MBS.Tagging.initEvents();
          }
        } catch (e) {
          utag.DB(e);
        }
      } catch (e) {
        utag.DB(e);
      }
      try {
        try {
          if (
            /staging.marinabaysands.com\/.*deals\/.*online-ordering\/confirmation.html/.test(
              utag.data["dom.url"]
            ) ||
            /.*.marinabaysands.com\/.*restaurants\/.*\/order\/confirmation.html/.test(
              utag.data["dom.url"]
            ) ||
            /.*(mooncakes-online-order|mooncakes-2020-test|christmas-goodies-2020)\/confirmation.html/.test(
              utag.data["dom.url"]
            ) ||
            /.*\/museum\/(artscience-friends-order|asfOrder)\/confirmation.html/.test(
              utag.data["dom.url"]
            )
          ) {
            var MBS = MBS || {};
            MBS.Tagging = MBS.Tagging || {};
            MBS.Tagging = {
              initEvents: function () {
                var _this = this;
                _this.initHarakoVideoClick();
              },
              triggerTealiumEvent: function (data) {
                utag.link(data);
                console.log("Tealium Event Triggered: ");
                console.log(data);
              },
              initHarakoVideoClick: function () {
                var _this = this;
                $(".order-container")
                  .find("a")
                  .on("click", function () {
                    if ($(this).attr("href")) {
                      if ($(this).attr("href").indexOf("mailto") > -1) {
                        var email_address = $(this)
                          .attr("href")
                          .split("mailto:")[1];
                        _this.triggerTealiumEvent({
                          event_action: "Contact",
                          event_category: "TextLink",
                          event_label: email_address,
                          tealium_event: "email_click",
                          mailto_email: email_address,
                          page_name: utag_data.page_name,
                          product_category: "Merchandise",
                          site_section: "restaurants",
                        });
                      } else if ($(this).attr("data-toggle") === "modal") {
                        _this.triggerTealiumEvent({
                          event_action: "Lightbox",
                          event_category: "OnPageInteraction",
                          event_label: $(this).text(),
                          tealium_event: "internal_link_click",
                        });
                      } else if ($(this).attr("href").indexOf("tel") > -1) {
                        var sUserAgent = navigator.userAgent.toLowerCase();
                        var bIsIpad = sUserAgent.match(/ipad/i) == "ipad";
                        var bIsIphoneOs =
                          sUserAgent.match(/iphone os/i) == "iphone os";
                        var bIsMidp = sUserAgent.match(/midp/i) == "midp";
                        var bIsUc7 =
                          sUserAgent.match(/rv:1.2.3.4/i) == "rv:1.2.3.4";
                        var bIsUc = sUserAgent.match(/ucweb/i) == "ucweb";
                        var bIsAndroid =
                          sUserAgent.match(/android/i) == "android";
                        var bIsCE =
                          sUserAgent.match(/windows ce/i) == "windows ce";
                        var bIsWM =
                          sUserAgent.match(/windows mobile/i) ==
                          "windows mobile";
                        var call_number = $(this).attr("href").split("tel:")[1];
                        if (
                          bIsIpad ||
                          bIsIphoneOs ||
                          bIsMidp ||
                          bIsUc7 ||
                          bIsUc ||
                          bIsAndroid ||
                          bIsCE ||
                          bIsWM
                        ) {
                          _this.triggerTealiumEvent({
                            event_action: "Contact",
                            event_category: "TextLink",
                            event_label: call_number,
                            tealium_event: "call_click",
                            call_number: call_number,
                            page_name: utag_data.page_name,
                            product_category: "Merchandise",
                            site_section: utag_data.site_section,
                          });
                        }
                      } else if (
                        $(this).attr("href").indexOf("https://") > -1
                      ) {
                        _this.triggerTealiumEvent({
                          event_action:
                            $(this).text().trim() + ":" + window.location.href,
                          event_category: "TextLink",
                          event_label: $(this).attr("href"),
                          tealium_event: "internal_link_click",
                        });
                      }
                    }
                  });
                $(".product-container")
                  .find("a")
                  .on("click", function () {
                    _this.triggerTealiumEvent({
                      event_action: $(this).text() + ":" + window.location.href,
                      event_category: "TextLink",
                      event_label: $(this).attr("href"),
                      tealium_event: "internal_link_click",
                    });
                  });
                $("a").on("click", function () {
                  if ($(this).hasClass("card-box")) {
                    _this.triggerTealiumEvent({
                      event_action: $(this).text() + ":" + window.location.href,
                      event_category: "ImageLink",
                      event_label: $(this).attr("href"),
                      tealium_event: "internal_link_click",
                    });
                  }
                });
              },
            };
            MBS.Tagging.initEvents();
          }
        } catch (e) {
          utag.DB(e);
        }
      } catch (e) {
        utag.DB(e);
      }
      try {
        try {
          if (
            /staging.marinabaysands.com\/.*deals\/.*online-ordering\/error.html/.test(
              utag.data["dom.url"]
            ) ||
            /.*.marinabaysands.com\/.*restaurants\/.*\/order\/error.html/.test(
              utag.data["dom.url"]
            ) ||
            /.*(mooncakes-online-order|mooncakes-2020-test|christmas-goodies-2020)\/error.html/.test(
              utag.data["dom.url"]
            ) ||
            /.*\/museum\/(artscience-friends-order|asfOrder)\/error.html/.test(
              utag.data["dom.url"]
            )
          ) {
            var MBS = MBS || {};
            MBS.Tagging = MBS.Tagging || {};
            MBS.Tagging = {
              initEvents: function () {
                var _this = this;
                _this.initHarakoVideoClick();
              },
              triggerTealiumEvent: function (data) {
                utag.link(data);
                console.log("Tealium Event Triggered: ");
                console.log(data);
              },
              initHarakoVideoClick: function () {
                var _this = this;
                $(".error_page")
                  .find("a")
                  .on("click", function () {
                    if ($(this).attr("href")) {
                      if ($(this).attr("href").indexOf("mailto") > -1) {
                        var email_address = $(this)
                          .attr("href")
                          .split("mailto:")[1];
                        _this.triggerTealiumEvent({
                          event_action: "Contact",
                          event_category: "TextLink",
                          event_label: email_address,
                          tealium_event: "email_click",
                          mailto_email: email_address,
                          page_name: utag_data.page_name,
                          product_category: "Merchandise",
                          site_section: "restaurants",
                        });
                      } else if ($(this).attr("href").indexOf("tel") > -1) {
                        var sUserAgent = navigator.userAgent.toLowerCase();
                        var bIsIpad = sUserAgent.match(/ipad/i) == "ipad";
                        var bIsIphoneOs =
                          sUserAgent.match(/iphone os/i) == "iphone os";
                        var bIsMidp = sUserAgent.match(/midp/i) == "midp";
                        var bIsUc7 =
                          sUserAgent.match(/rv:1.2.3.4/i) == "rv:1.2.3.4";
                        var bIsUc = sUserAgent.match(/ucweb/i) == "ucweb";
                        var bIsAndroid =
                          sUserAgent.match(/android/i) == "android";
                        var bIsCE =
                          sUserAgent.match(/windows ce/i) == "windows ce";
                        var bIsWM =
                          sUserAgent.match(/windows mobile/i) ==
                          "windows mobile";
                        var call_number = $(this).attr("href").split("tel:")[1];
                        if (
                          bIsIpad ||
                          bIsIphoneOs ||
                          bIsMidp ||
                          bIsUc7 ||
                          bIsUc ||
                          bIsAndroid ||
                          bIsCE ||
                          bIsWM
                        ) {
                          _this.triggerTealiumEvent({
                            event_action: "Contact",
                            event_category: "TextLink",
                            event_label: call_number,
                            tealium_event: "call_click",
                            call_number: call_number,
                            page_name: utag_data.page_name,
                            product_category: "Merchandise",
                            site_section: utag_data.site_section,
                          });
                        }
                      } else {
                        _this.triggerTealiumEvent({
                          event_action:
                            $(this).text() + ":" + window.location.href,
                          event_category: "TextLink",
                          event_label: $(this).attr("href"),
                          tealium_event: "internal_link_click",
                        });
                      }
                    } else {
                      var sUserAgent = navigator.userAgent.toLowerCase();
                      var bIsIpad = sUserAgent.match(/ipad/i) == "ipad";
                      var bIsIphoneOs =
                        sUserAgent.match(/iphone os/i) == "iphone os";
                      var bIsMidp = sUserAgent.match(/midp/i) == "midp";
                      var bIsUc7 =
                        sUserAgent.match(/rv:1.2.3.4/i) == "rv:1.2.3.4";
                      var bIsUc = sUserAgent.match(/ucweb/i) == "ucweb";
                      var bIsAndroid =
                        sUserAgent.match(/android/i) == "android";
                      var bIsCE =
                        sUserAgent.match(/windows ce/i) == "windows ce";
                      var bIsWM =
                        sUserAgent.match(/windows mobile/i) == "windows mobile";
                      if (
                        bIsIpad ||
                        bIsIphoneOs ||
                        bIsMidp ||
                        bIsUc7 ||
                        bIsUc ||
                        bIsAndroid ||
                        bIsCE ||
                        bIsWM
                      ) {
                        _this.triggerTealiumEvent({
                          event_action: "Contact",
                          event_category: "TextLink",
                          event_label: $(this).text(),
                          tealium_event: "call_click",
                          call_number: $(this).text(),
                          page_name: utag_data.page_name,
                          site_section: utag_data.site_section,
                        });
                      }
                    }
                  });
              },
            };
            MBS.Tagging.initEvents();
          }
        } catch (e) {
          utag.DB(e);
        }
      } catch (e) {
        utag.DB(e);
      }
      try {
        try {
          if (
            utag.data["dom.domain"]
              .toString()
              .toLowerCase()
              .indexOf("sevenrooms.com".toLowerCase()) > -1
          ) {
            var MBS = MBS || {};
            MBS.Tagging = MBS.Tagging || {};
            MBS.Tagging = {
              initEvents: function () {
                triggerTealiumEvent({
                  event_action: getPathName(),
                  event_category: "Page View",
                  event_label: "Page View - Step 1 Search",
                });
                $("#dw-wrapper").on("click", "button", function () {
                  if ($(this).text() === "Search") {
                    triggerTealiumEvent({
                      event_action: $(this).text() + ":" + getPathName(),
                      event_category: "Button",
                      event_label: "Search",
                    });
                    triggerTealiumEvent({
                      event_action: $(this).text() + ":" + getPathName(),
                      event_category: "Page View",
                      event_label: "Page View - Step 2 Select Time",
                    });
                  }
                });
                $("#avail_search_btn").click(function () {
                  if ($(this).text() === "Search") {
                    triggerTealiumEvent({
                      event_action:
                        $(this).text() + ":" + window.location.pathname,
                      event_category: "Button",
                      event_label: "Search",
                    });
                    triggerTealiumEvent({
                      event_action: $(this).text() + ":" + getPathName(),
                      event_category: "Page View",
                      event_label: "Page View - Step 2 Select Time",
                    });
                  }
                });
                $("#dw-wrapper").on("click", "button>div", function () {
                  if (location.href.indexOf("komambs") == -1) {
                    triggerTealiumEvent({
                      event_action: $(this).text() + ":" + getPathName(),
                      event_category: "Page View",
                      event_label: "Page View - Step 4 Submit",
                    });
                  } else {
                    triggerTealiumEvent({
                      event_action: $(this).text() + ":" + getPathName(),
                      event_category: "Page View",
                      event_label: "Page View - Step 3 Login",
                    });
                  }
                });
                $("#dw-wrapper").on("click", "button", function () {
                  if ($(".fa.fa-google").size() > 0) {
                    triggerTealiumEvent({
                      event_action: $(this).text() + ":" + getPathName(),
                      event_category: "Page View",
                      event_label: "Page View - Step 4 Submit",
                    });
                  }
                });
                $("#dw-wrapper").on("click", ".contact-button", function () {
                  var eventAction = $(this).text() + ":" + getPathName();
                  setTimeout(function () {
                    if ($(".sr-invalid-input").length === 0) {
                      var reg = new RegExp(":", "g");
                      var r_date = restaurant_data.dine_time_category;
                      r_date = r_date.replace(reg, ".");
                      var restaurant_data_time_category = "";
                      if (Number(r_date) >= 6 && Number(r_date) < 11.29) {
                        restaurant_data_time_category = "Breakfast";
                      } else if (
                        Number(r_date) >= 11.3 &&
                        Number(r_date) < 14.59
                      ) {
                        restaurant_data_time_category = "Lunch";
                      } else if (
                        Number(r_date) >= 15 &&
                        Number(r_date) < 17.59
                      ) {
                        restaurant_data_time_category = "Tea";
                      } else if (
                        Number(r_date) >= 18 &&
                        Number(r_date) < 20.29
                      ) {
                        restaurant_data_time_category = "Early Dinner";
                      } else if (
                        Number(r_date) >= 20.3 &&
                        Number(r_date) < 23.59
                      ) {
                        restaurant_data_time_category = "Late Dinner";
                      } else if (Number(r_date) >= 0 && Number(r_date) < 5.59) {
                        restaurant_data_time_category = "Nightlife";
                      }
                      restaurant_data.name = restaurant_data.name.replace(
                        "amp;",
                        ""
                      );
                      var restaurant_data_price = getCoverCharge(
                        restaurant_data.name.replace("amp;", "") +
                          "|" +
                          restaurant_data_time_category
                      );
                      var restaurant_data_date;
                      try {
                        restaurant_data_date = new Date(
                          restaurant_data.dine_date +
                            " " +
                            new Date().getFullYear()
                        );
                        restaurant_data_date = restaurant_data_date
                          .toLocaleDateString("en-SG")
                          .split();
                      } catch (err) {
                        restaurant_data_date =
                          restaurant_data.dine_date.split();
                      }
                      triggerTealiumEvent({
                        event_action: eventAction,
                        event_category: "Page View",
                        event_label: "Page View - Step 5 Confirmation",
                        product_category: ["Restaurant Reservations"],
                        restaurant_name: restaurant_data.name.split(),
                        restaurant_dine_date: restaurant_data_date,
                        restaurant_guest_quantity: [restaurant_data.quantity],
                        restaurant_time_category:
                          restaurant_data_time_category.split(),
                        restaurant_order_id: utag.data.tealium_random,
                        restaurant_unit_price: [restaurant_data_price],
                        restaurant_revenue: (
                          parseFloat(restaurant_data_price) *
                          restaurant_data.quantity
                        ).toFixed(2),
                        event_dc_activity_group: "rsrvtns",
                      });
                      setTimeout(function () {
                        triggerTealiumEvent({
                          event_action: getPathName(),
                          event_category: "Phone Country",
                          event_label: restaurant_data.phone_country,
                        });
                      }, 5000);
                    }
                  }, 1500);
                });
              },
            };
            utag.ut.loader({
              src: "https://www.marinabaysands.com/static/jquery-1.11.1.min.js",
              cb: MBS.Tagging.initEvents,
              error: function () {
                console.log("ERROR IN LOADING");
              },
            });
            function getPathName() {
              var url = window.location.pathname;
              var filename = url.substring(url.lastIndexOf("/") + 1);
              return filename;
            }
            function getCoverCharge(restaurantNameAndTimeCategory) {
              var coverCharge;
              switch (restaurantNameAndTimeCategory) {
                case "Adrift by David Myers|Lunch":
                  coverCharge = "50.00";
                  break;
                case "Adrift by David Myers|Tea":
                  coverCharge = "50.00";
                  break;
                case "Adrift by David Myers|Early Dinner":
                  coverCharge = "65.00";
                  break;
                case "Adrift by David Myers|Late Dinner":
                  coverCharge = "65.00";
                  break;
                case "Black Tap |Lunch":
                  coverCharge = "32.00";
                  break;
                case "Black Tap |Tea":
                  coverCharge = "32.00";
                  break;
                case "Black Tap |Early Dinner":
                  coverCharge = "35.00";
                  break;
                case "Black Tap |Late Dinner":
                  coverCharge = "35.00";
                  break;
                case "Bread Street Kitchen|Breakfast":
                  coverCharge = "35.00";
                  break;
                case "Bread Street Kitchen|Lunch":
                  coverCharge = "60.00";
                  break;
                case "Bread Street Kitchen|Tea":
                  coverCharge = "60.00";
                  break;
                case "Bread Street Kitchen|Early Dinner":
                  coverCharge = "75.00";
                  break;
                case "Bread Street Kitchen|Late Dinner":
                  coverCharge = "75.00";
                  break;
                case "CUT|Tea":
                  coverCharge = "130.00";
                  break;
                case "CUT|Early Dinner":
                  coverCharge = "230.00";
                  break;
                case "CUT|Late Dinner":
                  coverCharge = "230.00";
                  break;
                case "DB Bistro & Oyster Bar|Lunch":
                  coverCharge = "75.00";
                  break;
                case "DB Bistro & Oyster Bar|Tea":
                  coverCharge = "75.00";
                  break;
                case "DB Bistro & Oyster Bar|Early Dinner":
                  coverCharge = "110.00";
                  break;
                case "DB Bistro & Oyster Bar|Late Dinner":
                  coverCharge = "110.00";
                  break;
                case "Koma|Lunch":
                  coverCharge = "70.00";
                  break;
                case "Koma|Early Dinner":
                  coverCharge = "145.00";
                  break;
                case "Koma|Late Dinner":
                  coverCharge = "150.00";
                  break;
                case "Koma|Nightlife":
                  coverCharge = "135.00";
                  break;
                case "LAVO Singapore|Lunch":
                  coverCharge = "59.00";
                  break;
                case "LAVO Singapore|Tea":
                  coverCharge = "59.00";
                  break;
                case "LAVO Singapore|Early Dinner":
                  coverCharge = "88.00";
                  break;
                case "LAVO Singapore|Late Dinner":
                  coverCharge = "88.00";
                  break;
                case "Mott32|Lunch":
                  coverCharge = "80.00";
                  break;
                case "Mott32|Tea":
                  coverCharge = "120.00";
                  break;
                case "Mott32|Early Dinner":
                  coverCharge = "140.00";
                  break;
                case "Mott32|Late Dinner":
                  coverCharge = "140.00";
                  break;
                case "Renku|Breakfast":
                  coverCharge = "40.00";
                  break;
                case "Renku|Lunch":
                  coverCharge = "30.00";
                  break;
                case "Renku|Tea":
                  coverCharge = "30.00";
                  break;
                case "Renku|Early Dinner":
                  coverCharge = "35.00";
                  break;
                case "Renku|Late Dinner":
                  coverCharge = "35.00";
                  break;
                case "Renku|Nightlife":
                  coverCharge = "25.00";
                  break;
                case "Rise|Breakfast":
                  coverCharge = "45.00";
                  break;
                case "Rise|Lunch":
                  coverCharge = "55.00";
                  break;
                case "Rise|Tea":
                  coverCharge = "55.00";
                  break;
                case "Rise|Early Dinner":
                  coverCharge = "68.00";
                  break;
                case "Rise|Late Dinner":
                  coverCharge = "68.00";
                  break;
                case "Spago Dining|Lunch":
                  coverCharge = "85.00";
                  break;
                case "Spago Dining|Early Dinner":
                  coverCharge = "160.00";
                  break;
                case "Spago Dining|Late Dinner":
                  coverCharge = "160.00";
                  break;
                case "Spago Lounge|Breakfast":
                  coverCharge = "45.00";
                  break;
                case "Spago Lounge|Lunch":
                  coverCharge = "65.00";
                  break;
                case "Spago Lounge|Tea":
                  coverCharge = "65.00";
                  break;
                case "Spago Lounge|Early Dinner":
                  coverCharge = "95.00";
                  break;
                case "Spago Lounge|Late Dinner":
                  coverCharge = "95.00";
                  break;
                case "Yardbird Southern Table & Bar|Breakfast":
                  coverCharge = "45.00";
                  break;
                case "Yardbird Southern Table & Bar|Lunch":
                  coverCharge = "45.00";
                  break;
                case "Yardbird Southern Table & Bar|Tea":
                  coverCharge = "45.00";
                  break;
                case "Yardbird Southern Table & Bar|Early Dinner":
                  coverCharge = "60.00";
                  break;
                case "Yardbird Southern Table & Bar|Late Dinner":
                  coverCharge = "60.00";
                  break;
                default:
                  coverCharge = "150.00";
              }
              return coverCharge;
            }
            function triggerTealiumEvent(data) {
              utag.link(data);
              console.log("Tealium Event Triggered: ");
              console.log(data);
            }
          }
        } catch (e) {
          utag.DB(e);
        }
      } catch (e) {
        utag.DB(e);
      }
      try {
        try {
          if (
            utag.data["dom.domain"]
              .toString()
              .indexOf("reserve.marinabaysands.com") > -1
          ) {
            jQuery(document).on("click", "#r_btn_select_rooms", function () {
              var selectedDiv =
                jQuery("div.roomCardBody").not(".disabled-room");
              var roomTypeString = jQuery(selectedDiv)
                .find(
                  "div.roomImageCenterPanel div.txt-x-lg-lb.txt-black-five.ls-1.lh-30"
                )
                .text()
                .trim();
              var roomTypeSubString = roomTypeString.split("-");
              utag.link({
                event_category: "select_room",
                room_type: roomTypeString,
                room_sub_type: roomTypeSubString[0].trim(),
                room_view_type: roomTypeSubString[1].trim(),
              });
            });
          }
        } catch (e) {
          utag.DB(e);
        }
      } catch (e) {
        utag.DB(e);
      }
      try {
        try {
          if (
            typeof utag.data["ut.event"] != "undefined" &&
            utag.data["ut.event"] == "view"
          ) {
            var runDYTrigger = setInterval(triggerDY, 500);
            function stopDyTrigger() {
              console.log("stopDyTrigger");
              clearInterval(runDYTrigger);
            }
            function triggerDY() {
              try {
                if (typeof ga !== "undefined") {
                  ga(function () {
                    var trackersReady = true;
                    var trackers = ["mbscombined", "mbsoldua"];
                    trackers.forEach(function (tracker, index) {
                      if (
                        typeof ga.getByName(trackers[index]) === "undefined"
                      ) {
                        trackersReady = false;
                      }
                    });
                    if (
                      trackersReady === true &&
                      typeof dymbs !== "undefined"
                    ) {
                      utag.link(
                        {
                          eventCategory: "DYEvent",
                          eventAction: "DYAction",
                          DY_TagName: dymbs.DYTagName,
                          DY_VariationName: dymbs.DYVariationName,
                          DY_ExperienceName: dymbs.DYExperienceName,
                        },
                        null,
                        [184, 185, 374]
                      );
                      trackers.forEach(function (tracker, index) {
                        ga(trackers[index] + ".send", "event", {
                          eventCategory: "DYEvent",
                          eventAction: "DYAction",
                          nonInteraction: 1,
                        });
                      });
                      stopDyTrigger();
                    }
                  });
                }
              } catch (error) {
                console.warn(error);
              }
            }
          }
        } catch (e) {
          utag.DB(e);
        }
      } catch (e) {
        utag.DB(e);
      }
      try {
        try {
          if (
            (utag.data["dom.url"]
              .toString()
              .indexOf(".marinabaysands.com/museum-revamp") > -1 &&
              /^((?!.*(asfOrder|artscience-friends-order).*).)*$/.test(
                utag.data["dom.url"]
              )) ||
            (utag.data["dom.url"]
              .toString()
              .indexOf(
                "staging.marinabaysands.com/content/singapore/marinabaysands/en/main/index/museum-revamp"
              ) > -1 &&
              /^((?!.*(asfOrder|artscience-friends-order).*).)*$/.test(
                utag.data["dom.url"]
              )) ||
            (utag.data["dom.url"]
              .toString()
              .indexOf("www.marinabaysands.com/museum") > -1 &&
              /^((?!.*(asfOrder|artscience-friends-order).*).)*$/.test(
                utag.data["dom.url"]
              ))
          ) {
            (function () {
              var MBSRevamp = MBSRevamp || {};
              MBSRevamp.debug = false;
              MBSRevamp.Tagging = new (function () {
                var _this = this;
                this.trackWhat = "tealium";
                this.CATEGORY = {
                  Button: "Button",
                  TextLink: "TextLink",
                  ImageGallery: "ImageGallery",
                  ImageLink: "ImageLink",
                  OnPageInteraction: "OnPageInteraction",
                  MainNav: "MainNav",
                  Footer: "Footer",
                  FileDownload: "FileDownload",
                  OutboundLink: "OutboundLink",
                  Video: "Video",
                  Hotspot: "Hotspot",
                  Share: "Share",
                  OutLink: "OutLink",
                };
                this.ACTION = {
                  getCurrentURL: function () {
                    return _this.getCleanCurrentURL();
                  },
                  getLinkName: function (elem) {
                    return _this.getLinkName(elem);
                  },
                  Lightbox: "Lightbox",
                  Share: "Share",
                };
                this.LABEL = {
                  getCurrentURL: function () {
                    return _this.getCleanCurrentURL();
                  },
                  getLinkName: function (elem) {
                    return _this.getLinkName(elem);
                  },
                };
                this.pushToTealium = function (category, action, label, value) {
                  if (!category && !action && !label && !value) {
                    return false;
                  }
                  if (!category || !action || !label) {
                    return false;
                  }
                  if (!category || !action || !label) {
                    return false;
                  }
                  var dataToPush = {
                    event_category: category,
                    event_action: action,
                    event_label: label,
                  };
                  var message =
                    "ASM Tealium Debug: " +
                    "\nevent_category: " +
                    category +
                    ", \nevent_action: " +
                    action +
                    ", \nevent_label: " +
                    label +
                    ", \neventValue: " +
                    value;
                  if (
                    typeof utag !== "undefined" &&
                    typeof utag["link"] == "function"
                  ) {
                    utag.link(dataToPush);
                    console.log("ASM Event Tagging");
                    console.log(message);
                  } else {
                    console.log("ASM Event Tagging");
                    console.error("Tealium utag link is NOT available");
                    console.log(message);
                  }
                };
                this.pleasePushToTealium = function (data) {
                  var category, action, label, value;
                  if (Array.isArray(data)) {
                    var _data = data,
                      category = _data[0],
                      action = _data[1],
                      label = _data[2],
                      value = _data[3];
                  } else if (typeof data !== "undefined" && data != null) {
                    if (
                      typeof data["category"] !== "undefined" &&
                      data["category"] != null
                    ) {
                      category = data["category"];
                    }
                    if (
                      typeof data["action"] !== "undefined" &&
                      data["action"] != null
                    ) {
                      action = data["action"];
                    }
                    if (
                      typeof data["label"] !== "undefined" &&
                      data["label"] != null
                    ) {
                      label = data["label"];
                    }
                    if (
                      typeof data["value"] !== "undefined" &&
                      data["value"] != null
                    ) {
                      value = data["value"];
                    }
                  }
                  this.pushToTealium(category, action, label, value);
                };
                this.pleaseTrackThisData = function (data) {
                  switch (_this.trackWhat) {
                    case "tealium":
                      this.pleasePushToTealium(data);
                      break;
                  }
                };
                this.getCurrentURL = function () {
                  return window.location.href;
                };
                this.getCleanCurrentURL = function () {
                  var windowLocationHref = window.location.href;
                  if (typeof windowLocationHref === "string") {
                    var cleanHref = "";
                    if (windowLocationHref.indexOf("#") > 0) {
                      windowLocationHref = windowLocationHref.split("#")[0];
                    }
                    if (windowLocationHref.indexOf("?") > 0) {
                      windowLocationHref = windowLocationHref.split("?")[0];
                    }
                  }
                  return windowLocationHref;
                };
                this.cleanTheURL = function (url) {
                  if (typeof url === "undefined") {
                    return;
                  }
                  if (typeof url === "string") {
                    if (url.indexOf("#") > 0) {
                      url = url.split("#")[0];
                    }
                    if (url.indexOf("?") > 0) {
                      url = url.split("?")[0];
                    }
                  }
                  return url;
                };
                this.getLinkName = function (elem) {
                  return $(elem).text().trim();
                };
                $.fn.getBtnNameAndDestUrl = function (destUrl) {
                  return $(this).text().trim() + ":" + destUrl;
                };
                $.fn.getDestinationUrl = function () {
                  return (
                    $(this).attr("href") ||
                    $(this).find("a").first().attr("href") ||
                    $(this).closest("a").attr("href") ||
                    ""
                  );
                };
                window.isDesktop =
                  window.isDesktop ||
                  function () {
                    return window.matchMedia("(min-width: 992px)").matches
                      ? true
                      : false;
                  };
              })();
              (function (MT) {
                var ACTION = MT.ACTION;
                var CATEGORY = MT.CATEGORY;
                var LABEL = MT.LABEL;
                $(
                  ".asm_nonimg_tiles .multi-column-body code>a,.hl_section_container code>a,.icon_calender,.asm_column_tiles_3 .one_tile_component_offer .link a,.reference_tile .entire-card-link,.cnt_column_content .multi-column-body code>a,.cnt_event_highlight .zone-section .view-btn,.d-section-container .multi-column-body li code>a"
                ).on("click", function (e) {
                  var data = {
                    category: CATEGORY.ImageLink,
                    action:
                      $(this).find(".card-body h5").eq(0).text() ||
                      $(this).find(".card-body h4").eq(0).text() ||
                      ACTION.getLinkName($(this)) +
                        ":" +
                        ACTION.getCurrentURL($(this)),
                    label:
                      $(this).attr("href") ||
                      $(this).closest("a").getDestinationUrl(),
                  };
                  MT.pleaseTrackThisData(data);
                });
                $(
                  ".generic_rich_text_cnt .button_container a.button-cta,.hl_section_container .btn_box a,.bg-descript li.btn_box,.content-section .btn_box>a:not(.view-btn),.nav-item .nav-ticket-btn,.filter-result .multi-column-body>li .textlink a,.ticket_full_container .simple-announce .button-cta,.ticket_one_colume .button-cta,.d-section-container .button_cta a,.content-section .button_cta_section a.button-cta"
                ).on("click", function (e) {
                  var data = {
                    category: CATEGORY.Button,
                    action:
                      ACTION.getLinkName($(this)) +
                      ":" +
                      ACTION.getCurrentURL($(this)),
                    label: $(this).getDestinationUrl(),
                  };
                  MT.pleaseTrackThisData(data);
                });
                $("#buyexhibition a:not(.select-btn)").on(
                  "click",
                  function (e) {
                    if (
                      $(this).attr("href") == "#viewdetail" ||
                      $(this).hasClass("view-btn")
                    ) {
                    } else {
                      var data = {
                        category: CATEGORY.Button,
                        action:
                          ACTION.getLinkName($(this)) +
                          ":" +
                          ACTION.getCurrentURL($(this)),
                        label: $(this).getDestinationUrl(),
                      };
                      MT.pleaseTrackThisData(data);
                    }
                  }
                );
                $(".multiple_boxes_cnt .btn-box a").on("click", function (e) {
                  var data = {
                    category: CATEGORY.Button,
                    action:
                      $(this).find("span").eq(0).text() +
                      ":" +
                      ACTION.getCurrentURL($(this)),
                    label: $(this).getDestinationUrl(),
                  };
                  MT.pleaseTrackThisData(data);
                });
                $(".asm_nonimg_tiles .link-box>a.button-cta").on(
                  "click",
                  function (e) {
                    var data = {
                      category: CATEGORY.Button,
                      action: $(this).getBtnNameAndDestUrl(
                        ACTION.getCurrentURL()
                      ),
                      label: $(this).getDestinationUrl() || " ",
                    };
                    MT.pleaseTrackThisData(data);
                  }
                );
                $(".basic-content-gallery .cta_sidebar a").on(
                  "click",
                  function (e) {
                    var data = {
                      category: CATEGORY.TextLink,
                      action: "Contact",
                      label: ACTION.getLinkName($(this)),
                    };
                    MT.pleaseTrackThisData(data);
                  }
                );
                $(".cnt_enquiry .link").on("click", function (e) {
                  var data;
                  if ($(this).attr("data-url").indexOf("html") < 0) {
                    data = {
                      category: CATEGORY.TextLink,
                      action: "Contact",
                      label: $(this).attr("data-url"),
                    };
                  } else {
                    data = {
                      category: CATEGORY.OutLink,
                      action: "SocialMedia",
                      label: $(this).getDestinationUrl(),
                    };
                  }
                  MT.pleaseTrackThisData(data);
                });
                $(".content-section .cta_sidebar>.tip>a").on(
                  "click",
                  function (e) {
                    if ($(this).attr("href").indexOf("po.st") > -1) {
                      var data = {
                        category: CATEGORY.OutLink,
                        action: "SocialMedia",
                        label: $(this).getDestinationUrl(),
                      };
                      MT.pleaseTrackThisData(data);
                    }
                  }
                );
                $(
                  ".content-section .btn_box>a.view-btn,.cnt_hotspot .cara-link a,.asm_column_tiles_3 a:not(.entire-card-link),.already-visible .view-box,.already-visible .listing-link,.galler_container1 .view-btn,.filter-result .ticket-requirement a,.cnt-asm-fitler-list .show-more-btn,.asm_masthead_2 a.view-btn,.already-visible .view-box .view-btn,.asm_ralated_activities .filter-result .view-btn-box,.cnt_column_content .view-all-box a,.cnt_event_highlight .show-btn-box button,.multiple_boxes_cnt .light-box-bg .link a,.asm_nonimg_tiles .link-box>a.link,.two_column_cnt li a,.d-section-container .card-content li div:not(.card-link) a,.d-section-container:not(#non) .card-content .card-link.link-box>a,.masthead_3 a,.event_detail_gallery .swiper-slide .g-content a,.bg-gray-container .f_normal a,.cnt-event-component .view-btn a,.cnt-event-component a.view-btn,.ticket_one_colume a.view-btn"
                ).on("click", function (e) {
                  var data = {
                    category: CATEGORY.TextLink,
                    action:
                      ACTION.getLinkName($(this)).trim() +
                      ":" +
                      ACTION.getCurrentURL($(this)),
                    label: $(this).getDestinationUrl(),
                  };
                  MT.pleaseTrackThisData(data);
                });
                $(".cnt_event_schedule .btn-box a").on("click", function (e) {
                  var data;
                  if ($(this).attr("href").indexOf("marinabaysands") > -1) {
                    data = {
                      category: CATEGORY.TextLink,
                      action:
                        ACTION.getLinkName($(this)).trim() +
                        ":" +
                        ACTION.getCurrentURL($(this)),
                      label: $(this).getDestinationUrl(),
                    };
                  } else {
                    data = {
                      category: CATEGORY.OutLink,
                      action:
                        ACTION.getLinkName($(this)).trim() +
                        ":" +
                        ACTION.getCurrentURL($(this)),
                      label: $(this).getDestinationUrl(),
                    };
                  }
                  MT.pleaseTrackThisData(data);
                });
                $(".asm_detail_visit span.view-btn").on("click", function (e) {
                  var data = {
                    category: CATEGORY.TextLink,
                    action: "seemore:#",
                    label: "seemore",
                  };
                  MT.pleaseTrackThisData(data);
                });
                $(".asm_offerpackages .bulletin a").on("click", function (e) {
                  var data;
                  if ($(this).attr("href").indexOf("#") != 0) {
                    data = {
                      category: CATEGORY.OnPageInteraction,
                      action: "Lightbox",
                      label: $(this).text(),
                    };
                  } else {
                    data = {
                      category: CATEGORY.TextLink,
                      action:
                        ACTION.getLinkName($(this)).trim() +
                        ":" +
                        ACTION.getCurrentURL($(this)),
                      label: $(this).getDestinationUrl(),
                    };
                  }
                  MT.pleaseTrackThisData(data);
                });
                $(".asm_masthead_2 button.view-btn").on("click", function (e) {
                  var text;
                  if ($(this).text() === $(this).next(".showmore").text()) {
                    text = $(this).next().next(".showless").text();
                  } else {
                    text = $(this).next(".showmore").text();
                  }
                  var data = {
                    category: CATEGORY.TextLink,
                    action: text + ":" + "#",
                    label: "#",
                  };
                  MT.pleaseTrackThisData(data);
                });
                $(
                  ".generic_rich_text_cnt .rich_text_container li a,#artscience-museum p>a"
                ).on("click", function (e) {
                  var data;
                  if ($(this).attr("href").indexOf("#") == 0) {
                    data = {
                      category: CATEGORY.OnPageInteraction,
                      action: "Lightbox",
                      label: $(this).getDestinationUrl(),
                    };
                  } else if (
                    $(this).attr("href").indexOf("marinabaysands") == -1
                  ) {
                    data = {
                      category: CATEGORY.OutLink,
                      action:
                        ACTION.getLinkName($(this)).trim() +
                        ":" +
                        ACTION.getCurrentURL($(this)),
                      label: $(this).getDestinationUrl(),
                    };
                  } else {
                    data = {
                      category: CATEGORY.TextLink,
                      action:
                        ACTION.getLinkName($(this)).trim() +
                        ":" +
                        ACTION.getCurrentURL($(this)),
                      label: $(this).getDestinationUrl(),
                    };
                  }
                  MT.pleaseTrackThisData(data);
                });
                $(".d-section-container .listing-result .card-link a").on(
                  "click",
                  function (e) {
                    var data;
                    if ($(this).attr("href").indexOf("#") > -1) {
                      data = {
                        category: CATEGORY.OnPageInteraction,
                        action: "Lightbox",
                        label: $(this).text(),
                      };
                    } else {
                      data = {
                        category: CATEGORY.TextLink,
                        action:
                          ACTION.getLinkName($(this)).trim() +
                          ":" +
                          ACTION.getCurrentURL($(this)),
                        label: $(this).getDestinationUrl(),
                      };
                    }
                    MT.pleaseTrackThisData(data);
                  }
                );
                $(".asm_masthead_2 .anchor-cta-sidebar a").on(
                  "click",
                  function (e) {
                    var data;
                    if ($(this).attr("data-url")[0] != "#") {
                      data = {
                        category: CATEGORY.OutLink,
                        action: "SocialMedia",
                        label: $(this).getDestinationUrl(),
                      };
                    } else {
                      data = {
                        category: CATEGORY.TextLink,
                        action:
                          ACTION.getLinkName($(this)).trim() +
                          ":" +
                          ACTION.getCurrentURL($(this)),
                        label: $(this).getDestinationUrl(),
                      };
                    }
                    MT.pleaseTrackThisData(data);
                  }
                );
                $(".general_text_cnt a").on("click", function (e) {
                  var data;
                  if ($(this).attr("href")[0] == "#") {
                    data = {
                      category: CATEGORY.OnPageInteraction,
                      action: "Lightbox",
                      label: $(this).text(),
                    };
                  } else if ($(this).attr("href").indexOf("html") > 0) {
                    data = {
                      category: CATEGORY.TextLink,
                      action:
                        ACTION.getLinkName($(this)).trim() +
                        ":" +
                        ACTION.getCurrentURL($(this)),
                      label: $(this).getDestinationUrl(),
                    };
                  } else {
                    data = {
                      category: CATEGORY.TextLink,
                      action: "Contact",
                      label: $(this).attr("href"),
                    };
                  }
                  MT.pleaseTrackThisData(data);
                });
                $(
                  ".asm_detail_visit p.view-btn-box,.one_tile_component_1 .description a,.cnt_shadow_boxes .multi-column-body .view-btn,.d-section-container:not(#artscience-museum) .list-container .event-box a"
                ).on("click", function (e) {
                  var data;
                  if ($(this).attr("href").indexOf("marinabaysands") > -1) {
                    data = {
                      category: CATEGORY.TextLink,
                      action:
                        ACTION.getLinkName($(this)).trim() +
                        ":" +
                        ACTION.getCurrentURL($(this)),
                      label: $(this).getDestinationUrl(),
                    };
                  } else {
                    data = {
                      category: CATEGORY.OutLink,
                      action:
                        ACTION.getLinkName($(this)).trim() +
                        ":" +
                        ACTION.getCurrentURL($(this)),
                      label: $(this).getDestinationUrl(),
                    };
                  }
                  MT.pleaseTrackThisData(data);
                });
                $(".social-swiper-container").mouseover(function (e) {
                  if (e.which === 1 && $(this).attr("data-send") == undefined) {
                    var data = {
                      category: CATEGORY.ImageGallery,
                      action: "Swipe",
                      label: "Slide:" + "",
                    };
                    MT.pleaseTrackThisData(data);
                    $(this).attr("data-send", "send");
                  }
                });
                $(
                  ".asm_exhibition_zone .lightbox-wrap .swiper-slide"
                ).mouseover(function (e) {
                  if (
                    $(".swiper-slide-active").length > 0 &&
                    $(this).hasClass("swiper-slide-active")
                  ) {
                    if (
                      $(this).attr("data-swipe") == undefined ||
                      $(this).attr("data-swipe") == "no"
                    ) {
                      var index =
                        parseInt($("ul li.swiper-slide-active").index()) + 1;
                      var data = {
                        category: CATEGORY.ImageGallery,
                        action: "Swipe",
                        label: "Slide:" + index,
                      };
                      MT.pleaseTrackThisData(data);
                      $(
                        ".asm_exhibition_zone .lightbox-wrap .swiper-slide"
                      ).attr("data-swipe", "no");
                      $(this).attr("data-swipe", "yes");
                    }
                  }
                });
                $(
                  ".event_detail_gallery ul.swiper-wrapper li.swiper-slide"
                ).mouseover(function (e) {
                  if (
                    $(".swiper-slide-active").length > 0 &&
                    $(this).hasClass("swiper-slide-active")
                  ) {
                    if (
                      $(this).attr("data-swipe") == undefined ||
                      $(this).attr("data-swipe") == "no"
                    ) {
                      var index =
                        parseInt(
                          $("ul li.swiper-slide-active").attr(
                            "data-swiper-slide-index"
                          )
                        ) + 1;
                      var data = {
                        category: CATEGORY.ImageGallery,
                        action: "Swipe",
                        label: "Slide:" + index,
                      };
                      MT.pleaseTrackThisData(data);
                      $(
                        ".event_detail_gallery ul.swiper-wrapper li.swiper-slide"
                      ).attr("data-swipe", "no");
                      $(this).attr("data-swipe", "yes");
                    }
                  }
                });
                $(
                  ".social .social-swiper-container div.swiper-slide"
                ).mouseover(function (e) {
                  if (
                    $(".swiper-slide-active").length > 0 &&
                    $(this).hasClass("swiper-slide-active")
                  ) {
                    if (
                      $(this).attr("data-swipe") == undefined ||
                      $(this).attr("data-swipe") == "no"
                    ) {
                      var index =
                        parseInt($(this).attr("data-swiper-column")) + 1;
                      var data = {
                        category: CATEGORY.ImageGallery,
                        action: "Swipe",
                        label: "Slide:" + index,
                      };
                      MT.pleaseTrackThisData(data);
                      $(
                        ".social .social-swiper-container div.swiper-slide"
                      ).attr("data-swipe", "no");
                      $(this).attr("data-swipe", "yes");
                    }
                  }
                });
                $(".asm_video_box").mouseover(function (e) {
                  if (e.which === 1 && $(this).attr("data-send") == undefined) {
                    var data = {
                      category: CATEGORY.ImageGallery,
                      action: "View",
                      label: "360View:",
                    };
                    MT.pleaseTrackThisData(data);
                    $(this).attr("data-send", "send");
                  }
                });
                $(".asm_overall_video .video_control").click(function (e) {
                  var data = {
                    category: CATEGORY.ImageGallery,
                    action: "View",
                    label:
                      "360View:" +
                      $(this)
                        .closest(".asm_video_box")
                        .find("iframe")
                        .eq(0)
                        .attr("data-thumbnail"),
                  };
                  MT.pleaseTrackThisData(data);
                });
                $(document).on(
                  "click",
                  ".social-container .instagram-post-image",
                  function (e) {
                    var data = {
                      category: CATEGORY.OutboundLink,
                      action: "SocialMedia",
                      label: $(this).attr("href"),
                    };
                    MT.pleaseTrackThisData(data);
                  }
                );
                $(document).on(
                  "click",
                  "section.social .container .col-lg-9 a",
                  function (e) {
                    var data = {
                      category: CATEGORY.OutboundLink,
                      action: "SocialMedia",
                      label: $(this).attr("href"),
                    };
                    MT.pleaseTrackThisData(data);
                  }
                );
                $(
                  "#navbarNavtags .navbar-nav .nav-item:not(.dropdown) a,.dropbar-nav .parent-nav>a,#navbarNavAltMarkup .dropdown a"
                ).on("click", function (e) {
                  var data = {
                    category: CATEGORY.MainNav,
                    action: ACTION.getLinkName($(this)),
                    label: $(this).getDestinationUrl(),
                  };
                  MT.pleaseTrackThisData(data);
                });
                $("#navbarNavtags .loge_box a").on("click", function (e) {
                  var data = {
                    category: CATEGORY.MainNav,
                    action: "Homepage",
                    label: $(this).getDestinationUrl(),
                  };
                  MT.pleaseTrackThisData(data);
                });
                $("#navbarNavAltMarkup .loge_box a").on("click", function (e) {
                  var data = {
                    category: CATEGORY.MainNav,
                    action: "ArtScienceMuseum",
                    label: $(this).getDestinationUrl(),
                  };
                  MT.pleaseTrackThisData(data);
                });
                $("footer a:not(.share-icon-link)").on("click", function (e) {
                  var data = {
                    category: CATEGORY.Footer,
                    action: ACTION.getLinkName($(this)),
                    label: $(this).getDestinationUrl(),
                  };
                  MT.pleaseTrackThisData(data);
                });
                $("footer a.share-icon-link").on("click", function (e) {
                  var data = {
                    category: CATEGORY.Footer,
                    action: "SocialMedia",
                    label: $(this).getDestinationUrl(),
                  };
                  MT.pleaseTrackThisData(data);
                });
                $(".event_detail_gallery .g-img").on("click", function (e) {
                  var data = {
                    category: CATEGORY.ImageGallery,
                    action: "View",
                    label: $(this).find("img").eq(0).attr("alt"),
                  };
                  MT.pleaseTrackThisData(data);
                });
                $(".swiper-arrow").on("click", function (e) {
                  function directions(nav) {
                    if (nav.hasClass("swiper-button-prev")) {
                      return "Left";
                    } else if (nav.hasClass("swiper-button-next")) {
                      return "Right";
                    }
                  }
                  var data = {
                    category: CATEGORY.ImageGallery,
                    action: "Arrow",
                    label: directions($(this)),
                  };
                  MT.pleaseTrackThisData(data);
                });
                $(
                  ".price_table_with_tab .swiper-button-prev,.asm_exhibition_zone .swiper-button-prev"
                ).on("click", function (e) {
                  var data = {
                    category: CATEGORY.ImageGallery,
                    action: "Arrow",
                    label: "left",
                  };
                  MT.pleaseTrackThisData(data);
                });
                $(
                  ".price_table_with_tab .swiper-button-next,.asm_exhibition_zone .swiper-button-next"
                ).on("click", function (e) {
                  var data = {
                    category: CATEGORY.ImageGallery,
                    action: "Arrow",
                    label: "right",
                  };
                  MT.pleaseTrackThisData(data);
                });
                $(
                  ".galler_container .m-swiper-box .swiper-slide,.galler_container .fixed-swiper-box .swiper-slide"
                ).on("click", function (e) {
                  var data = {
                    category: CATEGORY.ImageGallery,
                    action: "Thumbnail",
                    label: $(this).find("img").eq(0).attr("alt"),
                  };
                  MT.pleaseTrackThisData(data);
                });
                $(
                  ".ticket_one_colume .cur_activities a,.d-section-container .primary-area .card-link a,.price_table_with_tab .price_rich_content p>a,.rectangle_tile_cnt .descript a,.one_tile_component_offer .title-descript a,.cnt-asm-fitler-list .share-btn,.price_table_with_tab .intro-lb-btn,.multiple_boxes_cnt .select-gallery .gallery-card a,.one_tile_maps .colume_content li,.price_table_with_tab  .tcell>a"
                ).on("click", function (e) {
                  var data = {
                    category: CATEGORY.OnPageInteraction,
                    action: "Lightbox",
                    label:
                      ACTION.getLinkName($(this)) ||
                      $(this).closest("li").eq(0).find(".title").eq(0).text(),
                  };
                  MT.pleaseTrackThisData(data);
                });
                $(".offer-one-tile-cnt .link>a").on("click", function (e) {
                  var data;
                  if ($(this).attr("href").indexOf("/") == 0) {
                    data = {
                      category: CATEGORY.TextLink,
                      action:
                        ACTION.getLinkName($(this)).trim() +
                        ":" +
                        ACTION.getCurrentURL($(this)),
                      label: $(this).getDestinationUrl(),
                    };
                  } else {
                    data = {
                      category: CATEGORY.OnPageInteraction,
                      action: "Lightbox",
                      label:
                        ACTION.getLinkName($(this)) ||
                        $(this).closest("li").eq(0).find(".title").eq(0).text(),
                    };
                  }
                  MT.pleaseTrackThisData(data);
                });
                $(".asm_exhibition_zone .zone-section li").on(
                  "click",
                  function (e) {
                    var data = {
                      category: CATEGORY.OnPageInteraction,
                      action: "Lightbox",
                      label: $(this).find("h5").eq(0).text() || $(this).text(),
                    };
                    MT.pleaseTrackThisData(data);
                  }
                );
                $(
                  ".asm_calendar_filter .asm_calendar_filter2 .filter.filter-date ul:not(.day)>li,.asm_calendar_filter .m-filter-wrap ul:not(.day)>li"
                ).on("click", function (e) {
                  var data = {
                    category: CATEGORY.OnPageInteraction,
                    action: "Filter",
                    label:
                      $(this).find("div").eq(0).text() ||
                      $(this).attr("data-type") ||
                      ACTION.getLinkName($(this)) ||
                      $(this).text(),
                  };
                  MT.pleaseTrackThisData(data);
                });
                $(
                  ".school_listing_cnt .tab-container .tab,.school_listing_cnt .radio-box .radio,.school_listing_cnt .m-filter-box-container .checkbox-filter-btn,.school_listing_cnt .checkbox-list .checkbox,.archive_listing_filter .show-text,.d-section-container button.calendar-btn"
                ).on("click", function (e) {
                  var data = {
                    category: CATEGORY.OnPageInteraction,
                    action: "Filter",
                    label: ACTION.getLinkName($(this)) || $(this).text(),
                  };
                  MT.pleaseTrackThisData(data);
                });
                $(
                  ".content-section .tour-info-container .collapse_sidebar .title,.asm_masthead_2 .title,.rectangle_tile_cnt .title,.cnt_event_highlight .show-btn-box button"
                ).on("click", function (e) {
                  var data = {
                    category: CATEGORY.OnPageInteraction,
                    action: "Accordion",
                    label: $(this).find("span").eq(0).text() || $(this).text(),
                  };
                  MT.pleaseTrackThisData(data);
                });
                $(".ticket_full_container .show_btn_box a").on(
                  "click",
                  function (e) {
                    var text;
                    if ($(this).text() == $(this).next(".showmore").text()) {
                      text = $(this).next().next(".showless").text();
                    } else {
                      text = $(this).next(".showmore").text();
                    }
                    var data = {
                      category: CATEGORY.OnPageInteraction,
                      action: "Accordion",
                      label: text,
                    };
                    MT.pleaseTrackThisData(data);
                  }
                );
                $(".asm_exhibition_zone .show-btn").on("click", function (e) {
                  var text;
                  if ($(this).hasClass("down")) {
                    text = $(this).next().next(".showless").text();
                  } else {
                    text = $(this).next(".showmore").text();
                  }
                  var data = {
                    category: CATEGORY.OnPageInteraction,
                    action: "Accordion",
                    label: text,
                  };
                  MT.pleaseTrackThisData(data);
                });
                $(
                  ".cnt_event_schedule .list-item,.d-section-container .collapse-area"
                ).on("click", function (e) {
                  var data = {
                    category: CATEGORY.OnPageInteraction,
                    action: "Accordion",
                    label: $(this).find("h6").text(),
                  };
                  MT.pleaseTrackThisData(data);
                });
                $(
                  ".asm_ralated_activities .filter-type li,.cnt_event_schedule .tab-bar li,.ticket_full_container .tab-item,.price_table_with_tab .price_tab_bar li"
                ).on("click", function (e) {
                  var data = {
                    category: CATEGORY.OnPageInteraction,
                    action: "Tab",
                    label: $(this).text(),
                  };
                  MT.pleaseTrackThisData(data);
                });
                $(".generic_rich_text_cnt .rich_text_container p>a").on(
                  "click",
                  function (e) {
                    var data;
                    if ($(this).attr("href").indexOf(".pdf") > -1) {
                      return 0;
                    } else if ($(this).attr("href").indexOf("#") > -1) {
                      data = {
                        category: CATEGORY.OnPageInteraction,
                        action: "Lightbox",
                        label: ACTION.getLinkName($(this)),
                      };
                    } else if ($(this).attr("href").indexOf("mailto:") > -1) {
                      data = {
                        category: CATEGORY.TextLink,
                        action: "Contact",
                        label: $(this).attr("href"),
                      };
                    } else if (
                      $(this).attr("href").indexOf("marinabaysands") == -1
                    ) {
                      data = {
                        category: CATEGORY.OutLink,
                        action:
                          ACTION.getLinkName($(this)).trim() +
                          ":" +
                          ACTION.getCurrentURL($(this)),
                        label: $(this).getDestinationUrl(),
                      };
                    } else {
                      data = {
                        category: CATEGORY.TextLink,
                        action:
                          ACTION.getLinkName($(this)).trim() +
                          ":" +
                          ACTION.getCurrentURL($(this)),
                        label: $(this).getDestinationUrl(),
                      };
                    }
                    MT.pleaseTrackThisData(data);
                  }
                );
                $('a[href$=".pdf"]').on("click", function () {
                  if (
                    $(this).closest("div").eq(0).hasClass("horizontal") ||
                    $(this).closest("div").eq(0).hasClass("button_cta_section")
                  ) {
                  } else {
                    var data = {
                      category: CATEGORY.FileDownload,
                      action: ACTION.getLinkName($(this)),
                      label: $(this).getDestinationUrl().split("/")[
                        $(this).getDestinationUrl().split("/").length - 1
                      ],
                    };
                    MT.pleaseTrackThisData(data);
                  }
                });
                $(".multiple_boxes_cnt .select-gallery li").on(
                  "click",
                  function (e) {
                    var data = {
                      category: CATEGORY.OnPageInteraction,
                      action: "Selector",
                      label: $(this).find("h6").eq(0).text(),
                    };
                    MT.pleaseTrackThisData(data);
                  }
                );
                $(".two_image_cnt .video").on("click", function (e) {
                  var data = {
                    category: CATEGORY.Video,
                    action: $(this).find(".video-img").eq(0).attr("src"),
                    label: $(this).find(".video-img").eq(0).attr("alt"),
                  };
                  MT.pleaseTrackThisData(data);
                });
                $(".asm_exhibition_zone .image-video-container").on(
                  "click",
                  function (e) {
                    var data = {
                      category: CATEGORY.Video,
                      action: $(this).find(".wistia_embed").eq(0).attr("src"),
                      label: "Wistia Video",
                    };
                    MT.pleaseTrackThisData(data);
                  }
                );
                if (location.pathname.indexOf("/venue-rental.html") > -1) {
                  window.setInterval(function () {
                    if (
                      ($(".imagemap-place-list div.tooltip.show").length > 0 &&
                        $(".imagemap-place-list div.tooltip.show").attr(
                          "data-checked"
                        ) == undefined) ||
                      $(".imagemap-place-list div.tooltip.show").attr(
                        "data-checked"
                      ) == "unchecked"
                    ) {
                      var data = {
                        category: CATEGORY.OnPageInteraction,
                        action: "Hotspot",
                        label: $(
                          ".imagemap-place-list div.tooltip.show"
                        ).text(),
                      };
                      MT.pleaseTrackThisData(data);
                      $(".imagemap-place-list div.tooltip.show").attr(
                        "data-checked",
                        "checked"
                      );
                    } else {
                      $(".imagemap-place-list div.tooltip:not(.show)").attr(
                        "data-checked",
                        "unchecked"
                      );
                    }
                  }, 1000);
                }
                $(".cnt_full_page_step a").on("click", function (e) {
                  if (
                    $(this).attr("data-toggle") == "modal" &&
                    !$(this).attr("class")
                  ) {
                    var data = {
                      category: CATEGORY.OnPageInteraction,
                      action: ACTION.Lightbox,
                      label: $(this).text(),
                    };
                    MT.pleaseTrackThisData(data);
                  }
                });
                $(".proceed-btn,.next-btn,.submit-btn").on(
                  "click",
                  function (e) {
                    var data = {
                      category: CATEGORY.Button,
                      action:
                        ACTION.getLinkName($(this)) +
                        ":" +
                        ACTION.getCurrentURL($(this)),
                      label: $(this).getDestinationUrl(),
                    };
                    MT.pleaseTrackThisData(data);
                  }
                );
                $(".breadcrumb-lable").on("click", function (e) {
                  var text = $(this).html().split("<span")[0];
                  var data = {
                    category: CATEGORY.TextLink,
                    action:
                      text +
                      $(
                        ".cnt_full_page_step .steps-container .active .step-name"
                      ).text() +
                      ":" +
                      ACTION.getCurrentURL($(this)),
                    label: $(this).getDestinationUrl(),
                  };
                  MT.pleaseTrackThisData(data);
                });
                $(".cnt_confirmation .view-btn").on("click", function (e) {
                  var data = {
                    category: CATEGORY.TextLink,
                    action:
                      ACTION.getLinkName($(this)) +
                      ":" +
                      ACTION.getCurrentURL($(this)),
                    label: $(this).getDestinationUrl(),
                  };
                  MT.pleaseTrackThisData(data);
                });
                $(".share-container .ishare").on("click", function (e) {
                  var article_name = $(this)
                    .parents(".modal-body")
                    .find("h3")
                    .text();
                  var data = {
                    category: CATEGORY.OnPageInteraction,
                    action: ACTION.Share,
                    label: $(this).attr("title") + ":" + article_name,
                  };
                  MT.pleaseTrackThisData(data);
                });
                $(".share-container .icopy").on("click", function (e) {
                  var data = {
                    category: CATEGORY.Button,
                    action:
                      ACTION.getLinkName($(this)) +
                      ":" +
                      ACTION.getCurrentURL($(this)),
                    label: $(this).getDestinationUrl(),
                  };
                  MT.pleaseTrackThisData(data);
                });
                $(".cnt_confirmation .cta_sidebar a").on("click", function (e) {
                  var href = $(this).attr("data-url");
                  var data;
                  if (href.indexOf("tel:") > -1) {
                    data = {
                      category: CATEGORY.TextLink,
                      action: "Contact",
                      label: href.split("tel:")[1],
                    };
                  } else if (href.indexOf("mailto:") > -1) {
                    data = {
                      category: CATEGORY.TextLink,
                      action: "Contact",
                      label: href.split("mailto:")[1],
                    };
                  } else {
                    data = {
                      category: CATEGORY.OutLink,
                      action: "SocialMedia",
                      label: $(this).getDestinationUrl(),
                    };
                  }
                  MT.pleaseTrackThisData(data);
                });
              })(MBSRevamp.Tagging);
            })();
          }
        } catch (e) {
          utag.DB(e);
        }
      } catch (e) {
        utag.DB(e);
      }
      try {
        try {
          if (
            utag.data["dom.domain"]
              .toString()
              .indexOf("meetings.marinabaysands.com") > -1
          ) {
            window.udo_obj = window.udo_obj || {};
            $("body").on("mouseup", "button.btn.btn-continue", function () {
              if (window.location.pathname == "/booking/search") {
                udo_obj.start_date = $('input[name="startDatePicker"]').val();
                udo_obj.end_date = $('input[name="endDatePicker"]').val();
              }
            });
            $("body").on("mouseup", "button.btn.btn-continue", function () {
              if (window.location.pathname == "/booking/booking/result") {
                udo_obj.start_date = $('input[name="startDatePicker"]').val();
                udo_obj.end_date = $('input[name="endDatePicker"]').val();
              }
              if (
                window.location.pathname ==
                "/booking/event-request/event-request-form"
              ) {
                udo_obj.city = $('input[formcontrolname="city"]').val();
                udo_obj.country = $(
                  'select[formcontrolname="country"] option:selected'
                )
                  .text()
                  .trim();
                udo_obj.fnb_required = $("#foodAndBeverageRequired").is(
                  ":checked"
                );
                udo_obj.guest_rooms_required = $("#guestRooms").is(":checked");
              }
            });
            function onElementInserted(
              containerSelector,
              elementSelector,
              callback
            ) {
              var onMutationsObserved = function (mutations) {
                mutations.forEach(function (mutation) {
                  if (mutation.addedNodes.length) {
                    var elements = $(mutation.addedNodes).find(elementSelector);
                    for (var i = 0, len = elements.length; i < len; i++) {
                      callback(elements[i]);
                    }
                  }
                });
              };
              var target = $(containerSelector)[0];
              var config = { childList: true, subtree: true };
              var MutationObserver =
                window.MutationObserver || window.WebKitMutationObserver;
              var observer = new MutationObserver(onMutationsObserved);
              observer.observe(target, config);
            }
            onElementInserted("body", ".pre-confirmation", function (element) {
              try {
                if ($("span:contains('Market Segment')").length > 0) {
                  udo_obj.market_segment = $("span:contains('Market Segment')")
                    .parents("div.value")[0]
                    .textContent.split("Market Segment:")[1]
                    .trim();
                }
                udo_obj.industry_type = $("span:contains('Industry type')")
                  .parents("div.value")[0]
                  .textContent.split("Industry type:")[1]
                  .trim();
                udo_obj.region = $("span:contains('Region')")
                  .parents("div.value")[0]
                  .textContent.split("Region:")[1]
                  .trim();
                udo_obj.no_of_attendees = $("span:contains('Attendees')")
                  .parents("div.value")[0]
                  .textContent.split("Attendees:")[1]
                  .trim();
                udo_obj.customer_email = $("span:contains('Email:')")
                  .parents("div.value")[0]
                  .textContent.split("Email:")[1]
                  .trim();
                udo_obj.customer_phone_country_code = $(
                  "span:contains('Mobile:')"
                )
                  .parents("div.value")[0]
                  .textContent.split("Mobile:")[1]
                  .split("-")[0]
                  .trim();
                var customer_phone_with_spaces = $("span:contains('Mobile:')")
                  .parents("div.value")[0]
                  .textContent.split("Mobile:")[1]
                  .split("-")[1]
                  .trim();
                udo_obj.customer_phone = customer_phone_with_spaces.replace(
                  /\s/g,
                  ""
                );
                var temp_name_element = $('span:contains("Name:")');
                for (var x = 0; x < temp_name_element.length; x++) {
                  if (temp_name_element[x].innerText == "Name:") {
                    udo_obj.customer_first_name =
                      temp_name_element[x].parentElement.getElementsByClassName(
                        "block-name"
                      )[1].innerText;
                    udo_obj.customer_last_name =
                      temp_name_element[x].parentElement.getElementsByClassName(
                        "block-name"
                      )[2].innerText;
                  }
                }
              } catch (err) {
                var el = document.getElementsByClassName("pre-confirmation");
                if (el.length > 0) {
                  var allattribute = el[0].getAttributeNames();
                  for (var i = 0; i < allattribute.length; i++) {
                    if (allattribute[i].indexOf("ngcontent") > -1) {
                      udo_obj.mice_ngcontent = allattribute[i];
                    }
                  }
                }
              }
            });
            $("body").on("mouseup", "button.btn.btn-continue", function () {
              if (
                window.location.pathname ==
                "/booking/event-request/pre-confirmation"
              ) {
                if ($("span:contains('Food & Beverage Costs')").length > 0) {
                  udo_obj.fnb_required = true;
                }
              }
            });
            onElementInserted("body", ".confirm-sec", function (element) {
              udo_obj.meeting_order_id = $("div.ref-no span")
                .text()
                .split("Reference Number:")[1]
                .trim();
              if (typeof udo_obj.meeting_order_id != "undefined") {
                udo_obj.product_category = "Mice Leads";
                udo_obj.tealium_event = "mice_booking_confirmation";
                utag.view(udo_obj);
              }
            });
          }
        } catch (e) {
          utag.DB(e);
        }
      } catch (e) {
        utag.DB(e);
      }
      try {
        try {
          if (
            utag.data["dom.domain"]
              .toString()
              .indexOf("careers.pageuppeople.com") > -1
          ) {
            $("a.apply-link").on("click", function () {
              utag.link({
                event_category: "Button",
                event_action:
                  $(this).text().trim() + ":" + $(this).attr("href"),
                event_label: $(this).attr("href"),
              });
            });
          }
        } catch (e) {
          utag.DB(e);
        }
      } catch (e) {
        utag.DB(e);
      }
      try {
        try {
          if (
            /staging.marinabaysands.com\/deals\/.*online-ordering.*/.test(
              utag.data["dom.url"]
            ) ||
            /.*.marinabaysands.com\/restaurants\/.*\/order.*/.test(
              utag.data["dom.url"]
            ) ||
            /.*(mooncakes-online-order|mooncakes-2020-test).html/.test(
              utag.data["dom.url"]
            ) ||
            /marinabaysands.com\/restaurants\/(.*)\/reservation/.test(
              utag.data["domain_pathname"]
            ) ||
            /.*.marinabaysands.com\/museum\/(artscience-friends-order|asfOrder).html/.test(
              utag.data["dom.url"]
            )
          ) {
            (function () {
              var MBSRevamp = MBSRevamp || {};
              MBSRevamp.debug = false;
              MBSRevamp.Tagging = new (function () {
                var _this = this;
                this.trackWhat = "GA";
                this.gaTracker = [
                  "mbscombined",
                  "mbsga",
                  "mbsoldua",
                  "mbsstaging",
                ];
                this.gaTracKDefault = true;
                this.CATEGORY = {
                  Button: "Button",
                  TextLink: "TextLink",
                  ImageGallery: "ImageGallery",
                  ImageLink: "ImageLink",
                  OnPageInteraction: "OnPageInteraction",
                  MainNav: "MainNav",
                  Footer: "Footer",
                  FileDownload: "FileDownload",
                  OutboundLink: "OutboundLink",
                  Video: "Video",
                  Hotspot: "Hotspot",
                };
                this.ACTION = {
                  getCurrentURL: function () {
                    return _this.getCleanCurrentURL();
                  },
                  getLinkName: function (elem) {
                    return _this.getLinkName(elem);
                  },
                  FindID: "FindID",
                  Verification: "Verification",
                  Lightbox: "Lightbox",
                  SRL: "SRL",
                  SRC: "SRC",
                  roomAPI: window.location.href,
                };
                if ($("[data-room-api]").length) {
                  $("[data-room-api]").each(function () {
                    _this.ACTION.roomAPI =
                      $(this).data("room-api") || _this.ACTION.roomAPI;
                  });
                }
                this.LABEL = {
                  getCurrentURL: function () {
                    return _this.getCleanCurrentURL();
                  },
                  getLinkName: function (elem) {
                    return _this.getLinkName(elem);
                  },
                  ToolTipDestinationDollars: "ToolTip:DestinationDollars",
                  DestinationDollarExpiry: "DestinationDollarExpiry",
                  FastTrack: "FastTrack",
                  FastTrackLearnMore: "FastTrackLearnMore",
                  SandsDollarsExpiry: "SandsDollarsExpiry",
                  ToolTipSandsBonusDollars: "ToolTip:SandsBonusDollars",
                  SandsBonusDollarsExpiry: "SandsBonusDollarsExpiry",
                  ToolTipTierPoints: "ToolTip:TierPoints",
                  ViewPrivileges: "ViewPrivileges",
                };
                this.pushToGA = function (category, action, label, value) {
                  if (!category && !action && !label && !value) {
                    return false;
                  }
                  if (!category || !action || !label) {
                    return false;
                  }
                  if (!category || !action || !label) {
                    return false;
                  }
                  var dataToPush = {
                    event: "GAEvent",
                    eventCategory: category,
                    eventAction: action,
                    eventLabel: label,
                    eventValue: value,
                  };
                  var message =
                    "GA Debug: " +
                    "\neventCategory: " +
                    category +
                    ", \neventAction: " +
                    action +
                    ", \neventLabel: " +
                    label +
                    ", \neventValue: " +
                    value;
                  if (MBSRevamp.debug === false) {
                    if (typeof ga !== "undefined") {
                      if (
                        typeof _this.gaTracker === "object" &&
                        _this.gaTracker.length > 0
                      ) {
                        for (var i = 0; i < _this.gaTracker.length; i++) {
                          ga(
                            _this.gaTracker[i] + ".send",
                            "event",
                            category,
                            action,
                            label
                          );
                        }
                        if (_this.gaTracKDefault === true) {
                          ga("send", "event", category, action, label);
                        }
                      } else {
                        ga(
                          _this.gaTracker + ".send",
                          "event",
                          category,
                          action,
                          label
                        );
                      }
                    } else if (typeof dataLayer !== "undefined") {
                      dataLayer.push(dataToPush);
                    }
                  }
                  if (window.console) {
                    console.log(message);
                  }
                };
                this.pleasePushToGA = function (data) {
                  var category, action, label, value;
                  if (Array.isArray(data)) {
                    var _data = data,
                      category = _data[0],
                      action = _data[1],
                      label = _data[2],
                      value = _data[3];
                  } else if (typeof data !== "undefined" && data != null) {
                    if (
                      typeof data["category"] !== "undefined" &&
                      data["category"] != null
                    ) {
                      category = data["category"];
                    }
                    if (
                      typeof data["action"] !== "undefined" &&
                      data["action"] != null
                    ) {
                      action = data["action"];
                    }
                    if (
                      typeof data["label"] !== "undefined" &&
                      data["label"] != null
                    ) {
                      label = data["label"];
                    }
                    if (
                      typeof data["value"] !== "undefined" &&
                      data["value"] != null
                    ) {
                      value = data["value"];
                    }
                  }
                  this.pushToGA(category, action, label, value);
                };
                this.pushToTealium = function (category, action, label, value) {
                  if (!category && !action && !label && !value) {
                    return false;
                  }
                  if (!category || !action || !label) {
                    return false;
                  }
                  if (!category || !action || !label) {
                    return false;
                  }
                  var dataToPush = {
                    event_category: category,
                    event_action: action,
                    event_label: label,
                    eventValue: value,
                  };
                  var message =
                    "Tealium Debug: " +
                    "\nevent_category: " +
                    category +
                    ", \nevent_action: " +
                    action +
                    ", \nevent_label: " +
                    label +
                    ", \neventValue: " +
                    value;
                  if (
                    typeof utag !== "undefined" &&
                    typeof utag["link"] == "function"
                  ) {
                    utag.link(dataToPush);
                  } else {
                  }
                  if (window.console) {
                    console.log(message);
                  }
                };
                this.pleasePushToTealium = function (data) {
                  var category, action, label, value;
                  if (Array.isArray(data)) {
                    var _data = data,
                      category = _data[0],
                      action = _data[1],
                      label = _data[2],
                      value = _data[3];
                  } else if (typeof data !== "undefined" && data != null) {
                    if (
                      typeof data["category"] !== "undefined" &&
                      data["category"] != null
                    ) {
                      category = data["category"];
                    }
                    if (
                      typeof data["action"] !== "undefined" &&
                      data["action"] != null
                    ) {
                      action = data["action"];
                    }
                    if (
                      typeof data["label"] !== "undefined" &&
                      data["label"] != null
                    ) {
                      label = data["label"];
                    }
                    if (
                      typeof data["value"] !== "undefined" &&
                      data["value"] != null
                    ) {
                      value = data["value"];
                    }
                  }
                  this.pushToTealium(category, action, label, value);
                };
                this.pleaseTrackThisData = function (data) {
                  switch (_this.trackWhat) {
                    case "tealium":
                      this.pleasePushToTealium(data);
                      break;
                    case "GA":
                      this.pleasePushToGA(data);
                      break;
                    default:
                      this.pleasePushToGA(data);
                      break;
                  }
                };
                this.getCurrentURL = function () {
                  return window.location.href;
                };
                this.getCleanCurrentURL = function () {
                  var windowLocationHref = window.location.href;
                  if (typeof windowLocationHref === "string") {
                    var cleanHref = "";
                    if (windowLocationHref.indexOf("#") > 0) {
                      windowLocationHref = windowLocationHref.split("#")[0];
                    }
                    if (windowLocationHref.indexOf("?") > 0) {
                      windowLocationHref = windowLocationHref.split("?")[0];
                    }
                  }
                  return windowLocationHref;
                };
                this.cleanTheURL = function (url) {
                  if (typeof url === "undefined") {
                    return;
                  }
                  if (typeof url === "string") {
                    if (url.indexOf("#") > 0) {
                      url = url.split("#")[0];
                    }
                    if (url.indexOf("?") > 0) {
                      url = url.split("?")[0];
                    }
                  }
                  return url;
                };
                this.getLinkName = function (elem) {
                  return $(elem).text().trim();
                };
                $.fn.getBtnNameAndDestUrl = function (destUrl) {
                  return $(this).text().trim() + ":" + destUrl;
                };
                $.fn.getDestinationUrl = function () {
                  return (
                    $(this).attr("href") ||
                    $(this).find("a").first().attr("href") ||
                    $(this).closest("a").attr("href") ||
                    ""
                  );
                };
                $.fn.getViewPrivilegesTierName = function () {
                  var cardTypeName = $(this)
                    .closest(".flipster__item__content")
                    .find(".cardType")
                    .text()
                    .trim();
                  return LABEL.ViewPrivileges + ":" + cardTypeName;
                };
                $.fn.getRoomFromCookie = function () {
                  var cookieValue = getCookie("selectedrooms");
                  if (cookieValue && cookieValue.length) {
                    var cookieRooms = JSON.parse(cookieValue);
                    if (Array.isArray(cookieRooms)) {
                      var cookieRoomObj = cookieRooms[0];
                      if (
                        cookieRoomObj.hasOwnProperty("roomNo") &&
                        cookieRoomObj.hasOwnProperty("adults") &&
                        cookieRoomObj.hasOwnProperty("childs") &&
                        cookieRoomObj.hasOwnProperty("childages")
                      ) {
                        return cookieRooms;
                      }
                    }
                  }
                  return [];
                };
                window.isDesktop =
                  window.isDesktop ||
                  function () {
                    return window.matchMedia("(min-width: 992px)").matches
                      ? true
                      : false;
                  };
              })();
              (function (MT) {
                var ACTION = MT.ACTION;
                var CATEGORY = MT.CATEGORY;
                var LABEL = MT.LABEL;
                $(".main-nav .navbar-brand").on("click", function (e) {
                  var data = {
                    category: CATEGORY.MainNav,
                    action: "Homepage",
                    label: $(this).getDestinationUrl(),
                  };
                  MT.pleaseTrackThisData(data);
                });
                $(
                  ".main-nav .navbar-nav:not(.navbar-sub) .nav-item > a.nav-link"
                ).on("click", function (e) {
                  var data = {
                    category: CATEGORY.MainNav,
                    action: ACTION.getLinkName($(this)),
                    label: $(this).getDestinationUrl(),
                  };
                  MT.pleaseTrackThisData(data);
                });
                $(
                  ".sub-nav .nav-item:not(.dropdown) a:not(.dropdown-toggle)"
                ).on("click", function (e) {
                  var data = {
                    category: CATEGORY.MainNav,
                    action: ACTION.getLinkName($(this)),
                    label: $(this).getDestinationUrl(),
                  };
                  MT.pleaseTrackThisData(data);
                });
                $(
                  ".sub-nav .nav-item a.dropdown-toggle+.dropdown-menu a.dropdown-item"
                ).on("click", function (e) {
                  var data = {
                    category: CATEGORY.MainNav,
                    action: ACTION.getLinkName($(this)),
                    label: $(this).getDestinationUrl(),
                  };
                  MT.pleaseTrackThisData(data);
                });
                $(
                  ".navbar-sub .nav-item:not(.dropdown) a:not(.dropdown-toggle)"
                ).on("click", function (e) {
                  var data = {
                    category: CATEGORY.MainNav,
                    action: ACTION.getLinkName($(this)),
                    label: $(this).getDestinationUrl(),
                  };
                  MT.pleaseTrackThisData(data);
                });
                $(
                  ".main-nav .navbar-nav:not(.navbar-sub) .nav-item > a.btn-secondary, .main-nav .navbar-expand-lg a.btn-secondary"
                ).on("click", function (e) {
                  var data = {
                    category: CATEGORY.Button,
                    action: $(this).getBtnNameAndDestUrl(
                      ACTION.getCurrentURL()
                    ),
                    label: ACTION.getLinkName($(this)),
                  };
                  MT.pleaseTrackThisData(data);
                });
                $(
                  ".main-nav .navbar-nav:not(.navbar-sub) .nav-item #dropdownBooking button.btn, .booking-form-container .btn-primary:not(.roompicker-done)"
                ).on("click", function (e) {
                  var data = {
                    category: CATEGORY.Button,
                    action: $(this).getBtnNameAndDestUrl(
                      ACTION.getCurrentURL()
                    ),
                    label: isDesktop()
                      ? $(".datepicker-range").data("url")
                      : $(".datepicker-range").data("mobile-url"),
                  };
                  MT.pleaseTrackThisData(data);
                });
                $('[data-toggle="bookroom"]').on("click", function (e) {
                  var data = {
                    category: CATEGORY.Button,
                    action: $(this).getBtnNameAndDestUrl(
                      ACTION.getCurrentURL()
                    ),
                    label: ACTION.roomAPI,
                  };
                  MT.pleaseTrackThisData(data);
                });
                $(".room-selector").on("click", function (e) {
                  var data = {
                    category: CATEGORY.OnPageInteraction,
                    action: "Filter",
                    label: "CalendarWidget:RoomPicker",
                  };
                  MT.pleaseTrackThisData(data);
                });
                $(".roompicker").on("click", function (e) {
                  if (
                    $(e.target).hasClass("btn-minus") ||
                    $(e.target).parents(".btn-minus").length > 0 ||
                    $(e.target).hasClass("btn-plus") ||
                    $(e.target).parents(".btn-plus").length > 0
                  ) {
                    labelCat = "";
                    if (
                      $(e.target)
                        .closest(".btn-group")
                        .find(".btn-text")
                        .first()
                        .hasClass("roompicker-room-adult")
                    ) {
                      labelCat = "Adults";
                    } else if (
                      $(e.target)
                        .closest(".btn-group")
                        .find(".btn-text")
                        .first()
                        .hasClass("roompicker-room-child")
                    ) {
                      labelCat = "Child";
                    }
                    var data = {
                      category: CATEGORY.OnPageInteraction,
                      action: "Filter",
                      label: "CalendarWidget:" + labelCat,
                    };
                    MT.pleaseTrackThisData(data);
                  } else if (
                    $(e.target).hasClass("roompicker-room-add") ||
                    $(e.target).parents(".roompicker-room-add").length > 0
                  ) {
                    var data = {
                      category: CATEGORY.OnPageInteraction,
                      action: "Filter",
                      label: "CalendarWidget:AddRoom",
                    };
                    MT.pleaseTrackThisData(data);
                  } else if (
                    $(e.target).hasClass("roompicker-room-remove") ||
                    $(e.target).parents(".roompicker-room-remove").length > 0
                  ) {
                    var data = {
                      category: CATEGORY.OnPageInteraction,
                      action: "Filter",
                      label: "CalendarWidget:RemoveRoom",
                    };
                    MT.pleaseTrackThisData(data);
                  } else if ($(e.target).hasClass("roompicker-done")) {
                    var data = {
                      category: CATEGORY.Button,
                      action: $(e.target).getBtnNameAndDestUrl(
                        ACTION.getCurrentURL()
                      ),
                      label: "#",
                    };
                    MT.pleaseTrackThisData(data);
                  }
                });
                $(".main-nav .navbar .nav-item .dropdown-menu a").on(
                  "click",
                  function (e) {
                    var data = {
                      category: CATEGORY.MainNav,
                      action: ACTION.getLinkName($(this)),
                      label: $(this).getDestinationUrl(),
                    };
                    MT.pleaseTrackThisData(data);
                  }
                );
                $(
                  "footer .row > .col-lg-8 > .footer-block li > a, footer .row > .col > .footer-block li > a, footer ol.breadcrumb li.breadcrumb-item > a"
                ).on("click", function (e) {
                  var data = {
                    category: CATEGORY.Footer,
                    action: ACTION.getLinkName($(this)),
                    label: $(this).getDestinationUrl(),
                  };
                  MT.pleaseTrackThisData(data);
                });
                $("footer .row > .col-lg-4 > .footer-block li > a").on(
                  "click",
                  function (e) {
                    var data = {};
                    if ($(this).hasClass("icon-link-email")) {
                      data = {
                        category: CATEGORY.Footer,
                        action: "Contact",
                        label:
                          $("a", this).text().trim() ||
                          $("span", this).text().trim(),
                      };
                    } else if ($(this).hasClass("icon-link-mobile")) {
                      data = {
                        category: CATEGORY.Footer,
                        action: "Contact",
                        label: $(this).text().trim(),
                      };
                    } else if ($(this).hasClass("share-icon-link")) {
                      data = {
                        category: CATEGORY.Footer,
                        action: "SocialMedia",
                        label: $(this).getDestinationUrl(),
                      };
                    } else {
                      data = {
                        category: CATEGORY.Footer,
                        action: ACTION.getLinkName($(this)),
                        label: $(this).getDestinationUrl(),
                      };
                    }
                    if (Object.keys(data).length) {
                      MT.pleaseTrackThisData(data);
                    }
                  }
                );
                var originalslidenum;
                $(
                  ".gallery-rooms, .column-content, .swiper-fullpage, .social-swiper-container, .restaurant-swiper-container, .offers, .shoppes-container, .accordion-slider-main, .accordion-collection-main"
                ).on("touchstart", function (e) {
                  var $parent = $(this);
                  if (
                    $parent
                      .closest(".swiper-container")
                      .find(".swiper-pagination-bullet").length
                  ) {
                    originalslidenum =
                      $parent
                        .closest(".swiper-container")
                        .find(
                          ".swiper-pagination-bullet.swiper-pagination-bullet-active"
                        )
                        .index() + 1;
                  } else if (
                    $parent
                      .find(".swiper-container")
                      .find(".swiper-pagination-bullet").length
                  ) {
                    originalslidenum =
                      $parent
                        .find(".swiper-container")
                        .find(
                          ".swiper-pagination-bullet.swiper-pagination-bullet-active"
                        )
                        .index() + 1;
                  } else {
                    originalslidenum =
                      $parent
                        .find(".swiper-slide.swiper-slide-active")
                        .index() + 1;
                  }
                });
                $(
                  ".gallery-rooms, .column-content, .swiper-fullpage, .social-swiper-container, .restaurant-swiper-container, .offers, .shoppes-container, .accordion-slider-main, .accordion-collection-main"
                ).on("touchend", function (e) {
                  var $parent = $(this);
                  setTimeout(function () {
                    var newslidenum;
                    if (
                      $parent
                        .closest(".swiper-container")
                        .find(".swiper-pagination-bullet").length
                    ) {
                      newslidenum =
                        $parent
                          .closest(".swiper-container")
                          .find(
                            ".swiper-pagination-bullet.swiper-pagination-bullet-active"
                          )
                          .index() + 1;
                    } else if (
                      $parent
                        .find(".swiper-container")
                        .find(".swiper-pagination-bullet").length
                    ) {
                      newslidenum =
                        $parent
                          .find(".swiper-container")
                          .find(
                            ".swiper-pagination-bullet.swiper-pagination-bullet-active"
                          )
                          .index() + 1;
                    } else {
                      newslidenum =
                        $parent
                          .find(".swiper-slide.swiper-slide-active")
                          .index() + 1;
                    }
                    if (originalslidenum != newslidenum) {
                      if (
                        $parent
                          .find(".swiper-button-next")
                          .hasClass("swiper-button-disabled")
                      ) {
                        newslidenum = $parent.find(".swiper-slide").length;
                      }
                      var data = {
                        category: CATEGORY.ImageGallery,
                        action: "Swipe",
                        label: "Slide" + ":" + newslidenum,
                      };
                      MT.pleaseTrackThisData(data);
                    }
                  });
                });
              })(MBSRevamp.Tagging);
            })();
          }
        } catch (e) {
          utag.DB(e);
        }
      } catch (e) {
        utag.DB(e);
      }
      try {
        try {
          if (
            utag.data["dom.url"]
              .toString()
              .indexOf("https://reserve.marinabaysands.com") > -1 ||
            utag.data["dom.url"]
              .toString()
              .indexOf("https://uat.marinabaysands.com") > -1 ||
            utag.data["dom.url"]
              .toString()
              .indexOf("https://staging.marinabaysands.com") > -1 ||
            utag.data["dom.url"]
              .toString()
              .indexOf("https://www.marinabaysands.com") > -1
          ) {
            (function () {
              try {
                function initMainScript() {
                  console.log("New DY Script Initialized.");
                  oldSku = readCookie("oldSku") || "";
                  newSku = readCookie("newSku") || "";
                  language = langMapping(getUrlParameter("locale"));
                  roomSelected = isRoomSelected();
                  const UPGRADE = "upgrade";
                  const VIEW_ROOM = "view_room";
                  const VIEW_PACKAGE = "view_package";
                  const VIEW_CALENDAR = "view_calendar";
                  const VIEW_TNC = "view_tnc";
                  function DY_EVENT(eventName, properties) {
                    if (typeof properties === "undefined") {
                      log("Properties Not Set!");
                      return;
                    }
                    eventType = DY_TYPE.EVENT;
                    log(eventName, properties);
                    DY.API(eventType, {
                      name: eventName,
                      properties: properties,
                    });
                  }
                  function DY_SPA(context) {
                    if (typeof context === "undefined") {
                      log("Context not Set!");
                      return;
                    }
                    eventType = DY_TYPE.SPA;
                    log(context);
                    DY.API(eventType, context);
                  }
                  function SPATransitionEvent() {
                    if (isRoomsPathName()) {
                      createCookie("addToCart", "0", 1);
                      if (isOnSearchStep()) {
                        DY_SPA({
                          context: { type: "OTHER", lng: language, data: [""] },
                        });
                      } else {
                        if (
                          closeBtnCurrentAction === null &&
                          !isRoomSelected()
                        ) {
                          DY_SPA({
                            context: {
                              type: "CATEGORY",
                              lng: language,
                              data: ["hotel", "rooms-suites"],
                            },
                          });
                        } else if (closeBtnCurrentAction === VIEW_TNC) {
                          DY_SPA({
                            context: {
                              type: "CART",
                              lng: language,
                              data: getOldSkus(),
                            },
                          });
                        }
                      }
                    } else {
                      setRoomSelected(false);
                      if (
                        /\/search/.test(document.referrer) ||
                        /\/search/.test(readCookie("referrerDocument")) ||
                        /\/guestCreditCardInfo/.test(document.referrer) ||
                        /\/payment/.test(document.referrer) ||
                        /\/guestCreditCardInfo/.test(
                          readCookie("referrerDocument")
                        ) ||
                        /\/payment/.test(readCookie("referrerDocument"))
                      ) {
                        if (/\/rooms/.test(window.location.pathname)) {
                          var properties = {};
                          var tealiumScript2 = $("#TealiumScript2")
                            .text()
                            .split(";");
                          DY_SPA({
                            context: {
                              type: "CATEGORY",
                              lng: language,
                              data: ["hotel", "rooms-suites"],
                            },
                          });
                        }
                      }
                      if (
                        /\/guestCreditCardInfo/.test(document.referrer) ||
                        /\/payment/.test(document.referrer) ||
                        /\/guestCreditCardInfo/.test(
                          readCookie("referrerDocument")
                        ) ||
                        /\/payment/.test(readCookie("referrerDocument"))
                      ) {
                        if (/\/confirmation/.test(window.location.pathname)) {
                          DY_SPA({
                            context: {
                              type: "OTHER",
                              lng: language,
                              data: getOldSkus(),
                            },
                          });
                        }
                      }
                      if (
                        /\/rooms/.test(document.referrer) ||
                        /\/rooms/.test(readCookie("referrerDocument")) ||
                        /\/payment.html/.test(document.referrer) ||
                        /\/payment/.test(document.referrer) ||
                        /\/payment.html/.test(readCookie("referrerDocument")) ||
                        /\/payment/.test(readCookie("referrerDocument")) ||
                        /\/multiroomRatePlanListing/.test(document.referrer) ||
                        /\/multirooms/.test(document.referrer) ||
                        /\/multiroomRatePlanListing/.test(
                          readCookie("referrerDocument")
                        ) ||
                        /\/multirooms/.test(readCookie("referrerDocument"))
                      ) {
                        if (
                          (/\/payment.html/.test(window.location.pathname) ||
                            /\/payment/.test(window.location.pathname)) &&
                          !$("app-ratecalander").length &&
                          readCookie("addToCart") === "0"
                        ) {
                          var properties = {};
                          properties.dyType = "add-to-cart-v1";
                          var tealiumScript2 = $("#TealiumScript2")
                            .text()
                            .split(";");
                          if (tealiumScript2 && tealiumScript2.length == 2) {
                            if (trackingObject && utag_data) {
                              mappingTrackingObject(
                                properties,
                                trackingObject,
                                utag_data,
                                0
                              );
                            }
                            if (properties && properties.productName) {
                              oldSku = properties.productName;
                              createCookie("oldSku", oldSku, 1);
                            }
                            DY_SPA({
                              context: {
                                type: "CART",
                                lng: language,
                                data: getOldSkus(),
                              },
                            });
                          }
                          if (tealiumScript2 && tealiumScript2.length > 2) {
                            var skuList = [];
                            for (
                              var i = 0;
                              i < tealiumScript2.length - 1;
                              i++
                            ) {
                              try {
                                trackingObject = jQuery.parseJSON(
                                  tealiumScript2[i].split("=").pop()
                                );
                                if (trackingObject && utag_data) {
                                  mappingTrackingObject(
                                    properties,
                                    trackingObject,
                                    utag_data,
                                    i
                                  );
                                  skuList.push(properties.productName);
                                }
                              } catch (e) {
                                break;
                              }
                            }
                            oldSku = skuList;
                            DY_SPA({
                              context: {
                                type: "CART",
                                lng: language,
                                data: getOldSkus(),
                              },
                            });
                            createCookie("oldSku", oldSku, 1);
                          }
                          createCookie("addToCart", "1", 1);
                        } else if ($("app-ratecalander").length) {
                          createCookie("addToCart", "0", 1);
                        }
                      }
                    }
                    if (
                      isSearchPathName() &&
                      !/\/search/.test(readCookie("referrerDocument"))
                    ) {
                      createCookie("addToCart", "0", 1);
                      DY_SPA({
                        context: { type: "OTHER", lng: language, data: [""] },
                      });
                    }
                  }
                  function SPAEventTracking() {
                    $(document).on(
                      "click",
                      ".view_room_details_link",
                      function () {
                        closeBtnCurrentAction = VIEW_ROOM;
                        var text = $.trim(
                          $(this)
                            .closest(".room_ImageCenterPanel")
                            .find("div:first")
                            .text()
                        );
                        var skuObj = skuMapping(text, language, null);
                        product_sku = skuObj ? skuObj.sku : "";
                        DY_SPA({
                          context: {
                            type: "PRODUCT",
                            lng: language,
                            data: product_sku.split(","),
                          },
                        });
                      }
                    );
                    function insertRoomDetailsImgID() {
                      var numberofClasses = $(
                        ".txt-lg-lr.lh-30.ls-x-sm.txt-black.hyl-dark"
                      ).length;
                      for (
                        var classNo = 0;
                        classNo < numberofClasses;
                        classNo++
                      ) {
                        if ($(".view-room-details-link")) {
                          var count = classNo + 1;
                          if (
                            document.querySelector(
                              "body > div.body-wrapper > app-root > section > div > app-room-listing-page > div.outlet-container.roomListWithFilters > app-rooms > div > ul > li:nth-child(" +
                                count +
                                ") > a > div > div > div:nth-child(1) > div.col-md-9.p-20 > div > div.roomImagePanel > app-room-details > div > a > img"
                            ) &&
                            count <= numberofClasses / 2
                          ) {
                            reserveImgCount = "r_link_view_room_details_img";
                            $(
                              "body > div.body-wrapper > app-root > section > div > app-room-listing-page > div.outlet-container.roomListWithFilters > app-rooms > div > ul > li:nth-child(" +
                                count +
                                ") > a > div > div > div:nth-child(1) > div.col-md-9.p-20 > div > div.roomImagePanel > app-room-details > div > a"
                            ).attr("id", reserveImgCount);
                          }
                        }
                      }
                    }
                    insertRoomDetailsImgID();
                    $(document).on(
                      "focus",
                      "#r_link_view_room_details_img",
                      function () {
                        if (!isRoomSelected()) {
                          closeBtnCurrentAction = VIEW_ROOM;
                          var findClassName = $(this)
                            .parent()
                            .parent()
                            .parent()
                            .parent();
                          var text = $.trim(
                            $(findClassName)
                              .find(".roomImageCenterPanel")
                              .find("div:first")
                              .text()
                          );
                          var skuObjImg = skuMapping(text, language, null);
                          product_sku = skuObjImg ? skuObjImg.sku : "";
                          DY_SPA({
                            context: {
                              type: "PRODUCT",
                              lng: language,
                              data: product_sku.split(","),
                            },
                          });
                        }
                      }
                    );
                    $(document).on(
                      "click",
                      ".guest-duration #r_link_edit",
                      function () {
                        closeBtnCurrentAction = VIEW_CALENDAR;
                        hasMultiRoom =
                          document.querySelector("app-multi-room-banner") !==
                          null;
                        DY_SPA({
                          context: { type: "OTHER", lng: language, data: [""] },
                        });
                      }
                    );
                    $(document).on("click", ".modal_container", function () {
                      var timeOut = 800;
                      if (closeBtnCurrentAction === VIEW_CALENDAR) {
                        timeOut = 800;
                        setRoomSelected(null);
                      }
                      setTimeout(function () {
                        if (!$("body").hasClass("modal-open")) {
                          if (
                            closeBtnCurrentAction === VIEW_CALENDAR &&
                            /\/rooms/.test(window.location.pathname)
                          ) {
                            DY_SPA({
                              context: {
                                type: "CATEGORY",
                                lng: language,
                                data: ["hotel", "rooms-suites"],
                              },
                            });
                          }
                          if (
                            closeBtnCurrentAction === VIEW_ROOM &&
                            !isRoomSelected()
                          ) {
                            DY_SPA({
                              context: {
                                type: "CATEGORY",
                                lng: language,
                                data: ["hotel", "rooms-suites"],
                              },
                            });
                          } else if (closeBtnCurrentAction === VIEW_TNC) {
                            DY_SPA({
                              context: {
                                type: "CART",
                                lng: language,
                                data: getOldSkus(),
                              },
                            });
                          }
                          closeBtnCurrentAction = null;
                        }
                      }, timeOut);
                    });
                    $(document).on(
                      "click",
                      ".pricePanel .btn.mbs_button_primary",
                      function () {
                        var text = $.trim(
                          $(this)
                            .closest(".row")
                            .find(".room_ImageCenterPanel > div:first")
                            .text()
                        );
                        var skuObj = skuMapping(text, language, null);
                        product_sku = skuObj ? skuObj.sku : "";
                        var url = skuObj ? skuObj.url : null;
                        var cartItem = product_sku.split(",");
                        eraseCookie("oldSKU");
                        createCookie("oldSKU", readCookie("newSKU"), 1);
                        console.log(product_sku.split(","));
                        createCookie("newSKU", product_sku.split(","), 1);
                        setRoomSelected(true);
                        DY_SPA({
                          context: {
                            type: "PRODUCT",
                            lng: language,
                            data: product_sku.split(","),
                            countAsPageview: true,
                          },
                        });
                      }
                    );
                    $(document).on(
                      "focus",
                      ".modal_head > button.close_button",
                      function () {
                        if (!isRoomSelected()) {
                          DY_SPA({
                            context: {
                              type: "CATEGORY",
                              lng: language,
                              data: ["hotel", "rooms-suites"],
                            },
                          });
                        } else {
                          DY_SPA({
                            context: {
                              type: "PRODUCT",
                              lng: language,
                              data: product_sku.split(","),
                              countAsPageview: true,
                            },
                          });
                        }
                      }
                    );
                    $(document).on(
                      "focus",
                      ".room_card .close_button",
                      function () {
                        DY_SPA({
                          context: {
                            type: "CATEGORY",
                            lng: language,
                            data: ["hotel", "rooms-suites"],
                          },
                        });
                      }
                    );
                    $(document).on(
                      "click",
                      ".multiRoomBanner_buttom .btn.mbs_button_primary",
                      function () {
                        createCookie("newSKU", getMultiRoomSKUs(), 1);
                      }
                    );
                    $(document).on("click", ".packageDetailLink", function () {
                      closeBtnCurrentAction =
                        $(this).attr("id") === "g_link_tnc"
                          ? VIEW_TNC
                          : VIEW_PACKAGE;
                      DY_SPA({
                        context: { type: "OTHER", lng: language, data: [""] },
                      });
                      document
                        .getElementById("package_details")
                        .addEventListener("click", function () {
                          DY_SPA({
                            context: {
                              type: "PRODUCT",
                              lng: language,
                              data: product_sku.split(","),
                            },
                          });
                        });
                    });
                    $(document).on(
                      "click",
                      "#booking_information_edit",
                      function () {
                        if ($.trim($(this).text()) === "Edit") {
                          closeBtnCurrentAction = VIEW_CALENDAR;
                          DY_SPA({
                            context: {
                              type: "OTHER",
                              lng: language,
                              data: [""],
                            },
                          });
                        }
                      }
                    );
                    $(document).on("focus", "#g_link_edit_room", function () {
                      if ($.trim($(this).text()) === "Edit") {
                        setRoomSelected(true);
                        var text = formatContextHelper(
                          $(this)
                            .parent()
                            .parent()
                            .find("div:first > span:first")
                            .text()
                        );
                        var skuObj = skuMapping(text, language, null);
                        product_sku = skuObj ? skuObj.sku : "";
                        DY_SPA({
                          context: {
                            type: "PRODUCT",
                            lng: language,
                            data: product_sku.split(","),
                          },
                        });
                      }
                    });
                    $(document).on(
                      "focus",
                      ".packageList_item_pricing > .book_buttom > button",
                      function () {
                        DY_SPA({
                          context: {
                            type: "CATEGORY",
                            lng: language,
                            data: ["hotel", "rooms-suites"],
                          },
                        });
                      }
                    );
                    $(document).on(
                      "focus",
                      ".multiroom-book-inner .btn.mbs-button-primary",
                      function () {
                        DY_SPA({
                          context: {
                            type: "CATEGORY",
                            lng: language,
                            data: ["hotel", "rooms-suites"],
                          },
                        });
                      }
                    );
                    $(document).on(
                      "focus",
                      "#r_link_view_av_offers",
                      function () {
                        DY_SPA({
                          context: { type: "OTHER", lng: language, data: [""] },
                        });
                      }
                    );
                    $(document).on(
                      "focus",
                      "#UpgradeBox button.upgrade_view",
                      function () {
                        DY_SPA({
                          context: { type: "OTHER", lng: language, data: [""] },
                        });
                        document
                          .getElementById("upgrade_dialog")
                          .addEventListener("click", function () {
                            DY_SPA({
                              context: {
                                type: "CART",
                                lng: language,
                                data: readCookie("newSKU").split(","),
                              },
                            });
                          });
                      }
                    );
                    $(document).on(
                      "focus",
                      ".mbs_button_primary#upgrade",
                      function () {
                        var text = document
                          .getElementsByClassName("upgradeBlockSelected")[0]
                          .getElementsByClassName("roomName")[0].innerText;
                        var skuObj = skuMapping(text, language, null);
                        product_sku = skuObj ? skuObj.sku : "";
                        createCookie(
                          "beforeUpgradeSKU",
                          document.cookie
                            .split(";")
                            .find((item) => item.trim().startsWith("newSKU="))
                            .split("=")[1]
                            .split(","),
                          1
                        );
                        createCookie("newSKU", product_sku.split(","), 1);
                        DY_SPA({
                          context: {
                            type: "CART",
                            lng: language,
                            data: product_sku.split(","),
                          },
                        });
                      }
                    );
                    $(document).on("focus", ".undo_upgrade", function () {
                      createCookie("newSKU", readCookie("beforeUpgradeSKU"), 1);
                      DY_SPA({
                        context: {
                          type: "CART",
                          lng: language,
                          data: readCookie("beforeUpgradeSKU").split(","),
                        },
                      });
                    });
                    $(document).on(
                      "focus",
                      "#upgrade_dialog .close_button",
                      function () {
                        DY_SPA({
                          context: {
                            type: "CART",
                            lng: language,
                            data: readCookie("newSKU").split(","),
                          },
                        });
                      }
                    );
                    var tnc = null;
                    $(document).on(
                      "focus",
                      ".TermsAndConditions a",
                      function () {
                        tnc = "open";
                        console.log("TERMS AND CONDITIONS");
                        DY_SPA({
                          context: { type: "OTHER", lng: language, data: [""] },
                        });
                        console.log(tnc);
                      }
                    );
                    $(document).on("focus", ".close_button", function () {
                      if (tnc === "open") {
                        tnc = null;
                        console.log("CLOSE TERMS AND CONDITIONS");
                        DY_SPA({
                          context: {
                            type: "CART",
                            lng: language,
                            data: readCookie("newSKU").split(","),
                          },
                        });
                        console.log(tnc);
                      }
                    });
                    if (window.location.href.indexOf("payment.html") > -1) {
                      document
                        .getElementById("viewDetails_dialog")
                        .addEventListener("click", function () {
                          if (tnc === "open") {
                            tnc = null;
                            console.log("CLOSE TERMS AND CONDITIONS");
                            DY_SPA({
                              context: {
                                type: "CART",
                                lng: language,
                                data: readCookie("newSKU").split(","),
                              },
                            });
                            console.log(tnc);
                          }
                        });
                    }
                    $(document).on(
                      "click",
                      ".room_info a.edit_txt",
                      function () {
                        DY_SPA({
                          context: { type: "OTHER", lng: language, data: [""] },
                        });
                        document
                          .getElementById("calendar_modal_container")
                          .addEventListener("click", function () {
                            DY_SPA({
                              context: {
                                type: "CART",
                                lng: language,
                                data: readCookie("newSKU").split(","),
                              },
                            });
                          });
                      }
                    );
                    $(document).on(
                      "focus",
                      "#calendar_modal_container .close_button",
                      function () {
                        DY_SPA({
                          context: {
                            type: "CART",
                            lng: language,
                            data: readCookie("newSKU").split(","),
                          },
                        });
                      }
                    );
                    if (
                      /\/guestCreditCardInfo/.test(window.location.pathname) ||
                      /\/payment/.test(window.location.pathname)
                    ) {
                      $(document).on("focus", "#s_btn_done", function () {
                        DY_SPA({
                          context: {
                            type: "CART",
                            lng: language,
                            data: getOldSkus(),
                          },
                        });
                      });
                    }
                    if (/\/rooms/.test(window.location.pathname)) {
                      $(document).on("focus", "#s_btn_view_rooms", function () {
                        DY_SPA({
                          context: {
                            type: "CATEGORY",
                            lng: language,
                            data: ["hotel", "rooms-suites"],
                          },
                        });
                      });
                    }
                  }
                  if (isBookingEnginePage()) {
                    window.addEventListener("transitionend", function (e) {
                      var transition = e.target;
                      var transitionClass = transition.classList;
                      if (
                        transitionClass.contains("foreground-closing") &&
                        transitionClass.contains("ngx-overlay")
                      ) {
                        SPATransitionEvent();
                        createCookie(
                          "referrerDocument",
                          window.location.pathname,
                          1
                        );
                      }
                    });
                    SPAEventTracking();
                  }
                }
                var eventType = "";
                var language = "";
                var closeBtnCurrentAction = null;
                var roomSelected = null;
                var index = null;
                var oldSku = "";
                var newSku = "";
                var hasMultiRoom = false;
                var product_sku = null;
                var newskuList = null;
                const DY_TYPE = {
                  EVENT: "event",
                  SPA: "spa",
                  CART: "add-to-cart-v1",
                };
                const LANG_MAPPING = [
                  { locale: "en", lng: "en" },
                  { locale: "jp", lng: "ja" },
                  { locale: "zh-TW", lng: "zh" },
                  { locale: "zh-CN", lng: "hk" },
                  { locale: "ko", lng: "ko" },
                  { locale: "id", lng: "id" },
                ];
                function langMapping(value) {
                  for (var localeObj in LANG_MAPPING) {
                    if (LANG_MAPPING[localeObj].locale === value) {
                      return LANG_MAPPING[localeObj].lng;
                    }
                  }
                  return "en";
                }
                function isDebug() {
                  var cpl_debug = readCookie("cpl_debug");
                  if (cpl_debug !== null && cpl_debug === "true") {
                    return true;
                  }
                  return false;
                }
                function isBookingEnginePage() {
                  var isValue = false;
                  if (/^\/booking/.test(window.location.pathname)) {
                    isValue = true;
                  } else if (
                    window.location.host.indexOf("uat.marinabaysands.com") > -1
                  ) {
                    isValue = true;
                  } else {
                    isValue = false;
                  }
                  return isValue;
                }
                function isRoomsPathName() {
                  return /\/rooms/.test(window.location.pathname);
                }
                function isRoomsMultiRoomRatePlanListingPath() {
                  var isValue = false;
                  if (
                    window.location.pathname.indexOf(
                      "multiroomRatePlanListing"
                    ) > -1
                  ) {
                    isValue = true;
                  } else if (
                    window.location.pathname.indexOf("multirooms") > -1
                  ) {
                    isValue = true;
                  } else {
                    isValue = false;
                  }
                  return isValue;
                }
                function isRoomSelected() {
                  if (roomSelected === null) {
                    setRoomSelected(
                      document.querySelector(".roomDetail.show") !== null
                    );
                    return roomSelected;
                  }
                  return roomSelected;
                }
                function setRoomSelected(status) {
                  if (typeof status === "undefined") {
                    return roomSelected;
                  }
                  roomSelected = status;
                }
                function isMBS() {
                  return window.location.host.indexOf("marinabaysands") > -1;
                }
                function isSRL() {
                  return (
                    isMBS() &&
                    /\/sands-rewards-lifestyle/.test(window.location.pathname)
                  );
                }
                function isSRC() {
                  return (
                    isMBS() &&
                    /\/sands-rewards-club/.test(window.location.pathname)
                  );
                }
                function isTicketing() {
                  return (
                    isMBS() &&
                    window.location.host.indexOf("ticket.marinabaysands") > -1
                  );
                }
                function isSearchPathName() {
                  return /\/search/.test(window.location.pathname);
                }
                function isOnSearchStep() {
                  return (
                    document.querySelectorAll(
                      "section.placeholder-section .outer.circle.shapeborder-selected"
                    ).length === 1
                  );
                }
                function createCookie(name, value, days) {
                  if (days) {
                    var date = new Date();
                    date.setTime(date.getTime() + days * 24 * 60 * 60 * 1000);
                    var expires = "; expires=" + date.toGMTString();
                  } else var expires = "";
                  document.cookie = name + "=" + value + expires + "; path=/";
                }
                function eraseCookie(name) {
                  createCookie(name, "", -1);
                }
                function readCookie(name) {
                  var nameEQ = name + "=";
                  var ca = document.cookie.split(";");
                  for (var i = 0; i < ca.length; i++) {
                    var c = ca[i];
                    while (c.charAt(0) == " ") c = c.substring(1, c.length);
                    if (c.indexOf(nameEQ) == 0)
                      return c.substring(nameEQ.length, c.length);
                  }
                  return null;
                }
                const SPECIFICATION_SKU_MAPPING = [
                  {
                    sku: "deluxe-room-lower-floor",
                    skuOriginal: "Deluxe Room-Deluxe Room Lower Floor",
                    group_id: "Deluxe Lower Floor ",
                    name: "Deluxe Lower Floor",
                    url: "https://www.marinabaysands.com/hotel/rooms-suites/deluxe-room-lower-floor.html",
                    categories: "Hotel|Deluxe",
                    lng_en: "DeluxeRoom-LowerFloor",
                    lng_en_king_bed: "DeluxeKingLowerFloor",
                    lng_en_twin_bed: "DeluxeTwinLowerFloor",
                    lng_hk: "豪华客房-低层景观",
                    lng_zh: "豪華客房-低层景观",
                    lng_ja: "デラックスルーム-低層階(窓ありビューなし)",
                    lng_ko: "디럭스룸-낮은층",
                    lng_id: "DeluxeRoom-LantaiBawah",
                    lng_hk_king_bed: "DeluxeKingLowerFloor",
                    lng_hk_twin_bed: "DeluxeTwinLowerFloor",
                  },
                  {
                    sku: "deluxe-room-garden-view",
                    skuOriginal: "Deluxe Room-Deluxe Room Garden View",
                    group_id: "Deluxe Garden View",
                    name: "Deluxe Garden View",
                    url: "https://www.marinabaysands.com/hotel/rooms-suites/deluxe-room-garden-view.html",
                    categories: "Hotel|Deluxe",
                    lng_en: "DeluxeRoom-GardenView",
                    lng_hk: "豪华客房-园景",
                    lng_zh: "豪華客房-園景",
                    lng_ja: "デラックスルーム-ガーデンビュー",
                    lng_ko: "디럭스룸-가든뷰",
                    lng_id: "DeluxeRoom-PemandanganTaman",
                    lng_en_king_bed: "DeluxeKingGardenView",
                    lng_en_twin_bed: "DeluxeTwinGardenView",
                    lng_hk_king_bed: "DeluxeKingLowerFloor",
                    lng_hk_twin_bed: "豪华客房-园景(2 张单人床)",
                  },
                  {
                    sku: "deluxe-room-city-view",
                    skuOriginal: "Deluxe Room-Deluxe Room City View",
                    group_id: "Deluxe City View",
                    name: "Deluxe City View",
                    url: "https://www.marinabaysands.com/hotel/rooms-suites/deluxe-room-city-view.html",
                    categories: "Hotel|Deluxe",
                    lng_en: "DeluxeRoom-CityView",
                    lng_hk: "豪华客房-城景",
                    lng_zh: "豪華客房-城景",
                    lng_ja: "デラックスルーム-シティビュー",
                    lng_ko: "디럭스룸-시티뷰",
                    lng_id: "DeluxeRoom-PemandanganKota",
                    lng_en_king_bed: "DeluxeKingCityView",
                    lng_en_twin_bed: "DeluxeTwinCityView",
                    lng_hk_king_bed: "DeluxeKingLowerFloor",
                    lng_hk_twin_bed: "DeluxeTwinLowerFloor",
                  },
                  {
                    sku: "deluxe-room-harbour-view",
                    skuOriginal: "Deluxe Room-Deluxe Room Harbour View",
                    group_id: "Deluxe Room",
                    name: "Deluxe Harbour View",
                    url: "https://www.marinabaysands.com/hotel/rooms-suites/deluxe-room-harbour-view.html",
                    categories: "Hotel|Deluxe",
                    lng_en: "DeluxeRoom-HarbourView",
                    lng_hk: "豪华客房-湾景",
                    lng_zh: "豪華客房-灣景",
                    lng_ja: "デラックスルーム-ハーバービュー",
                    lng_ko: "디럭스룸-하버뷰",
                    lng_id: "DeluxeRoom-PemandanganPelabuhan",
                    lng_en_king_bed: "DeluxeKingHarbourView",
                    lng_en_twin_bed: "DeluxeTwinHarbourView",
                    lng_hk_king_bed: "DeluxeKingLowerFloor",
                    lng_hk_twin_bed: "DeluxeTwinLowerFloor",
                  },
                  {
                    sku: "deluxe-room-sky-view",
                    skuOriginal: "Deluxe Room-Deluxe Room Sky View",
                    group_id: "Deluxe Room",
                    name: "Deluxe Sky View",
                    url: "https://www.marinabaysands.com/hotel/rooms-suites/deluxe-room-sky-view.html",
                    categories: "Hotel|Premier",
                    lng_en: "DeluxeRoom-SkyView",
                    lng_hk: "豪华客房-天际景观",
                    lng_zh: "豪華客房-天際景觀",
                    lng_ja: "デラックスルーム-スカイビュー",
                    lng_ko: "디럭스룸-스카이뷰",
                    lng_id: "DeluxeRoom-PemandanganCakrawala",
                    lng_en_king_bed: "DeluxeKingSkyView",
                    lng_en_twin_bed: "DeluxeTwinSkyView",
                    lng_hk_king_bed: "豪华客房-天际景观（超大双人床）",
                    lng_hk_twin_bed: "DeluxeTwinLowerFloor",
                  },
                  {
                    sku: "premier-room-lower-floor",
                    skuOriginal: "Premier Room-Premier Room Lower Floor",
                    group_id: "Premier Room",
                    name: "Premier Lower Floor",
                    url: "https://www.marinabaysands.com/hotel/rooms-suites/premier-room-lower-floor.html",
                    categories: "Hotel|Premier",
                    lng_en: "PremierRoom-LowerFloor",
                    lng_en_king_bed: "PremierKingLowerFloor",
                    lng_en_twin_bed: "PremierTwinLowerFloor",
                    lng_hk: "尊贵客房-低层景观",
                    lng_zh: "尊貴客房-低层景观",
                    lng_ja: "プレミアルーム-低層階(窓ありビューなし)",
                    lng_ko: "프리미어룸-낮은층",
                    lng_id: "PremierRoom-LantaiBawah",
                    lng_hk_king_bed: "DeluxeKingLowerFloor",
                    lng_hk_twin_bed: "DeluxeTwinLowerFloor",
                  },
                  {
                    sku: "premier-room-garden-view",
                    skuOriginal: "Premier Room-Premier Room Garden View",
                    group_id: "Premier Room",
                    name: "Premier Garden View",
                    url: "https://www.marinabaysands.com/hotel/rooms-suites/premier-room-garden-view.html",
                    categories: "Hotel|Premier",
                    lng_en: "PremierRoom-GardenView",
                    lng_hk: "尊贵客房-园景",
                    lng_zh: "尊貴客房-園景",
                    lng_ja: "プレミアルーム-ガーデンビュー",
                    lng_ko: "프리미어룸-가든뷰",
                    lng_id: "PremierRoom-PemandanganTaman",
                    lng_en_king_bed: "PremierKingGardenView",
                    lng_en_twin_bed: "PremierTwinGardenView",
                    lng_hk_king_bed: "远景尊贵客房-超大双人床",
                    lng_hk_twin_bed: "园景尊贵客房-2张单人床",
                  },
                  {
                    sku: "premier-room-city-view",
                    skuOriginal: "Premier Room-Premier Room City View",
                    group_id: "Premier Room",
                    name: "Premier City View",
                    url: "https://www.marinabaysands.com/hotel/rooms-suites/premier-room-city-view.html",
                    categories: "Hotel|Premier",
                    lng_en: "PremierRoom-CityView",
                    lng_hk: "尊贵客房-城景",
                    lng_zh: "尊貴客房-城景",
                    lng_ja: "プレミアルーム-シティビュー",
                    lng_ko: "프리미어룸-시티뷰",
                    lng_id: "PremierRoom-PemandanganKota",
                    lng_en_king_bed: "PremierKingCityView",
                    lng_en_twin_bed: "PremierTwinCityView",
                    lng_hk_king_bed: "尊贵客房-城景（超大双人床）",
                    lng_hk_twin_bed: "尊贵客房-城景（2 张单人床）",
                  },
                  {
                    sku: "premier-room-harbour-view",
                    skuOriginal: "Premier Room-Premier Room Harbour View",
                    group_id: "Premier Room",
                    name: "Premier Harbour View",
                    url: "https://www.marinabaysands.com/hotel/rooms-suites/premier-room-harbour-view.html",
                    categories: "Hotel|Premier",
                    lng_en: "PremierRoom-HarbourView",
                    lng_hk: "尊贵客房-湾景",
                    lng_zh: "尊貴客房-灣景",
                    lng_ja: "プレミアルーム-ハーバービュー",
                    lng_ko: "프리미어룸-하버뷰",
                    lng_id: "PremierRoom-PemandanganPelabuhan",
                    lng_en_king_bed: "PremierKingHarbourView",
                    lng_en_twin_bed: "PremierTwinHarbourView",
                    lng_hk_king_bed: "DeluxeKingLowerFloor",
                    lng_hk_twin_bed: "DeluxeTwinLowerFloor",
                  },
                  {
                    sku: "premier-room-sky-view",
                    skuOriginal: "Premier Room-Premier Room Sky View",
                    group_id: "Premier Room",
                    name: "Premier Sky View",
                    url: "https://www.marinabaysands.com/hotel/rooms-suites/premier-room-sky-view.html",
                    categories: "Hotel|Premier",
                    lng_en: "PremierRoom-SkyView",
                    lng_hk: "尊贵客房-天际景观",
                    lng_zh: "尊貴客房-天際景觀",
                    lng_ja: "プレミアルーム-スカイビュー",
                    lng_ko: "프리미어룸-스카이뷰",
                    lng_id: "PremierRoom-PemandanganCakrawala",
                    lng_en_king_bed: "PremierKingSkyView",
                    lng_en_twin_bed: "PremierTwinSkyView",
                    lng_hk_king_bed: "DeluxeKingLowerFloor",
                    lng_hk_twin_bed: "DeluxeTwinLowerFloor",
                  },
                  {
                    sku: "family-room-lower-floor",
                    skuOriginal: "Family Room-Family Room Lower Floor",
                    group_id: "Family Room",
                    name: "Family Room",
                    url: "https://www.marinabaysands.com/hotel/rooms-suites/family-room-lower-floor.html",
                    categories: "Hotel|Family",
                    lng_en: "FamilyRoom-LowerFloor",
                    lng_hk: "家庭客房-低层景观",
                    lng_zh: "家庭客房-低层景观",
                    lng_ja: "ファミリールーム-低層階(窓ありビューなし)",
                    lng_ko: "패밀리룸-낮은층",
                    lng_id: "FamilyRoom-LantaiBawah",
                  },
                  {
                    sku: "family-1-bedroom-lower-floor",
                    skuOriginal:
                      "Family 1 Bedroom-Family 1 Bedroom Lower Floor",
                    group_id: "Family Room",
                    name: "Family 1 Bedroom",
                    url: "https://www.marinabaysands.com/hotel/rooms-suites/family-1-bedroom-lower-floor.html",
                    categories: "Hotel|Family",
                    lng_en: "Family1Bedroom-LowerFloor",
                    lng_hk: "一居室家庭客房-低层景观",
                    lng_zh: "一居室家庭客房-低层景观",
                    lng_ja: "ファミリー1ベッドルーム-低層階(窓ありビューなし)",
                    lng_ko: "패밀리원베드룸-낮은층",
                    lng_id: "Family1KamarTidur-LantaiBawah",
                  },
                  {
                    sku: "family-studio-lower-floor",
                    skuOriginal: "Family Studio-Family Studio Lower Floor",
                    group_id: "Family Room",
                    name: "Family Studio*",
                    url: "https://www.marinabaysands.com/hotel/rooms-suites/family-studio-lower-floor.html",
                    categories: "Hotel|Family",
                    lng_en: "FamilyStudio-LowerFloor",
                    lng_hk: "公寓式家庭客房-低层景观",
                    lng_zh: "公寓式家庭客房-低层景观",
                    lng_ja: "ファミリースタジオ-低層階(窓ありビューなし)",
                    lng_ko: "패밀리스튜디오-낮은층",
                    lng_id: "FamilyStudio-LantaiBawah",
                  },
                  {
                    sku: "family-2-bedroom-harbour-view",
                    skuOriginal: "Family 2 Bedroom",
                    group_id: "Family Room",
                    name: "Family 2 Bedroom",
                    url: "https://www.marinabaysands.com/hotel/rooms-suites/family-2-bedroom-harbour-view.html",
                    categories: "Hotel|Family",
                    lng_en: "Family2Bedroom-HarbourView",
                    lng_hk: "两居室家庭客房-湾景",
                    lng_zh: "兩居室家庭客房-灣景",
                    lng_ja: "ファミリー2ベッドルーム-ハーバービュー",
                    lng_ko: "패밀리투베드룸-하버뷰",
                    lng_id: "Family2KamarTidur-PemandanganPelabuhan",
                  },
                  {
                    sku: "club-room-garden-view",
                    skuOriginal: "Club Room-Club Room Garden View",
                    group_id: "Club Room",
                    name: "Club Garden View",
                    url: "https://www.marinabaysands.com/hotel/rooms-suites/club-room-garden-view.html",
                    categories: "Hotel|Club",
                    lng_en: "ClubRoom-GardenView",
                    lng_hk: "俱乐部客房 - 园景",
                  },
                  {
                    sku: "club-room-city-view",
                    skuOriginal: "Club Room-Club Room City View",
                    group_id: "Club Room",
                    name: "Club City View",
                    url: "https://www.marinabaysands.com/hotel/rooms-suites/club-room-city-view.html",
                    categories: "Hotel|Club",
                    lng_en: "ClubRoom-CityView",
                    lng_hk: "俱乐部客房-城景",
                    lng_zh: "俱樂部客房-城景",
                    lng_ja: "クラブルーム-シティビュー",
                    lng_ko: "클럽룸-시티뷰",
                    lng_id: "ClubRoom-PemandanganKota",
                  },
                  {
                    sku: "grand-club-room-garden-view",
                    skuOriginal: "Grand Club Room-Grand Club Room Garden View",
                    group_id: "Club Room",
                    name: "Grand Club Garden View",
                    url: "https://www.marinabaysands.com/hotel/rooms-suites/grand-club-room-garden-view.html",
                    categories: "Hotel|Club",
                    lng_en: "GrandClubRoom-GardenView",
                    lng_hk: "顶级俱乐部客房-园景",
                    lng_zh: "頂級俱樂部客房-園景",
                    lng_ja: "グランドクラブルーム-ガーデンビュー",
                    lng_ko: "그랜드클럽룸-가든뷰",
                    lng_id: "GrandClubRoom-PemandanganTaman",
                  },
                  {
                    sku: "grand-club-room-city-view",
                    skuOriginal: "Grand Club Room-Grand Club Room City View",
                    group_id: "Club Room",
                    name: "Grand Club City View",
                    url: "https://www.marinabaysands.com/hotel/rooms-suites/grand-club-room-city-view.html",
                    categories: "Hotel|Club",
                    lng_en: "GrandClubRoom-CityView",
                    lng_hk: "顶级俱乐部客房-城景",
                    lng_zh: "頂級俱樂部客房-城景",
                    lng_ja: "グランドクラブルーム-シティビュー",
                    lng_ko: "그랜드클럽룸-시티뷰",
                    lng_id: "GrandClubRoom-PemandanganKota",
                  },
                  {
                    sku: "orchid-suite-garden-view",
                    skuOriginal: "Orchid Suite-Orchid Suite Garden View",
                    group_id: "Suites",
                    name: "Orchid Suite Garden View",
                    url: "https://www.marinabaysands.com/hotel/rooms-suites/orchid-suite-garden-view.html",
                    categories: "Hotel|Suites",
                    lng_en: "OrchidSuite-GardenView",
                    lng_hk: "姬花套房-园景",
                    lng_zh: "姬花套房-園景",
                    lng_ja: "オーキッドスイート-ガーデンビュー",
                    lng_ko: "오키드스위트-가든뷰",
                    lng_id: "OrchidSuite-PemandanganTaman",
                  },
                  {
                    sku: "orchid-suite-city-view",
                    skuOriginal: "Orchid Suite-Orchid Suite City View",
                    group_id: "Suites",
                    name: "Orchid Suite City View",
                    url: "https://www.marinabaysands.com/hotel/rooms-suites/orchid-suite-city-view.html",
                    categories: "Hotel|Suites",
                    lng_en: "OrchidSuite-CityView",
                    lng_hk: "姬花套房-城景",
                    lng_zh: "姬花套房-城景",
                    lng_ja: "オーキッドスイート-シティビュー",
                    lng_ko: "오키드스위트-시티뷰",
                    lng_id: "OrchidSuite-PemandanganKota",
                  },
                  {
                    sku: "sands-suite-garden-view",
                    skuOriginal: "Sands Suite-Sands Suite Garden View",
                    group_id: "Suites",
                    name: "Sands Suite Garden View",
                    url: "https://www.marinabaysands.com/hotel/rooms-suites/sands-suite.html",
                    categories: "Hotel|Suites",
                    lng_en: "SandsSuite-GardenView",
                    lng_hk: "金沙套房-园景",
                    lng_zh: "金沙套房-園景",
                    lng_ja: "サンズスイート-ガーデンビュー",
                    lng_ko: "샌즈스위트-가든뷰",
                    lng_id: "SandsSuite-PemandanganTaman",
                  },
                  {
                    sku: "bay-suite-garden-view",
                    skuOriginal: "Bay Suite-Bay Suite Garden View",
                    group_id: "Suites",
                    name: "Bay Suite",
                    url: "https://www.marinabaysands.com/hotel/rooms-suites/bay-suite.html",
                    categories: "Hotel|Suites",
                    lng_en: "BaySuite-GardenView",
                    lng_hk: "海湾套房-园景",
                    lng_zh: "海灣套房-園景",
                    lng_ja: "ベイスイート-ガーデンビュー",
                    lng_ko: "베이스위트-가든뷰",
                    lng_id: "BaySuite-PemandanganTaman",
                  },
                  {
                    sku: "harbour-suite-harbour-view",
                    skuOriginal: "Harbour Suite-Harbour Suite Harbour View",
                    group_id: "Suites",
                    name: "Harbour Suite",
                    url: "https://www.marinabaysands.com/hotel/rooms-suites/harbour-suite.html",
                    categories: "Hotel|Suites",
                    lng_en: "HarbourSuite-HarbourView",
                    lng_hk: "港湾套房-湾景",
                    lng_zh: "港灣套房-灣景",
                    lng_ja: "ハーバースイート-ハーバービュー",
                    lng_ko: "하버스위트-하버뷰",
                    lng_id: "HarbourSuite-PemandanganPelabuhan",
                  },
                  {
                    sku: "marina-suite-harbour-view",
                    skuOriginal: "Marina Suite-Marina Suite Harbour View",
                    group_id: "Suites",
                    name: "Marina Suite",
                    url: "https://www.marinabaysands.com/hotel/rooms-suites/marina-suite.html",
                    categories: "Hotel|Suites",
                    lng_en: "MarinaSuite-HarbourView",
                    lng_hk: "滨海套房-湾景",
                    lng_zh: "濱海套房-灣景",
                    lng_ja: "マリーナスイート-ハーバービュー",
                    lng_ko: "마리나스위트-하버뷰",
                    lng_id: "MarinaSuite-PemandanganPelabuhan",
                  },
                  {
                    sku: "skyline-suite-sky-view",
                    skuOriginal: "Skyline Suite-Skyline Suite Sky View",
                    group_id: "Suites",
                    name: "Skyline Suite",
                    url: "https://www.marinabaysands.com/hotel/rooms-suites/skyline-suite.html",
                    categories: "Hotel|Suites",
                    lng_en: "SkylineSuite-SkyView",
                    lng_hk: "天际套房-天际景观",
                    lng_zh: "天際套房-天際景觀",
                    lng_ja: "スカイラインスイート-スカイビュー",
                    lng_ko: "스카이라인스위트-스카이뷰",
                    lng_id: "SkylineSuite-PemandanganCakrawala",
                  },
                  {
                    sku: "merlion-suite-harbour-view",
                    skuOriginal: "Merlion Suite-Merlion Suite Harbour View",
                    group_id: "Suites",
                    name: "Merlion Suite",
                    url: "https://www.marinabaysands.com/hotel/rooms-suites/merlion-suite.html",
                    categories: "Hotel|Suites",
                    lng_en: "MerlionSuite-HarbourView",
                    lng_hk: "鱼尾狮套房 - 灣景",
                    lng_zh: "鱼尾狮套房 - 湾景",
                    lng_ja: "マーライオンスイート - ハーバービュー",
                    lng_ko: "머라이언 스위트 - 하버뷰",
                    lng_id: "Merlion Suite - Pemandangan Pelabuhan",
                  },
                  {
                    sku: "straits-suite-sky-view",
                    skuOriginal: "Straits Suite-Straits Suite Sky View",
                    group_id: "Suites",
                    name: "Straits Suite",
                    url: "https://www.marinabaysands.com/hotel/rooms-suites/straits-suite.html",
                    categories: "Hotel|Suites",
                    lng_en: "StraitsSuite-SkyView",
                    lng_hk: "海峡套房-天际景观",
                    lng_zh: "海峽套房-天際景觀",
                    lng_ja: "ストレイツスイート-スカイビュー",
                    lng_ko: "스트레이츠스위트-스카이뷰",
                    lng_id: "StraitsSuite-PemandanganCakrawala",
                  },
                ];
                function skuMapping(value, lang, flag) {
                  if (flag === "skuOriginal") {
                    value = $.trim(value);
                  } else {
                    value = formatContextHelper(value);
                  }
                  for (var skuObj in SPECIFICATION_SKU_MAPPING) {
                    if (flag === "skuOriginal") {
                      if (
                        SPECIFICATION_SKU_MAPPING[skuObj].skuOriginal === value
                      ) {
                        return SPECIFICATION_SKU_MAPPING[skuObj];
                      }
                    }
                    if (flag !== "bed") {
                      if (
                        lang === "en" &&
                        SPECIFICATION_SKU_MAPPING[skuObj].lng_en === value
                      ) {
                        return SPECIFICATION_SKU_MAPPING[skuObj];
                      }
                      if (
                        lang === "hk" &&
                        SPECIFICATION_SKU_MAPPING[skuObj].lng_hk === value
                      ) {
                        return SPECIFICATION_SKU_MAPPING[skuObj];
                      }
                      if (
                        lang === "zh" &&
                        SPECIFICATION_SKU_MAPPING[skuObj].lng_zh === value
                      ) {
                        return SPECIFICATION_SKU_MAPPING[skuObj];
                      }
                      if (
                        lang === "ja" &&
                        SPECIFICATION_SKU_MAPPING[skuObj].lng_ja === value
                      ) {
                        return SPECIFICATION_SKU_MAPPING[skuObj];
                      }
                      if (
                        lang === "ko" &&
                        SPECIFICATION_SKU_MAPPING[skuObj].lng_ko === value
                      ) {
                        return SPECIFICATION_SKU_MAPPING[skuObj];
                      }
                      if (
                        lang === "id" &&
                        SPECIFICATION_SKU_MAPPING[skuObj].lng_id === value
                      ) {
                        return SPECIFICATION_SKU_MAPPING[skuObj];
                      }
                      if (
                        lang === "name" &&
                        SPECIFICATION_SKU_MAPPING[skuObj].name === value
                      ) {
                        return SPECIFICATION_SKU_MAPPING[skuObj];
                      }
                    } else {
                      if (
                        lang === "en" &&
                        SPECIFICATION_SKU_MAPPING[skuObj].lng_en_king_bed ===
                          value
                      ) {
                        return SPECIFICATION_SKU_MAPPING[skuObj];
                      }
                      if (
                        lang === "en" &&
                        SPECIFICATION_SKU_MAPPING[skuObj].lng_en_twin_bed ===
                          value
                      ) {
                        return SPECIFICATION_SKU_MAPPING[skuObj];
                      }
                      if (
                        lang === "hk" &&
                        SPECIFICATION_SKU_MAPPING[skuObj].lng_hk_king_bed ===
                          value
                      ) {
                        return SPECIFICATION_SKU_MAPPING[skuObj];
                      }
                      if (
                        lang === "hk" &&
                        SPECIFICATION_SKU_MAPPING[skuObj].lng_hk_twin_bed ===
                          value
                      ) {
                        return SPECIFICATION_SKU_MAPPING[skuObj];
                      }
                    }
                  }
                }
                window.mapSku = skuMapping;
                window.mapLang = langMapping;
                function convertStringCurrencyToNumber(value) {
                  if (!value) {
                    return null;
                  }
                  var numb = value.match(/\d.*/g);
                  numb = numb.join("");
                  numb = numb.replace(",", "");
                  return Number.parseFloat(numb).toFixed(2);
                }
                function formatContextHelper(value) {
                  if (!value) {
                    return value;
                  }
                  value = value.replace(/\s/g, "");
                  return value;
                }
                function convertStringUpgradeToNumber(value) {
                  if (!value) {
                    return 1;
                  }
                  value = $.trim(value.replace("ROOM", ""));
                  return Number(value);
                }
                function getUrlParameter(sParam) {
                  var sPageURL = window.location.search.substring(1),
                    sURLVariables = sPageURL.split("&"),
                    sParameterName,
                    sSubdomainlang,
                    i;
                  for (i = 0; i < sURLVariables.length; i++) {
                    sParameterName = sURLVariables[i].split("=");
                    if (sParameterName[0] === sParam) {
                      return sParameterName[1] === undefined
                        ? true
                        : decodeURIComponent(sParameterName[1]);
                    }
                    if (window.location.hostname.indexOf("zh") > -1) {
                      sSubdomainlang = "zh-TW";
                      return sSubdomainlang;
                    }
                    if (window.location.hostname.indexOf("hk") > -1) {
                      sSubdomainlang = "zh-CN";
                      return sSubdomainlang;
                    }
                    if (window.location.hostname.indexOf("jp") > -1) {
                      sSubdomainlang = "jp";
                      return sSubdomainlang;
                    }
                    if (window.location.hostname.indexOf("ko") > -1) {
                      sSubdomainlang = "ko";
                      return sSubdomainlang;
                    }
                    if (window.location.hostname.indexOf("id") > -1) {
                      sSubdomainlang = "id";
                      return sSubdomainlang;
                    }
                    if (window.location.host == "www.marinabaysands.com") {
                      sSubdomainlang = "en";
                      return sSubdomainlang;
                    }
                  }
                }
                function getGuestDuration(properties, parentElement, flag) {
                  if (!properties) {
                    properties = {};
                  }
                  properties.starDate =
                    starDate ||
                    $.trim(
                      parentElement.find("span:first > span:first").text()
                    ) ||
                    $.trim(
                      parentElement
                        .find(".info > span:nth-last-child(6)")
                        .text()
                    );
                  properties.endDate =
                    endDate ||
                    $.trim(
                      parentElement.find("span:first > span:last").text()
                    ) ||
                    $.trim(
                      parentElement.find(".info > span:nth-child(3)").text()
                    );
                  if (flag) {
                    days = properties.days =
                      $.trim(
                        parentElement
                          .find("span:nth-last-child(2) > span:first")
                          .text()
                      ) || days;
                    createCookie("days", days, 1);
                    numberOfGuests = properties.numberOfGuests =
                      $.trim(
                        parentElement
                          .find("span:nth-last-child(2) > span:last")
                          .text()
                      ) || numberOfGuests;
                    createCookie("numberOfGuests", numberOfGuests, 1);
                  } else {
                    properties.days = days;
                    createCookie("days", days, 1);
                    properties.numberOfGuests = numberOfGuests;
                    createCookie("numberOfGuests", numberOfGuests, 1);
                  }
                }
                function mappingTrackingObject(
                  properties,
                  trackingObject,
                  utag_data,
                  index
                ) {
                  if (!properties) {
                    properties = {};
                  }
                  var skuObj = skuMapping(
                    trackingObject.sku,
                    null,
                    "skuOriginal"
                  );
                  if (skuObj) {
                    properties.group_id = skuObj.group_id;
                    properties.categories = skuObj.categories;
                    properties.productName = skuObj.sku;
                    properties.productId = skuObj.sku;
                  }
                  if (utag_data) {
                    if (
                      Array.isArray(utag_data.bed_type) &&
                      utag_data.bed_type[index]
                    ) {
                      properties.packageName = utag_data.bed_type[index];
                    }
                    if (utag_data.currency) {
                      properties.currency = utag_data.currency;
                    }
                  }
                  if (trackingObject) {
                    if (trackingObject.quantity) {
                      properties.quantity = trackingObject.quantity;
                    }
                    if (trackingObject.unitPrice) {
                      properties.unitPrice = trackingObject.unitPrice;
                    }
                    if (trackingObject.tax) {
                      properties.tax = trackingObject.tax;
                    }
                    if (trackingObject.total) {
                      properties.total = trackingObject.total;
                    }
                    if (trackingObject.total) {
                      properties.value = convertStringCurrencyToNumber(
                        trackingObject.total
                      );
                    }
                    if (trackingObject.offerCode) {
                      properties.offerCode = trackingObject.offerCode;
                    }
                    if (trackingObject.arriveDate) {
                      properties.startDate = trackingObject.arriveDate;
                    }
                    if (trackingObject.departDate) {
                      properties.endDate = trackingObject.departDate;
                    }
                    if (trackingObject.numAdults) {
                      properties.numAdults = trackingObject.numAdults;
                    }
                    if (trackingObject.numChildren) {
                      properties.numChildren = trackingObject.numChildren;
                    }
                  }
                  if (properties.productName) {
                    properties.cart = [
                      {
                        productId: properties.productName,
                        quantity: 1,
                        itemPrice: properties.unitPrice,
                      },
                    ];
                  }
                }
                function getOldSkus() {
                  if (typeof oldSku === "undefined") {
                    return "";
                  }
                  return Array.isArray(oldSku) ? oldSku : oldSku.split(",");
                }
                function log() {
                  if (isDebug()) {
                    console.group("%cCPL Debug:", "color:#E34234");
                    if (
                      typeof arguments === "object" &&
                      arguments.length === 1
                    ) {
                      console.log(
                        eventType.toUpperCase(),
                        JSON.stringify(arguments[0], null, 2)
                      );
                    } else if (
                      arguments.length === 1 &&
                      typeof arguments !== "object"
                    ) {
                      console.log(
                        eventType.toUpperCase(),
                        JSON.stringify(arguments[0], null, 2)
                      );
                    } else {
                      console.log(
                        eventType.toUpperCase(),
                        JSON.stringify(arguments, null, 2)
                      );
                    }
                    if (eventType === DY_TYPE.SPA) {
                      window.cpl_debug_data = {
                        referrer: readCookie("referrerDocument"),
                        isBookingEnginePage: isBookingEnginePage(),
                        isRoomsPathName: isRoomsPathName(),
                        isRoomsMultiRoomRatePlanListingPath:
                          isRoomsMultiRoomRatePlanListingPath(),
                        addToCart: readCookie("addToCart"),
                        language: language,
                        isRoomSelected: isRoomSelected(),
                        closeBtnCurrentAction: closeBtnCurrentAction,
                        index: index,
                        oldSku: getOldSkus(),
                        newSku: newSku,
                        product_sku: product_sku,
                        newskuList: newskuList,
                      };
                      console.table(cpl_debug_data);
                    }
                    console.trace("CPL: DY Tracking Debug");
                    console.groupEnd();
                  }
                }
                function getMultiRoomSKUs() {
                  var mSku = document.querySelectorAll(".banner_card_title");
                  return Array.prototype.map.call(mSku, function (node) {
                    var out1 = node.textContent.replace(/ -/g, "");
                    var out2 = out1.replace(/ /g, "-");
                    return out2.toLowerCase();
                  });
                }
                function loadDYScripts() {
                  var dyScript1 = document.createElement("script");
                  dyScript1.type = "text/javascript";
                  dyScript1.src =
                    "//cdn-eu.dynamicyield.com/api/9876410/api_dynamic.js";
                  document
                    .getElementsByTagName("head")[0]
                    .appendChild(dyScript1);
                  var dyScript2 = document.createElement("script");
                  dyScript2.type = "text/javascript";
                  dyScript2.src =
                    "//cdn-eu.dynamicyield.com/api/9876410/api_static.js";
                  document
                    .getElementsByTagName("head")[0]
                    .appendChild(dyScript2);
                }
                function initializeScript(interval, maxRetries) {
                  new Promise(function (fufilled, rejected) {
                    if (typeof DYO !== "undefined") {
                      fufilled("SUCCESS!");
                    } else {
                      rejected("Not defined!");
                    }
                  })
                    .then(function (success) {
                      initMainScript();
                    })
                    .catch(function (failed) {
                      console.error(failed);
                      setTimeout(function () {
                        maxRetries--;
                        console.error("RETRYING ...");
                        initializeScript(interval, maxRetries);
                      }, interval);
                    });
                }
                initializeScript(5000, 6);
              } catch (catch_main) {
                console.warn(catch_main);
              }
            })();
          }
        } catch (e) {
          utag.DB(e);
        }
      } catch (e) {
        utag.DB(e);
      }
      try {
        try {
          if (1) {
            (function (w) {
              if (
                typeof w.utag_events === "object" &&
                w.utag_events.length > 0
              ) {
                while (w.utag_events.length) {
                  d = w.utag_events.shift();
                  (function (d) {
                    setTimeout(function () {
                      utag.track({
                        event: d.d,
                        data: d.a,
                        cfg: { cb: d.b, uids: d.c },
                      });
                    }, 150);
                  })(d);
                }
              }
            })(window);
          }
        } catch (e) {
          utag.DB(e);
        }
      } catch (e) {
        utag.DB(e);
      }
      try {
        try {
          if (
            utag.data["dom.url"]
              .toString()
              .toLowerCase()
              .indexOf(
                "marinabaysands.com/restaurants/view-all.html".toLowerCase()
              ) > -1 ||
            utag.data["dom.url"]
              .toString()
              .toLowerCase()
              .indexOf(
                "marinabaysands.com/deals/restaurants.html".toLowerCase()
              ) > -1
          ) {
            (function () {
              var MBSFNBFilter = MBSFNBFilter || {};
              MBSFNBFilter.debug = false;
              MBSFNBFilter.Tagging = new (function () {
                var _this = this;
                this.trackWhat = "tealium";
                this.CATEGORY = { OnPageInteraction: "OnPageInteraction" };
                this.ACTION = {
                  getCurrentURL: function () {
                    return _this.getCleanCurrentURL();
                  },
                  getLinkName: function (elem) {
                    return _this.getLinkName(elem);
                  },
                };
                this.LABEL = {
                  getCurrentURL: function () {
                    return _this.getCleanCurrentURL();
                  },
                  getLinkName: function (elem) {
                    return _this.getLinkName(elem);
                  },
                };
                this.pushToTealium = function (category, action, label, value) {
                  if (!category && !action && !label && !value) {
                    return false;
                  }
                  if (!category || !action || !label) {
                    return false;
                  }
                  if (!category || !action || !label) {
                    return false;
                  }
                  var dataToPush = {
                    event_name: category,
                    event_action: action,
                    event_label: label,
                    eventValue: value,
                  };
                  if (
                    typeof utag !== "undefined" &&
                    typeof utag["link"] == "function"
                  ) {
                    utag.link(dataToPush);
                    console.log(
                      "Tealium utag.link should be triggered here..."
                    );
                  } else {
                    console.error("Tealium utag link is NOT available");
                  }
                  if (window.console) {
                  }
                };
                this.pleasePushToTealium = function (data) {
                  var category, action, label, value;
                  if (Array.isArray(data)) {
                    var _data = data,
                      category = _data[0],
                      action = _data[1],
                      label = _data[2],
                      value = _data[3];
                  } else if (typeof data !== "undefined" && data != null) {
                    if (
                      typeof data["category"] !== "undefined" &&
                      data["category"] != null
                    ) {
                      category = data["category"];
                    }
                    if (
                      typeof data["action"] !== "undefined" &&
                      data["action"] != null
                    ) {
                      action = data["action"];
                    }
                    if (
                      typeof data["label"] !== "undefined" &&
                      data["label"] != null
                    ) {
                      label = data["label"];
                    }
                    if (
                      typeof data["value"] !== "undefined" &&
                      data["value"] != null
                    ) {
                      value = data["value"];
                    }
                  }
                  this.pushToTealium(category, action, label, value);
                };
                this.pleaseTrackThisData = function (data) {
                  switch (_this.trackWhat) {
                    case "tealium":
                      this.pleasePushToTealium(data);
                      break;
                    case "GA":
                      this.pleasePushToGA(data);
                      break;
                    default:
                      this.pleasePushToTealium(data);
                      break;
                  }
                };
                this.getCurrentURL = function () {
                  return window.location.href;
                };
                this.getCleanCurrentURL = function () {
                  var windowLocationHref = window.location.href;
                  if (typeof windowLocationHref === "string") {
                    var cleanHref = "";
                    if (windowLocationHref.indexOf("#") > 0) {
                      windowLocationHref = windowLocationHref.split("#")[0];
                    }
                    if (windowLocationHref.indexOf("?") > 0) {
                      windowLocationHref = windowLocationHref.split("?")[0];
                    }
                  }
                  return windowLocationHref;
                };
                this.cleanTheURL = function (url) {
                  if (typeof url === "undefined") {
                    return;
                  }
                  if (typeof url === "string") {
                    if (url.indexOf("#") > 0) {
                      url = url.split("#")[0];
                    }
                    if (url.indexOf("?") > 0) {
                      url = url.split("?")[0];
                    }
                  }
                  return url;
                };
                this.getLinkName = function (elem) {
                  return $(elem).text().trim();
                };
                $.fn.getBtnNameAndDestUrl = function (destUrl) {
                  return $(this).text().trim() + ":" + destUrl;
                };
                $.fn.getDestinationUrl = function () {
                  return (
                    $(this).attr("href") ||
                    $(this).find("a").first().attr("href") ||
                    $(this).closest("a").attr("href") ||
                    ""
                  );
                };
                $.fn.getViewPrivilegesTierName = function () {
                  var cardTypeName = $(this)
                    .closest(".flipster__item__content")
                    .find(".cardType")
                    .text()
                    .trim();
                  return LABEL.ViewPrivileges + ":" + cardTypeName;
                };
                window.isDesktop =
                  window.isDesktop ||
                  function () {
                    return window.matchMedia("(min-width: 992px)").matches
                      ? true
                      : false;
                  };
              })();
              (function (MT) {
                var ACTION = MT.ACTION;
                var CATEGORY = MT.CATEGORY;
                var LABEL = MT.LABEL;
                $(document).on(
                  "click",
                  ".dropdown-menu .dropdown-filter-block input[type=checkbox]:checked, .dropdown-filter-block .collapse-toggle, .list-inline-item .search-filters",
                  function (e) {
                    if ($(this).closest(".collapse-toggle").length > 0) {
                      var data = {
                        category: CATEGORY.OnPageInteraction,
                        action: "Accordion",
                        label: $(this)
                          .closest(".filter-item")
                          .find(".checkbox")
                          .text()
                          .trim(),
                      };
                    } else if ($(this).closest(".search-filters").length > 0) {
                      var data = {
                        category: CATEGORY.OnPageInteraction,
                        action: "Filter",
                        label: $(this)
                          .closest(".search-filters")
                          .attr("placeholder"),
                      };
                    } else {
                      var data = {
                        category: CATEGORY.OnPageInteraction,
                        action: "Filter",
                        label: $(this).closest("label").text().trim(),
                      };
                    }
                    MT.pleaseTrackThisData(data);
                  }
                );
              })(MBSFNBFilter.Tagging);
            })();
          }
        } catch (e) {
          utag.DB(e);
        }
      } catch (e) {
        utag.DB(e);
      }
      try {
        try {
          if (
            utag.data["domain_pathname"].toString().toLowerCase() ==
            "www.marinabaysands.com/deals/restaurants/endless-lunch-selections.html".toLowerCase()
          ) {
            var MBSResclick = MBSResclick || {};
            MBSResclick.Tagging = MBSResclick.Tagging || {};
            MBSResclick.Tagging = {
              initEvents: function () {
                var _this = this;
                _this.initRestaurantLink();
                _this.initRestaurantBookTable();
              },
              initRestaurantLink: function () {
                var _this = this;
                $(".card-link").on("click", function () {
                  var url = $(this).attr("href");
                  if (url) {
                    var hostname = $("<a>").prop("href", url).prop("hostname");
                    if (hostname == "www.marinabaysands.com") {
                      _this.triggerTealiumEvent({
                        event_name: "restaurant_click",
                        event_action:
                          $(this).text() + ":" + window.location.href,
                        event_label: url.replace(/(^\w+:|^)\/\//, ""),
                        event_category: "TextLink",
                      });
                      console.log("Success");
                    } else {
                      console.log("Fail");
                    }
                  }
                });
              },
              initRestaurantBookTable: function () {
                var _this = this;
                $(".btn-secondary").on("click", function () {
                  var url = $(this).attr("href");
                  if (url) {
                    var hostname = $("<a>").prop("href", url).prop("hostname");
                    if (hostname == "www.marinabaysands.com") {
                      _this.triggerTealiumEvent({
                        event_name: "restaurant_book_table",
                        event_action:
                          $(this).text() + ":" + window.location.href,
                        event_label: url.replace(/(^\w+:|^)\/\//, ""),
                        event_category: "Button",
                      });
                      console.log("Success");
                    } else {
                      console.log("Fail");
                    }
                  }
                });
              },
              getErrorMessage: function () {
                if ($(".listingContentContainer div").hasClass("hidden")) {
                  return "";
                } else {
                  return $(".no_results").text().trim();
                }
              },
              triggerTealiumEvent: function (data) {
                utag.link(data);
                console.log("Tealium Event Triggered: Test");
                console.log(data);
              },
            };
            MBSResclick.Tagging.initEvents();
          }
        } catch (e) {
          utag.DB(e);
        }
      } catch (e) {
        utag.DB(e);
      }
      try {
        try {
          if (
            utag.data["domain_pathname"]
              .toString()
              .indexOf("careers.marinabaysands.com/en/filter/") > -1 ||
            utag.data["domain_pathname"]
              .toString()
              .indexOf("careers.marinabaysands.com/en/listing/") > -1
          ) {
            $(document).ready(function () {
              $("body").on("click", "#category_backofhouse", function () {
                if ($(this).is(":checked")) {
                  utag.link({
                    event_name: "carrer_category_click",
                    event_action: $(this).val(),
                    event_label: $(this).val(),
                    event_category: "CheckboxClick",
                  });
                }
              });
              $("body").on("click", "#category_chefscommis", function () {
                if ($(this).is(":checked")) {
                  utag.link({
                    event_name: "carrer_category_click",
                    event_action: $(this).val(),
                    event_label: $(this).val(),
                    event_category: "CheckboxClick",
                  });
                }
              });
              $("body").on("click", "#category_fbmanagement", function () {
                if ($(this).is(":checked")) {
                  utag.link({
                    event_name: "carrer_category_click",
                    event_action: $(this).val(),
                    event_label: $(this).val(),
                    event_category: "CheckboxClick",
                  });
                }
              });
              $("body").on("click", "#category_frontofhouse", function () {
                if ($(this).is(":checked")) {
                  utag.link({
                    event_name: "carrer_category_click",
                    event_action: $(this).val(),
                    event_label: $(this).val(),
                    event_category: "CheckboxClick",
                  });
                }
              });
            });
          }
        } catch (e) {
          utag.DB(e);
        }
      } catch (e) {
        utag.DB(e);
      }
      try {
        try {
          if (
            utag.data["domain_pathname"].toString().toLowerCase() ==
            "shoppes.marinabaysands.com/pages/shoppeslittlesuperstar".toLowerCase()
          ) {
            var MBSshoppesApplyNow = MBSshoppesApplyNow || {};
            MBSshoppesApplyNow.Tagging = MBSshoppesApplyNow.Tagging || {};
            MBSshoppesApplyNow.Tagging = {
              initEvents: function () {
                var _this = this;
                _this.iniShoppesApplyNow();
              },
              iniShoppesApplyNow: function () {
                var _this = this;
                $(".global-button-5").on("click", function () {
                  var url = $(this).attr("href");
                  if (url) {
                    var hostname = url.split("?")[0];
                    var Output = "mbs_s0/mbs_7005";
                    var ename = "ApplyNowButtonClick";
                    var message = "";
                    if (hostname == "mailto:ShoppesEvents@MarinaBaySands.com") {
                      _this.triggerTealiumEvent({
                        DC_Output: Output,
                        event_name: ename,
                      });
                      console.log("Success");
                    } else {
                      console.log("Fail");
                    }
                  }
                });
              },
              getErrorMessage: function () {
                if ($(".listingContentContainer div").hasClass("hidden")) {
                  return "";
                } else {
                  return $(".no_results").text().trim();
                }
              },
              triggerTealiumEvent: function (data) {
                utag.link(data);
                console.log("Tealium Event Triggered: Test");
                console.log(data);
              },
            };
            MBSshoppesApplyNow.Tagging.initEvents();
          }
        } catch (e) {
          utag.DB(e);
        }
      } catch (e) {
        utag.DB(e);
      }
      try {
        try {
          if (1) {
            var timeToStart,
              timeToExecute,
              nodeCheck,
              finalAutoContext,
              findLocationContext,
              finalLocationContext,
              eventCategory,
              eventAction,
              eventLabel,
              cntx,
              x,
              y,
              percentX,
              percentY,
              currentElemClass,
              currentElemID,
              eventcurrentTarget,
              eventprevTarget,
              xpath,
              userActivity,
              prodService;
            var bindingLimit = 0;
            var url = document.location.href;
            var waitForJQuery = setInterval(function () {
              if (typeof jQuery != "undefined") {
                clearInterval(waitForJQuery);
                var presentElem = jQuery(
                  "a, area, button, div, h1, h2, h3, h4, h5, h6, i, img, input, label, li, option, p, section, select, span, textarea"
                );
                var trackingFunc = function (presentElem) {
                  try {
                    var context,
                      currentElemOriginal,
                      contextFetchCount,
                      currentElemOriginalText;
                    presentElem.on("mousedown", function (event) {
                      try {
                        prodService = utag.data.hm_product_service || "na";
                        userActivity = utag.data.hm_user_activity || "na";
                        var currentElem = jQuery(this);
                        var elemType = currentElem.prop("nodeName");
                        currentElemID = currentElem.attr("id");
                        currentElemClass = currentElem.attr("class");
                        eventcurrentTarget = event.currentTarget;
                        if (
                          event.eventPhase == 2 &&
                          eventcurrentTarget !== eventprevTarget
                        ) {
                          eventprevTarget = eventcurrentTarget;
                          timeToStart = new Date().getTime();
                          context = undefined;
                          currentElemOriginal = undefined;
                          contextFetchCount = 0;
                          currentElemOriginal = currentElem;
                          currentElemOriginalText =
                            currentElemOriginal
                              .text()
                              .trim()
                              .replace(/\s+/g, " ") ||
                            currentElemOriginal.val().trim();
                          finalAutoContext = analyseNode(currentElem);
                          finalLocationContext = findLocationContext();
                          xpath = generateXPath(currentElem);
                          if (prodService == "Hotel") {
                            cntx = finalAutoContext || finalLocationContext;
                          } else {
                            cntx = finalAutoContext || finalLocationContext;
                          }
                          var clickText;
                          if (elemType == "INPUT") {
                            clickText =
                              currentElem.attr("id") ||
                              currentElem.attr("name") ||
                              currentElem.attr("placeholder");
                          } else {
                            clickText = currentElem
                              .text()
                              .substring(0, 100)
                              .trim();
                          }
                          if (clickText) {
                            clickText = piiCheck(
                              clickText,
                              currentElemClass,
                              currentElemID
                            );
                          } else {
                            clickText = "(not set)";
                          }
                          var elementClass = currentElem.attr("class");
                          if (elementClass) {
                            var modelement = elementClass
                              .replace(/[^a-z0-9\s]/gi, "")
                              .replace("html", "")
                              .trim();
                          } else {
                            elementClass = "(not set)";
                          }
                          var elementValue = currentElem.attr("href");
                          if (elementValue) {
                            var modvalue = elementValue
                              .replace(/[^a-z0-9\s]/gi, "")
                              .replace("html", "")
                              .trim();
                          } else {
                            elementValue = "(not set)";
                          }
                          eventCategory = userActivity + " :: " + prodService;
                          eventAction = (
                            jQuery("h1").text() ||
                            jQuery(document).find("title").text()
                          ).toLowerCase();
                          eventLabel = (
                            clickText +
                            " :: " +
                            elemType +
                            ":" +
                            elementClass +
                            " :: " +
                            elementValue +
                            " :: " +
                            cntx
                          ).toLowerCase();
                          timeToExecute = new Date().getTime();
                          var totalTime = (timeToExecute - timeToStart) / 1000;
                          utag_data = window.utag_data || {};
                          utag_data.event_name = "hm_push_event";
                          utag_data.hm_event_category =
                            userActivity + " :: " + prodService;
                          utag_data.hm_event_action = eventAction;
                          utag_data.hm_event_label = eventLabel;
                          utag_data.hm_elemType = elemType;
                          utag_data.hm_elementClass = elementClass;
                          utag_data.hm_elementValue = elementValue;
                          utag_data.hm_locationCoordinates = x + " :: " + y;
                          utag_data.hm_locationPercentage =
                            percentX + " :: " + percentY;
                          utag_data.hm_autoContext = finalAutoContext;
                          utag_data.hm_locationPageCell = finalLocationContext;
                          utag_data.hm_xpath = xpath;
                          utag_data.hm_totalTime = totalTime;
                          utag.link(utag_data, null, [459, 508]);
                        }
                      } catch (err) {
                        utag_data = window.utag_data || {};
                        utag_data.event_name = "hm_push_event_error";
                        utag_data.hm_event_category =
                          "jserror" + " :: " + "Click element tracking error";
                        utag_data.hm_event_action =
                          userActivity + " :: " + prodService;
                        utag_data.hm_onerror = err + " :: " + url;
                        utag.link(utag_data, null, [516]);
                        window.dataLayer = window.dataLayer || [];
                        window.dataLayer.push({
                          event: "hm_push_event_error",
                          hm_event_action: userActivity + " :: " + prodService,
                          hm_event_category:
                            "jserror" + " :: " + "Click element tracking error",
                          hm_onerror: err + " :: " + url,
                        });
                      }
                    });
                    function analyseNode(currentElem) {
                      if (context == undefined) {
                        analyseDownNode(currentElem);
                      }
                      if (context == undefined) {
                        analyseParentNode(currentElem.parent(), currentElem);
                      }
                      var finalVal = context;
                      return finalVal;
                    }
                    function analyseDownNode(currentElem) {
                      findContext(currentElem);
                      var childrens = currentElem.children();
                      var childLength = childrens.length;
                      var arr = [];
                      if (childLength > 0) {
                        childrens.each(function (index) {
                          if (context == undefined) {
                            analyseDownNode(jQuery(childrens[index]));
                          }
                        });
                      }
                    }
                    function analyseParentNode(parentElem, childElem) {
                      findContext(parentElem);
                      var childrens = parentElem.children().not(childElem);
                      var childLength = childrens.length;
                      var arr = [];
                      if (childLength > 0) {
                        childrens.each(function (index) {
                          if (context == undefined) {
                            analyseDownNode(jQuery(childrens[index]));
                          }
                        });
                      }
                      if (parentElem.parent().prop("nodeName") !== "BODY") {
                        if (context == undefined) {
                          analyseParentNode(parentElem.parent(), parentElem);
                        }
                      }
                    }
                    function findContext(currentElem) {
                      contextFetchCount++;
                      if (contextFetchCount < 15) {
                        if (currentElem !== currentElemOriginal) {
                          var elemProp = currentElem.prop("nodeName");
                          currentElemClass = currentElem.attr("class");
                          currentElemID = currentElem.attr("id");
                          if (elemProp == "IMG") {
                            context = currentElem.attr("alt");
                            if (!context || context == "") {
                              var selector = currentElem.attr("src");
                              if (selector) {
                                var arr1 = selector.split("/");
                                var arr2 = arr1[arr1.length - 1].split(".");
                                context = arr2[0];
                              }
                            }
                          } else if (elemProp == "INPUT") {
                            context =
                              currentElem.attr("id") ||
                              currentElem.attr("name") ||
                              currentElem.attr("placeholder");
                          } else if (
                            elemProp == "H2" ||
                            elemProp == "H3" ||
                            elemProp == "H4" ||
                            elemProp == "H5" ||
                            elemProp == "H1" ||
                            elemProp == "H6" ||
                            elemProp == "DIV" ||
                            elemProp == "SPAN" ||
                            elemProp == "A" ||
                            elemProp == "P" ||
                            elemProp == "BUTTON"
                          ) {
                            if (currentElem.text()) {
                              context = currentElem
                                .text()
                                .trim()
                                .replace(/\s+/g, " ");
                            }
                          } else {
                            if (
                              currentElem.text() &&
                              !(
                                elemProp == "STYLE" ||
                                elemProp == "G" ||
                                elemProp == "PATH" ||
                                elemProp == "CIRCLE"
                              )
                            ) {
                              context = currentElem
                                .text()
                                .trim()
                                .replace(/\s+/g, " ");
                            }
                          }
                          if (context || context == "") {
                            context = context.trim().replace(/\s+/g, " ");
                            if (context.length == 0) {
                              context = undefined;
                            }
                            if (
                              context &&
                              currentElemOriginalText &&
                              currentElemOriginalText !== ""
                            ) {
                              if (
                                context.indexOf(currentElemOriginalText) !== -1
                              ) {
                                context = undefined;
                              }
                            }
                            if (context && context.length > 50) {
                              context = context.substr(0, 47).trim() + "...";
                            }
                            if (context) {
                              context = piiCheck(
                                context,
                                currentElemClass,
                                currentElemID
                              );
                            }
                            return context;
                          }
                        }
                      }
                    }
                  } catch (err) {
                    utag_data = window.utag_data || {};
                    utag_data.event_name = "hm_push_event_error";
                    utag_data.hm_event_category =
                      "jserror" + " :: " + "event tracking function error";
                    utag_data.hm_event_action =
                      userActivity + " :: " + prodService;
                    utag_data.hm_onerror = err + " :: " + url;
                    utag.link(utag_data, null, [516]);
                    window.dataLayer = window.dataLayer || [];
                    window.dataLayer.push({
                      event: "hm_push_event_error",
                      hm_event_action: userActivity + " :: " + prodService,
                      hm_event_category:
                        "jserror" + " :: " + "event tracking function error",
                      hm_onerror: err + " :: " + url,
                    });
                  }
                };
                trackingFunc(presentElem);
                var observer = new MutationObserver((mutations) => {
                  var presentElemSelectIDfinal,
                    presentElemSelectClassfinal,
                    presentElemSelectNodefinal;
                  for (var mutation of mutations) {
                    if (mutation.type == "childList") {
                      if (mutation.addedNodes.length >= 1) {
                        if (
                          mutation.addedNodes[0].nodeName !== "#text" &&
                          mutation.addedNodes[0].nodeType == 1 &&
                          mutation.addedNodes[0].nodeName !== "SCRIPT"
                        ) {
                          presentElem = jQuery(mutation.target);
                          if (presentElem) {
                            nodeCheck = presentElem
                              .prop("nodeName")
                              .toLowerCase();
                            presentElemSelectID = presentElem.attr("id");
                            presentElemSelectClass = presentElem.attr("class");
                            if (
                              presentElemSelectID !==
                                presentElemSelectIDfinal ||
                              presentElemSelectClass !==
                                presentElemSelectClassfinal
                            ) {
                              if (nodeCheck !== "body") {
                                presentElemSelectIDfinal = presentElemSelectID;
                                presentElemSelectClassfinal =
                                  presentElemSelectClass;
                                presentElemSelectNodefinal = nodeCheck;
                                trackingFunc(
                                  presentElem.find(
                                    "a, area, button, div, h1, h2, h3, h4, h5, h6, i, img, input, label, li, option, p, section, select, span"
                                  )
                                );
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                });
                observer.observe(document.querySelector("body"), {
                  childList: true,
                  subtree: true,
                });
                findLocationContext = function () {
                  x = event.clientX + jQuery(window).scrollLeft();
                  y = event.clientY + jQuery(window).scrollTop();
                  coords = "X coords: " + x + ", Y coords: " + y;
                  var height = jQuery(document).height();
                  var width = jQuery(document).width();
                  percentX = Math.round((x * 100) / width);
                  percentY = Math.round((y * 100) / height);
                  var positionElem =
                    "width: " + percentX + ", height: " + percentY;
                  var cellColm = Math.ceil(percentX / 20);
                  var cellRow = Math.ceil(percentY / 10);
                  if (cellColm == 1) {
                    cellColm = "A";
                  }
                  if (cellColm == 2) {
                    cellColm = "B";
                  }
                  if (cellColm == 3) {
                    cellColm = "C";
                  }
                  if (cellColm == 4) {
                    cellColm = "D";
                  }
                  if (cellColm == 5) {
                    cellColm = "E";
                  }
                  var PageCell = cellColm + cellRow;
                  return PageCell;
                };
                var piiCheck = function (
                  context,
                  currentElemClass,
                  currentElemID
                ) {
                  var contextval = context;
                  var piiElemClassval = currentElemClass;
                  var piiElemIDval = currentElemID;
                  var piiRegex = [
                    {
                      name: "EMAIL",
                      regex:
                        /([a-zA-Z0-9_\-\.]+)@([a-zA-Z0-9_\-\.]+)\.([a-zA-Z]{2,5})/g,
                    },
                    ,
                    {
                      name: "MOBILE1",
                      regex:
                        /^(?:(?:\+?1\s*(?:[.-]\s*)?)?(?:\(\s*([2-9]1[02-9]|[2-9][02-8]1|[2-9][02-8][02-9])\s*\)|([2-9]1[02-9]|[2-9][02-8]1|[2-9][02-8][02-9]))\s*(?:[.-]\s*)?)?([2-9]1[02-9]|[2-9][02-9]1|[2-9][02-9]{2})\s*(?:[.-]\s*)?([0-9]{4})(?:\s*(?:#|x\.?|ext\.?|extension)\s*(\d+))?$/,
                    },
                    { name: "MOBILE2", regex: /\+65[ ]?(\d{4})?[ ]?(\d{4})/g },
                  ];
                  var piiClass = new RegExp(
                    "(login-board-name)|accntNum|accntName|welcome_msg|(icon-link-email)|(icon-link-mobile)"
                  );
                  var piiID = new RegExp(
                    "(email-provided)|(patron.account.firstname.tooltip)|(patron.account.lastname.tooltip)"
                  );
                  piiRegex.forEach(function (pii) {
                    contextval = contextval.replace(
                      pii.regex,
                      "[REDACTED PII" + pii.name + "]"
                    );
                  });
                  if (piiClass.test(piiElemClassval)) {
                    contextval = "REDACTED PII From Class " + piiElemClassval;
                  }
                  if (piiID.test(piiElemIDval)) {
                    contextval = "REDACTED PII From ID " + piiElemIDval;
                  }
                  return contextval;
                };
                function empty(mixed_var) {
                  var key;
                  if (
                    mixed_var === "" ||
                    mixed_var === 0 ||
                    mixed_var === "0" ||
                    mixed_var === null ||
                    mixed_var === false ||
                    mixed_var === undefined ||
                    mixed_var === "undefined"
                  ) {
                    return true;
                  }
                  if (typeof mixed_var == "object") {
                    for (key in mixed_var) {
                      return false;
                    }
                    return true;
                  }
                  return false;
                }
                var indexOfType = function (element) {
                  var element = element,
                    prev = element.prevAll(element[0].tagName);
                  if (empty(prev)) {
                    return 1;
                  } else {
                    return 1 + prev.length;
                  }
                };
                var getAttributes = function (element) {
                  var elem = element,
                    attr = {};
                  if (elem.length)
                    jQuery.each(elem.get(0).attributes, function (v, n) {
                      n = n.nodeName || n.name;
                      v = elem.attr(n);
                      if (v != undefined && v !== false) attr[n] = v;
                    });
                  return attr;
                };
                var generateXPath = function (element) {
                  var element = element,
                    path = "",
                    pathArray = [];
                  function buildPathArray() {
                    while (!empty(element[0].tagName)) {
                      var theId = element.attr("id");
                      if (!empty(theId)) {
                        pathArray.push({
                          tag: element[0].tagName,
                          theIndex: indexOfType(element),
                          theAttributes: getAttributes(element),
                        });
                        return;
                      } else {
                        pathArray.push({
                          tag: element[0].tagName,
                          theIndex: indexOfType(element),
                          theAttributes: getAttributes(element),
                        });
                      }
                      element = element.parent();
                    }
                  }
                  function buildXPath() {
                    for (var i = 0; i < pathArray.length; i++) {
                      if (!empty(pathArray[i].theAttributes.id)) {
                        path =
                          "//" +
                          pathArray[i].tag.toLowerCase() +
                          "[@id='" +
                          pathArray[i].theAttributes.id +
                          "']" +
                          path;
                      } else {
                        path =
                          "/" +
                          pathArray[i].tag.toLowerCase() +
                          "[" +
                          pathArray[i].theIndex +
                          "]" +
                          path;
                      }
                    }
                  }
                  buildPathArray();
                  buildXPath();
                  return path;
                };
              }
            }, 1000);
            setTimeout(function () {
              clearInterval(waitForJQuery);
              if (typeof jQuery == "undefined" || typeof $ == "undefined") {
                utag_data = window.utag_data || {};
                utag_data.event_name = "hm_push_event_error";
                utag_data.hm_event_category =
                  "jserror" + " :: " + "jQuery not load";
                utag_data.hm_event_action = userActivity + " :: " + prodService;
                utag_data.hm_onerror =
                  "jQuery Not Present in this URL" + " :: " + url;
                utag.link(utag_data, null, [516]);
                window.dataLayer = window.dataLayer || [];
                window.dataLayer.push({
                  event: "hm_push_event_error",
                  hm_event_action: userActivity + " :: " + prodService,
                  hm_event_category: "jserror" + " :: " + "jQuery not load",
                  hm_onerror: "jQuery Not Present in this URL" + " :: " + url,
                });
              }
            }, 10000);
          }
        } catch (e) {
          utag.DB(e);
        }
      } catch (e) {
        utag.DB(e);
      }
    }
  });
  if (utag.cfg.readywait || utag.cfg.waittimer) {
    utag.loader.EV("", "ready", function (a) {
      if (utag.loader.rf == 0) {
        utag.loader.rf = 1;
        utag.cfg.readywait = 1;
        utag.DB("READY:utag.cfg.readywait");
        setTimeout(function () {
          utag.loader.PINIT();
        }, utag.cfg.waittimer || 1);
      }
    });
  } else {
    utag.loader.PINIT();
  }
}
//tealium universal tag - utag.531 ut4.0.202207210624, Copyright 2022 Tealium.com Inc. All Rights Reserved.
function OptanonWrapper() {}
try {
  (function (id, loader) {
    var u = {};
    utag.o[loader].sender[id] = u;
    if (utag === undefined) {
      utag = {};
    }
    if (utag.ut === undefined) {
      utag.ut = {};
    }
    if (utag.ut.loader === undefined) {
      u.loader = function (o) {
        var a, b, c, l;
        a = document;
        if (o.type === "iframe") {
          b = a.createElement("iframe");
          b.setAttribute("height", "1");
          b.setAttribute("width", "1");
          b.setAttribute("style", "display:none");
          b.setAttribute("src", o.src);
        } else if (o.type === "img") {
          utag.DB("Attach img: " + o.src);
          b = new Image();
          b.src = o.src;
          return;
        } else {
          b = a.createElement("script");
          b.language = "javascript";
          b.type = "text/javascript";
          b.async = 1;
          b.charset = "utf-8";
          b.src = o.src;
        }
        if (o.id) {
          b.id = o.id;
        }
        if (typeof o.cb === "function") {
          if (b.addEventListener) {
            b.addEventListener(
              "load",
              function () {
                o.cb();
              },
              false
            );
          } else {
            b.onreadystatechange = function () {
              if (
                this.readyState === "complete" ||
                this.readyState === "loaded"
              ) {
                this.onreadystatechange = null;
                o.cb();
              }
            };
          }
        }
        l = o.loc || "head";
        c = a.getElementsByTagName(l)[0];
        if (c) {
          utag.DB("Attach to " + l + ": " + o.src);
          if (l === "script") {
            c.parentNode.insertBefore(b, c);
          } else {
            c.appendChild(b);
          }
        }
      };
    } else {
      u.loader = utag.ut.loader;
    }
    u.ev = { view: 1 };
    u.initialized = false;
    u.map = {};
    u.extend = [];
    u.send = function (a, b) {
      if (u.ev[a] || u.ev.all !== undefined) {
        var c, d, e, f, i;
        u.data = {
          base_url: "//cdn.cookielaw.org/scripttemplates/otSDKStub.js",
        };
        for (d in utag.loader.GV(u.map)) {
          if (b[d] !== undefined && b[d] !== "") {
            e = u.map[d].split(",");
            for (f = 0; f < e.length; f++) {
              u.data[e[f]] = b[d];
            }
          }
        }
        if (!u.initialized) {
          (function (a, b, c, d) {
            a = u.data.base_url;
            b = document;
            c = "script";
            d = b.createElement(c);
            d.src = a;
            d.setAttribute(
              "data-domain-script",
              "0b86c7d7-dd72-4fd8-9d3d-1c6ced4854b2-test"
            );
            d.type = "text/java" + c;
            d.async = true;
            a = b.getElementsByTagName(c)[0];
            a.parentNode.insertBefore(d, a);
          })();
        }
      }
    };
    utag.o[loader].loader.LOAD(id);
  })("531", "mbs.main");
} catch (error) {
  utag.DB(error);
}

//tealium universal tag - utag.545 ut4.0.202207210624, Copyright 2022 Tealium.com Inc. All Rights Reserved.
(function (f) {
  if (f.fbq) return;
  var n = (f.fbq = function () {
    n.callMethod ? n.callMethod.apply(n, arguments) : n.queue.push(arguments);
  });
  if (!f._fbq) f._fbq = n;
  n.push = n;
  n.loaded = !0;
  n.version = "2.0";
  n.queue = [];
  n.agent = "tmtealium";
})(window);
try {
  (function (id, loader) {
    var u = { id: id },
      md5;
    utag.o[loader].sender[id] = u;
    utag.globals = utag.globals || {};
    if (utag.ut === undefined) {
      utag.ut = {};
    }
    var match = /ut\d\.(\d*)\..*/.exec(utag.cfg.v);
    if (utag.ut.loader === undefined || !match || parseInt(match[1]) < 41) {
      u.loader = function (o, a, b, c, l, m) {
        utag.DB(o);
        a = document;
        if (o.type == "iframe") {
          m = a.getElementById(o.id);
          if (m && m.tagName == "IFRAME") {
            b = m;
          } else {
            b = a.createElement("iframe");
          }
          o.attrs = o.attrs || {};
          utag.ut.merge(
            o.attrs,
            { height: "1", width: "1", style: "display:none" },
            0
          );
        } else if (o.type == "img") {
          utag.DB("Attach img: " + o.src);
          b = new Image();
        } else {
          b = a.createElement("script");
          b.language = "javascript";
          b.type = "text/javascript";
          b.async = 1;
          b.charset = "utf-8";
        }
        if (o.id) {
          b.id = o.id;
        }
        for (l in utag.loader.GV(o.attrs)) {
          b.setAttribute(l, o.attrs[l]);
        }
        b.setAttribute("src", o.src);
        if (typeof o.cb == "function") {
          if (b.addEventListener) {
            b.addEventListener(
              "load",
              function () {
                o.cb();
              },
              false
            );
          } else {
            b.onreadystatechange = function () {
              if (
                this.readyState == "complete" ||
                this.readyState == "loaded"
              ) {
                this.onreadystatechange = null;
                o.cb();
              }
            };
          }
        }
        if (o.type != "img" && !m) {
          l = o.loc || "head";
          c = a.getElementsByTagName(l)[0];
          if (c) {
            utag.DB("Attach to " + l + ": " + o.src);
            if (l == "script") {
              c.parentNode.insertBefore(b, c);
            } else {
              c.appendChild(b);
            }
          }
        }
      };
    } else {
      u.loader = utag.ut.loader;
    }
    if (utag.ut.typeOf === undefined) {
      u.typeOf = function (e) {
        return {}.toString
          .call(e)
          .match(/\s([a-zA-Z]+)/)[1]
          .toLowerCase();
      };
    } else {
      u.typeOf = utag.ut.typeOf;
    }
    if (utag.ut.md5 === undefined) {
      md5 = (function (t, n) {
        var r;
        if (
          ("undefined" != typeof window && window.crypto && (r = window.crypto),
          !r &&
            "undefined" != typeof window &&
            window.msCrypto &&
            (r = window.msCrypto),
          !r &&
            "undefined" != typeof global &&
            global.crypto &&
            (r = global.crypto),
          !r && "function" == typeof require)
        )
          try {
            r = require("crypto");
          } catch (t) {}
        var e = function () {
            if (r) {
              if ("function" == typeof r.getRandomValues)
                try {
                  return r.getRandomValues(new Uint32Array(1))[0];
                } catch (t) {}
              if ("function" == typeof r.randomBytes)
                try {
                  return r.randomBytes(4).readInt32LE();
                } catch (t) {}
            }
            throw new Error(
              "Native crypto module could not be used to get secure random number."
            );
          },
          i =
            Object.create ||
            (function () {
              function t() {}
              return function (n) {
                var r;
                return (
                  (t.prototype = n), (r = new t()), (t.prototype = null), r
                );
              };
            })(),
          o = {},
          s = (o.lib = {}),
          a = (s.Base = {
            extend: function (t) {
              var n = i(this);
              return (
                t && n.mixIn(t),
                (n.hasOwnProperty("init") && this.init !== n.init) ||
                  (n.init = function () {
                    n.$super.init.apply(this, arguments);
                  }),
                (n.init.prototype = n),
                (n.$super = this),
                n
              );
            },
            create: function () {
              var t = this.extend();
              return t.init.apply(t, arguments), t;
            },
            init: function () {},
            mixIn: function (t) {
              for (var n in t) t.hasOwnProperty(n) && (this[n] = t[n]);
              t.hasOwnProperty("toString") && (this.toString = t.toString);
            },
            clone: function () {
              return this.init.prototype.extend(this);
            },
          }),
          c = (s.WordArray = a.extend({
            init: function (t, n) {
              (t = this.words = t || []),
                (this.sigBytes = null != n ? n : 4 * t.length);
            },
            toString: function (t) {
              return (t || f).stringify(this);
            },
            concat: function (t) {
              var n = this.words,
                r = t.words,
                e = this.sigBytes,
                i = t.sigBytes;
              if ((this.clamp(), e % 4))
                for (var o = 0; o < i; o++) {
                  var s = (r[o >>> 2] >>> (24 - (o % 4) * 8)) & 255;
                  n[(e + o) >>> 2] |= s << (24 - ((e + o) % 4) * 8);
                }
              else for (o = 0; o < i; o += 4) n[(e + o) >>> 2] = r[o >>> 2];
              return (this.sigBytes += i), this;
            },
            clamp: function () {
              var n = this.words,
                r = this.sigBytes;
              (n[r >>> 2] &= 4294967295 << (32 - (r % 4) * 8)),
                (n.length = t.ceil(r / 4));
            },
            clone: function () {
              var t = a.clone.call(this);
              return (t.words = this.words.slice(0)), t;
            },
            random: function (t) {
              for (var n = [], r = 0; r < t; r += 4) n.push(e());
              return new c.init(n, t);
            },
          })),
          u = (o.enc = {}),
          f = (u.Hex = {
            stringify: function (t) {
              for (var n = t.words, r = t.sigBytes, e = [], i = 0; i < r; i++) {
                var o = (n[i >>> 2] >>> (24 - (i % 4) * 8)) & 255;
                e.push((o >>> 4).toString(16)), e.push((15 & o).toString(16));
              }
              return e.join("");
            },
            parse: function (t) {
              for (var n = t.length, r = [], e = 0; e < n; e += 2)
                r[e >>> 3] |=
                  parseInt(t.substr(e, 2), 16) << (24 - (e % 8) * 4);
              return new c.init(r, n / 2);
            },
          }),
          h = (u.Latin1 = {
            stringify: function (t) {
              for (var n = t.words, r = t.sigBytes, e = [], i = 0; i < r; i++) {
                var o = (n[i >>> 2] >>> (24 - (i % 4) * 8)) & 255;
                e.push(String.fromCharCode(o));
              }
              return e.join("");
            },
            parse: function (t) {
              for (var n = t.length, r = [], e = 0; e < n; e++)
                r[e >>> 2] |= (255 & t.charCodeAt(e)) << (24 - (e % 4) * 8);
              return new c.init(r, n);
            },
          }),
          d = (u.Utf8 = {
            stringify: function (t) {
              try {
                return decodeURIComponent(escape(h.stringify(t)));
              } catch (t) {
                throw new Error("Malformed UTF-8 data");
              }
            },
            parse: function (t) {
              return h.parse(unescape(encodeURIComponent(t)));
            },
          }),
          l = (s.BufferedBlockAlgorithm = a.extend({
            reset: function () {
              (this._data = new c.init()), (this._nDataBytes = 0);
            },
            _append: function (t) {
              "string" == typeof t && (t = d.parse(t)),
                this._data.concat(t),
                (this._nDataBytes += t.sigBytes);
            },
            _process: function (n) {
              var r,
                e = this._data,
                i = e.words,
                o = e.sigBytes,
                s = this.blockSize,
                a = o / (4 * s),
                u =
                  (a = n
                    ? t.ceil(a)
                    : t.max((0 | a) - this._minBufferSize, 0)) * s,
                f = t.min(4 * u, o);
              if (u) {
                for (var h = 0; h < u; h += s) this._doProcessBlock(i, h);
                (r = i.splice(0, u)), (e.sigBytes -= f);
              }
              return new c.init(r, f);
            },
            clone: function () {
              var t = a.clone.call(this);
              return (t._data = this._data.clone()), t;
            },
            _minBufferSize: 0,
          })),
          p =
            ((s.Hasher = l.extend({
              cfg: a.extend(),
              init: function (t) {
                (this.cfg = this.cfg.extend(t)), this.reset();
              },
              reset: function () {
                l.reset.call(this), this._doReset();
              },
              update: function (t) {
                return this._append(t), this._process(), this;
              },
              finalize: function (t) {
                return t && this._append(t), this._doFinalize();
              },
              blockSize: 16,
              _createHelper: function (t) {
                return function (n, r) {
                  return new t.init(r).finalize(n);
                };
              },
              _createHmacHelper: function (t) {
                return function (n, r) {
                  return new p.HMAC.init(t, r).finalize(n);
                };
              },
            })),
            (o.algo = {}));
        return o;
      })(Math);
      (function (t) {
        var n = md5,
          r = n.lib,
          e = r.WordArray,
          i = r.Hasher,
          o = n.algo,
          s = [];
        !(function () {
          for (var n = 0; n < 64; n++)
            s[n] = (4294967296 * t.abs(t.sin(n + 1))) | 0;
        })();
        var a = (o.MD5 = i.extend({
          _doReset: function () {
            this._hash = new e.init([
              1732584193, 4023233417, 2562383102, 271733878,
            ]);
          },
          _doProcessBlock: function (t, n) {
            for (var r = 0; r < 16; r++) {
              var e = n + r,
                i = t[e];
              t[e] =
                (16711935 & ((i << 8) | (i >>> 24))) |
                (4278255360 & ((i << 24) | (i >>> 8)));
            }
            var o = this._hash.words,
              a = t[n + 0],
              d = t[n + 1],
              l = t[n + 2],
              p = t[n + 3],
              y = t[n + 4],
              g = t[n + 5],
              w = t[n + 6],
              v = t[n + 7],
              _ = t[n + 8],
              m = t[n + 9],
              B = t[n + 10],
              x = t[n + 11],
              b = t[n + 12],
              S = t[n + 13],
              H = t[n + 14],
              z = t[n + 15],
              C = o[0],
              M = o[1],
              A = o[2],
              D = o[3];
            (C = c(C, M, A, D, a, 7, s[0])),
              (D = c(D, C, M, A, d, 12, s[1])),
              (A = c(A, D, C, M, l, 17, s[2])),
              (M = c(M, A, D, C, p, 22, s[3])),
              (C = c(C, M, A, D, y, 7, s[4])),
              (D = c(D, C, M, A, g, 12, s[5])),
              (A = c(A, D, C, M, w, 17, s[6])),
              (M = c(M, A, D, C, v, 22, s[7])),
              (C = c(C, M, A, D, _, 7, s[8])),
              (D = c(D, C, M, A, m, 12, s[9])),
              (A = c(A, D, C, M, B, 17, s[10])),
              (M = c(M, A, D, C, x, 22, s[11])),
              (C = c(C, M, A, D, b, 7, s[12])),
              (D = c(D, C, M, A, S, 12, s[13])),
              (A = c(A, D, C, M, H, 17, s[14])),
              (C = u(C, (M = c(M, A, D, C, z, 22, s[15])), A, D, d, 5, s[16])),
              (D = u(D, C, M, A, w, 9, s[17])),
              (A = u(A, D, C, M, x, 14, s[18])),
              (M = u(M, A, D, C, a, 20, s[19])),
              (C = u(C, M, A, D, g, 5, s[20])),
              (D = u(D, C, M, A, B, 9, s[21])),
              (A = u(A, D, C, M, z, 14, s[22])),
              (M = u(M, A, D, C, y, 20, s[23])),
              (C = u(C, M, A, D, m, 5, s[24])),
              (D = u(D, C, M, A, H, 9, s[25])),
              (A = u(A, D, C, M, p, 14, s[26])),
              (M = u(M, A, D, C, _, 20, s[27])),
              (C = u(C, M, A, D, S, 5, s[28])),
              (D = u(D, C, M, A, l, 9, s[29])),
              (A = u(A, D, C, M, v, 14, s[30])),
              (C = f(C, (M = u(M, A, D, C, b, 20, s[31])), A, D, g, 4, s[32])),
              (D = f(D, C, M, A, _, 11, s[33])),
              (A = f(A, D, C, M, x, 16, s[34])),
              (M = f(M, A, D, C, H, 23, s[35])),
              (C = f(C, M, A, D, d, 4, s[36])),
              (D = f(D, C, M, A, y, 11, s[37])),
              (A = f(A, D, C, M, v, 16, s[38])),
              (M = f(M, A, D, C, B, 23, s[39])),
              (C = f(C, M, A, D, S, 4, s[40])),
              (D = f(D, C, M, A, a, 11, s[41])),
              (A = f(A, D, C, M, p, 16, s[42])),
              (M = f(M, A, D, C, w, 23, s[43])),
              (C = f(C, M, A, D, m, 4, s[44])),
              (D = f(D, C, M, A, b, 11, s[45])),
              (A = f(A, D, C, M, z, 16, s[46])),
              (C = h(C, (M = f(M, A, D, C, l, 23, s[47])), A, D, a, 6, s[48])),
              (D = h(D, C, M, A, v, 10, s[49])),
              (A = h(A, D, C, M, H, 15, s[50])),
              (M = h(M, A, D, C, g, 21, s[51])),
              (C = h(C, M, A, D, b, 6, s[52])),
              (D = h(D, C, M, A, p, 10, s[53])),
              (A = h(A, D, C, M, B, 15, s[54])),
              (M = h(M, A, D, C, d, 21, s[55])),
              (C = h(C, M, A, D, _, 6, s[56])),
              (D = h(D, C, M, A, z, 10, s[57])),
              (A = h(A, D, C, M, w, 15, s[58])),
              (M = h(M, A, D, C, S, 21, s[59])),
              (C = h(C, M, A, D, y, 6, s[60])),
              (D = h(D, C, M, A, x, 10, s[61])),
              (A = h(A, D, C, M, l, 15, s[62])),
              (M = h(M, A, D, C, m, 21, s[63])),
              (o[0] = (o[0] + C) | 0),
              (o[1] = (o[1] + M) | 0),
              (o[2] = (o[2] + A) | 0),
              (o[3] = (o[3] + D) | 0);
          },
          _doFinalize: function () {
            var n = this._data,
              r = n.words,
              e = 8 * this._nDataBytes,
              i = 8 * n.sigBytes;
            r[i >>> 5] |= 128 << (24 - (i % 32));
            var o = t.floor(e / 4294967296),
              s = e;
            (r[15 + (((i + 64) >>> 9) << 4)] =
              (16711935 & ((o << 8) | (o >>> 24))) |
              (4278255360 & ((o << 24) | (o >>> 8)))),
              (r[14 + (((i + 64) >>> 9) << 4)] =
                (16711935 & ((s << 8) | (s >>> 24))) |
                (4278255360 & ((s << 24) | (s >>> 8)))),
              (n.sigBytes = 4 * (r.length + 1)),
              this._process();
            for (var a = this._hash, c = a.words, u = 0; u < 4; u++) {
              var f = c[u];
              c[u] =
                (16711935 & ((f << 8) | (f >>> 24))) |
                (4278255360 & ((f << 24) | (f >>> 8)));
            }
            return a;
          },
          clone: function () {
            var t = i.clone.call(this);
            return (t._hash = this._hash.clone()), t;
          },
        }));
        function c(t, n, r, e, i, o, s) {
          var a = t + ((n & r) | (~n & e)) + i + s;
          return ((a << o) | (a >>> (32 - o))) + n;
        }
        function u(t, n, r, e, i, o, s) {
          var a = t + ((n & e) | (r & ~e)) + i + s;
          return ((a << o) | (a >>> (32 - o))) + n;
        }
        function f(t, n, r, e, i, o, s) {
          var a = t + (n ^ r ^ e) + i + s;
          return ((a << o) | (a >>> (32 - o))) + n;
        }
        function h(t, n, r, e, i, o, s) {
          var a = t + (r ^ (n | ~e)) + i + s;
          return ((a << o) | (a >>> (32 - o))) + n;
        }
        (n.MD5 = i._createHelper(a)), (n.HmacMD5 = i._createHmacHelper(a));
      })(Math);
    } else {
      md5 = utag.ut.md5;
    }
    u.ev = { view: 1, link: 1 };
    u.scriptrequested = false;
    u.pixels_initialized = {};
    u.clearEmptyKeys = function (object) {
      for (var key in object) {
        if (
          object[key] === "" ||
          object[key] === undefined ||
          object[key] === null ||
          (utag.ut.typeOf(object[key]) === "array" && object[key].length === 0)
        ) {
          delete object[key];
        }
      }
      return object;
    };
    u.generateEventID = function (event, data, lookup_id) {
      var hash_input =
          (data["tealium_timestamp_epoch"] ||
            (function () {
              var d = new Date();
              return Math.floor(d.getTime() / 1000);
            })()) +
          "-" +
          lookup_id +
          "-" +
          event +
          "-" +
          id,
        event_id = md5.MD5(hash_input).toString();
      return event_id;
    };
    u.isEmptyObject = function (object) {
      if (typeof Object.keys === "function") {
        if (Object.keys(object).length === 0) {
          return true;
        } else {
          return false;
        }
      } else {
        var key;
        for (key in object) {
          if (object.hasOwnProperty(key)) {
            return false;
          }
        }
        return true;
      }
    };
    u.map_func = function (arr, obj, item) {
      var i = arr.shift();
      obj[i] = obj[i] || {};
      if (arr.length > 0) {
        u.map_func(arr, obj[i], item);
      } else {
        obj[i] = item;
      }
    };
    u.processAMData = function (data) {
      var processed_data = {},
        key;
      for (key in data) {
        if (data.hasOwnProperty(key)) {
          if (key === "ph" || key === "ge" || key === "db" || key === "zp") {
            key = key.replace(/\s/g, "").toLowerCase();
          }
          if (key === "ph") {
            data[key] = data[key].replace(/[^\d]/g, "");
          } else if (key === "ge") {
            if (data[key] !== "m" && data[key] !== "f") {
              utag.DB(
                u.id +
                  ": Advanced Matching property 'ge' in wrong format. Removed from init call"
              );
              continue;
            }
          } else if (key === "db") {
            if (data[key].length !== 8) {
              utag.DB(
                u.id +
                  ": Advanced Matching property 'db' is not the correct length. Removed from init call"
              );
              continue;
            }
          } else if (key === "zp") {
            data[key] = data[key].replace(/[^\d]/g, "");
            if (data[key].length > 5) {
              utag.DB(
                u.id +
                  ": Advanced Matching property 'zp' is too long. Removed from init call"
              );
              continue;
            }
          }
        }
        processed_data[key] = data[key];
      }
      return u.clearEmptyKeys(processed_data);
    };
    u.map = { _sm_545_1: "autoConfig" };
    u.extend = [
      function (a, b) {
        try {
          b["_sm_545_1"] = "false";
        } catch (e) {
          utag.DB(e);
        }
      },
    ];
    u.send = function (a, b) {
      if (u.ev[a] || u.ev.all !== undefined) {
        utag.DB("send:545");
        utag.DB(b);
        var c,
          d,
          e,
          f,
          h,
          i,
          j,
          k,
          l,
          key,
          pixel_list,
          event,
          base_tracking_type = "track",
          event_data = {},
          event_id = "",
          event_name = "",
          event_tracking_type = "",
          fb_param = "",
          has_purchase = false,
          lookup_id = "",
          tracking_queue = [],
          standard_events_lookup = {
            AddPaymentInfo: {
              fb_params: [
                "content_category",
                "content_ids",
                "contents",
                "currency",
                "value",
              ],
            },
            AddToCart: {
              fb_params: [
                "content_ids",
                "content_name",
                "content_type",
                "contents",
                "currency",
                "value",
              ],
            },
            AddToWishlist: {
              fb_params: [
                "content_name",
                "content_category",
                "content_ids",
                "contents",
                "currency",
                "value",
              ],
            },
            CompleteRegistration: {
              fb_params: ["content_name", "currency", "status", "value"],
            },
            Contact: { fb_params: [] },
            CustomizeProduct: { fb_params: [] },
            Donate: { fb_params: [] },
            FindLocation: { fb_params: [] },
            InitiateCheckout: {
              fb_params: [
                "content_category",
                "content_ids",
                "contents",
                "currency",
                "num_items",
                "value",
                "content_type",
                "checkin_date",
                "checkout_date",
                "num_adults",
                "num_children",
                "room_types",
                "num_of_nights",
                "language_code",
                "site_section",
              ],
            },
            Lead: {
              fb_params: [
                "content_category",
                "content_name",
                "currency",
                "value",
              ],
            },
            PageView: { fb_params: [] },
            Purchase: {
              fb_params: [
                "content_ids",
                "content_name",
                "content_type",
                "contents",
                "currency",
                "num_items",
                "value",
              ],
              req_params: ["currency", "value"],
            },
            Schedule: { fb_params: [] },
            Search: {
              fb_params: [
                "content_category",
                "content_ids",
                "contents",
                "currency",
                "search_string",
                "value",
                "num_items",
                "content_type",
                "checkin_date",
                "checkout_date",
                "num_adults",
                "num_children",
                "room_types",
                "num_of_nights",
                "language_code",
                "site_section",
              ],
            },
            StartTrial: { fb_params: ["currency", "predicted_ltv", "value"] },
            SubmitApplication: { fb_params: [] },
            Subscribe: { fb_params: ["currency", "predicted_ltv", "value"] },
            ViewContent: {
              fb_params: [
                "content_ids",
                "content_name",
                "content_type",
                "contents",
                "currency",
                "value",
              ],
            },
          },
          standard_params_lookup = {
            content_category: function () {
              return u.data.content_category || u.data.product_category;
            },
            content_name: function () {
              return u.data.content_name || u.data.product_name;
            },
            content_ids: function () {
              return u.data.content_ids || u.data.product_id;
            },
            content_type: function () {
              return u.data.content_type;
            },
            contents: function () {
              return u.data.contents;
            },
            currency: function () {
              return u.data.currency || u.data.order_currency;
            },
            num_items: function () {
              var i, num;
              if (
                typeof u.data.num_items !== "undefined" &&
                u.data.num_items !== ""
              ) {
                num = u.data.num_items;
              } else {
                if (
                  u.data.calc_items === true ||
                  u.data.calc_items === "true"
                ) {
                  num = 0;
                  for (i = 0; i < u.data.product_quantity.length; i++) {
                    num += parseInt(u.data.product_quantity[i]);
                  }
                }
              }
              if (typeof num !== "undefined" && num !== "") {
                num = parseInt(num);
              }
              return num;
            },
            predicted_ltv: function () {
              return u.data.predicted_ltv;
            },
            search_string: function () {
              return u.data.search_string;
            },
            status: function () {
              return u.data.status;
            },
            value: function (event) {
              var val = "";
              if (typeof u.data.value !== "undefined" && u.data.value !== "") {
                val = u.data.value;
              } else {
                if (
                  (event === "AddToCart" || event === "ViewContent") &&
                  u.data.product_unit_price.length > 0
                ) {
                  val = u.data.product_unit_price[0];
                } else if (
                  u.data.order_subtotal !== "undefined" &&
                  u.data.order_subtotal !== ""
                ) {
                  val = u.data.order_subtotal;
                }
              }
              if (typeof val !== "undefined" && val !== "") {
                val = parseFloat(val);
              }
              return val;
            },
            checkin_date: function () {
              return (
                u.data.check_in_date || u.data.check_in || u.data.checkin_date
              );
            },
            checkout_date: function () {
              return (
                u.data.check_out_date ||
                u.data.check_out ||
                u.data.checkout_date
              );
            },
            num_adults: function () {
              return u.data.num_of_adults || u.data.num_adults;
            },
            num_children: function () {
              return u.data.num_of_children || u.data.num_children;
            },
            room_types: function () {
              return u.data.room_type || u.data.room_types || b.room_type;
            },
            num_of_nights: function () {
              return (
                u.data.sum_num_of_nights ||
                u.data.num_of_nights ||
                b.sum_num_of_nights
              );
            },
            language_code: function () {
              return (
                u.data.language_code || u.data.language_code || b.language_code
              );
            },
            site_section: function () {
              return (
                u.data.site_section || u.data.site_section || b.site_section
              );
            },
          };
        u.processing_options = function () {
          var key, ldu_option;
          for (key in u.data.lmt_data.ldu_types) {
            if (
              u.data.lmt_data.ldu_types[key] === "true" ||
              u.data.lmt_data.ldu_types[key] === true
            ) {
              ldu_option = key;
            }
          }
          if (
            u.data.lmt_data.use_ldu === "true" ||
            u.data.lmt_data.use_ldu === true
          ) {
            switch (ldu_option) {
              case "california":
                u.data.lmt_data.country = 1;
                u.data.lmt_data.state = 1000;
                break;
              case "geolocate":
                u.data.lmt_data.country = 0;
                u.data.lmt_data.state = 0;
                break;
              default:
                break;
            }
            fbq(
              "dataProcessingOptions",
              u.data.lmt_data.prcs_optns,
              u.data.lmt_data.country,
              u.data.lmt_data.state
            );
          } else if (
            u.data.lmt_data.use_ldu === "false" ||
            u.data.lmt_data.use_ldu === false
          ) {
            fbq("dataProcessingOptions", []);
          }
        };
        u.data = {
          base_url: "https://connect.facebook.net/en_US/fbevents.js",
          advanced_matching: "true",
          generate_event_id: "true",
          pixel_id: "194683111105570",
          autoConfig: true,
          auto_page_view: true,
          calc_items: true,
          consent: "",
          disablePushState: false,
          track_single: true,
          lmt_data: { prcs_optns: ["LDU"], country: 0, state: 0 },
          order_id: "",
          order_subtotal: "",
          order_currency: "",
          product_id: [],
          product_name: [],
          product_category: [],
          product_unit_price: [],
          product_quantity: [],
          content_category: "",
          content_ids: "",
          content_name: "",
          content_type: "",
          contents: null,
          currency: "",
          num_items: "",
          predicted_ltv: "",
          search_string: "",
          status: "",
          value: "",
          movieref: "",
          availability: "",
          body_style: "",
          checkin_date: "",
          checkout_date: "",
          city: "",
          country: "",
          departing_arrival_date: "",
          departing_departure_date: "",
          destination_airport: "",
          destination_ids: "",
          drivetrain: "",
          exterior_color: "",
          fuel_type: "",
          hotel_score: "",
          lease_end_date: "",
          lease_start_date: "",
          listing_type: "",
          make: "",
          model: "",
          neighborhood: "",
          num_adults: "",
          num_children: "",
          room_types: "",
          num_of_nights: "",
          language_code: "",
          site_section: "",
          num_infants: "",
          origin_airport: "",
          postal_code: "",
          preferred_baths_range: "",
          preferred_beds_range: "",
          preferred_num_stops: "",
          preferred_price_range: "",
          price: "",
          property_type: "",
          region: "",
          returning_arrival_date: "",
          returning_departure_date: "",
          state_of_vehicle: "",
          transmission: "",
          travel_class: "",
          travel_end: "",
          travel_start: "",
          user_score: "",
          year: "",
          am: {},
          custom: {},
          event_queue: [],
        };
        for (c = 0; c < u.extend.length; c++) {
          try {
            d = u.extend[c](a, b);
            if (d == false) return;
          } catch (e) {}
        }
        utag.DB("send:545:EXTENSIONS");
        utag.DB(b);
        for (d in utag.loader.GV(u.map)) {
          if (b[d] !== undefined && b[d] !== "") {
            e = u.map[d].split(",");
            for (f = 0; f < e.length; f++) {
              if (u.data.hasOwnProperty(e[f]) || e[f].indexOf(".") > -1) {
                u.map_func(e[f].split("."), u.data, b[d]);
              } else {
                u.data.custom[e[f]] = b[d];
              }
            }
          } else {
            h = d.split(":");
            if (h.length === 2 && b[h[0]] === h[1]) {
              if (u.map[d]) {
                u.data.event_queue = u.data.event_queue.concat(
                  u.map[d].split(",")
                );
              }
            } else if (h.length === 3 && b[h[0]] === h[1]) {
              if (u.map[d]) {
                u.data[h[2]] = u.map[d];
              }
            }
          }
        }
        utag.DB("send:545:MAPPINGS");
        utag.DB(u.data);
        if (!u.data.pixel_id) {
          utag.DB(
            u.id +
              ": Tag not fired: Required attribute 'pixel_id' not populated."
          );
          return;
        }
        if (u.data.consent === "grant" || u.data.consent === "revoke") {
          fbq("consent", u.data.consent);
        }
        if (
          u.data.disablePushState === "true" ||
          u.data.disablePushState === true
        ) {
          fbq.disablePushState = true;
        }
        if (
          u.data.generate_event_id === "true" ||
          u.data.generate_event_id === true
        ) {
          lookup_id = b.tealium_random;
          if (typeof lookup_id !== "undefined") {
            utag.globals[lookup_id] = window.utag.globals[lookup_id] || {};
          } else {
            lookup_id = Math.random().toFixed(16).substring(2);
            utag.DB(
              "send:545: The tealium_random variable was not defined. Any Facebook event IDs generated will not be collected by Tealium Collect. Please ensure you are using the latest version of utag.js to generate a tealium_random value."
            );
          }
        }
        if (u.data.track_single === true || u.data.track_single === "true") {
          base_tracking_type += "Single";
        }
        u.data.order_currency = u.data.order_currency || b._ccurrency || "";
        u.data.order_id = u.data.order_id || b._corder || "";
        u.data.order_subtotal = u.data.order_subtotal || b._csubtotal || "";
        if (u.data.product_category.length === 0 && b._ccat !== undefined) {
          u.data.product_category = b._ccat.slice(0);
        }
        if (u.data.product_id.length === 0 && b._cprod !== undefined) {
          u.data.product_id = b._cprod.slice(0);
        }
        if (u.data.product_name.length === 0 && b._cprodname !== undefined) {
          u.data.product_name = b._cprodname.slice(0);
        }
        if (u.data.product_quantity.length === 0 && b._cquan !== undefined) {
          u.data.product_quantity = b._cquan.slice(0);
        }
        if (u.data.product_unit_price.length === 0 && b._cprice !== undefined) {
          u.data.product_unit_price = b._cprice.slice(0);
        }
        if (
          a === "view" &&
          (u.data.auto_page_view === true || u.data.auto_page_view === "true")
        ) {
          u.data.event_queue.push("PageView");
        }
        for (i = 0; i < u.data.event_queue.length; i++) {
          if (u.data.event_queue[i] === "Purchase") {
            has_purchase = true;
          }
        }
        if (u.data.order_id && !has_purchase) {
          u.data.event_queue.push("Purchase");
        }
        for (i = 0; i < u.data.event_queue.length; i++) {
          event_name = u.data.event_queue[i].replace(/ /g, "_");
          event_tracking_type = base_tracking_type;
          event_data = {};
          if (
            u.data.generate_event_id === "true" ||
            u.data.generate_event_id === true
          ) {
            if (b.tealium_random) {
              event_id = u.generateEventID(event_name, b, lookup_id);
              if (window.utag.globals[b.tealium_random]) {
                window.utag.globals[b.tealium_random][
                  "fb_event_id_" + event_name
                ] = event_id;
                window.utag.globals[b.tealium_random][
                  "fb_event_id_" + event_name + "_" + id
                ] = event_id;
              }
            } else {
              utag.DB(
                "send:545: Event ID Generation is enabled, but the tealium_random value was not found in the data layer. No event ID was generated for " +
                  event_name
              );
            }
            window.utag.globals[lookup_id]["fb_event_id_" + event_name] =
              event_id;
          }
          if (typeof standard_events_lookup[event_name] === "undefined") {
            event_tracking_type += "Custom";
          } else {
            for (
              j = 0;
              j < standard_events_lookup[event_name].fb_params.length;
              j++
            ) {
              fb_param = standard_events_lookup[event_name].fb_params[j];
              event_data[fb_param] =
                standard_params_lookup[fb_param](event_name);
            }
          }
          for (key in u.data.custom) {
            if (u.data.custom.hasOwnProperty(key)) {
              event_data[key] = u.data.custom[key];
            }
          }
          if (typeof u.data[event_name] === "object") {
            for (key in u.data[event_name]) {
              if (u.data[event_name].hasOwnProperty(key)) {
                if (
                  key === "value" &&
                  utag.ut.typeOf(u.data[event_name][key]) === "array" &&
                  u.data[event_name][key].length > 0
                ) {
                  event_data[key] = parseFloat(u.data[event_name][key][0]);
                } else {
                  event_data[key] = u.data[event_name][key];
                }
              }
            }
          }
          if (event_name === "Purchase") {
            for (key in standard_events_lookup[event_name].req_params) {
              if (
                standard_events_lookup[event_name].req_params.hasOwnProperty(
                  key
                )
              ) {
                if (
                  !event_data[
                    standard_events_lookup[event_name].req_params[key]
                  ]
                ) {
                  utag.DB(
                    "send:545:" +
                      event_name +
                      " tracking: The required parameter '" +
                      standard_events_lookup[event_name].req_params[key] +
                      "' is empty. "
                  );
                  continue;
                }
              }
            }
          }
          tracking_queue.push(
            u.clearEmptyKeys({
              event_tracking_type: event_tracking_type,
              event_name: event_name,
              event_data: event_data,
              event_id: event_id,
            })
          );
        }
        pixel_list = u.data.pixel_id.split(/\s*,\s*/);
        for (k = 0; k < pixel_list.length; k++) {
          if (u.data.autoConfig === "false" || u.data.autoConfig === false) {
            fbq("set", "autoConfig", false, pixel_list[k]);
          }
          if (a === "view") {
            if (!u.pixels_initialized[pixel_list[k]]) {
              u.processing_options();
              if (
                u.data.advanced_matching === "true" ||
                u.data.advanced_matching === true
              ) {
                u.data.am = u.processAMData(u.data.am);
                if (u.isEmptyObject(u.data.am)) {
                  utag.DB(
                    "Advanced Matching is enabled, but no Advanced Matching data was mapped."
                  );
                }
                fbq("init", pixel_list[k], u.data.am);
              } else {
                fbq("init", pixel_list[k]);
              }
              u.pixels_initialized[pixel_list[k]] = true;
            } else if (
              u.data.advanced_matching === "true" ||
              u.data.advanced_matching === true
            ) {
              fbq("init", pixel_list[k], u.processAMData(u.data.am));
            }
          }
          if (u.data.track_single === true || u.data.track_single === "true") {
            for (l = 0; l < tracking_queue.length; l++) {
              if (tracking_queue[l].event_id) {
                fbq(
                  tracking_queue[l].event_tracking_type,
                  pixel_list[k],
                  tracking_queue[l].event_name,
                  u.clearEmptyKeys(tracking_queue[l].event_data),
                  { eventID: tracking_queue[l].event_id }
                );
              } else {
                fbq(
                  tracking_queue[l].event_tracking_type,
                  pixel_list[k],
                  tracking_queue[l].event_name,
                  u.clearEmptyKeys(tracking_queue[l].event_data)
                );
              }
            }
          }
        }
        if (u.data.track_single !== true && u.data.track_single !== "true") {
          for (l = 0; l < tracking_queue.length; l++) {
            if (tracking_queue[l].event_id) {
              fbq(
                tracking_queue[l].event_tracking_type,
                tracking_queue[l].event_name,
                u.clearEmptyKeys(tracking_queue[l].event_data),
                { eventID: tracking_queue[l].event_id }
              );
            } else {
              fbq(
                tracking_queue[l].event_tracking_type,
                tracking_queue[l].event_name,
                u.clearEmptyKeys(tracking_queue[l].event_data)
              );
            }
          }
        }
        if (!u.scriptrequested) {
          u.scriptrequested = true;
          u.loader({
            type: "script",
            src: u.data.base_url,
            cb: null,
            loc: "script",
            id: "utag_545",
            attrs: {},
          });
        }
        utag.DB("send:545:COMPLETE");
      }
    };
    utag.o[loader].loader.LOAD(id);
  })("545", "mbs.main");
} catch (error) {
  utag.DB(error);
}

//tealium universal tag - utag.369 ut4.0.202207210624, Copyright 2022 Tealium.com Inc. All Rights Reserved.
try {
  (function (id, loader) {
    var u = { id: id };
    utag.o[loader].sender[id] = u;
    if (utag.ut === undefined) {
      utag.ut = {};
    }
    var match = /ut\d\.(\d*)\..*/.exec(utag.cfg.v);
    if (utag.ut.loader === undefined || !match || parseInt(match[1]) < 41) {
      u.loader = function (o, a, b, c, l, m) {
        utag.DB(o);
        a = document;
        if (o.type == "iframe") {
          m = a.getElementById(o.id);
          if (m && m.tagName == "IFRAME") {
            b = m;
          } else {
            b = a.createElement("iframe");
          }
          o.attrs = o.attrs || {};
          utag.ut.merge(
            o.attrs,
            { height: "1", width: "1", style: "display:none" },
            0
          );
        } else if (o.type == "img") {
          utag.DB("Attach img: " + o.src);
          b = new Image();
        } else {
          b = a.createElement("script");
          b.language = "javascript";
          b.type = "text/javascript";
          b.async = 1;
          b.charset = "utf-8";
        }
        if (o.id) {
          b.id = o.id;
        }
        for (l in utag.loader.GV(o.attrs)) {
          b.setAttribute(l, o.attrs[l]);
        }
        b.setAttribute("src", o.src);
        if (typeof o.cb == "function") {
          if (b.addEventListener) {
            b.addEventListener(
              "load",
              function () {
                o.cb();
              },
              false
            );
          } else {
            b.onreadystatechange = function () {
              if (
                this.readyState == "complete" ||
                this.readyState == "loaded"
              ) {
                this.onreadystatechange = null;
                o.cb();
              }
            };
          }
        }
        if (o.type != "img" && !m) {
          l = o.loc || "head";
          c = a.getElementsByTagName(l)[0];
          if (c) {
            utag.DB("Attach to " + l + ": " + o.src);
            if (l == "script") {
              c.parentNode.insertBefore(b, c);
            } else {
              c.appendChild(b);
            }
          }
        }
      };
    } else {
      u.loader = utag.ut.loader;
    }
    if (utag.ut.typeOf === undefined) {
      u.typeOf = function (e) {
        return {}.toString
          .call(e)
          .match(/\s([a-zA-Z]+)/)[1]
          .toLowerCase();
      };
    } else {
      u.typeOf = utag.ut.typeOf;
    }
    u.ev = { view: 1, link: 1 };
    u.initialized = false;
    u.scriptrequested = true;
    u.queue = [];
    u.event_lookup = {
      AddToCart: {
        obj: "cartadd",
        map: [
          "value",
          "currency",
          "productId",
          "quantity",
          "itemPrice",
          "size",
          "priceClass",
        ],
      },
      RemoveFromCart: {
        obj: "cartremove",
        map: ["value", "currency", "productId", "quantity", "size"],
      },
      Purchase: {
        obj: "purchase",
        map: [
          "value",
          "currency",
          "productId",
          "quantity",
          "itemPrice",
          "size",
          "priceClass",
        ],
      },
      VideoWatch: {
        obj: "videowatch",
        map: ["itemId", "autoplay", "progress", "progressPercent"],
      },
      Search: { obj: "search", map: ["keywords"] },
      EmailSignup: { obj: "email", map: ["hashedEmail"] },
    };
    u.toFixed = function (number, n) {
      number = Number(number);
      var p = Math.pow(10, n);
      return parseFloat((Math.round(number * p) / p).toFixed(n));
    };
    u.merge = function (name, source, target) {
      for (var i = 0, slen = source.length; i < slen; i++) {
        var obj = target[i] || {};
        if (!obj[name]) {
          obj[name] = source[i];
          target[i] = obj;
        }
      }
      return true;
    };
    u.std_params = {
      value: function (g, event) {
        var value = g.properties.value;
        if (!value) {
          value = u.data.ecom.order_subtotal || u.data.ecom.order_total;
          if (event === "Purchase") {
            g.properties.value = value;
          }
        }
        if (value.length) {
          g.properties.value = u.toFixed(u.val(value), 2);
        }
        return true;
      },
      currency: function (g) {
        var currency = (g.properties.currency = u.data.ecom.order_currency);
        if (currency) {
          g.properties.currency = currency;
        }
        return true;
      },
      productId: function (g, event) {
        var pid = g.properties.productId || u.data.ecom.product_id;
        if (pid.length) {
          if (event === "Purchase") {
            var cart = (g.properties.cart = g.properties.cart || []);
            u.merge("productId", pid, cart);
          } else if (event === "AddToCart") {
            g.properties.productId = u.val(pid);
            var cart = (g.properties.cart = g.properties.cart || []);
            u.merge("productId", pid, cart);
          } else {
            g.properties.productId = u.val(pid);
          }
        }
        return true;
      },
      quantity: function (g, event) {
        var qty = g.properties.quantity || u.data.ecom.product_quantity;
        if (qty.length) {
          for (var i = 0, qlen = qty.length; i < qlen; i++) {
            qty[i] = parseInt(qty[i], 10);
          }
          if (event === "Purchase") {
            var cart = (g.properties.cart = g.properties.cart || []);
            u.merge("quantity", qty, cart);
          } else if (event === "AddToCart") {
            g.properties.quantity = u.val(qty);
            var cart = (g.properties.cart = g.properties.cart || []);
            u.merge("quantity", qty, cart);
          } else {
            g.properties.quantity = u.val(qty);
          }
        }
        return true;
      },
      itemPrice: function (g, event) {
        var price = g.properties.itemPrice || u.data.ecom.product_unit_price;
        if (price.length) {
          for (var i = 0, plen = price.length; i < plen; i++) {
            price[i] = u.toFixed(price[i], 2);
          }
          if (event === "Purchase" || event === "AddToCart") {
            var cart = (g.properties.cart = g.properties.cart || []);
            u.merge("itemPrice", price, cart);
          }
        }
        return true;
      },
      size: function (g, event) {
        var size = g.properties.size || u.data.size;
        if (size) {
          if (event === "Purchase") {
            var cart = (g.properties.cart = g.properties.cart || []);
            u.merge("size", size, cart);
          } else {
            g.properties.size = u.val(size);
          }
        }
        return true;
      },
      itemId: function (g) {
        var itemId = g.properties.itemId || u.data.itemId;
        if (itemId) {
          g.properties.itemId = itemId;
        }
        return true;
      },
      autoplay: function (g) {
        var autoplay = g.properties.autoplay || u.data.autoplay;
        if (autoplay) {
          g.properties.autoplay = autoplay;
        }
        return true;
      },
      progress: function (g) {
        var progress = g.properties.progress || u.data.progress;
        if (progress) {
          g.properties.progress = progress;
        }
        return true;
      },
      progressPercent: function (g) {
        var progressPercent =
          g.properties.progressPercent || u.data.progressPercent;
        if (progressPercent) {
          g.properties.progressPercent = progressPercent;
        }
        return true;
      },
      keywords: function (g) {
        var keywords = g.properties.keywords || u.data.keywords;
        if (keywords) {
          g.properties.keywords = keywords;
        }
        return true;
      },
      hashedEmail: function (g) {
        var hashedEmail = g.properties.hashedEmail || u.data.hashedEmail;
        if (hashedEmail) {
          g.properties.hashedEmail = hashedEmail;
        }
        return true;
      },
      priceClass: function (g, event) {
        var priceClass = g.properties.priceClass || u.data.priceClass;
        if (priceClass) {
          if (event === "Purchase" || event === "AddToCart") {
            var cart = (g.properties.cart = g.properties.cart || []);
            u.merge("priceClass", priceClass, cart);
          }
        }
        return true;
      },
    };
    u.map_func = function (arr, obj, item) {
      var i = arr.shift();
      obj[i] = obj[i] || {};
      if (arr.length > 0) {
        u.map_func(arr, obj[i], item);
      } else {
        obj[i] = item;
      }
      return true;
    };
    u.val = function (value) {
      return u.typeOf(value) === "array" ? value[0] : value;
    };
    u.remove_empty = function (a) {
      var b, t;
      for (b in utag.loader.GV(a)) {
        t = u.typeOf(a[b]);
        if (t === "object") {
          u.remove_empty(a[b]);
          if (utag.ut.isEmptyObject(a[b])) {
            try {
              delete a[b];
            } catch (e) {
              a[b] = undefined;
            }
          }
        } else if (
          !(a[b] === 0 || a[b] === false
            ? !0
            : t === "array" && a[b].length === 0
            ? !1
            : !!a[b])
        ) {
          try {
            delete a[b];
          } catch (e) {
            a[b] = undefined;
          }
        }
      }
      return a;
    };
    u.calc_items = function (quan) {
      var q,
        i = 0;
      for (q = 0; q < quan.length; q++) {
        i += parseInt(quan[q]);
      }
      return i;
    };
    u.encode = function (obj) {
      function escape(val) {
        var type = u.typeOf(val);
        if (/string/.test(type)) {
          return window.encodeURIComponent(val);
        } else if (/object|array/.test(type)) {
          return check(val);
        }
        return val;
      }
      function check(obj) {
        var type = u.typeOf(obj),
          key;
        if (/object/.test(type)) {
          for (key in obj) {
            if (obj.hasOwnProperty(key)) {
              obj[key] = escape(obj[key]);
            }
          }
        } else if (/array/.test(type)) {
          for (var i = 0, olen = obj.length; i < olen; i++) {
            obj[i] = escape(obj[i]);
          }
        } else {
          obj = escape(obj);
        }
        return obj;
      }
      return check(obj);
    };
    u.map = {
      "tealium_event:hotel_booking_search_button": "Select Dates",
      "tealium_event:addToCart": "AddToCart",
      "tealium_event:confirmOrder": "Purchase",
      "tealium_event:hotel_booking_select_rate": "AddToCart",
      num_of_adults: "Select Dates.properties.numAdults",
      check_in:
        "Select Dates.properties.startDate,cartadd.properties.checkIn,purchase.properties.checkIn",
      check_out:
        "Select Dates.properties.endDate,cartadd.properties.checkOut,purchase.properties.checkOut",
      num_of_rooms: "Select Dates.properties.quantity",
      currency: "order_currency",
      foreign_currency: "order_currency",
      product_id: "product_id",
      num_of_nights: "product_quantity",
      avg_room_rate: "order_subtotal",
      product_unit_price: "product_unit_price",
      reservation_order_id: "order_id,purchase.properties.uniqueTransactionId",
      reservation_order_subtotal: "order_subtotal",
      rate_code: "cartadd.properties.rateCode,purchase.properties.rateCode",
      num_of_children:
        "cartadd.properties.numOfChildren,purchase.properties.numOfChildren",
      entertainment_order_total_with_fees: "order_subtotal",
      entertainment_order_total_without_fees: "order_subtotal",
      entertainment_price_class: "priceClass",
      entertainment_ticket_quantity: "product_quantity",
      entertainment_order_id:
        "order_id,purchase.properties.uniqueTransactionId",
    };
    u.extend = [
      function (a, b) {
        try {
          if (
            b["tealium_event"] == "hotel_booking_select_rate" ||
            b["tealium_event"] == "hotel_booking_confirmation" ||
            b["tealium_event"] == "addToCart" ||
            b["tealium_event"] == "confirmOrder" ||
            b["tealium_event"].toString().indexOf("cart") > -1
          ) {
            if (b.tealium_event == "hotel_booking_select_rate") {
              if (window.mapSku) {
                b.sku = window.mapSku(
                  b.room_type.toString(),
                  window.mapLang(b.language_code),
                  null
                ).sku;
                b.product_id = [b.sku];
              }
              b.avg_room_rate = (
                b.foreign_avg_room_rate && b.foreign_avg_room_rate.length
                  ? b.foreign_avg_room_rate
                  : b.avg_room_rate
              )[0];
              b.product_unit_price = [
                (b.avg_room_rate / b.num_of_nights).toFixed(2),
              ];
              b.product_quantity = [b.num_of_nights];
              b.num_of_children = b.num_of_children.toString();
            }
            if (b.tealium_event == "hotel_booking_confirmation") {
              b.product_id = [
                window.mapSku(
                  b.room_type.toString(),
                  window.mapLang(b.language_code),
                  null
                ).sku,
              ];
              b.product_quantity = b.num_of_nights;
            }
            if (b.tealium_event == "addToCart" || b.tealium_event == "cart") {
              if (
                typeof b.entertainment_product_code !== "undefined" &&
                b.entertainment_product_code !== ""
              ) {
                var ent_prod_code = b.entertainment_product_code;
              } else {
                var ent_prod_code = b.entertainment_product_id[0];
              }
              if (ent_prod_code.startsWith("asm", 0)) {
                if (
                  !isNaN([ent_prod_code.substr([ent_prod_code.length - 4])])
                ) {
                  b.product_id = [
                    ent_prod_code.substring(0, [ent_prod_code.length - 4]),
                  ];
                } else {
                  b.product_id = [ent_prod_code];
                }
              } else {
                b.product_id = [ent_prod_code];
              }
              b.product_quantity = b.entertainment_ticket_quantity;
              b.product_unit_price =
                b.entertainment_ticket_unit_price_without_fees;
              b.currency = "SGD";
              if (
                typeof b.entertainment_order_total_with_fees !== "undefined" &&
                b.entertainment_order_total_with_fees !== ""
              ) {
                b.entertainment_order_total_with_fees =
                  b.entertainment_order_total_with_fees.toString();
              }
              b.entertainment_order_total_without_fees =
                b.entertainment_order_total_without_fees.toString();
              sessionStorage.setItem(
                "productIdData",
                JSON.stringify(b.product_id)
              );
            }
            if (b.tealium_event == "confirmOrder") {
              b.product_id = [];
              for (var i = 0; i < b.entertainment_product_id.length; i++) {
                if (
                  typeof b.entertainment_product_code !== "undefined" &&
                  b.entertainment_product_code !== ""
                ) {
                  var ent_prod_code = b.entertainment_product_code;
                } else {
                  var ent_prod_code = b.entertainment_product_id[0];
                }
                if (ent_prod_code.startsWith("asm")) {
                  if (!isNaN(ent_prod_code.substr(ent_prod_code.length - 4))) {
                    b.product_id[i] = ent_prod_code.substring(
                      0,
                      ent_prod_code.length - 4
                    );
                  } else {
                    b.product_id[i] = ent_prod_code;
                  }
                } else {
                  b.product_id[i] = ent_prod_code;
                }
              }
              b.product_quantity = b.entertainment_ticket_quantity;
              b.product_unit_price =
                b.entertainment_ticket_unit_price_without_fees;
              b.currency = "SGD";
              if (
                typeof b.entertainment_order_total_with_fees !== "undefined" &&
                b.entertainment_order_total_with_fees !== ""
              ) {
                b.entertainment_order_total_with_fees =
                  b.entertainment_order_total_with_fees.toString();
              }
              b.entertainment_order_total_without_fees =
                b.entertainment_order_total_without_fees.toString();
              if (
                !(
                  typeof window.DY != "undefined" &&
                  typeof window.DY.API == "function"
                )
              ) {
                console.log("DY API not ready, refiring");
                setTimeout(function () {
                  utag.link({ b }, null, [369]);
                }, 3000);
                return false;
              }
            }
          }
        } catch (e) {
          utag.DB(e);
        }
      },
    ];
    u.loader_cb = function (a) {
      utag.DB("send:369:CALLBACK");
      u.initialized = true;
      var g = {},
        i,
        j,
        _event;
      if (
        u.data.evt_list.toString().indexOf("Purchase") === -1 &&
        u.data.ecom.order_id
      ) {
        u.data.evt_list.push("Purchase");
      }
      for (i = 0; i < u.data.evt_list.length; i++) {
        _event = u.data.evt_list[i];
        f = u.event_lookup[_event];
        c = f ? f.map : [];
        f = f ? f.obj : _event;
        g = u.data[f] = u.data[f] || {};
        g.properties = g.properties || {};
        try {
          for (var prop in g.properties.cart) {
            if (Object.prototype.hasOwnProperty.call(g.properties.cart, prop)) {
              this.merge(prop, g.properties.cart[prop], g.properties.cart);
              delete g.properties.cart[prop];
            }
          }
        } catch (e) {}
        for (j = 0; j < c.length; j++) {
          u.std_params[c[j]](g, _event);
        }
        if (_event === "AddToCart") {
          g.name = "Add to Cart";
          g.properties.dyType = g.properties.dyType || "add-to-cart-v1";
        } else if (_event === "RemoveFromCart") {
          g.name = "Remove from Cart";
          g.properties.dyType = g.properties.dyType || "remove-from-cart-v1";
        } else if (_event === "Purchase") {
          g.name = "Purchase";
          g.properties.dyType = g.properties.dyType || "purchase-v1";
        } else if (_event === "VideoWatch") {
          g.name = "Video Watch";
          g.properties.dyType = g.properties.dyType || "video-watch-v1";
        } else if (_event === "Search") {
          g.name = "Keyword Search";
          g.properties.dyType = g.properties.dyType || "keyword-search-v1";
        } else if (_event === "EmailSignup") {
          g.name = "Newsletter Subscription";
          g.properties.dyType =
            g.properties.dyType || "newsletter-subscription-v1";
        } else if (_event && !u.event_lookup[_event]) {
          g = u.data[_event];
        }
        if (_event) {
          g = u.remove_empty(g);
          g.name = _event;
          window.DY.API("event", g);
        }
      }
      utag.DB("send:369:CALLBACK:COMPLETE");
    };
    u.callBack = function () {
      var data = {};
      while ((data = u.queue.shift())) {
        u.data = data.data;
        u.loader_cb(data.a);
      }
    };
    u.send = function (a, b) {
      if (u.ev[a] || u.ev.all !== undefined) {
        utag.DB("send:369");
        utag.DB(b);
        var c,
          d,
          e,
          f,
          g,
          h,
          evt = [];
        u.data = {
          base_url: "//cdn.dynamicyield.com/api/##utag_scssec##",
          scsec: "9876271",
          evt_list: [],
          videowatch: {},
          search: {},
          email: {},
          product_id: [],
          product_name: [],
          product_quantity: [],
          product_unit_price: [],
          product_size: [],
          ecom: {},
        };
        for (c = 0; c < u.extend.length; c++) {
          try {
            d = u.extend[c](a, b);
            if (d == false) return;
          } catch (e) {}
        }
        utag.DB("send:369:EXTENSIONS");
        utag.DB(b);
        c = [];
        for (d in utag.loader.GV(u.map)) {
          if (b[d] !== undefined && b[d] !== "") {
            e = u.map[d].split(",");
            for (f = 0; f < e.length; f++) {
              u.map_func(e[f].split("."), u.data, b[d]);
            }
          } else {
            h = d.split(":");
            if (h.length === 2 && b[h[0]] === h[1]) {
              if (u.map[d]) {
                evt = evt.concat(u.map[d].split(","));
              }
            }
          }
        }
        utag.DB("send:369:MAPPINGS");
        utag.DB(u.data);
        g = u.data.ecom;
        g.order_id = u.data.order_id || b._corder || "";
        g.order_subtotal = u.data.order_subtotal || b._csubtotal || "";
        g.order_currency = u.data.order_currency || b._ccurrency || "";
        if (u.data.product_id.length === 0 && b._cprod !== undefined) {
          g.product_id = b._cprod.slice(0);
        } else {
          g.product_id = u.data.product_id;
        }
        if (u.data.product_name.length === 0 && b._cprodname !== undefined) {
          g.product_name = b._cprodname.slice(0);
        } else {
          g.product_name = u.data.product_name;
        }
        if (u.data.product_quantity.length === 0 && b._cquan !== undefined) {
          g.product_quantity = b._cquan.slice(0);
        } else {
          g.product_quantity = u.data.product_quantity;
        }
        if (u.data.product_unit_price.length === 0 && b._cprice !== undefined) {
          g.product_unit_price = b._cprice.slice(0);
        } else {
          g.product_unit_price = u.data.product_unit_price;
        }
        if (u.data.evt_list && u.typeOf(u.data.evt_list) !== "array") {
          u.data.evt_list = u.data.evt_list.split(/\s*,\s*/);
        }
        u.data.evt_list = u.data.evt_list.concat(evt);
        if (!u.data.scsec) {
          utag.DB(u.id + ": Tag not fired: Required attribute not populated");
          return;
        }
        u.data.base_url = u.data.base_url.replace(
          "##utag_scssec##",
          u.data.scsec
        );
        if (!u.data.scsec) {
          return true;
        }
        window.DY = window.DY || {
          scsec: u.data.scsec,
          API: function () {
            (window.DY.API.actions = window.DY.API.actions || []).push(
              arguments
            );
          },
        };
        if (a === "view") {
          if (u.data.context && u.data.context.type) {
            var context = u.data.context,
              contextdata = {};
            if (/^homepage$/i.test(context.type)) {
              contextdata.type = "HOMEPAGE";
            } else if (/^category$/i.test(context.type)) {
              contextdata.type = "CATEGORY";
              contextdata.data = context.data;
            } else if (/^article$/i.test(context.type)) {
              contextdata.type = "POST";
              contextdata.data = context.data;
            } else if (/^product$/i.test(context.type)) {
              contextdata.type = "PRODUCT";
              contextdata.data = context.data;
            } else if (/^cart$/i.test(context.type)) {
              contextdata.type = "CART";
              contextdata.data = context.data;
            }
            if (contextdata.type) {
              window.DY.recommendationContext = contextdata;
            }
          }
        }
        if (u.initialized) {
          u.loader_cb(a);
        } else {
          if (typeof window.DY !== "undefined") {
            u.loader_cb(a);
          }
        }
        utag.DB("send:369:COMPLETE");
      }
    };
    utag.o[loader].loader.LOAD(id);
  })("369", "mbs.main");
} catch (error) {
  utag.DB(error);
}

//tealium universal tag - utag.55 ut4.0.202207210624, Copyright 2022 Tealium.com Inc. All Rights Reserved.
window.GoogleAnalyticsObject = "" || "ga";
window[window.GoogleAnalyticsObject] =
  window[window.GoogleAnalyticsObject] ||
  function () {
    (window[window.GoogleAnalyticsObject].q =
      window[window.GoogleAnalyticsObject].q || []).push(arguments);
  };
try {
  (function (id, loader) {
    var u = {};
    utag.o[loader].sender[id] = u;
    if (utag.ut === undefined) {
      utag.ut = {};
    }
    if (utag.ut.loader === undefined) {
      u.loader = function (o) {
        var a, b, c, l;
        a = document;
        if (o.type === "iframe") {
          b = a.createElement("iframe");
          b.setAttribute("height", "1");
          b.setAttribute("width", "1");
          b.setAttribute("style", "display:none");
          b.setAttribute("src", o.src);
        } else if (o.type === "img") {
          utag.DB("Attach img: " + o.src);
          b = new Image();
          b.src = o.src;
          return;
        } else {
          b = a.createElement("script");
          b.language = "javascript";
          b.type = "text/javascript";
          b.async = 1;
          b.src = o.src;
        }
        if (o.id) {
          b.id = o.id;
        }
        if (typeof o.cb === "function") {
          b.hFlag = 0;
          b.onreadystatechange = function () {
            if (
              (this.readyState === "complete" ||
                this.readyState === "loaded") &&
              !b.hFlag
            ) {
              b.hFlag = 1;
              o.cb();
            }
          };
          b.onload = function () {
            if (!b.hFlag) {
              b.hFlag = 1;
              o.cb();
            }
          };
        }
        l = o.loc || "head";
        c = a.getElementsByTagName(l)[0];
        if (c) {
          utag.DB("Attach to " + l + ": " + o.src);
          if (l === "script") {
            c.parentNode.insertBefore(b, c);
          } else {
            c.appendChild(b);
          }
        }
      };
    } else {
      u.loader = utag.ut.loader;
    }
    if (utag.ut.typeOf === undefined) {
      u.typeOf = function (e) {
        return {}.toString
          .call(e)
          .match(/\s([a-zA-Z]+)/)[1]
          .toLowerCase();
      };
    } else {
      u.typeOf = utag.ut.typeOf;
    }
    u.ev = { view: 1, link: 1 };
    u.o = window[window.GoogleAnalyticsObject];
    u.required = {};
    u.created = false;
    u.all = function (e, o, v, a, b, c) {
      for (var i = 0; i < u.data.account.length; i++) {
        var t = u.data.name[i] ? u.data.name[i] + "." : "";
        if (o === "event") {
          u.o(t + e, o, v, a, b, c);
        } else if (v) {
          u.o(t + e, o, v);
        } else {
          u.o(t + e, o);
        }
      }
    };
    u.setHitData = function (g, a, b, f) {
      var obj = u.data[a];
      for (var d in utag.loader.GV(obj)) {
        if (
          b &&
          d.indexOf("enh_" + b + "-") !== 0 &&
          d.indexOf("enh_all-") !== 0
        ) {
          continue;
        }
        var idx = d.split("-")[1],
          val = obj[d];
        if (u.typeOf(val) !== "array") {
          g[idx] = val;
        } else {
          g[idx] = val[f];
        }
      }
    };
    u.addEvent = function (v) {
      if (
        typeof v.eventCategory == "undefined" ||
        typeof v.eventAction == "undefined"
      ) {
        utag.DB("GA event Category or Action is not set");
        return;
      }
      if (isNaN(parseInt(v.eventValue))) {
        utag.DB("GA event Value is not a number");
        v.eventValue = null;
      } else {
        v.eventValue = parseInt(v.eventValue) || null;
      }
      u.data.ga_events.push(v);
    };
    u.addproduct = function (event_type, len, imp) {
      var g = {},
        i,
        j,
        k = [];
      if (imp === true) {
        k = u.data.enh_impression_id.length
          ? u.data.enh_impression_id
          : u.data.enh_impression_name;
        for (i = 0; i < k.length; i++) {
          g = {};
          g.id = u.data.enh_impression_id[i] ? u.data.enh_impression_id[i] : "";
          g.name = u.data.enh_impression_name[i]
            ? u.data.enh_impression_name[i]
            : "";
          g.brand = u.data.enh_impression_brand[i]
            ? u.data.enh_impression_brand[i]
            : "";
          g.variant = u.data.enh_impression_variant[i]
            ? u.data.enh_impression_variant[i]
            : "";
          g.category = u.data.enh_impression_category[i]
            ? u.data.enh_impression_category[i]
            : "";
          g.list = u.data.enh_impression_list[i]
            ? u.data.enh_impression_list[i]
            : "";
          g.price = u.data.enh_impression_price[i]
            ? u.data.enh_impression_price[i]
            : "";
          g.position = u.data.enh_impression_position[i]
            ? u.data.enh_impression_position[i]
            : "";
          u.setHitData(g, "enhecom_events", event_type, i);
          u.all("ec:addImpression", g);
        }
      } else {
        for (i = 0; i < len; i++) {
          g = {};
          if (u.data.autofill_params === "true") {
            for (j = 0; j < u.data.product_id.length; j++) {
              u.data.product_name[j] =
                u.data.product_name[j] || u.data.product_id[j];
              u.data.product_unit_price[j] =
                u.data.product_unit_price[j] || "1.00";
              u.data.product_quantity[j] = u.data.product_quantity[j] || "1";
            }
          }
          g.id = u.data.product_id[i];
          g.name = u.data.product_name[i] ? u.data.product_name[i] : "";
          g.brand = u.data.product_brand[i] ? u.data.product_brand[i] : "";
          g.variant = u.data.product_variant[i]
            ? u.data.product_variant[i]
            : "";
          g.category = u.data.product_category[i]
            ? u.data.product_category[i]
            : "";
          g.price = u.data.product_unit_price[i]
            ? u.data.product_unit_price[i]
            : "";
          g.quantity = u.data.product_quantity[i]
            ? u.data.product_quantity[i]
            : "";
          g.coupon = u.data.product_discount[i]
            ? u.data.product_discount[i]
            : "";
          g.position = u.data.product_position[i]
            ? u.data.product_position[i]
            : "";
          u.setHitData(g, "enhecom_events", event_type, i);
          u.all("ec:addProduct", g);
        }
      }
    };
    u.addpromo = function (action, event) {
      var f, g;
      for (f = 0; f < u.data.enh_promo_id.length; f++) {
        g = {};
        g.id = u.data.enh_promo_id[f];
        g.name = u.data.enh_promo_name[f]
          ? u.data.enh_promo_name[f]
          : u.data.enh_promo_id[f];
        g.creative = u.data.enh_promo_creative[f]
          ? u.data.enh_promo_creative[f]
          : "";
        g.position = u.data.enh_promo_position[f]
          ? u.data.enh_promo_position[f]
          : "";
        u.all("ec:addPromo", g);
      }
      if (action === "promo_click" && event === "link") {
        u.all("ec:setAction", u.data.enh_action);
        if (u.data.autosend_events === "true") {
          u.all(
            "send",
            "event",
            "Internal Promotions",
            "click",
            g.name ? g.name : g.id,
            { hitCallback: u.data.enh_event_cb }
          );
        }
      }
    };
    u.createTracker = function () {
      var i, tn, start;
      if (u.typeOf(u.data.account) === "string") {
        u.data.account = u.data.account.replace(/\s/g, "").split(",");
      }
      if (u.typeOf(u.data.name) === "string" && u.data.name !== "") {
        u.data.name = u.data.name.replace(/\s/g, "").split(",");
      }
      if (!u.data.name || u.data.name.length !== u.data.account.length) {
        start =
          u.data.name.length !== u.data.account.length ? u.data.name.length : 0;
        tn = utag.tagsettings.gua.trackernames;
        u.data.name = u.data.name || [];
        for (i = start; i < u.data.account.length; i++) {
          u.data.name.push("tealium_" + (i + tn));
        }
        utag.tagsettings.gua.trackernames = tn + i;
      }
    };
    u.initTracker = function () {
      var c, f;
      if (!u.created) {
        u.created = true;
        for (f = 0; f < u.data.account.length; f++) {
          c = {};
          if (u.data.siteSpeedSampleRate) {
            c.siteSpeedSampleRate = parseInt(u.data.siteSpeedSampleRate);
          }
          if (u.data.sampleRate) {
            c.sampleRate = parseFloat(u.data.sampleRate);
          }
          c.cookieDomain = u.data.cookieDomain;
          if (u.data.cookieExpires || u.data.cookieExpires === "0") {
            c.cookieExpires = parseInt(u.data.cookieExpires);
          }
          if (u.data.legacyCookieDomain) {
            c.legacyCookieDomain = u.data.legacyCookieDomain;
          }
          if (
            u.data.legacyHistoryImport === "false" ||
            u.data.legacyHistoryImport === false
          ) {
            c.legacyHistoryImport = u.data.legacyHistoryImport;
          }
          c.allowLinker = u.data.allowLinker;
          if (typeof u.data.name[f] !== "undefined" && u.data.name[f] !== "") {
            c.name = u.data.name[f];
          }
          if (u.data.clientId) {
            c.clientId = u.data.clientId;
          }
          u.o("create", u.data.account[f], c);
        }
        if (u.data.global_event_cb) {
          u.all("set", "hitCallback", u.data.global_event_cb);
        }
        if (u.data.optimizely === "true") {
          window.optimizely = window.optimizely || [];
          window.optimizely.push(["activateUniversalAnalytics"]);
        }
      }
    };
    u.setGlobalProperties = function (data, reset, custom_property) {
      var map = {
          uid: { name: "&uid", type: "exists", reset: true },
          page: { name: "page", type: "exists", reset: true },
          title: { name: "title", type: "exists", reset: true },
          location: { name: "location", type: "exists", reset: false },
          campaignId: { name: "campaignId", type: "exists", reset: true },
          campaignName: { name: "campaignName", type: "exists", reset: true },
          campaignSource: {
            name: "campaignSource",
            type: "exists",
            reset: true,
          },
          campaignMedium: {
            name: "campaignMedium",
            type: "exists",
            reset: true,
          },
          campaignContent: {
            name: "campaignContent",
            type: "exists",
            reset: true,
          },
          campaignKeyword: {
            name: "campaignKeyword",
            type: "exists",
            reset: true,
          },
          dataSource: { name: "dataSource", type: "exists", reset: true },
        },
        prop;
      if (custom_property && reset) {
        u.all("set", custom_property, "");
      }
      for (prop in utag.loader.GV(map)) {
        if (reset && map[prop].reset) {
          u.all("set", map[prop].name, "");
        } else {
          if (map[prop].type === "bool") {
            if (data[prop] == true || data[prop] === "true") {
              u.all("set", map[prop].name, true);
            }
          } else if (map[prop].type === "exists") {
            if (data[prop]) {
              u.all("set", map[prop].name, data[prop]);
            }
          }
        }
      }
    };
    window.utag.tagsettings = window.utag.tagsettings || {};
    window.utag.tagsettings.gua = window.utag.tagsettings.gua || {};
    window.utag.tagsettings.gua.trackernames =
      window.utag.tagsettings.gua.trackernames || 0;
    u.map = {
      reservation_room_num_nights: "dimension5,metric6",
      reservation_room_date_checkin: "dimension6,enh_all-dimension10",
      reservation_room_date_checkout: "dimension7,enh_all-dimension11",
      order_offer_name: "dimension14",
      avg_room_rate: "enh_all-dimension16,product_unit_price",
      language_code: "dimension2",
      order_promo_code: "dimension8",
      "cp.utag_main_v_id": "enh_all-dimension20,dimension22",
      booking_no: "metric3",
      event_name: "eventCategory",
      domain_pathname: "eventLabel",
      event_label: "eventLabel",
      reservation_order_id: "order_id",
      reservation_room_rate_code: "dimension8",
      reservation_room_category: "product_category",
      reservation_order_total: "revenue,metric2",
      reservation_order_tax_amount: "tax",
      reservation_order_affiliation: "affiliation",
      event_category: "eventCategory",
      event_action: "eventAction",
      metric4: "metric4",
      metric1: "metric1",
      dimension10: "dimension9",
      reservation_booking_method: "dimension3,enh_all-dimension13",
      reservation_room_rate_range: "dimension15,enh_all-dimension16",
      billing_info_views: "metric2",
      searches: "metric8",
      search_type: "dimension4",
      tealium_event: "enh_action",
      checkout_step: "enh_checkout_step",
      product_id: "product_id",
      product_name: "product_name",
      product_unit_price: "product_unit_price",
      dimension13: "dimension12",
      suites_added: "metric5",
      metric7: "metric7",
      metric9: "metric9",
      currency: "currency",
      upgrade_offer_title: "dimension17",
      upgrade_offer_accepted: "metric10",
      upgrade_offer_rate: "metric11",
      booking_confirmations: "metric3",
      ga_page_override: "page",
      reservation_order_subtotal: "revenue",
      num_of_nights: "product_quantity",
      check_in_date: "dimension13",
      check_out_date: "dimension14",
      hotel_order_id_individual: "order_id",
      hotel_offer_code: "product_name",
      product_category: "product_category",
      hotel_subtotal_individual: "revenue",
      hotel_tax_individual: "tax",
      room_type: "product_id",
    };
    u.extend = [
      function (a, b) {
        try {
          if (
            b["dom.url"].toString().indexOf("marinabaysands.com/booking") > -1
          ) {
            if (Array.isArray(b.hotel_order_id) && !b.hotel_order_id.length) {
              b.hotel_order_id = "";
            }
          }
        } catch (e) {
          utag.DB(e);
        }
      },
      function (a, b) {
        try {
          if (1) {
            if (b["ga_page_override"] == "abort") {
              return false;
            }
          }
        } catch (e) {
          utag.DB(e);
        }
      },
      function (a, b) {
        try {
          if (
            b["dom.url"]
              .toString()
              .indexOf("/sands-rewards-lifestyle/signup-successful.aspx") > -1
          ) {
            b["domain_pathname"] =
              "/sands-rewards-lifestyle/signup-successful.aspx";
            b["dom.pathname"] =
              "/sands-rewards-lifestyle/signup-successful.aspx";
            b["ga_page_override"] =
              "/sands-rewards-lifestyle/signup-successful.aspx";
            b["dom.url"] = "/sands-rewards-lifestyle/signup-successful.aspx";
          }
        } catch (e) {
          utag.DB(e);
        }
      },
    ];
    u.send = function (a, b) {
      if (u.ev[a] || u.ev.all !== undefined) {
        u.o = window[window.GoogleAnalyticsObject];
        b.ga_events = b.ga_events || [];
        var c, d, e, f, g, h, tn, prop;
        if (u.data && u.data.name) {
          tn = u.data.name;
        }
        u.data = {
          qsp_delim: "&",
          kvp_delim: "=",
          base_url: "",
          a: a,
          cookieDomain: "auto" || utag.loader.lh(),
          name: tn || "mbsga",
          account: "UA-108088693-1",
          anonymizeIp: "false",
          allowLinker: "true",
          crossDomainTrack: "",
          enhancedLinkAttribution: "true",
          enhancedecommerce: "true",
          displayfeatures: "true",
          screenView: "false",
          optimizely: "false",
          init_before_extensions: "false",
          autofill_params: "false",
          autosend_events: "true" || "true",
          clear_global_vars: "false",
          enh_action: "",
          enh_event_cb: "",
          enh_checkout_step: "",
          enh_checkout_option: "",
          product_action_list: "",
          product_variant: [],
          enh_impression_id: [],
          enh_impression_name: [],
          enh_impression_price: [],
          enh_impression_category: [],
          enh_impression_brand: [],
          enh_impression_variant: [],
          enh_impression_list: [],
          enh_impression_position: [],
          enh_promo_id: [],
          enh_promo_name: [],
          enh_promo_creative: [],
          enh_promo_position: [],
          id: "",
          product_id: [],
          product_name: [],
          product_brand: [],
          product_category: [],
          product_quantity: [],
          product_unit_price: [],
          product_discount: [],
          product_position: [],
          ga_events: [],
          sessionControl: "",
          set: {},
        };
        if (u.data.init_before_extensions === "true") {
          u.createTracker();
          u.initTracker();
        }
        for (c = 0; c < u.extend.length; c++) {
          try {
            d = u.extend[c](a, b);
            if (d == false) return;
          } catch (e) {}
        }
        c = [];
        for (d in utag.loader.GV(u.map)) {
          if (b[d] !== undefined && b[d] !== "") {
            e = u.map[d].split(",");
            for (f = 0; f < e.length; f++) {
              if (e[f].indexOf("a.") === 0) {
                u.data["a"][e[f].substring(2)] = b[d];
              } else if (e[f].indexOf("set.") === 0) {
                u.data.set[e[f].substring(4)] = b[d];
              } else {
                u.data[e[f]] = b[d];
              }
            }
          } else {
            h = d.split(":");
            if (h.length === 2 && b[h[0]] === h[1]) {
              if (u.map[d]) {
                u.data.enh_action = u.map[d];
              }
            }
          }
        }
        u.data.account = u.data.tid || u.data.account;
        if (
          u.typeOf(u.data.ga_events) === "array" &&
          u.typeOf(b.ga_events) === "array"
        ) {
          if (u.data.ga_events.length === 0 && b.ga_events.length > 0) {
            u.data.ga_events = b.ga_events;
          } else if (u.data.ga_events.length > 0 && b.ga_events.length > 0) {
            u.data.ga_events = u.data.ga_events.concat(b.ga_events);
          }
        }
        u.data.order_id = u.data.order_id || b._corder || "";
        u.data.order_total = u.data.order_total || b._ctotal || "";
        u.data.order_shipping = u.data.order_shipping || b._cship || "";
        u.data.order_tax = u.data.order_tax || b._ctax || "";
        u.data.order_store = u.data.order_store || b._cstore || "";
        u.data.order_currency = u.data.order_currency || b._ccurrency || "";
        u.data.order_coupon_code = u.data.order_coupon_code || b._cpromo || "";
        if (u.data.product_id.length === 0 && b._cprod !== undefined) {
          u.data.product_id = b._cprod.slice(0);
        }
        if (u.data.product_name.length === 0 && b._cprodname !== undefined) {
          u.data.product_name = b._cprodname.slice(0);
        }
        if (u.data.product_brand.length === 0 && b._cbrand !== undefined) {
          u.data.product_brand = b._cbrand.slice(0);
        }
        if (u.data.product_category.length === 0 && b._ccat !== undefined) {
          u.data.product_category = b._ccat.slice(0);
        }
        if (u.data.product_quantity.length === 0 && b._cquan !== undefined) {
          u.data.product_quantity = b._cquan.slice(0);
        }
        if (u.data.product_unit_price.length === 0 && b._cprice !== undefined) {
          u.data.product_unit_price = b._cprice.slice(0);
        }
        if (u.data.product_discount.length === 0 && b._cpdisc !== undefined) {
          u.data.product_discount = b._cpdisc.slice(0);
        }
        if (u.data.init_before_extensions !== "true") {
          u.createTracker();
          u.initTracker();
        }
        if (u.data.enhancedecommerce === "true" && !u.required["ec"]) {
          u.required["ec"] = !0;
          u.all("require", "ec");
        }
        u.data.app_id = u.data.app_id || u.data.appId || b.app_id;
        u.data.app_name = u.data.app_name || u.data.appName || b.app_name;
        u.data.app_version =
          u.data.app_version || u.data.appVersion || b.app_version;
        u.data.app_rdns =
          u.data.app_rdns || u.data.appInstallerId || b.app_rdns;
        u.data.screen_title =
          u.data.screen_title || u.data.screenName || b.screen_title;
        if (u.data.app_id || u.data.app_name) {
          g = {};
          g.appName = u.data.app_name;
          g.appId = u.data.app_id || "";
          g.appVersion = u.data.app_version;
          g.appInstallerId = u.data.app_rdns;
          u.all("set", g);
        }
        u.data.exception_reason = u.data.exception_reason || b.exception_reason;
        if (u.data.exception_reason) {
          g = {};
          g.exDescription = u.data.exception_reason;
          g.exFatal = true;
          u.all("send", "exception", g);
        }
        if (u.data.allowLinker === "true" || u.data.allowLinker === true) {
          if (!u.required["linker"]) {
            u.all("require", "linker");
            u.required["linker"] = !0;
          }
          if (u.data.crossDomainTrack) {
            if (u.typeOf(u.data.crossDomainTrack) === "string") {
              u.data.crossDomainTrack = u.data.crossDomainTrack
                .replace(/\s/g, "")
                .split(",");
            }
            u.all("linker:autoLink", u.data.crossDomainTrack);
          }
        }
        if (u.data.clear_global_vars === "true") {
          u.setGlobalProperties(u.data, true);
          for (prop in utag.loader.GV(u.data.set)) {
            u.setGlobalProperties(u.data, true, prop);
          }
        }
        u.setGlobalProperties(u.data, false);
        if (u.data.anonymizeIp === "true" || u.data.anonymizeIp === true) {
          u.all("set", "anonymizeIp", true);
        }
        if (u.data.uid) {
          u.all("set", "&uid", u.data.uid);
        }
        if (u.data.page) {
          u.all("set", "page", u.data.page);
        }
        if (u.data.title) {
          u.all("set", "title", u.data.title);
        }
        if (u.data.location) {
          u.all("set", "location", u.data.location);
        }
        if (u.data.campaignId) {
          u.all("set", "campaignId", u.data.campaignId);
        }
        if (u.data.campaignName) {
          u.all("set", "campaignName", u.data.campaignName);
        }
        if (u.data.campaignSource) {
          u.all("set", "campaignSource", u.data.campaignSource);
        }
        if (u.data.campaignMedium) {
          u.all("set", "campaignMedium", u.data.campaignMedium);
        }
        if (u.data.campaignContent) {
          u.all("set", "campaignContent", u.data.campaignContent);
        }
        if (u.data.campaignKeyword) {
          u.all("set", "campaignKeyword", u.data.campaignKeyword);
        }
        if (
          u.data.displayfeatures === "true" ||
          u.data.displayfeatures === true
        ) {
          if (!u.required["displayfeatures"]) {
            u.required["displayfeatures"] = !0;
            u.all("require", "displayfeatures");
          }
        } else {
          u.all("set", "displayFeaturesTask", null);
        }
        if (u.data.dataSource) {
          u.all("set", "dataSource", u.data.dataSource);
        }
        for (prop in utag.loader.GV(u.data.set)) {
          u.all("set", prop, u.data.set[prop]);
        }
        u.data.transaction_events = {};
        u.data.pageview_events = {};
        u.data.link_events = {};
        u.data.enhecom_events = {};
        for (d in utag.loader.GV(u.data)) {
          if (
            d.indexOf("-") > -1 &&
            (d.indexOf("metric") > -1 ||
              d.indexOf("dimension") > -1 ||
              d.indexOf("contentGroup") > -1)
          ) {
            if (d.indexOf("transaction-") === 0) {
              u.data.transaction_events[d] = u.data[d];
            } else if (d.indexOf("pageview-") === 0) {
              u.data.pageview_events[d] = u.data[d];
            } else if (d.indexOf("link-") === 0) {
              u.data.link_events[d] = u.data[d];
            } else if (
              u.data.enhancedecommerce === "true" &&
              d.indexOf("enh_") === 0
            ) {
              u.data.enhecom_events[d] = u.data[d];
            }
          } else if (
            d.indexOf("metric") === 0 ||
            d.indexOf("dimension") === 0 ||
            d.indexOf("contentGroup") === 0
          ) {
            u.all("set", d, u.data[d]);
          }
        }
        if (u.data.enhancedLinkAttribution === "true") {
          if (!u.required["enhancedLinkAttribution"]) {
            u.required["enhancedLinkAttribution"] = !0;
            u.all("require", "linkid", "linkid.js");
          }
        }
        u.data.order_id = u.data.order_id ? u.data.order_id : u.data.id;
        if (u.data.enhancedecommerce === "true") {
          u.all(
            "set",
            "&cu",
            u.data.currency ? u.data.currency : u.data.order_currency
          );
          if (u.data.order_id && u.data.enh_action === "refund") {
            if (
              u.data.order_id instanceof Array &&
              u.data.order_id.length > 0
            ) {
              u.data.order_id = u.data.order_id[0];
            }
            for (f = 0; f < u.data.product_id.length; f++) {
              g = {};
              g.id = u.data.product_id[f];
              g.quantity = u.data.product_quantity[f]
                ? u.data.product_quantity[f]
                : "1";
              u.setHitData(g, "enhecom_events", "product_refund", f);
              u.all("ec:addProduct", g);
            }
            g = {};
            g.id = u.data.order_id;
            u.setHitData(g, "enhecom_events", "refund");
            u.all("ec:setAction", "refund", g);
          } else if (u.data.order_id) {
            if (
              u.data.order_id instanceof Array &&
              u.data.order_id.length > 0
            ) {
              u.data.order_id = u.data.order_id[0];
            }
            u.addproduct("product_purchase", u.data.product_id.length, false);
            g = {};
            g.id = u.data.order_id;
            g.affiliation = u.data.affiliation
              ? u.data.affiliation
              : u.data.order_store;
            g.revenue = u.data.revenue ? u.data.revenue : u.data.order_total;
            g.shipping = u.data.shipping
              ? u.data.shipping
              : u.data.order_shipping;
            g.tax = u.data.tax ? u.data.tax : u.data.order_tax;
            g.coupon = u.data.coupon ? u.data.coupon : u.data.order_coupon_code;
            u.setHitData(g, "enhecom_events", "purchase");
            u.all("ec:setAction", "purchase", g);
          } else if (
            u.data.enh_action === "product_click" &&
            u.data.a === "link"
          ) {
            u.addproduct("product_click", 1, false);
            u.all("ec:setAction", "click", {
              list: u.data.product_action_list,
            });
            if (u.data.autosend_events === "true") {
              u.all("send", "event", "UX", "click", "Results", {
                hitCallback: u.data.enh_event_cb,
              });
            }
          } else if (u.data.enh_action === "detail") {
            u.addproduct("detail", 1, false);
            g = {};
            u.setHitData(g, "list", u.data.product_action_list);
            u.all("ec:setAction", "detail");
          } else if (u.data.enh_action === "add") {
            u.addproduct("product_add", u.data.product_id.length, false);
            u.all("ec:setAction", "add", { list: u.data.product_action_list });
            if (u.data.a === "link" && u.data.autosend_events === "true") {
              u.all("send", "event", "UX", "click", "add to cart", {
                hitCallback: u.data.enh_event_cb,
              });
            }
          } else if (u.data.enh_action === "remove") {
            u.addproduct("product_remove", u.data.product_id.length, false);
            u.all("ec:setAction", "remove");
            if (u.data.a === "link" && u.data.autosend_events === "true") {
              u.all("send", "event", "UX", "click", "remove from cart", {
                hitCallback: u.data.enh_event_cb,
              });
            }
          } else if (u.data.enh_action === "checkout") {
            u.addproduct("product_checkout", u.data.product_id.length, false);
            g = {};
            g.step = u.data.enh_checkout_step || "1";
            g.option = u.data.enh_checkout_option;
            u.all("ec:setAction", u.data.enh_action, g);
          }
          if (u.data.enh_action === "checkout_option" && u.data.a === "link") {
            g = {};
            g.step = u.data.enh_checkout_step || "1";
            g.option = u.data.enh_checkout_option;
            u.all("ec:setAction", u.data.enh_action, g);
            if (u.data.autosend_events === "true") {
              u.all("send", "event", "Checkout", "Option", {
                hitCallback: u.data.enh_event_cb,
              });
            }
          }
          if (u.data.enh_impression_id) {
            u.addproduct(
              "product_impression",
              u.data.enh_impression_id.length,
              true
            );
          }
          if (u.data.enh_promo_id) {
            u.addpromo(u.data.enh_action, u.data.a);
          }
          g = {};
          if (u.data.order_id) {
            u.setHitData(g, "transaction_events");
          }
          u.setHitData(g, "pageview_events");
          if (
            u.data.sessionControl === "start" ||
            u.data.sessionControl === "end"
          ) {
            g.sessionControl = u.data.sessionControl;
          }
          if (u.data.a === "view") {
            if (u.data.screenView === "true" || u.data.screenView === true) {
              g.screenName = u.data.screen_title || "";
              u.all("send", "screenview", g);
            } else {
              g.hitType = "pageview";
              u.all("send", g);
            }
          }
        } else if (u.data.a === "view") {
          g = {};
          u.setHitData(g, "pageview_events");
          if (
            u.data.sessionControl === "start" ||
            u.data.sessionControl === "end"
          ) {
            g.sessionControl = u.data.sessionControl;
          }
          if (u.data.screenView === "true" || u.data.screenView === true) {
            g.screenName = u.data.screen_title || "";
            u.all("send", "screenview", g);
          } else {
            g.hitType = "pageview";
            u.all("send", g);
          }
          if (u.data.order_id && !(u.data.order_id instanceof Array)) {
            if (!u.required["ecommerce"]) {
              u.required["ecommerce"] = !0;
              u.all("require", "ecommerce", "ecommerce.js");
            }
            g = {};
            u.setHitData(g, "transaction_events");
            g.id = u.data.order_id;
            g.affiliation = u.data.affiliation
              ? u.data.affiliation
              : u.data.order_store;
            g.revenue = u.data.revenue ? u.data.revenue : u.data.order_total;
            g.shipping = u.data.shipping
              ? u.data.shipping
              : u.data.order_shipping;
            g.tax = u.data.tax ? u.data.tax : u.data.order_tax;
            g.currency = u.data.currency
              ? u.data.currency
              : u.data.order_currency;
            u.all("ecommerce:addTransaction", g);
            for (f = 0; f < u.data.product_id.length; f++) {
              g = {};
              g.id = u.data.order_id;
              g.sku = u.data.product_id[f];
              g.name = u.data.product_name[f]
                ? u.data.product_name[f]
                : u.data.product_id[f];
              g.category = u.data.product_category[f]
                ? u.data.product_category[f]
                : "";
              g.price = u.data.product_unit_price[f]
                ? u.data.product_unit_price[f]
                : "1.00";
              g.quantity = u.data.product_quantity[f]
                ? u.data.product_quantity[f]
                : "1";
              u.setHitData(g, "transaction_events");
              u.all("ecommerce:addItem", g);
            }
            u.all("ecommerce:send");
          } else if (
            u.data.order_id instanceof Array &&
            u.data.order_id.length > 0
          ) {
            if (!u.required["ecommerce"]) {
              u.required["ecommerce"] = !0;
              u.all("require", "ecommerce", "ecommerce.js");
            }
            var lastindex = 0;
            for (f = 0; f < u.data.order_id.length; f++) {
              if (
                f === u.data.order_id.length - 1 ||
                u.data.order_id[f] !== u.data.order_id[f + 1]
              ) {
                g = {};
                u.setHitData(g, "transaction_events");
                g.id = u.data.order_id[f];
                g.affiliation =
                  u.data.affiliation &&
                  typeof u.data.affiliation[f] !== "undefined"
                    ? u.data.affiliation[f]
                    : u.data.order_store;
                g.revenue =
                  u.data.revenue && typeof u.data.revenue[f] !== "undefined"
                    ? u.data.revenue[f]
                    : u.data.order_total;
                g.shipping =
                  u.data.shipping && typeof u.data.shipping[f] !== "undefined"
                    ? u.data.shipping[f]
                    : u.data.order_shipping;
                g.tax =
                  u.data.tax && typeof u.data.tax[f] !== "undefined"
                    ? u.data.tax[f]
                    : u.data.order_tax;
                g.currency = u.data.currency
                  ? u.data.currency
                  : u.data.order_currency;
                u.all("ecommerce:addTransaction", g);
                for (e = lastindex; e < f + 1; e++) {
                  g = {};
                  g.id = u.data.order_id[f];
                  g.sku = u.data.product_id[e];
                  g.name = u.data.product_name[e]
                    ? u.data.product_name[e]
                    : u.data.product_id[e];
                  g.category = u.data.product_category[e]
                    ? u.data.product_category[e]
                    : "";
                  g.price = u.data.product_unit_price[e]
                    ? u.data.product_unit_price[e]
                    : "1.00";
                  g.quantity = u.data.product_quantity[e]
                    ? u.data.product_quantity[e]
                    : "1";
                  u.setHitData(g, "transaction_events");
                  u.all("ecommerce:addItem", g);
                }
                lastindex = f + 1;
              }
            }
            u.all("ecommerce:send");
          }
        }
        if (u.data.eventCategory && u.data.eventAction) {
          g = {};
          u.setHitData(g, "link_events");
          g.hitType = "event";
          g.eventCategory = u.data.eventCategory;
          if (u.data.nonInteraction) {
            g.nonInteraction = 1;
          }
          g.eventAction = u.data.eventAction;
          if (u.data.eventLabel) {
            g.eventLabel = u.data.eventLabel;
          }
          if (
            typeof u.data.eventValue !== "undefined" &&
            u.data.eventValue !== ""
          ) {
            g.eventValue = u.data.eventValue;
          }
          if (u.data.standard_event_cb) {
            g.hitCallback = u.data.standard_event_cb;
          }
          if (u.data.screenView === "true" || u.data.screenView === true) {
            g.screenName = u.data.screen_title || "";
          }
          if (
            u.data.sessionControl === "start" ||
            u.data.sessionControl === "end"
          ) {
            g.sessionControl = u.data.sessionControl;
          }
          u.all("send", g);
          u.data.eventCategory =
            u.data.eventAction =
            u.data.eventLabel =
            u.data.eventValue =
              "";
        }
        for (e = 0; e < u.data.ga_events.length; e++) {
          g = {};
          u.setHitData(g, "link_events");
          g.hitType = "event";
          g.eventCategory = u.data.ga_events[e].eventCategory;
          g.eventAction = u.data.ga_events[e].eventAction;
          g.eventLabel = u.data.ga_events[e].eventLabel;
          g.eventValue = u.data.ga_events[e].eventValue;
          if (u.data.ga_events[e].nonInteraction) {
            g.nonInteraction = 1;
          }
          if (
            u.data.sessionControl === "start" ||
            u.data.sessionControl === "end"
          ) {
            g.sessionControl = u.data.sessionControl;
          }
          u.all("send", g);
        }
        if (
          u.data.socialNetwork &&
          u.data.socialAction &&
          u.data.socialTarget
        ) {
          g = {};
          g.hitType = "social";
          g.socialNetwork = u.data.socialNetwork;
          g.socialAction = u.data.socialAction;
          g.socialTarget = u.data.socialTarget;
          u.all("send", g);
          u.data.socialNetwork = u.data.socialAction = u.data.socialTarget = "";
        }
        if (u.data.timingCategory && u.data.timingVar && u.data.timingValue) {
          g = {};
          g.hitType = "timing";
          g.timingCategory = u.data.timingCategory;
          g.timingVar = u.data.timingVar;
          g.timingValue = u.data.timingValue;
          g.timingLabel = u.data.timingLabel || "";
          u.all("send", g);
        }
        if (u.data["ga-disable"]) {
          window["ga-disable-" + u.data["ga-disable"]] = true;
        }
        (function () {
          var id = "tealium-tag-7110";
          if (document.getElementById(id)) {
            return;
          }
          u.loader({
            type: "script",
            src: "https://www.google-analytics.com/analytics.js",
            loc: "script",
            id: id,
          });
          u.o.l = 1 * new Date();
        })();
      }
    };
    utag.o[loader].loader.LOAD(id);
  })("55", "mbs.main");
} catch (error) {
  utag.DB(error);
}

//tealium universal tag - utag.185 ut4.0.202207210624, Copyright 2022 Tealium.com Inc. All Rights Reserved.
window.GoogleAnalyticsObject = "" || "ga";
window[window.GoogleAnalyticsObject] =
  window[window.GoogleAnalyticsObject] ||
  function () {
    (window[window.GoogleAnalyticsObject].q =
      window[window.GoogleAnalyticsObject].q || []).push(arguments);
  };
try {
  (function (id, loader) {
    var u = {};
    utag.o[loader].sender[id] = u;
    if (utag.ut === undefined) {
      utag.ut = {};
    }
    if (utag.ut.loader === undefined) {
      u.loader = function (o) {
        var a, b, c, l;
        a = document;
        if (o.type === "iframe") {
          b = a.createElement("iframe");
          b.setAttribute("height", "1");
          b.setAttribute("width", "1");
          b.setAttribute("style", "display:none");
          b.setAttribute("src", o.src);
        } else if (o.type === "img") {
          utag.DB("Attach img: " + o.src);
          b = new Image();
          b.src = o.src;
          return;
        } else {
          b = a.createElement("script");
          b.language = "javascript";
          b.type = "text/javascript";
          b.async = 1;
          b.src = o.src;
        }
        if (o.id) {
          b.id = o.id;
        }
        if (typeof o.cb === "function") {
          b.hFlag = 0;
          b.onreadystatechange = function () {
            if (
              (this.readyState === "complete" ||
                this.readyState === "loaded") &&
              !b.hFlag
            ) {
              b.hFlag = 1;
              o.cb();
            }
          };
          b.onload = function () {
            if (!b.hFlag) {
              b.hFlag = 1;
              o.cb();
            }
          };
        }
        l = o.loc || "head";
        c = a.getElementsByTagName(l)[0];
        if (c) {
          utag.DB("Attach to " + l + ": " + o.src);
          if (l === "script") {
            c.parentNode.insertBefore(b, c);
          } else {
            c.appendChild(b);
          }
        }
      };
    } else {
      u.loader = utag.ut.loader;
    }
    if (utag.ut.typeOf === undefined) {
      u.typeOf = function (e) {
        return {}.toString
          .call(e)
          .match(/\s([a-zA-Z]+)/)[1]
          .toLowerCase();
      };
    } else {
      u.typeOf = utag.ut.typeOf;
    }
    u.ev = { view: 1, link: 1 };
    u.o = window[window.GoogleAnalyticsObject];
    u.required = {};
    u.created = false;
    u.all = function (e, o, v, a, b, c) {
      for (var i = 0; i < u.data.account.length; i++) {
        var t = u.data.name[i] ? u.data.name[i] + "." : "";
        if (o === "event") {
          u.o(t + e, o, v, a, b, c);
        } else if (v) {
          u.o(t + e, o, v);
        } else {
          u.o(t + e, o);
        }
      }
    };
    u.setHitData = function (g, a, b, f) {
      var obj = u.data[a];
      for (var d in utag.loader.GV(obj)) {
        if (
          b &&
          d.indexOf("enh_" + b + "-") !== 0 &&
          d.indexOf("enh_all-") !== 0
        ) {
          continue;
        }
        var idx = d.split("-")[1],
          val = obj[d];
        if (u.typeOf(val) !== "array") {
          g[idx] = val;
        } else {
          g[idx] = val[f];
        }
      }
    };
    u.addEvent = function (v) {
      if (
        typeof v.eventCategory == "undefined" ||
        typeof v.eventAction == "undefined"
      ) {
        utag.DB("GA event Category or Action is not set");
        return;
      }
      if (isNaN(parseInt(v.eventValue))) {
        utag.DB("GA event Value is not a number");
        v.eventValue = null;
      } else {
        v.eventValue = parseInt(v.eventValue) || null;
      }
      u.data.ga_events.push(v);
    };
    u.addproduct = function (event_type, len, imp) {
      var g = {},
        i,
        j,
        k = [];
      if (imp === true) {
        k = u.data.enh_impression_id.length
          ? u.data.enh_impression_id
          : u.data.enh_impression_name;
        for (i = 0; i < k.length; i++) {
          g = {};
          g.id = u.data.enh_impression_id[i] ? u.data.enh_impression_id[i] : "";
          g.name = u.data.enh_impression_name[i]
            ? u.data.enh_impression_name[i]
            : "";
          g.brand = u.data.enh_impression_brand[i]
            ? u.data.enh_impression_brand[i]
            : "";
          g.variant = u.data.enh_impression_variant[i]
            ? u.data.enh_impression_variant[i]
            : "";
          g.category = u.data.enh_impression_category[i]
            ? u.data.enh_impression_category[i]
            : "";
          g.list = u.data.enh_impression_list[i]
            ? u.data.enh_impression_list[i]
            : "";
          g.price = u.data.enh_impression_price[i]
            ? u.data.enh_impression_price[i]
            : "";
          g.position = u.data.enh_impression_position[i]
            ? u.data.enh_impression_position[i]
            : "";
          u.setHitData(g, "enhecom_events", event_type, i);
          u.all("ec:addImpression", g);
        }
      } else {
        for (i = 0; i < len; i++) {
          g = {};
          if (u.data.autofill_params === "true") {
            for (j = 0; j < u.data.product_id.length; j++) {
              u.data.product_name[j] =
                u.data.product_name[j] || u.data.product_id[j];
              u.data.product_unit_price[j] =
                u.data.product_unit_price[j] || "1.00";
              u.data.product_quantity[j] = u.data.product_quantity[j] || "1";
            }
          }
          g.id = u.data.product_id[i];
          g.name = u.data.product_name[i] ? u.data.product_name[i] : "";
          g.brand = u.data.product_brand[i] ? u.data.product_brand[i] : "";
          g.variant = u.data.product_variant[i]
            ? u.data.product_variant[i]
            : "";
          g.category = u.data.product_category[i]
            ? u.data.product_category[i]
            : "";
          g.price = u.data.product_unit_price[i]
            ? u.data.product_unit_price[i]
            : "";
          g.quantity = u.data.product_quantity[i]
            ? u.data.product_quantity[i]
            : "";
          g.coupon = u.data.product_discount[i]
            ? u.data.product_discount[i]
            : "";
          g.position = u.data.product_position[i]
            ? u.data.product_position[i]
            : "";
          u.setHitData(g, "enhecom_events", event_type, i);
          u.all("ec:addProduct", g);
        }
      }
    };
    u.addpromo = function (action, event) {
      var f, g;
      for (f = 0; f < u.data.enh_promo_id.length; f++) {
        g = {};
        g.id = u.data.enh_promo_id[f];
        g.name = u.data.enh_promo_name[f]
          ? u.data.enh_promo_name[f]
          : u.data.enh_promo_id[f];
        g.creative = u.data.enh_promo_creative[f]
          ? u.data.enh_promo_creative[f]
          : "";
        g.position = u.data.enh_promo_position[f]
          ? u.data.enh_promo_position[f]
          : "";
        u.all("ec:addPromo", g);
      }
      if (action === "promo_click" && event === "link") {
        u.all("ec:setAction", u.data.enh_action);
        if (u.data.autosend_events === "true") {
          u.all(
            "send",
            "event",
            "Internal Promotions",
            "click",
            g.name ? g.name : g.id,
            { hitCallback: u.data.enh_event_cb }
          );
        }
      }
    };
    u.createTracker = function () {
      var i, tn, start;
      if (u.typeOf(u.data.account) === "string") {
        u.data.account = u.data.account.replace(/\s/g, "").split(",");
      }
      if (u.typeOf(u.data.name) === "string" && u.data.name !== "") {
        u.data.name = u.data.name.replace(/\s/g, "").split(",");
      }
      if (!u.data.name || u.data.name.length !== u.data.account.length) {
        start =
          u.data.name.length !== u.data.account.length ? u.data.name.length : 0;
        tn = utag.tagsettings.gua.trackernames;
        u.data.name = u.data.name || [];
        for (i = start; i < u.data.account.length; i++) {
          u.data.name.push("tealium_" + (i + tn));
        }
        utag.tagsettings.gua.trackernames = tn + i;
      }
    };
    u.initTracker = function () {
      var c, f;
      if (!u.created) {
        u.created = true;
        for (f = 0; f < u.data.account.length; f++) {
          c = {};
          if (u.data.siteSpeedSampleRate) {
            c.siteSpeedSampleRate = parseInt(u.data.siteSpeedSampleRate);
          }
          if (u.data.sampleRate) {
            c.sampleRate = parseFloat(u.data.sampleRate);
          }
          c.cookieDomain = u.data.cookieDomain;
          if (u.data.cookieExpires || u.data.cookieExpires === "0") {
            c.cookieExpires = parseInt(u.data.cookieExpires);
          }
          if (u.data.legacyCookieDomain) {
            c.legacyCookieDomain = u.data.legacyCookieDomain;
          }
          if (
            u.data.legacyHistoryImport === "false" ||
            u.data.legacyHistoryImport === false
          ) {
            c.legacyHistoryImport = u.data.legacyHistoryImport;
          }
          c.allowLinker = u.data.allowLinker;
          if (typeof u.data.name[f] !== "undefined" && u.data.name[f] !== "") {
            c.name = u.data.name[f];
          }
          if (u.data.clientId) {
            c.clientId = u.data.clientId;
          }
          u.o("create", u.data.account[f], c);
        }
        if (u.data.global_event_cb) {
          u.all("set", "hitCallback", u.data.global_event_cb);
        }
        if (u.data.optimizely === "true") {
          window.optimizely = window.optimizely || [];
          window.optimizely.push(["activateUniversalAnalytics"]);
        }
      }
    };
    u.setGlobalProperties = function (data, reset, custom_property) {
      var map = {
          uid: { name: "&uid", type: "exists", reset: true },
          page: { name: "page", type: "exists", reset: true },
          title: { name: "title", type: "exists", reset: true },
          location: { name: "location", type: "exists", reset: false },
          campaignId: { name: "campaignId", type: "exists", reset: true },
          campaignName: { name: "campaignName", type: "exists", reset: true },
          campaignSource: {
            name: "campaignSource",
            type: "exists",
            reset: true,
          },
          campaignMedium: {
            name: "campaignMedium",
            type: "exists",
            reset: true,
          },
          campaignContent: {
            name: "campaignContent",
            type: "exists",
            reset: true,
          },
          campaignKeyword: {
            name: "campaignKeyword",
            type: "exists",
            reset: true,
          },
          dataSource: { name: "dataSource", type: "exists", reset: true },
        },
        prop;
      if (custom_property && reset) {
        u.all("set", custom_property, "");
      }
      for (prop in utag.loader.GV(map)) {
        if (reset && map[prop].reset) {
          u.all("set", map[prop].name, "");
        } else {
          if (map[prop].type === "bool") {
            if (data[prop] == true || data[prop] === "true") {
              u.all("set", map[prop].name, true);
            }
          } else if (map[prop].type === "exists") {
            if (data[prop]) {
              u.all("set", map[prop].name, data[prop]);
            }
          }
        }
      }
    };
    window.utag.tagsettings = window.utag.tagsettings || {};
    window.utag.tagsettings.gua = window.utag.tagsettings.gua || {};
    window.utag.tagsettings.gua.trackernames =
      window.utag.tagsettings.gua.trackernames || 0;
    u.map = {
      reservation_room_num_nights: "metric6,dimension6",
      reservation_room_date_checkin: "dimension7,enh_all-dimension11",
      reservation_room_date_checkout: "dimension8,enh_all-dimension12",
      order_offer_name: "dimension13",
      avg_room_rate: "enh_all-dimension15,product_unit_price",
      language_code: "dimension1",
      order_promo_code: "dimension7",
      "cp.utag_main_v_id": "enh_all-dimension19,dimension21",
      booking_no: "metric3",
      event_name: "eventCategory",
      domain_pathname: "eventLabel",
      event_label: "eventLabel",
      reservation_order_id: "order_id",
      reservation_room_rate_code: "dimension9",
      reservation_room_category: "product_category",
      reservation_order_total: "revenue,metric2",
      reservation_order_tax_amount: "tax",
      reservation_order_affiliation: "affiliation",
      event_category: "eventCategory",
      event_action: "eventAction",
      metric4: "metric4",
      metric1: "metric1",
      dimension10: "dimension10",
      reservation_booking_method: "dimension4,enh_all-dimension14",
      reservation_room_rate_range: "dimension16,enh_all-dimension17",
      billing_info_views: "metric2",
      searches: "metric8",
      search_type: "dimension5",
      tealium_event: "enh_action",
      checkout_step: "enh_checkout_step",
      product_id: "product_id",
      product_name: "product_name",
      product_unit_price: "product_unit_price",
      dimension13: "dimension13",
      suites_added: "metric5",
      metric7: "metric7",
      metric9: "metric9",
      currency: "currency",
      upgrade_offer_title: "dimension18",
      upgrade_offer_accepted: "metric10",
      upgrade_offer_rate: "metric11",
      booking_confirmations: "metric3",
      ga_page_override: "page",
      reservation_order_subtotal: "revenue",
      DY_TagName: "dimension25",
      DY_ExperienceName: "dimension26",
      DY_VariationName: "dimension27",
      num_of_nights: "product_quantity",
      check_in_date: "dimension13",
      check_out_date: "dimension14",
      hotel_order_id_individual: "order_id",
      product_category: "product_category",
      hotel_subtotal_individual: "revenue",
      hotel_tax_individual: "tax",
      hotel_offer_code: "product_name",
      room_type: "product_id",
    };
    u.extend = [
      function (a, b) {
        try {
          if (
            b["dom.url"].toString().indexOf("marinabaysands.com/booking") > -1
          ) {
            if (Array.isArray(b.hotel_order_id) && !b.hotel_order_id.length) {
              b.hotel_order_id = "";
            }
          }
        } catch (e) {
          utag.DB(e);
        }
      },
      function (a, b) {
        try {
          if (1) {
            if (b["ga_page_override"] == "abort") {
              return false;
            }
          }
        } catch (e) {
          utag.DB(e);
        }
      },
      function (a, b) {
        try {
          if (
            b["dom.url"]
              .toString()
              .indexOf("/sands-rewards-lifestyle/signup-successful.aspx") > -1
          ) {
            b["domain_pathname"] =
              "/sands-rewards-lifestyle/signup-successful.aspx";
            b["dom.pathname"] =
              "/sands-rewards-lifestyle/signup-successful.aspx";
            b["ga_page_override"] =
              "/sands-rewards-lifestyle/signup-successful.aspx";
            b["dom.url"] = "/sands-rewards-lifestyle/signup-successful.aspx";
          }
        } catch (e) {
          utag.DB(e);
        }
      },
    ];
    u.send = function (a, b) {
      if (u.ev[a] || u.ev.all !== undefined) {
        u.o = window[window.GoogleAnalyticsObject];
        b.ga_events = b.ga_events || [];
        var c, d, e, f, g, h, tn, prop;
        if (u.data && u.data.name) {
          tn = u.data.name;
        }
        u.data = {
          qsp_delim: "&",
          kvp_delim: "=",
          base_url: "",
          a: a,
          cookieDomain: "" || utag.loader.lh(),
          name: tn || "mbsoldua",
          account: "UA-16481317-15",
          anonymizeIp: "false",
          allowLinker: "true",
          crossDomainTrack: "",
          enhancedLinkAttribution: "true",
          enhancedecommerce: "true",
          displayfeatures: "true",
          screenView: "false",
          optimizely: "false",
          init_before_extensions: "false",
          autofill_params: "false",
          autosend_events: "true" || "true",
          clear_global_vars: "false",
          enh_action: "",
          enh_event_cb: "",
          enh_checkout_step: "",
          enh_checkout_option: "",
          product_action_list: "",
          product_variant: [],
          enh_impression_id: [],
          enh_impression_name: [],
          enh_impression_price: [],
          enh_impression_category: [],
          enh_impression_brand: [],
          enh_impression_variant: [],
          enh_impression_list: [],
          enh_impression_position: [],
          enh_promo_id: [],
          enh_promo_name: [],
          enh_promo_creative: [],
          enh_promo_position: [],
          id: "",
          product_id: [],
          product_name: [],
          product_brand: [],
          product_category: [],
          product_quantity: [],
          product_unit_price: [],
          product_discount: [],
          product_position: [],
          ga_events: [],
          sessionControl: "",
          set: {},
        };
        if (u.data.init_before_extensions === "true") {
          u.createTracker();
          u.initTracker();
        }
        for (c = 0; c < u.extend.length; c++) {
          try {
            d = u.extend[c](a, b);
            if (d == false) return;
          } catch (e) {}
        }
        c = [];
        for (d in utag.loader.GV(u.map)) {
          if (b[d] !== undefined && b[d] !== "") {
            e = u.map[d].split(",");
            for (f = 0; f < e.length; f++) {
              if (e[f].indexOf("a.") === 0) {
                u.data["a"][e[f].substring(2)] = b[d];
              } else if (e[f].indexOf("set.") === 0) {
                u.data.set[e[f].substring(4)] = b[d];
              } else {
                u.data[e[f]] = b[d];
              }
            }
          } else {
            h = d.split(":");
            if (h.length === 2 && b[h[0]] === h[1]) {
              if (u.map[d]) {
                u.data.enh_action = u.map[d];
              }
            }
          }
        }
        u.data.account = u.data.tid || u.data.account;
        if (
          u.typeOf(u.data.ga_events) === "array" &&
          u.typeOf(b.ga_events) === "array"
        ) {
          if (u.data.ga_events.length === 0 && b.ga_events.length > 0) {
            u.data.ga_events = b.ga_events;
          } else if (u.data.ga_events.length > 0 && b.ga_events.length > 0) {
            u.data.ga_events = u.data.ga_events.concat(b.ga_events);
          }
        }
        u.data.order_id = u.data.order_id || b._corder || "";
        u.data.order_total = u.data.order_total || b._ctotal || "";
        u.data.order_shipping = u.data.order_shipping || b._cship || "";
        u.data.order_tax = u.data.order_tax || b._ctax || "";
        u.data.order_store = u.data.order_store || b._cstore || "";
        u.data.order_currency = u.data.order_currency || b._ccurrency || "";
        u.data.order_coupon_code = u.data.order_coupon_code || b._cpromo || "";
        if (u.data.product_id.length === 0 && b._cprod !== undefined) {
          u.data.product_id = b._cprod.slice(0);
        }
        if (u.data.product_name.length === 0 && b._cprodname !== undefined) {
          u.data.product_name = b._cprodname.slice(0);
        }
        if (u.data.product_brand.length === 0 && b._cbrand !== undefined) {
          u.data.product_brand = b._cbrand.slice(0);
        }
        if (u.data.product_category.length === 0 && b._ccat !== undefined) {
          u.data.product_category = b._ccat.slice(0);
        }
        if (u.data.product_quantity.length === 0 && b._cquan !== undefined) {
          u.data.product_quantity = b._cquan.slice(0);
        }
        if (u.data.product_unit_price.length === 0 && b._cprice !== undefined) {
          u.data.product_unit_price = b._cprice.slice(0);
        }
        if (u.data.product_discount.length === 0 && b._cpdisc !== undefined) {
          u.data.product_discount = b._cpdisc.slice(0);
        }
        if (u.data.init_before_extensions !== "true") {
          u.createTracker();
          u.initTracker();
        }
        if (u.data.enhancedecommerce === "true" && !u.required["ec"]) {
          u.required["ec"] = !0;
          u.all("require", "ec");
        }
        u.data.app_id = u.data.app_id || u.data.appId || b.app_id;
        u.data.app_name = u.data.app_name || u.data.appName || b.app_name;
        u.data.app_version =
          u.data.app_version || u.data.appVersion || b.app_version;
        u.data.app_rdns =
          u.data.app_rdns || u.data.appInstallerId || b.app_rdns;
        u.data.screen_title =
          u.data.screen_title || u.data.screenName || b.screen_title;
        if (u.data.app_id || u.data.app_name) {
          g = {};
          g.appName = u.data.app_name;
          g.appId = u.data.app_id || "";
          g.appVersion = u.data.app_version;
          g.appInstallerId = u.data.app_rdns;
          u.all("set", g);
        }
        u.data.exception_reason = u.data.exception_reason || b.exception_reason;
        if (u.data.exception_reason) {
          g = {};
          g.exDescription = u.data.exception_reason;
          g.exFatal = true;
          u.all("send", "exception", g);
        }
        if (u.data.allowLinker === "true" || u.data.allowLinker === true) {
          if (!u.required["linker"]) {
            u.all("require", "linker");
            u.required["linker"] = !0;
          }
          if (u.data.crossDomainTrack) {
            if (u.typeOf(u.data.crossDomainTrack) === "string") {
              u.data.crossDomainTrack = u.data.crossDomainTrack
                .replace(/\s/g, "")
                .split(",");
            }
            u.all("linker:autoLink", u.data.crossDomainTrack);
          }
        }
        if (u.data.clear_global_vars === "true") {
          u.setGlobalProperties(u.data, true);
          for (prop in utag.loader.GV(u.data.set)) {
            u.setGlobalProperties(u.data, true, prop);
          }
        }
        u.setGlobalProperties(u.data, false);
        if (u.data.anonymizeIp === "true" || u.data.anonymizeIp === true) {
          u.all("set", "anonymizeIp", true);
        }
        if (u.data.uid) {
          u.all("set", "&uid", u.data.uid);
        }
        if (u.data.page) {
          u.all("set", "page", u.data.page);
        }
        if (u.data.title) {
          u.all("set", "title", u.data.title);
        }
        if (u.data.location) {
          u.all("set", "location", u.data.location);
        }
        if (u.data.campaignId) {
          u.all("set", "campaignId", u.data.campaignId);
        }
        if (u.data.campaignName) {
          u.all("set", "campaignName", u.data.campaignName);
        }
        if (u.data.campaignSource) {
          u.all("set", "campaignSource", u.data.campaignSource);
        }
        if (u.data.campaignMedium) {
          u.all("set", "campaignMedium", u.data.campaignMedium);
        }
        if (u.data.campaignContent) {
          u.all("set", "campaignContent", u.data.campaignContent);
        }
        if (u.data.campaignKeyword) {
          u.all("set", "campaignKeyword", u.data.campaignKeyword);
        }
        if (
          u.data.displayfeatures === "true" ||
          u.data.displayfeatures === true
        ) {
          if (!u.required["displayfeatures"]) {
            u.required["displayfeatures"] = !0;
            u.all("require", "displayfeatures");
          }
        } else {
          u.all("set", "displayFeaturesTask", null);
        }
        if (u.data.dataSource) {
          u.all("set", "dataSource", u.data.dataSource);
        }
        for (prop in utag.loader.GV(u.data.set)) {
          u.all("set", prop, u.data.set[prop]);
        }
        u.data.transaction_events = {};
        u.data.pageview_events = {};
        u.data.link_events = {};
        u.data.enhecom_events = {};
        for (d in utag.loader.GV(u.data)) {
          if (
            d.indexOf("-") > -1 &&
            (d.indexOf("metric") > -1 ||
              d.indexOf("dimension") > -1 ||
              d.indexOf("contentGroup") > -1)
          ) {
            if (d.indexOf("transaction-") === 0) {
              u.data.transaction_events[d] = u.data[d];
            } else if (d.indexOf("pageview-") === 0) {
              u.data.pageview_events[d] = u.data[d];
            } else if (d.indexOf("link-") === 0) {
              u.data.link_events[d] = u.data[d];
            } else if (
              u.data.enhancedecommerce === "true" &&
              d.indexOf("enh_") === 0
            ) {
              u.data.enhecom_events[d] = u.data[d];
            }
          } else if (
            d.indexOf("metric") === 0 ||
            d.indexOf("dimension") === 0 ||
            d.indexOf("contentGroup") === 0
          ) {
            u.all("set", d, u.data[d]);
          }
        }
        if (u.data.enhancedLinkAttribution === "true") {
          if (!u.required["enhancedLinkAttribution"]) {
            u.required["enhancedLinkAttribution"] = !0;
            u.all("require", "linkid", "linkid.js");
          }
        }
        u.data.order_id = u.data.order_id ? u.data.order_id : u.data.id;
        if (u.data.enhancedecommerce === "true") {
          u.all(
            "set",
            "&cu",
            u.data.currency ? u.data.currency : u.data.order_currency
          );
          if (u.data.order_id && u.data.enh_action === "refund") {
            if (
              u.data.order_id instanceof Array &&
              u.data.order_id.length > 0
            ) {
              u.data.order_id = u.data.order_id[0];
            }
            for (f = 0; f < u.data.product_id.length; f++) {
              g = {};
              g.id = u.data.product_id[f];
              g.quantity = u.data.product_quantity[f]
                ? u.data.product_quantity[f]
                : "1";
              u.setHitData(g, "enhecom_events", "product_refund", f);
              u.all("ec:addProduct", g);
            }
            g = {};
            g.id = u.data.order_id;
            u.setHitData(g, "enhecom_events", "refund");
            u.all("ec:setAction", "refund", g);
          } else if (u.data.order_id) {
            if (
              u.data.order_id instanceof Array &&
              u.data.order_id.length > 0
            ) {
              u.data.order_id = u.data.order_id[0];
            }
            u.addproduct("product_purchase", u.data.product_id.length, false);
            g = {};
            g.id = u.data.order_id;
            g.affiliation = u.data.affiliation
              ? u.data.affiliation
              : u.data.order_store;
            g.revenue = u.data.revenue ? u.data.revenue : u.data.order_total;
            g.shipping = u.data.shipping
              ? u.data.shipping
              : u.data.order_shipping;
            g.tax = u.data.tax ? u.data.tax : u.data.order_tax;
            g.coupon = u.data.coupon ? u.data.coupon : u.data.order_coupon_code;
            u.setHitData(g, "enhecom_events", "purchase");
            u.all("ec:setAction", "purchase", g);
          } else if (
            u.data.enh_action === "product_click" &&
            u.data.a === "link"
          ) {
            u.addproduct("product_click", 1, false);
            u.all("ec:setAction", "click", {
              list: u.data.product_action_list,
            });
            if (u.data.autosend_events === "true") {
              u.all("send", "event", "UX", "click", "Results", {
                hitCallback: u.data.enh_event_cb,
              });
            }
          } else if (u.data.enh_action === "detail") {
            u.addproduct("detail", 1, false);
            g = {};
            u.setHitData(g, "list", u.data.product_action_list);
            u.all("ec:setAction", "detail");
          } else if (u.data.enh_action === "add") {
            u.addproduct("product_add", u.data.product_id.length, false);
            u.all("ec:setAction", "add", { list: u.data.product_action_list });
            if (u.data.a === "link" && u.data.autosend_events === "true") {
              u.all("send", "event", "UX", "click", "add to cart", {
                hitCallback: u.data.enh_event_cb,
              });
            }
          } else if (u.data.enh_action === "remove") {
            u.addproduct("product_remove", u.data.product_id.length, false);
            u.all("ec:setAction", "remove");
            if (u.data.a === "link" && u.data.autosend_events === "true") {
              u.all("send", "event", "UX", "click", "remove from cart", {
                hitCallback: u.data.enh_event_cb,
              });
            }
          } else if (u.data.enh_action === "checkout") {
            u.addproduct("product_checkout", u.data.product_id.length, false);
            g = {};
            g.step = u.data.enh_checkout_step || "1";
            g.option = u.data.enh_checkout_option;
            u.all("ec:setAction", u.data.enh_action, g);
          }
          if (u.data.enh_action === "checkout_option" && u.data.a === "link") {
            g = {};
            g.step = u.data.enh_checkout_step || "1";
            g.option = u.data.enh_checkout_option;
            u.all("ec:setAction", u.data.enh_action, g);
            if (u.data.autosend_events === "true") {
              u.all("send", "event", "Checkout", "Option", {
                hitCallback: u.data.enh_event_cb,
              });
            }
          }
          if (u.data.enh_impression_id) {
            u.addproduct(
              "product_impression",
              u.data.enh_impression_id.length,
              true
            );
          }
          if (u.data.enh_promo_id) {
            u.addpromo(u.data.enh_action, u.data.a);
          }
          g = {};
          if (u.data.order_id) {
            u.setHitData(g, "transaction_events");
          }
          u.setHitData(g, "pageview_events");
          if (
            u.data.sessionControl === "start" ||
            u.data.sessionControl === "end"
          ) {
            g.sessionControl = u.data.sessionControl;
          }
          if (u.data.a === "view") {
            if (u.data.screenView === "true" || u.data.screenView === true) {
              g.screenName = u.data.screen_title || "";
              u.all("send", "screenview", g);
            } else {
              g.hitType = "pageview";
              u.all("send", g);
            }
          }
        } else if (u.data.a === "view") {
          g = {};
          u.setHitData(g, "pageview_events");
          if (
            u.data.sessionControl === "start" ||
            u.data.sessionControl === "end"
          ) {
            g.sessionControl = u.data.sessionControl;
          }
          if (u.data.screenView === "true" || u.data.screenView === true) {
            g.screenName = u.data.screen_title || "";
            u.all("send", "screenview", g);
          } else {
            g.hitType = "pageview";
            u.all("send", g);
          }
          if (u.data.order_id && !(u.data.order_id instanceof Array)) {
            if (!u.required["ecommerce"]) {
              u.required["ecommerce"] = !0;
              u.all("require", "ecommerce", "ecommerce.js");
            }
            g = {};
            u.setHitData(g, "transaction_events");
            g.id = u.data.order_id;
            g.affiliation = u.data.affiliation
              ? u.data.affiliation
              : u.data.order_store;
            g.revenue = u.data.revenue ? u.data.revenue : u.data.order_total;
            g.shipping = u.data.shipping
              ? u.data.shipping
              : u.data.order_shipping;
            g.tax = u.data.tax ? u.data.tax : u.data.order_tax;
            g.currency = u.data.currency
              ? u.data.currency
              : u.data.order_currency;
            u.all("ecommerce:addTransaction", g);
            for (f = 0; f < u.data.product_id.length; f++) {
              g = {};
              g.id = u.data.order_id;
              g.sku = u.data.product_id[f];
              g.name = u.data.product_name[f]
                ? u.data.product_name[f]
                : u.data.product_id[f];
              g.category = u.data.product_category[f]
                ? u.data.product_category[f]
                : "";
              g.price = u.data.product_unit_price[f]
                ? u.data.product_unit_price[f]
                : "1.00";
              g.quantity = u.data.product_quantity[f]
                ? u.data.product_quantity[f]
                : "1";
              u.setHitData(g, "transaction_events");
              u.all("ecommerce:addItem", g);
            }
            u.all("ecommerce:send");
          } else if (
            u.data.order_id instanceof Array &&
            u.data.order_id.length > 0
          ) {
            if (!u.required["ecommerce"]) {
              u.required["ecommerce"] = !0;
              u.all("require", "ecommerce", "ecommerce.js");
            }
            var lastindex = 0;
            for (f = 0; f < u.data.order_id.length; f++) {
              if (
                f === u.data.order_id.length - 1 ||
                u.data.order_id[f] !== u.data.order_id[f + 1]
              ) {
                g = {};
                u.setHitData(g, "transaction_events");
                g.id = u.data.order_id[f];
                g.affiliation =
                  u.data.affiliation &&
                  typeof u.data.affiliation[f] !== "undefined"
                    ? u.data.affiliation[f]
                    : u.data.order_store;
                g.revenue =
                  u.data.revenue && typeof u.data.revenue[f] !== "undefined"
                    ? u.data.revenue[f]
                    : u.data.order_total;
                g.shipping =
                  u.data.shipping && typeof u.data.shipping[f] !== "undefined"
                    ? u.data.shipping[f]
                    : u.data.order_shipping;
                g.tax =
                  u.data.tax && typeof u.data.tax[f] !== "undefined"
                    ? u.data.tax[f]
                    : u.data.order_tax;
                g.currency = u.data.currency
                  ? u.data.currency
                  : u.data.order_currency;
                u.all("ecommerce:addTransaction", g);
                for (e = lastindex; e < f + 1; e++) {
                  g = {};
                  g.id = u.data.order_id[f];
                  g.sku = u.data.product_id[e];
                  g.name = u.data.product_name[e]
                    ? u.data.product_name[e]
                    : u.data.product_id[e];
                  g.category = u.data.product_category[e]
                    ? u.data.product_category[e]
                    : "";
                  g.price = u.data.product_unit_price[e]
                    ? u.data.product_unit_price[e]
                    : "1.00";
                  g.quantity = u.data.product_quantity[e]
                    ? u.data.product_quantity[e]
                    : "1";
                  u.setHitData(g, "transaction_events");
                  u.all("ecommerce:addItem", g);
                }
                lastindex = f + 1;
              }
            }
            u.all("ecommerce:send");
          }
        }
        if (u.data.eventCategory && u.data.eventAction) {
          g = {};
          u.setHitData(g, "link_events");
          g.hitType = "event";
          g.eventCategory = u.data.eventCategory;
          if (u.data.nonInteraction) {
            g.nonInteraction = 1;
          }
          g.eventAction = u.data.eventAction;
          if (u.data.eventLabel) {
            g.eventLabel = u.data.eventLabel;
          }
          if (
            typeof u.data.eventValue !== "undefined" &&
            u.data.eventValue !== ""
          ) {
            g.eventValue = u.data.eventValue;
          }
          if (u.data.standard_event_cb) {
            g.hitCallback = u.data.standard_event_cb;
          }
          if (u.data.screenView === "true" || u.data.screenView === true) {
            g.screenName = u.data.screen_title || "";
          }
          if (
            u.data.sessionControl === "start" ||
            u.data.sessionControl === "end"
          ) {
            g.sessionControl = u.data.sessionControl;
          }
          u.all("send", g);
          u.data.eventCategory =
            u.data.eventAction =
            u.data.eventLabel =
            u.data.eventValue =
              "";
        }
        for (e = 0; e < u.data.ga_events.length; e++) {
          g = {};
          u.setHitData(g, "link_events");
          g.hitType = "event";
          g.eventCategory = u.data.ga_events[e].eventCategory;
          g.eventAction = u.data.ga_events[e].eventAction;
          g.eventLabel = u.data.ga_events[e].eventLabel;
          g.eventValue = u.data.ga_events[e].eventValue;
          if (u.data.ga_events[e].nonInteraction) {
            g.nonInteraction = 1;
          }
          if (
            u.data.sessionControl === "start" ||
            u.data.sessionControl === "end"
          ) {
            g.sessionControl = u.data.sessionControl;
          }
          u.all("send", g);
        }
        if (
          u.data.socialNetwork &&
          u.data.socialAction &&
          u.data.socialTarget
        ) {
          g = {};
          g.hitType = "social";
          g.socialNetwork = u.data.socialNetwork;
          g.socialAction = u.data.socialAction;
          g.socialTarget = u.data.socialTarget;
          u.all("send", g);
          u.data.socialNetwork = u.data.socialAction = u.data.socialTarget = "";
        }
        if (u.data.timingCategory && u.data.timingVar && u.data.timingValue) {
          g = {};
          g.hitType = "timing";
          g.timingCategory = u.data.timingCategory;
          g.timingVar = u.data.timingVar;
          g.timingValue = u.data.timingValue;
          g.timingLabel = u.data.timingLabel || "";
          u.all("send", g);
        }
        if (u.data["ga-disable"]) {
          window["ga-disable-" + u.data["ga-disable"]] = true;
        }
        (function () {
          var id = "tealium-tag-7110";
          if (document.getElementById(id)) {
            return;
          }
          u.loader({
            type: "script",
            src: "https://www.google-analytics.com/analytics.js",
            loc: "script",
            id: id,
          });
          u.o.l = 1 * new Date();
        })();
      }
    };
    utag.o[loader].loader.LOAD(id);
  })("185", "mbs.main");
} catch (error) {
  utag.DB(error);
}

//tealium universal tag - utag.32 ut4.0.202207210624, Copyright 2022 Tealium.com Inc. All Rights Reserved.
window.GoogleAnalyticsObject = "" || "ga";
window[window.GoogleAnalyticsObject] =
  window[window.GoogleAnalyticsObject] ||
  function () {
    (window[window.GoogleAnalyticsObject].q =
      window[window.GoogleAnalyticsObject].q || []).push(arguments);
  };
try {
  (function (id, loader) {
    var u = {};
    utag.o[loader].sender[id] = u;
    if (utag.ut === undefined) {
      utag.ut = {};
    }
    if (utag.ut.loader === undefined) {
      u.loader = function (o) {
        var a, b, c, l;
        a = document;
        if (o.type === "iframe") {
          b = a.createElement("iframe");
          b.setAttribute("height", "1");
          b.setAttribute("width", "1");
          b.setAttribute("style", "display:none");
          b.setAttribute("src", o.src);
        } else if (o.type === "img") {
          utag.DB("Attach img: " + o.src);
          b = new Image();
          b.src = o.src;
          return;
        } else {
          b = a.createElement("script");
          b.language = "javascript";
          b.type = "text/javascript";
          b.async = 1;
          b.src = o.src;
        }
        if (o.id) {
          b.id = o.id;
        }
        if (typeof o.cb === "function") {
          b.hFlag = 0;
          b.onreadystatechange = function () {
            if (
              (this.readyState === "complete" ||
                this.readyState === "loaded") &&
              !b.hFlag
            ) {
              b.hFlag = 1;
              o.cb();
            }
          };
          b.onload = function () {
            if (!b.hFlag) {
              b.hFlag = 1;
              o.cb();
            }
          };
        }
        l = o.loc || "head";
        c = a.getElementsByTagName(l)[0];
        if (c) {
          utag.DB("Attach to " + l + ": " + o.src);
          if (l === "script") {
            c.parentNode.insertBefore(b, c);
          } else {
            c.appendChild(b);
          }
        }
      };
    } else {
      u.loader = utag.ut.loader;
    }
    if (utag.ut.typeOf === undefined) {
      u.typeOf = function (e) {
        return {}.toString
          .call(e)
          .match(/\s([a-zA-Z]+)/)[1]
          .toLowerCase();
      };
    } else {
      u.typeOf = utag.ut.typeOf;
    }
    u.ev = { view: 1, link: 1 };
    u.o = window[window.GoogleAnalyticsObject];
    u.required = {};
    u.created = false;
    u.all = function (e, o, v, a, b, c) {
      for (var i = 0; i < u.data.account.length; i++) {
        var t = u.data.name[i] ? u.data.name[i] + "." : "";
        if (o === "event") {
          u.o(t + e, o, v, a, b, c);
        } else if (v) {
          u.o(t + e, o, v);
        } else {
          u.o(t + e, o);
        }
      }
    };
    u.setHitData = function (g, a, b, f) {
      var obj = u.data[a];
      for (var d in utag.loader.GV(obj)) {
        if (
          b &&
          d.indexOf("enh_" + b + "-") !== 0 &&
          d.indexOf("enh_all-") !== 0
        ) {
          continue;
        }
        var idx = d.split("-")[1],
          val = obj[d];
        if (u.typeOf(val) !== "array") {
          g[idx] = val;
        } else {
          g[idx] = val[f];
        }
      }
    };
    u.addEvent = function (v) {
      if (
        typeof v.eventCategory == "undefined" ||
        typeof v.eventAction == "undefined"
      ) {
        utag.DB("GA event Category or Action is not set");
        return;
      }
      if (isNaN(parseInt(v.eventValue))) {
        utag.DB("GA event Value is not a number");
        v.eventValue = null;
      } else {
        v.eventValue = parseInt(v.eventValue) || null;
      }
      u.data.ga_events.push(v);
    };
    u.addproduct = function (event_type, len, imp) {
      var g = {},
        i,
        j,
        k = [];
      if (imp === true) {
        k = u.data.enh_impression_id.length
          ? u.data.enh_impression_id
          : u.data.enh_impression_name;
        for (i = 0; i < k.length; i++) {
          g = {};
          g.id = u.data.enh_impression_id[i] ? u.data.enh_impression_id[i] : "";
          g.name = u.data.enh_impression_name[i]
            ? u.data.enh_impression_name[i]
            : "";
          g.brand = u.data.enh_impression_brand[i]
            ? u.data.enh_impression_brand[i]
            : "";
          g.variant = u.data.enh_impression_variant[i]
            ? u.data.enh_impression_variant[i]
            : "";
          g.category = u.data.enh_impression_category[i]
            ? u.data.enh_impression_category[i]
            : "";
          g.list = u.data.enh_impression_list[i]
            ? u.data.enh_impression_list[i]
            : "";
          g.price = u.data.enh_impression_price[i]
            ? u.data.enh_impression_price[i]
            : "";
          g.position = u.data.enh_impression_position[i]
            ? u.data.enh_impression_position[i]
            : "";
          u.setHitData(g, "enhecom_events", event_type, i);
          u.all("ec:addImpression", g);
        }
      } else {
        for (i = 0; i < len; i++) {
          g = {};
          if (u.data.autofill_params === "true") {
            for (j = 0; j < u.data.product_id.length; j++) {
              u.data.product_name[j] =
                u.data.product_name[j] || u.data.product_id[j];
              u.data.product_unit_price[j] =
                u.data.product_unit_price[j] || "1.00";
              u.data.product_quantity[j] = u.data.product_quantity[j] || "1";
            }
          }
          g.id = u.data.product_id[i];
          g.name = u.data.product_name[i] ? u.data.product_name[i] : "";
          g.brand = u.data.product_brand[i] ? u.data.product_brand[i] : "";
          g.variant = u.data.product_variant[i]
            ? u.data.product_variant[i]
            : "";
          g.category = u.data.product_category[i]
            ? u.data.product_category[i]
            : "";
          g.price = u.data.product_unit_price[i]
            ? u.data.product_unit_price[i]
            : "";
          g.quantity = u.data.product_quantity[i]
            ? u.data.product_quantity[i]
            : "";
          g.coupon = u.data.product_discount[i]
            ? u.data.product_discount[i]
            : "";
          g.position = u.data.product_position[i]
            ? u.data.product_position[i]
            : "";
          u.setHitData(g, "enhecom_events", event_type, i);
          u.all("ec:addProduct", g);
        }
      }
    };
    u.addpromo = function (action, event) {
      var f, g;
      for (f = 0; f < u.data.enh_promo_id.length; f++) {
        g = {};
        g.id = u.data.enh_promo_id[f];
        g.name = u.data.enh_promo_name[f]
          ? u.data.enh_promo_name[f]
          : u.data.enh_promo_id[f];
        g.creative = u.data.enh_promo_creative[f]
          ? u.data.enh_promo_creative[f]
          : "";
        g.position = u.data.enh_promo_position[f]
          ? u.data.enh_promo_position[f]
          : "";
        u.all("ec:addPromo", g);
      }
      if (action === "promo_click" && event === "link") {
        u.all("ec:setAction", u.data.enh_action);
        if (u.data.autosend_events === "true") {
          u.all(
            "send",
            "event",
            "Internal Promotions",
            "click",
            g.name ? g.name : g.id,
            { hitCallback: u.data.enh_event_cb }
          );
        }
      }
    };
    u.createTracker = function () {
      var i, tn, start;
      if (u.typeOf(u.data.account) === "string") {
        u.data.account = u.data.account.replace(/\s/g, "").split(",");
      }
      if (u.typeOf(u.data.name) === "string" && u.data.name !== "") {
        u.data.name = u.data.name.replace(/\s/g, "").split(",");
      }
      if (!u.data.name || u.data.name.length !== u.data.account.length) {
        start =
          u.data.name.length !== u.data.account.length ? u.data.name.length : 0;
        tn = utag.tagsettings.gua.trackernames;
        u.data.name = u.data.name || [];
        for (i = start; i < u.data.account.length; i++) {
          u.data.name.push("tealium_" + (i + tn));
        }
        utag.tagsettings.gua.trackernames = tn + i;
      }
    };
    u.initTracker = function () {
      var c, f;
      if (!u.created) {
        u.created = true;
        for (f = 0; f < u.data.account.length; f++) {
          c = {};
          if (u.data.siteSpeedSampleRate) {
            c.siteSpeedSampleRate = parseInt(u.data.siteSpeedSampleRate);
          }
          if (u.data.sampleRate) {
            c.sampleRate = parseFloat(u.data.sampleRate);
          }
          c.cookieDomain = u.data.cookieDomain;
          if (u.data.cookieExpires || u.data.cookieExpires === "0") {
            c.cookieExpires = parseInt(u.data.cookieExpires);
          }
          if (u.data.legacyCookieDomain) {
            c.legacyCookieDomain = u.data.legacyCookieDomain;
          }
          if (
            u.data.legacyHistoryImport === "false" ||
            u.data.legacyHistoryImport === false
          ) {
            c.legacyHistoryImport = u.data.legacyHistoryImport;
          }
          c.allowLinker = u.data.allowLinker;
          if (typeof u.data.name[f] !== "undefined" && u.data.name[f] !== "") {
            c.name = u.data.name[f];
          }
          if (u.data.clientId) {
            c.clientId = u.data.clientId;
          }
          u.o("create", u.data.account[f], c);
        }
        if (u.data.global_event_cb) {
          u.all("set", "hitCallback", u.data.global_event_cb);
        }
        if (u.data.optimizely === "true") {
          window.optimizely = window.optimizely || [];
          window.optimizely.push(["activateUniversalAnalytics"]);
        }
      }
    };
    u.setGlobalProperties = function (data, reset, custom_property) {
      var map = {
          uid: { name: "&uid", type: "exists", reset: true },
          page: { name: "page", type: "exists", reset: true },
          title: { name: "title", type: "exists", reset: true },
          location: { name: "location", type: "exists", reset: false },
          campaignId: { name: "campaignId", type: "exists", reset: true },
          campaignName: { name: "campaignName", type: "exists", reset: true },
          campaignSource: {
            name: "campaignSource",
            type: "exists",
            reset: true,
          },
          campaignMedium: {
            name: "campaignMedium",
            type: "exists",
            reset: true,
          },
          campaignContent: {
            name: "campaignContent",
            type: "exists",
            reset: true,
          },
          campaignKeyword: {
            name: "campaignKeyword",
            type: "exists",
            reset: true,
          },
          dataSource: { name: "dataSource", type: "exists", reset: true },
        },
        prop;
      if (custom_property && reset) {
        u.all("set", custom_property, "");
      }
      for (prop in utag.loader.GV(map)) {
        if (reset && map[prop].reset) {
          u.all("set", map[prop].name, "");
        } else {
          if (map[prop].type === "bool") {
            if (data[prop] == true || data[prop] === "true") {
              u.all("set", map[prop].name, true);
            }
          } else if (map[prop].type === "exists") {
            if (data[prop]) {
              u.all("set", map[prop].name, data[prop]);
            }
          }
        }
      }
    };
    window.utag.tagsettings = window.utag.tagsettings || {};
    window.utag.tagsettings.gua = window.utag.tagsettings.gua || {};
    window.utag.tagsettings.gua.trackernames =
      window.utag.tagsettings.gua.trackernames || 0;
    u.map = {
      reservation_room_date_checkin: "dimension6,enh_all-dimension10",
      reservation_room_date_checkout: "dimension7,enh_all-dimension11",
      order_offer_name: "dimension14",
      avg_room_rate: "enh_all-dimension16,product_unit_price",
      language_code: "dimension2",
      order_promo_code: "dimension8",
      "cp.utag_main_v_id": "enh_all-dimension20,dimension22",
      restaurant_category: "product_category",
      restaurant_order_id: "order_id",
      restaurant_name: "product_name",
      restaurant_time_category: "product_id",
      restaurant_guest_quantity: "product_quantity",
      restaurant_unit_price: "product_unit_price",
      entertainment_order_id: "order_id",
      entertainment_order_total: "revenue",
      entertainment_ticket_category: "product_category",
      entertainment_ticket_price: "product_unit_price",
      entertainment_ticket_type: "product_variant",
      entertainment_ticket_id: "product_id",
      entertainment_ticket_show_name: "product_name",
      entertainment_ticket_quantity: "product_quantity",
      domain_pathname: "eventLabel",
      reservation_order_id: "order_id",
      reservation_order_affiliation: "affiliation",
      reservation_order_tax_amount: "tax",
      reservation_order_total: "revenue",
      reservation_room_sku: "dimension12",
      reservation_room_rate_code: "dimension8",
      reservation_room_category: "product_category",
      reservation_room_num_nights: "dimension5,metric6,product_quantity",
      event_category: "eventCategory",
      event_name: "eventCategory",
      event_action: "eventAction",
      event_label: "eventLabel",
      metric4: "metric4",
      dimension10: "dimension9",
      metric1: "metric1",
      reservation_booking_method: "dimension3,enh_all-dimension13",
      reservation_room_rate_range: "dimension15,enh_all-dimension16",
      billing_info_views: "metric2",
      searches: "metric8",
      tealium_event: "enh_action",
      "tealium_event:selectProduct": "product_click",
      checkout_step: "enh_checkout_step",
      search_type: "dimension4",
      currency: "currency",
      booking_confirmations: "metric3",
      product_id: "product_id",
      product_name: "product_name",
      product_unit_price: "product_unit_price",
      dimension13: "dimension12",
      suites_added: "metric5",
      metric7: "metric7",
      metric9: "metric9",
      upgrade_offer_title: "dimension17",
      upgrade_offer_accepted: "metric10",
      upgrade_offer_rate: "metric11",
      ga_page_override: "page",
      reservation_order_subtotal: "revenue",
      product_category: "product_category",
      entertainment_product_name: "product_name",
      utm_campaign: "campaignName",
      utm_medium: "campaignMedium",
      utm_source: "campaignSource",
      site_section: "dimension21",
      restaurant_dine_date: "dimension18",
      restaurant_dine_time: "dimension20",
      num_of_nights: "product_quantity",
      check_in_date: "dimension13",
      check_out_date: "dimension14",
      hotel_order_id_individual: "order_id",
      hotel_subtotal_individual: "revenue",
      hotel_tax_individual: "tax",
      hotel_offer_code: "product_name",
      room_type: "product_id",
    };
    u.extend = [
      function (a, b) {
        try {
          if (
            b["dom.url"].toString().indexOf("marinabaysands.com/booking") > -1
          ) {
            if (Array.isArray(b.hotel_order_id) && !b.hotel_order_id.length) {
              b.hotel_order_id = "";
            }
          }
        } catch (e) {
          utag.DB(e);
        }
      },
      function (a, b) {
        try {
          if (1) {
            if (b["ga_page_override"] == "abort") {
              return false;
            }
          }
        } catch (e) {
          utag.DB(e);
        }
      },
      function (a, b) {
        try {
          if (
            b["dom.url"]
              .toString()
              .indexOf("/sands-rewards-lifestyle/signup-successful.aspx") > -1
          ) {
            b["domain_pathname"] =
              "/sands-rewards-lifestyle/signup-successful.aspx";
            b["dom.pathname"] =
              "/sands-rewards-lifestyle/signup-successful.aspx";
            b["ga_page_override"] =
              "/sands-rewards-lifestyle/signup-successful.aspx";
            b["dom.url"] = "/sands-rewards-lifestyle/signup-successful.aspx";
          }
        } catch (e) {
          utag.DB(e);
        }
      },
      function (a, b) {
        try {
          if (b["dom.url"].toString().indexOf("/mbs/patron/register") > -1) {
            b["domain_pathname"] =
              "ticket.marinabaysands.com/mbs/patron/register";
            b["dom.pathname"] = "/mbs/patron/register";
            b["ga_page_override"] = "/mbs/patron/register";
            b["dom.url"] = "ticket.marinabaysands.com/mbs/patron/register";
          }
        } catch (e) {
          utag.DB(e);
        }
      },
    ];
    u.send = function (a, b) {
      if (u.ev[a] || u.ev.all !== undefined) {
        u.o = window[window.GoogleAnalyticsObject];
        b.ga_events = b.ga_events || [];
        var c, d, e, f, g, h, tn, prop;
        if (u.data && u.data.name) {
          tn = u.data.name;
        }
        u.data = {
          qsp_delim: "&",
          kvp_delim: "=",
          base_url: "",
          a: a,
          cookieDomain: "" || utag.loader.lh(),
          name: tn || "mbscombinedtest",
          account: "UA-106746250-1",
          anonymizeIp: "false",
          allowLinker: "true",
          crossDomainTrack: "",
          enhancedLinkAttribution: "true",
          enhancedecommerce: "true",
          displayfeatures: "true",
          screenView: "false",
          optimizely: "false",
          init_before_extensions: "false",
          autofill_params: "false",
          autosend_events: "true" || "true",
          clear_global_vars: "false",
          enh_action: "",
          enh_event_cb: "",
          enh_checkout_step: "",
          enh_checkout_option: "",
          product_action_list: "",
          product_variant: [],
          enh_impression_id: [],
          enh_impression_name: [],
          enh_impression_price: [],
          enh_impression_category: [],
          enh_impression_brand: [],
          enh_impression_variant: [],
          enh_impression_list: [],
          enh_impression_position: [],
          enh_promo_id: [],
          enh_promo_name: [],
          enh_promo_creative: [],
          enh_promo_position: [],
          id: "",
          product_id: [],
          product_name: [],
          product_brand: [],
          product_category: [],
          product_quantity: [],
          product_unit_price: [],
          product_discount: [],
          product_position: [],
          ga_events: [],
          sessionControl: "",
          set: {},
        };
        if (u.data.init_before_extensions === "true") {
          u.createTracker();
          u.initTracker();
        }
        for (c = 0; c < u.extend.length; c++) {
          try {
            d = u.extend[c](a, b);
            if (d == false) return;
          } catch (e) {}
        }
        c = [];
        for (d in utag.loader.GV(u.map)) {
          if (b[d] !== undefined && b[d] !== "") {
            e = u.map[d].split(",");
            for (f = 0; f < e.length; f++) {
              if (e[f].indexOf("a.") === 0) {
                u.data["a"][e[f].substring(2)] = b[d];
              } else if (e[f].indexOf("set.") === 0) {
                u.data.set[e[f].substring(4)] = b[d];
              } else {
                u.data[e[f]] = b[d];
              }
            }
          } else {
            h = d.split(":");
            if (h.length === 2 && b[h[0]] === h[1]) {
              if (u.map[d]) {
                u.data.enh_action = u.map[d];
              }
            }
          }
        }
        u.data.account = u.data.tid || u.data.account;
        if (
          u.typeOf(u.data.ga_events) === "array" &&
          u.typeOf(b.ga_events) === "array"
        ) {
          if (u.data.ga_events.length === 0 && b.ga_events.length > 0) {
            u.data.ga_events = b.ga_events;
          } else if (u.data.ga_events.length > 0 && b.ga_events.length > 0) {
            u.data.ga_events = u.data.ga_events.concat(b.ga_events);
          }
        }
        u.data.order_id = u.data.order_id || b._corder || "";
        u.data.order_total = u.data.order_total || b._ctotal || "";
        u.data.order_shipping = u.data.order_shipping || b._cship || "";
        u.data.order_tax = u.data.order_tax || b._ctax || "";
        u.data.order_store = u.data.order_store || b._cstore || "";
        u.data.order_currency = u.data.order_currency || b._ccurrency || "";
        u.data.order_coupon_code = u.data.order_coupon_code || b._cpromo || "";
        if (u.data.product_id.length === 0 && b._cprod !== undefined) {
          u.data.product_id = b._cprod.slice(0);
        }
        if (u.data.product_name.length === 0 && b._cprodname !== undefined) {
          u.data.product_name = b._cprodname.slice(0);
        }
        if (u.data.product_brand.length === 0 && b._cbrand !== undefined) {
          u.data.product_brand = b._cbrand.slice(0);
        }
        if (u.data.product_category.length === 0 && b._ccat !== undefined) {
          u.data.product_category = b._ccat.slice(0);
        }
        if (u.data.product_quantity.length === 0 && b._cquan !== undefined) {
          u.data.product_quantity = b._cquan.slice(0);
        }
        if (u.data.product_unit_price.length === 0 && b._cprice !== undefined) {
          u.data.product_unit_price = b._cprice.slice(0);
        }
        if (u.data.product_discount.length === 0 && b._cpdisc !== undefined) {
          u.data.product_discount = b._cpdisc.slice(0);
        }
        if (u.data.init_before_extensions !== "true") {
          u.createTracker();
          u.initTracker();
        }
        if (u.data.enhancedecommerce === "true" && !u.required["ec"]) {
          u.required["ec"] = !0;
          u.all("require", "ec");
        }
        u.data.app_id = u.data.app_id || u.data.appId || b.app_id;
        u.data.app_name = u.data.app_name || u.data.appName || b.app_name;
        u.data.app_version =
          u.data.app_version || u.data.appVersion || b.app_version;
        u.data.app_rdns =
          u.data.app_rdns || u.data.appInstallerId || b.app_rdns;
        u.data.screen_title =
          u.data.screen_title || u.data.screenName || b.screen_title;
        if (u.data.app_id || u.data.app_name) {
          g = {};
          g.appName = u.data.app_name;
          g.appId = u.data.app_id || "";
          g.appVersion = u.data.app_version;
          g.appInstallerId = u.data.app_rdns;
          u.all("set", g);
        }
        u.data.exception_reason = u.data.exception_reason || b.exception_reason;
        if (u.data.exception_reason) {
          g = {};
          g.exDescription = u.data.exception_reason;
          g.exFatal = true;
          u.all("send", "exception", g);
        }
        if (u.data.allowLinker === "true" || u.data.allowLinker === true) {
          if (!u.required["linker"]) {
            u.all("require", "linker");
            u.required["linker"] = !0;
          }
          if (u.data.crossDomainTrack) {
            if (u.typeOf(u.data.crossDomainTrack) === "string") {
              u.data.crossDomainTrack = u.data.crossDomainTrack
                .replace(/\s/g, "")
                .split(",");
            }
            u.all("linker:autoLink", u.data.crossDomainTrack);
          }
        }
        if (u.data.clear_global_vars === "true") {
          u.setGlobalProperties(u.data, true);
          for (prop in utag.loader.GV(u.data.set)) {
            u.setGlobalProperties(u.data, true, prop);
          }
        }
        u.setGlobalProperties(u.data, false);
        if (u.data.anonymizeIp === "true" || u.data.anonymizeIp === true) {
          u.all("set", "anonymizeIp", true);
        }
        if (u.data.uid) {
          u.all("set", "&uid", u.data.uid);
        }
        if (u.data.page) {
          u.all("set", "page", u.data.page);
        }
        if (u.data.title) {
          u.all("set", "title", u.data.title);
        }
        if (u.data.location) {
          u.all("set", "location", u.data.location);
        }
        if (u.data.campaignId) {
          u.all("set", "campaignId", u.data.campaignId);
        }
        if (u.data.campaignName) {
          u.all("set", "campaignName", u.data.campaignName);
        }
        if (u.data.campaignSource) {
          u.all("set", "campaignSource", u.data.campaignSource);
        }
        if (u.data.campaignMedium) {
          u.all("set", "campaignMedium", u.data.campaignMedium);
        }
        if (u.data.campaignContent) {
          u.all("set", "campaignContent", u.data.campaignContent);
        }
        if (u.data.campaignKeyword) {
          u.all("set", "campaignKeyword", u.data.campaignKeyword);
        }
        if (
          u.data.displayfeatures === "true" ||
          u.data.displayfeatures === true
        ) {
          if (!u.required["displayfeatures"]) {
            u.required["displayfeatures"] = !0;
            u.all("require", "displayfeatures");
          }
        } else {
          u.all("set", "displayFeaturesTask", null);
        }
        if (u.data.dataSource) {
          u.all("set", "dataSource", u.data.dataSource);
        }
        for (prop in utag.loader.GV(u.data.set)) {
          u.all("set", prop, u.data.set[prop]);
        }
        u.data.transaction_events = {};
        u.data.pageview_events = {};
        u.data.link_events = {};
        u.data.enhecom_events = {};
        for (d in utag.loader.GV(u.data)) {
          if (
            d.indexOf("-") > -1 &&
            (d.indexOf("metric") > -1 ||
              d.indexOf("dimension") > -1 ||
              d.indexOf("contentGroup") > -1)
          ) {
            if (d.indexOf("transaction-") === 0) {
              u.data.transaction_events[d] = u.data[d];
            } else if (d.indexOf("pageview-") === 0) {
              u.data.pageview_events[d] = u.data[d];
            } else if (d.indexOf("link-") === 0) {
              u.data.link_events[d] = u.data[d];
            } else if (
              u.data.enhancedecommerce === "true" &&
              d.indexOf("enh_") === 0
            ) {
              u.data.enhecom_events[d] = u.data[d];
            }
          } else if (
            d.indexOf("metric") === 0 ||
            d.indexOf("dimension") === 0 ||
            d.indexOf("contentGroup") === 0
          ) {
            u.all("set", d, u.data[d]);
          }
        }
        if (u.data.enhancedLinkAttribution === "true") {
          if (!u.required["enhancedLinkAttribution"]) {
            u.required["enhancedLinkAttribution"] = !0;
            u.all("require", "linkid", "linkid.js");
          }
        }
        u.data.order_id = u.data.order_id ? u.data.order_id : u.data.id;
        if (u.data.enhancedecommerce === "true") {
          u.all(
            "set",
            "&cu",
            u.data.currency ? u.data.currency : u.data.order_currency
          );
          if (u.data.order_id && u.data.enh_action === "refund") {
            if (
              u.data.order_id instanceof Array &&
              u.data.order_id.length > 0
            ) {
              u.data.order_id = u.data.order_id[0];
            }
            for (f = 0; f < u.data.product_id.length; f++) {
              g = {};
              g.id = u.data.product_id[f];
              g.quantity = u.data.product_quantity[f]
                ? u.data.product_quantity[f]
                : "1";
              u.setHitData(g, "enhecom_events", "product_refund", f);
              u.all("ec:addProduct", g);
            }
            g = {};
            g.id = u.data.order_id;
            u.setHitData(g, "enhecom_events", "refund");
            u.all("ec:setAction", "refund", g);
          } else if (u.data.order_id) {
            if (
              u.data.order_id instanceof Array &&
              u.data.order_id.length > 0
            ) {
              u.data.order_id = u.data.order_id[0];
            }
            u.addproduct("product_purchase", u.data.product_id.length, false);
            g = {};
            g.id = u.data.order_id;
            g.affiliation = u.data.affiliation
              ? u.data.affiliation
              : u.data.order_store;
            g.revenue = u.data.revenue ? u.data.revenue : u.data.order_total;
            g.shipping = u.data.shipping
              ? u.data.shipping
              : u.data.order_shipping;
            g.tax = u.data.tax ? u.data.tax : u.data.order_tax;
            g.coupon = u.data.coupon ? u.data.coupon : u.data.order_coupon_code;
            u.setHitData(g, "enhecom_events", "purchase");
            u.all("ec:setAction", "purchase", g);
          } else if (
            u.data.enh_action === "product_click" &&
            u.data.a === "link"
          ) {
            u.addproduct("product_click", 1, false);
            u.all("ec:setAction", "click", {
              list: u.data.product_action_list,
            });
            if (u.data.autosend_events === "true") {
              u.all("send", "event", "UX", "click", "Results", {
                hitCallback: u.data.enh_event_cb,
              });
            }
          } else if (u.data.enh_action === "detail") {
            u.addproduct("detail", 1, false);
            g = {};
            u.setHitData(g, "list", u.data.product_action_list);
            u.all("ec:setAction", "detail");
          } else if (u.data.enh_action === "add") {
            u.addproduct("product_add", u.data.product_id.length, false);
            u.all("ec:setAction", "add", { list: u.data.product_action_list });
            if (u.data.a === "link" && u.data.autosend_events === "true") {
              u.all("send", "event", "UX", "click", "add to cart", {
                hitCallback: u.data.enh_event_cb,
              });
            }
          } else if (u.data.enh_action === "remove") {
            u.addproduct("product_remove", u.data.product_id.length, false);
            u.all("ec:setAction", "remove");
            if (u.data.a === "link" && u.data.autosend_events === "true") {
              u.all("send", "event", "UX", "click", "remove from cart", {
                hitCallback: u.data.enh_event_cb,
              });
            }
          } else if (u.data.enh_action === "checkout") {
            u.addproduct("product_checkout", u.data.product_id.length, false);
            g = {};
            g.step = u.data.enh_checkout_step || "1";
            g.option = u.data.enh_checkout_option;
            u.all("ec:setAction", u.data.enh_action, g);
          }
          if (u.data.enh_action === "checkout_option" && u.data.a === "link") {
            g = {};
            g.step = u.data.enh_checkout_step || "1";
            g.option = u.data.enh_checkout_option;
            u.all("ec:setAction", u.data.enh_action, g);
            if (u.data.autosend_events === "true") {
              u.all("send", "event", "Checkout", "Option", {
                hitCallback: u.data.enh_event_cb,
              });
            }
          }
          if (u.data.enh_impression_id) {
            u.addproduct(
              "product_impression",
              u.data.enh_impression_id.length,
              true
            );
          }
          if (u.data.enh_promo_id) {
            u.addpromo(u.data.enh_action, u.data.a);
          }
          g = {};
          if (u.data.order_id) {
            u.setHitData(g, "transaction_events");
          }
          u.setHitData(g, "pageview_events");
          if (
            u.data.sessionControl === "start" ||
            u.data.sessionControl === "end"
          ) {
            g.sessionControl = u.data.sessionControl;
          }
          if (u.data.a === "view") {
            if (u.data.screenView === "true" || u.data.screenView === true) {
              g.screenName = u.data.screen_title || "";
              u.all("send", "screenview", g);
            } else {
              g.hitType = "pageview";
              u.all("send", g);
            }
          }
        } else if (u.data.a === "view") {
          g = {};
          u.setHitData(g, "pageview_events");
          if (
            u.data.sessionControl === "start" ||
            u.data.sessionControl === "end"
          ) {
            g.sessionControl = u.data.sessionControl;
          }
          if (u.data.screenView === "true" || u.data.screenView === true) {
            g.screenName = u.data.screen_title || "";
            u.all("send", "screenview", g);
          } else {
            g.hitType = "pageview";
            u.all("send", g);
          }
          if (u.data.order_id && !(u.data.order_id instanceof Array)) {
            if (!u.required["ecommerce"]) {
              u.required["ecommerce"] = !0;
              u.all("require", "ecommerce", "ecommerce.js");
            }
            g = {};
            u.setHitData(g, "transaction_events");
            g.id = u.data.order_id;
            g.affiliation = u.data.affiliation
              ? u.data.affiliation
              : u.data.order_store;
            g.revenue = u.data.revenue ? u.data.revenue : u.data.order_total;
            g.shipping = u.data.shipping
              ? u.data.shipping
              : u.data.order_shipping;
            g.tax = u.data.tax ? u.data.tax : u.data.order_tax;
            g.currency = u.data.currency
              ? u.data.currency
              : u.data.order_currency;
            u.all("ecommerce:addTransaction", g);
            for (f = 0; f < u.data.product_id.length; f++) {
              g = {};
              g.id = u.data.order_id;
              g.sku = u.data.product_id[f];
              g.name = u.data.product_name[f]
                ? u.data.product_name[f]
                : u.data.product_id[f];
              g.category = u.data.product_category[f]
                ? u.data.product_category[f]
                : "";
              g.price = u.data.product_unit_price[f]
                ? u.data.product_unit_price[f]
                : "1.00";
              g.quantity = u.data.product_quantity[f]
                ? u.data.product_quantity[f]
                : "1";
              u.setHitData(g, "transaction_events");
              u.all("ecommerce:addItem", g);
            }
            u.all("ecommerce:send");
          } else if (
            u.data.order_id instanceof Array &&
            u.data.order_id.length > 0
          ) {
            if (!u.required["ecommerce"]) {
              u.required["ecommerce"] = !0;
              u.all("require", "ecommerce", "ecommerce.js");
            }
            var lastindex = 0;
            for (f = 0; f < u.data.order_id.length; f++) {
              if (
                f === u.data.order_id.length - 1 ||
                u.data.order_id[f] !== u.data.order_id[f + 1]
              ) {
                g = {};
                u.setHitData(g, "transaction_events");
                g.id = u.data.order_id[f];
                g.affiliation =
                  u.data.affiliation &&
                  typeof u.data.affiliation[f] !== "undefined"
                    ? u.data.affiliation[f]
                    : u.data.order_store;
                g.revenue =
                  u.data.revenue && typeof u.data.revenue[f] !== "undefined"
                    ? u.data.revenue[f]
                    : u.data.order_total;
                g.shipping =
                  u.data.shipping && typeof u.data.shipping[f] !== "undefined"
                    ? u.data.shipping[f]
                    : u.data.order_shipping;
                g.tax =
                  u.data.tax && typeof u.data.tax[f] !== "undefined"
                    ? u.data.tax[f]
                    : u.data.order_tax;
                g.currency = u.data.currency
                  ? u.data.currency
                  : u.data.order_currency;
                u.all("ecommerce:addTransaction", g);
                for (e = lastindex; e < f + 1; e++) {
                  g = {};
                  g.id = u.data.order_id[f];
                  g.sku = u.data.product_id[e];
                  g.name = u.data.product_name[e]
                    ? u.data.product_name[e]
                    : u.data.product_id[e];
                  g.category = u.data.product_category[e]
                    ? u.data.product_category[e]
                    : "";
                  g.price = u.data.product_unit_price[e]
                    ? u.data.product_unit_price[e]
                    : "1.00";
                  g.quantity = u.data.product_quantity[e]
                    ? u.data.product_quantity[e]
                    : "1";
                  u.setHitData(g, "transaction_events");
                  u.all("ecommerce:addItem", g);
                }
                lastindex = f + 1;
              }
            }
            u.all("ecommerce:send");
          }
        }
        if (u.data.eventCategory && u.data.eventAction) {
          g = {};
          u.setHitData(g, "link_events");
          g.hitType = "event";
          g.eventCategory = u.data.eventCategory;
          if (u.data.nonInteraction) {
            g.nonInteraction = 1;
          }
          g.eventAction = u.data.eventAction;
          if (u.data.eventLabel) {
            g.eventLabel = u.data.eventLabel;
          }
          if (
            typeof u.data.eventValue !== "undefined" &&
            u.data.eventValue !== ""
          ) {
            g.eventValue = u.data.eventValue;
          }
          if (u.data.standard_event_cb) {
            g.hitCallback = u.data.standard_event_cb;
          }
          if (u.data.screenView === "true" || u.data.screenView === true) {
            g.screenName = u.data.screen_title || "";
          }
          if (
            u.data.sessionControl === "start" ||
            u.data.sessionControl === "end"
          ) {
            g.sessionControl = u.data.sessionControl;
          }
          u.all("send", g);
          u.data.eventCategory =
            u.data.eventAction =
            u.data.eventLabel =
            u.data.eventValue =
              "";
        }
        for (e = 0; e < u.data.ga_events.length; e++) {
          g = {};
          u.setHitData(g, "link_events");
          g.hitType = "event";
          g.eventCategory = u.data.ga_events[e].eventCategory;
          g.eventAction = u.data.ga_events[e].eventAction;
          g.eventLabel = u.data.ga_events[e].eventLabel;
          g.eventValue = u.data.ga_events[e].eventValue;
          if (u.data.ga_events[e].nonInteraction) {
            g.nonInteraction = 1;
          }
          if (
            u.data.sessionControl === "start" ||
            u.data.sessionControl === "end"
          ) {
            g.sessionControl = u.data.sessionControl;
          }
          u.all("send", g);
        }
        if (
          u.data.socialNetwork &&
          u.data.socialAction &&
          u.data.socialTarget
        ) {
          g = {};
          g.hitType = "social";
          g.socialNetwork = u.data.socialNetwork;
          g.socialAction = u.data.socialAction;
          g.socialTarget = u.data.socialTarget;
          u.all("send", g);
          u.data.socialNetwork = u.data.socialAction = u.data.socialTarget = "";
        }
        if (u.data.timingCategory && u.data.timingVar && u.data.timingValue) {
          g = {};
          g.hitType = "timing";
          g.timingCategory = u.data.timingCategory;
          g.timingVar = u.data.timingVar;
          g.timingValue = u.data.timingValue;
          g.timingLabel = u.data.timingLabel || "";
          u.all("send", g);
        }
        if (u.data["ga-disable"]) {
          window["ga-disable-" + u.data["ga-disable"]] = true;
        }
        (function () {
          var id = "tealium-tag-7110";
          if (document.getElementById(id)) {
            return;
          }
          u.loader({
            type: "script",
            src: "https://www.google-analytics.com/analytics.js",
            loc: "script",
            id: id,
          });
          u.o.l = 1 * new Date();
        })();
      }
    };
    utag.o[loader].loader.LOAD(id);
  })("32", "mbs.main");
} catch (error) {
  utag.DB(error);
}

//tealium universal tag - utag.184 ut4.0.202207210624, Copyright 2022 Tealium.com Inc. All Rights Reserved.
window.GoogleAnalyticsObject = "" || "ga";
window[window.GoogleAnalyticsObject] =
  window[window.GoogleAnalyticsObject] ||
  function () {
    (window[window.GoogleAnalyticsObject].q =
      window[window.GoogleAnalyticsObject].q || []).push(arguments);
  };
try {
  (function (id, loader) {
    var u = {};
    utag.o[loader].sender[id] = u;
    if (utag.ut === undefined) {
      utag.ut = {};
    }
    if (utag.ut.loader === undefined) {
      u.loader = function (o) {
        var a, b, c, l;
        a = document;
        if (o.type === "iframe") {
          b = a.createElement("iframe");
          b.setAttribute("height", "1");
          b.setAttribute("width", "1");
          b.setAttribute("style", "display:none");
          b.setAttribute("src", o.src);
        } else if (o.type === "img") {
          utag.DB("Attach img: " + o.src);
          b = new Image();
          b.src = o.src;
          return;
        } else {
          b = a.createElement("script");
          b.language = "javascript";
          b.type = "text/javascript";
          b.async = 1;
          b.src = o.src;
        }
        if (o.id) {
          b.id = o.id;
        }
        if (typeof o.cb === "function") {
          b.hFlag = 0;
          b.onreadystatechange = function () {
            if (
              (this.readyState === "complete" ||
                this.readyState === "loaded") &&
              !b.hFlag
            ) {
              b.hFlag = 1;
              o.cb();
            }
          };
          b.onload = function () {
            if (!b.hFlag) {
              b.hFlag = 1;
              o.cb();
            }
          };
        }
        l = o.loc || "head";
        c = a.getElementsByTagName(l)[0];
        if (c) {
          utag.DB("Attach to " + l + ": " + o.src);
          if (l === "script") {
            c.parentNode.insertBefore(b, c);
          } else {
            c.appendChild(b);
          }
        }
      };
    } else {
      u.loader = utag.ut.loader;
    }
    if (utag.ut.typeOf === undefined) {
      u.typeOf = function (e) {
        return {}.toString
          .call(e)
          .match(/\s([a-zA-Z]+)/)[1]
          .toLowerCase();
      };
    } else {
      u.typeOf = utag.ut.typeOf;
    }
    u.ev = { view: 1, link: 1 };
    u.o = window[window.GoogleAnalyticsObject];
    u.required = {};
    u.created = false;
    u.all = function (e, o, v, a, b, c) {
      for (var i = 0; i < u.data.account.length; i++) {
        var t = u.data.name[i] ? u.data.name[i] + "." : "";
        if (o === "event") {
          u.o(t + e, o, v, a, b, c);
        } else if (v) {
          u.o(t + e, o, v);
        } else {
          u.o(t + e, o);
        }
      }
    };
    u.setHitData = function (g, a, b, f) {
      var obj = u.data[a];
      for (var d in utag.loader.GV(obj)) {
        if (
          b &&
          d.indexOf("enh_" + b + "-") !== 0 &&
          d.indexOf("enh_all-") !== 0
        ) {
          continue;
        }
        var idx = d.split("-")[1],
          val = obj[d];
        if (u.typeOf(val) !== "array") {
          g[idx] = val;
        } else {
          g[idx] = val[f];
        }
      }
    };
    u.addEvent = function (v) {
      if (
        typeof v.eventCategory == "undefined" ||
        typeof v.eventAction == "undefined"
      ) {
        utag.DB("GA event Category or Action is not set");
        return;
      }
      if (isNaN(parseInt(v.eventValue))) {
        utag.DB("GA event Value is not a number");
        v.eventValue = null;
      } else {
        v.eventValue = parseInt(v.eventValue) || null;
      }
      u.data.ga_events.push(v);
    };
    u.addproduct = function (event_type, len, imp) {
      var g = {},
        i,
        j,
        k = [];
      if (imp === true) {
        k = u.data.enh_impression_id.length
          ? u.data.enh_impression_id
          : u.data.enh_impression_name;
        for (i = 0; i < k.length; i++) {
          g = {};
          g.id = u.data.enh_impression_id[i] ? u.data.enh_impression_id[i] : "";
          g.name = u.data.enh_impression_name[i]
            ? u.data.enh_impression_name[i]
            : "";
          g.brand = u.data.enh_impression_brand[i]
            ? u.data.enh_impression_brand[i]
            : "";
          g.variant = u.data.enh_impression_variant[i]
            ? u.data.enh_impression_variant[i]
            : "";
          g.category = u.data.enh_impression_category[i]
            ? u.data.enh_impression_category[i]
            : "";
          g.list = u.data.enh_impression_list[i]
            ? u.data.enh_impression_list[i]
            : "";
          g.price = u.data.enh_impression_price[i]
            ? u.data.enh_impression_price[i]
            : "";
          g.position = u.data.enh_impression_position[i]
            ? u.data.enh_impression_position[i]
            : "";
          u.setHitData(g, "enhecom_events", event_type, i);
          u.all("ec:addImpression", g);
        }
      } else {
        for (i = 0; i < len; i++) {
          g = {};
          if (u.data.autofill_params === "true") {
            for (j = 0; j < u.data.product_id.length; j++) {
              u.data.product_name[j] =
                u.data.product_name[j] || u.data.product_id[j];
              u.data.product_unit_price[j] =
                u.data.product_unit_price[j] || "1.00";
              u.data.product_quantity[j] = u.data.product_quantity[j] || "1";
            }
          }
          g.id = u.data.product_id[i];
          g.name = u.data.product_name[i] ? u.data.product_name[i] : "";
          g.brand = u.data.product_brand[i] ? u.data.product_brand[i] : "";
          g.variant = u.data.product_variant[i]
            ? u.data.product_variant[i]
            : "";
          g.category = u.data.product_category[i]
            ? u.data.product_category[i]
            : "";
          g.price = u.data.product_unit_price[i]
            ? u.data.product_unit_price[i]
            : "";
          g.quantity = u.data.product_quantity[i]
            ? u.data.product_quantity[i]
            : "";
          g.coupon = u.data.product_discount[i]
            ? u.data.product_discount[i]
            : "";
          g.position = u.data.product_position[i]
            ? u.data.product_position[i]
            : "";
          u.setHitData(g, "enhecom_events", event_type, i);
          u.all("ec:addProduct", g);
        }
      }
    };
    u.addpromo = function (action, event) {
      var f, g;
      for (f = 0; f < u.data.enh_promo_id.length; f++) {
        g = {};
        g.id = u.data.enh_promo_id[f];
        g.name = u.data.enh_promo_name[f]
          ? u.data.enh_promo_name[f]
          : u.data.enh_promo_id[f];
        g.creative = u.data.enh_promo_creative[f]
          ? u.data.enh_promo_creative[f]
          : "";
        g.position = u.data.enh_promo_position[f]
          ? u.data.enh_promo_position[f]
          : "";
        u.all("ec:addPromo", g);
      }
      if (action === "promo_click" && event === "link") {
        u.all("ec:setAction", u.data.enh_action);
        if (u.data.autosend_events === "true") {
          u.all(
            "send",
            "event",
            "Internal Promotions",
            "click",
            g.name ? g.name : g.id,
            { hitCallback: u.data.enh_event_cb }
          );
        }
      }
    };
    u.createTracker = function () {
      var i, tn, start;
      if (u.typeOf(u.data.account) === "string") {
        u.data.account = u.data.account.replace(/\s/g, "").split(",");
      }
      if (u.typeOf(u.data.name) === "string" && u.data.name !== "") {
        u.data.name = u.data.name.replace(/\s/g, "").split(",");
      }
      if (!u.data.name || u.data.name.length !== u.data.account.length) {
        start =
          u.data.name.length !== u.data.account.length ? u.data.name.length : 0;
        tn = utag.tagsettings.gua.trackernames;
        u.data.name = u.data.name || [];
        for (i = start; i < u.data.account.length; i++) {
          u.data.name.push("tealium_" + (i + tn));
        }
        utag.tagsettings.gua.trackernames = tn + i;
      }
    };
    u.initTracker = function () {
      var c, f;
      if (!u.created) {
        u.created = true;
        for (f = 0; f < u.data.account.length; f++) {
          c = {};
          if (u.data.siteSpeedSampleRate) {
            c.siteSpeedSampleRate = parseInt(u.data.siteSpeedSampleRate);
          }
          if (u.data.sampleRate) {
            c.sampleRate = parseFloat(u.data.sampleRate);
          }
          c.cookieDomain = u.data.cookieDomain;
          if (u.data.cookieExpires || u.data.cookieExpires === "0") {
            c.cookieExpires = parseInt(u.data.cookieExpires);
          }
          if (u.data.legacyCookieDomain) {
            c.legacyCookieDomain = u.data.legacyCookieDomain;
          }
          if (
            u.data.legacyHistoryImport === "false" ||
            u.data.legacyHistoryImport === false
          ) {
            c.legacyHistoryImport = u.data.legacyHistoryImport;
          }
          c.allowLinker = u.data.allowLinker;
          if (typeof u.data.name[f] !== "undefined" && u.data.name[f] !== "") {
            c.name = u.data.name[f];
          }
          if (u.data.clientId) {
            c.clientId = u.data.clientId;
          }
          u.o("create", u.data.account[f], c);
        }
        if (u.data.global_event_cb) {
          u.all("set", "hitCallback", u.data.global_event_cb);
        }
        if (u.data.optimizely === "true") {
          window.optimizely = window.optimizely || [];
          window.optimizely.push(["activateUniversalAnalytics"]);
        }
      }
    };
    u.setGlobalProperties = function (data, reset, custom_property) {
      var map = {
          uid: { name: "&uid", type: "exists", reset: true },
          page: { name: "page", type: "exists", reset: true },
          title: { name: "title", type: "exists", reset: true },
          location: { name: "location", type: "exists", reset: false },
          campaignId: { name: "campaignId", type: "exists", reset: true },
          campaignName: { name: "campaignName", type: "exists", reset: true },
          campaignSource: {
            name: "campaignSource",
            type: "exists",
            reset: true,
          },
          campaignMedium: {
            name: "campaignMedium",
            type: "exists",
            reset: true,
          },
          campaignContent: {
            name: "campaignContent",
            type: "exists",
            reset: true,
          },
          campaignKeyword: {
            name: "campaignKeyword",
            type: "exists",
            reset: true,
          },
          dataSource: { name: "dataSource", type: "exists", reset: true },
        },
        prop;
      if (custom_property && reset) {
        u.all("set", custom_property, "");
      }
      for (prop in utag.loader.GV(map)) {
        if (reset && map[prop].reset) {
          u.all("set", map[prop].name, "");
        } else {
          if (map[prop].type === "bool") {
            if (data[prop] == true || data[prop] === "true") {
              u.all("set", map[prop].name, true);
            }
          } else if (map[prop].type === "exists") {
            if (data[prop]) {
              u.all("set", map[prop].name, data[prop]);
            }
          }
        }
      }
    };
    window.utag.tagsettings = window.utag.tagsettings || {};
    window.utag.tagsettings.gua = window.utag.tagsettings.gua || {};
    window.utag.tagsettings.gua.trackernames =
      window.utag.tagsettings.gua.trackernames || 0;
    u.map = {
      reservation_room_date_checkin: "dimension13,enh_all-dimension11",
      reservation_room_date_checkout: "dimension14,enh_all-dimension12",
      avg_room_rate: "enh_all-dimension15,product_unit_price",
      language_code: "dimension1",
      order_promo_code: "dimension7",
      "cp.utag_main_v_id": "enh_all-dimension19",
      restaurant_category: "product_category",
      restaurant_order_id: "order_id",
      restaurant_name: "product_name",
      restaurant_time_category: "product_id",
      restaurant_guest_quantity: "product_quantity",
      restaurant_unit_price: "product_unit_price",
      entertainment_order_id: "order_id",
      entertainment_order_total: "revenue",
      entertainment_ticket_category: "product_category",
      entertainment_ticket_price: "product_unit_price",
      entertainment_ticket_type: "product_variant",
      entertainment_ticket_id: "product_id",
      entertainment_ticket_show_name: "product_name",
      entertainment_ticket_quantity: "product_quantity",
      domain_pathname: "eventLabel",
      reservation_order_id: "order_id",
      reservation_order_affiliation: "affiliation",
      reservation_order_tax_amount: "tax",
      reservation_order_subtotal: "revenue",
      reservation_order_total: "revenue",
      reservation_room_sku: "dimension11",
      reservation_room_rate_code: "dimension9",
      reservation_room_category: "product_category",
      reservation_room_num_nights: "metric6,product_quantity,dimension6",
      event_category: "eventCategory",
      event_name: "eventCategory",
      event_action: "eventAction",
      event_label: "eventLabel",
      metric4: "metric4",
      dimension10: "dimension10",
      metric1: "metric1",
      reservation_booking_method: "dimension4,enh_all-dimension14",
      reservation_room_rate_range: "dimension16,enh_all-dimension17",
      billing_info_views: "metric2",
      searches: "metric8",
      tealium_event: "enh_action",
      "tealium_event:addToCart": "add",
      checkout_step: "enh_checkout_step",
      search_type: "dimension5",
      currency: "currency",
      booking_confirmations: "metric3",
      product_id: "product_id",
      product_name: "product_name",
      product_unit_price: "product_unit_price",
      dimension13: "dimension13",
      suites_added: "metric5",
      metric7: "metric7",
      metric9: "metric9",
      upgrade_offer_title: "dimension18",
      upgrade_offer_accepted: "metric10",
      upgrade_offer_rate: "metric11",
      ga_page_override: "page",
      restaurant_dine_date: "dimension18",
      restaurant_order_subtotal: "revenue",
      restaurant_revenue: "revenue",
      DY_TagName: "dimension5",
      DY_ExperienceName: "dimension6",
      DY_VariationName: "dimension7",
      product_category: "product_category",
      entertainment_ticket_unit_price_with_fee: "product_unit_price",
      entertainment_product_name: "product_name",
      entertainment_order_total_with_fees: "revenue,metric1",
      entertainment_price_class: "enh_all-dimension9,dimension9",
      entertainment_product_id: "product_id",
      entertainment_ticket_time: "enh_all-dimension10,dimension10",
      entertainment_venue: "enh_all-dimension11,dimension11",
      entertainment_ticket_unit_price_without_fees: "product_unit_price",
      entertainment_order_total_without_fees: "revenue",
      entertainment_ticket_unit_price_with_fees: "enh_all-metric2,metric2",
      entertainment_ticket_date: "enh_all-dimension12,dimension12",
      entertainment_order_quantity: "enh_all-metric3",
      is_member: "dimension2",
      site_section: "dimension21",
      ga_product_brand: "product_brand",
      merchandise_product_name: "product_name",
      merchandise_product_id: "product_id",
      merchandise_promo_name: "coupon",
      merchandise_product_quantity: "product_quantity",
      merchandise_product_unit_price: "product_unit_price",
      merchandise_order_subtotal_aft_discount: "revenue",
      merchandise_order_delivery_fee: "shipping",
      merchandise_order_id: "order_id",
      merchandise_product_type: "product_variant",
      merchandise_collection_date: "dimension18",
      merchandise_collection_method: "dimension19",
      merchandise_collection_time: "dimension20",
      utm_campaign: "campaignName",
      utm_medium: "campaignMedium",
      utm_source: "campaignSource",
      utm_content: "campaignContent",
      utm_term: "campaignTerm",
      offer_name: "dimension25",
      member_tier: "dimension23",
      srl_membership_id: "dimension24",
      src_membership_id: "dimension26",
      restaurant_dine_time: "dimension20",
      num_of_nights: "product_quantity",
      check_in_date: "dimension13",
      check_out_date: "dimension14",
      hotel_order_id_individual: "order_id",
      hotel_subtotal_individual: "revenue",
      hotel_tax_individual: "tax",
      hotel_offer_code: "product_name",
      room_type: "product_id",
      check_in: "dimension13",
      check_out: "dimension14",
      hotel_order_rate_code: "product_name",
    };
    u.extend = [
      function (a, b) {
        try {
          if (
            b["dom.url"].toString().indexOf("marinabaysands.com/booking") > -1
          ) {
            if (Array.isArray(b.hotel_order_id) && !b.hotel_order_id.length) {
              b.hotel_order_id = "";
            }
          }
        } catch (e) {
          utag.DB(e);
        }
      },
      function (a, b) {
        try {
          if (1) {
            if (b["ga_page_override"] == "abort") {
              return false;
            }
          }
        } catch (e) {
          utag.DB(e);
        }
      },
      function (a, b) {
        try {
          if (
            b["dom.url"]
              .toString()
              .indexOf("/sands-rewards-lifestyle/signup-successful.aspx") > -1
          ) {
            b["domain_pathname"] =
              "/sands-rewards-lifestyle/signup-successful.aspx";
            b["dom.pathname"] =
              "/sands-rewards-lifestyle/signup-successful.aspx";
            b["ga_page_override"] =
              "/sands-rewards-lifestyle/signup-successful.aspx";
            b["dom.url"] = "/sands-rewards-lifestyle/signup-successful.aspx";
          }
        } catch (e) {
          utag.DB(e);
        }
      },
      function (a, b) {
        try {
          if (b["dom.url"].toString().indexOf("/mbs/patron/register") > -1) {
            b["domain_pathname"] =
              "ticket.marinabaysands.com/mbs/patron/register";
            b["dom.pathname"] = "/mbs/patron/register";
            b["ga_page_override"] = "/mbs/patron/register";
            b["dom.url"] = "ticket.marinabaysands.com/mbs/patron/register";
          }
        } catch (e) {
          utag.DB(e);
        }
      },
      function (a, b) {
        try {
          if (
            (b["tealium_event"]
              .toString()
              .toLowerCase()
              .indexOf("merchandise".toLowerCase()) > -1 &&
              typeof b["restaurant_name"] != "undefined" &&
              b["restaurant_name"] != "") ||
            (b["product_category"]
              .toString()
              .toLowerCase()
              .indexOf("merchandise".toLowerCase()) > -1 &&
              typeof b["restaurant_name"] != "undefined" &&
              b["restaurant_name"] != "") ||
            typeof b["product_category"] != "undefined"
          ) {
            if (
              typeof b["product_category"] == "string" &&
              b["product_category"] != "merchandise"
            ) {
              var product_category = [];
              product_category[0] = b["product_category"];
              b["product_category"] = product_category;
            }
            if (
              typeof b["restaurant_name"] == "string" &&
              typeof b["merchandise_product_name"] != "undefined"
            ) {
              var product_brand = [];
              for (var i = 0; i < b["merchandise_product_name"].length; i++) {
                product_brand[i] = b["restaurant_name"];
              }
              b["ga_product_brand"] = product_brand;
            }
            if (
              typeof b["product_category"] == "string" &&
              typeof b["merchandise_product_name"] != "undefined"
            ) {
              var product_category = [];
              for (var i = 0; i < b["merchandise_product_name"].length; i++) {
                product_category[i] = b["product_category"];
              }
              b["product_category"] = product_category;
            }
          }
        } catch (e) {
          utag.DB(e);
        }
      },
    ];
    u.send = function (a, b) {
      if (u.ev[a] || u.ev.all !== undefined) {
        u.o = window[window.GoogleAnalyticsObject];
        b.ga_events = b.ga_events || [];
        var c, d, e, f, g, h, tn, prop;
        if (u.data && u.data.name) {
          tn = u.data.name;
        }
        u.data = {
          qsp_delim: "&",
          kvp_delim: "=",
          base_url: "",
          a: a,
          cookieDomain: "" || utag.loader.lh(),
          name: tn || "mbscombined",
          account: "UA-75465389-1",
          anonymizeIp: "false",
          allowLinker: "true",
          crossDomainTrack: "",
          enhancedLinkAttribution: "true",
          enhancedecommerce: "true",
          displayfeatures: "true",
          screenView: "false",
          optimizely: "false",
          init_before_extensions: "false",
          autofill_params: "false",
          autosend_events: "true" || "true",
          clear_global_vars: "false",
          enh_action: "",
          enh_event_cb: "",
          enh_checkout_step: "",
          enh_checkout_option: "",
          product_action_list: "",
          product_variant: [],
          enh_impression_id: [],
          enh_impression_name: [],
          enh_impression_price: [],
          enh_impression_category: [],
          enh_impression_brand: [],
          enh_impression_variant: [],
          enh_impression_list: [],
          enh_impression_position: [],
          enh_promo_id: [],
          enh_promo_name: [],
          enh_promo_creative: [],
          enh_promo_position: [],
          id: "",
          product_id: [],
          product_name: [],
          product_brand: [],
          product_category: [],
          product_quantity: [],
          product_unit_price: [],
          product_discount: [],
          product_position: [],
          ga_events: [],
          sessionControl: "",
          set: {},
        };
        if (u.data.init_before_extensions === "true") {
          u.createTracker();
          u.initTracker();
        }
        for (c = 0; c < u.extend.length; c++) {
          try {
            d = u.extend[c](a, b);
            if (d == false) return;
          } catch (e) {}
        }
        c = [];
        for (d in utag.loader.GV(u.map)) {
          if (b[d] !== undefined && b[d] !== "") {
            e = u.map[d].split(",");
            for (f = 0; f < e.length; f++) {
              if (e[f].indexOf("a.") === 0) {
                u.data["a"][e[f].substring(2)] = b[d];
              } else if (e[f].indexOf("set.") === 0) {
                u.data.set[e[f].substring(4)] = b[d];
              } else {
                u.data[e[f]] = b[d];
              }
            }
          } else {
            h = d.split(":");
            if (h.length === 2 && b[h[0]] === h[1]) {
              if (u.map[d]) {
                u.data.enh_action = u.map[d];
              }
            }
          }
        }
        u.data.account = u.data.tid || u.data.account;
        if (
          u.typeOf(u.data.ga_events) === "array" &&
          u.typeOf(b.ga_events) === "array"
        ) {
          if (u.data.ga_events.length === 0 && b.ga_events.length > 0) {
            u.data.ga_events = b.ga_events;
          } else if (u.data.ga_events.length > 0 && b.ga_events.length > 0) {
            u.data.ga_events = u.data.ga_events.concat(b.ga_events);
          }
        }
        u.data.order_id = u.data.order_id || b._corder || "";
        u.data.order_total = u.data.order_total || b._ctotal || "";
        u.data.order_shipping = u.data.order_shipping || b._cship || "";
        u.data.order_tax = u.data.order_tax || b._ctax || "";
        u.data.order_store = u.data.order_store || b._cstore || "";
        u.data.order_currency = u.data.order_currency || b._ccurrency || "";
        u.data.order_coupon_code = u.data.order_coupon_code || b._cpromo || "";
        if (u.data.product_id.length === 0 && b._cprod !== undefined) {
          u.data.product_id = b._cprod.slice(0);
        }
        if (u.data.product_name.length === 0 && b._cprodname !== undefined) {
          u.data.product_name = b._cprodname.slice(0);
        }
        if (u.data.product_brand.length === 0 && b._cbrand !== undefined) {
          u.data.product_brand = b._cbrand.slice(0);
        }
        if (u.data.product_category.length === 0 && b._ccat !== undefined) {
          u.data.product_category = b._ccat.slice(0);
        }
        if (u.data.product_quantity.length === 0 && b._cquan !== undefined) {
          u.data.product_quantity = b._cquan.slice(0);
        }
        if (u.data.product_unit_price.length === 0 && b._cprice !== undefined) {
          u.data.product_unit_price = b._cprice.slice(0);
        }
        if (u.data.product_discount.length === 0 && b._cpdisc !== undefined) {
          u.data.product_discount = b._cpdisc.slice(0);
        }
        if (u.data.init_before_extensions !== "true") {
          u.createTracker();
          u.initTracker();
        }
        if (u.data.enhancedecommerce === "true" && !u.required["ec"]) {
          u.required["ec"] = !0;
          u.all("require", "ec");
        }
        u.data.app_id = u.data.app_id || u.data.appId || b.app_id;
        u.data.app_name = u.data.app_name || u.data.appName || b.app_name;
        u.data.app_version =
          u.data.app_version || u.data.appVersion || b.app_version;
        u.data.app_rdns =
          u.data.app_rdns || u.data.appInstallerId || b.app_rdns;
        u.data.screen_title =
          u.data.screen_title || u.data.screenName || b.screen_title;
        if (u.data.app_id || u.data.app_name) {
          g = {};
          g.appName = u.data.app_name;
          g.appId = u.data.app_id || "";
          g.appVersion = u.data.app_version;
          g.appInstallerId = u.data.app_rdns;
          u.all("set", g);
        }
        u.data.exception_reason = u.data.exception_reason || b.exception_reason;
        if (u.data.exception_reason) {
          g = {};
          g.exDescription = u.data.exception_reason;
          g.exFatal = true;
          u.all("send", "exception", g);
        }
        if (u.data.allowLinker === "true" || u.data.allowLinker === true) {
          if (!u.required["linker"]) {
            u.all("require", "linker");
            u.required["linker"] = !0;
          }
          if (u.data.crossDomainTrack) {
            if (u.typeOf(u.data.crossDomainTrack) === "string") {
              u.data.crossDomainTrack = u.data.crossDomainTrack
                .replace(/\s/g, "")
                .split(",");
            }
            u.all("linker:autoLink", u.data.crossDomainTrack);
          }
        }
        if (u.data.clear_global_vars === "true") {
          u.setGlobalProperties(u.data, true);
          for (prop in utag.loader.GV(u.data.set)) {
            u.setGlobalProperties(u.data, true, prop);
          }
        }
        u.setGlobalProperties(u.data, false);
        if (u.data.anonymizeIp === "true" || u.data.anonymizeIp === true) {
          u.all("set", "anonymizeIp", true);
        }
        if (u.data.uid) {
          u.all("set", "&uid", u.data.uid);
        }
        if (u.data.page) {
          u.all("set", "page", u.data.page);
        }
        if (u.data.title) {
          u.all("set", "title", u.data.title);
        }
        if (u.data.location) {
          u.all("set", "location", u.data.location);
        }
        if (u.data.campaignId) {
          u.all("set", "campaignId", u.data.campaignId);
        }
        if (u.data.campaignName) {
          u.all("set", "campaignName", u.data.campaignName);
        }
        if (u.data.campaignSource) {
          u.all("set", "campaignSource", u.data.campaignSource);
        }
        if (u.data.campaignMedium) {
          u.all("set", "campaignMedium", u.data.campaignMedium);
        }
        if (u.data.campaignContent) {
          u.all("set", "campaignContent", u.data.campaignContent);
        }
        if (u.data.campaignKeyword) {
          u.all("set", "campaignKeyword", u.data.campaignKeyword);
        }
        if (
          u.data.displayfeatures === "true" ||
          u.data.displayfeatures === true
        ) {
          if (!u.required["displayfeatures"]) {
            u.required["displayfeatures"] = !0;
            u.all("require", "displayfeatures");
          }
        } else {
          u.all("set", "displayFeaturesTask", null);
        }
        if (u.data.dataSource) {
          u.all("set", "dataSource", u.data.dataSource);
        }
        for (prop in utag.loader.GV(u.data.set)) {
          u.all("set", prop, u.data.set[prop]);
        }
        u.data.transaction_events = {};
        u.data.pageview_events = {};
        u.data.link_events = {};
        u.data.enhecom_events = {};
        for (d in utag.loader.GV(u.data)) {
          if (
            d.indexOf("-") > -1 &&
            (d.indexOf("metric") > -1 ||
              d.indexOf("dimension") > -1 ||
              d.indexOf("contentGroup") > -1)
          ) {
            if (d.indexOf("transaction-") === 0) {
              u.data.transaction_events[d] = u.data[d];
            } else if (d.indexOf("pageview-") === 0) {
              u.data.pageview_events[d] = u.data[d];
            } else if (d.indexOf("link-") === 0) {
              u.data.link_events[d] = u.data[d];
            } else if (
              u.data.enhancedecommerce === "true" &&
              d.indexOf("enh_") === 0
            ) {
              u.data.enhecom_events[d] = u.data[d];
            }
          } else if (
            d.indexOf("metric") === 0 ||
            d.indexOf("dimension") === 0 ||
            d.indexOf("contentGroup") === 0
          ) {
            u.all("set", d, u.data[d]);
          }
        }
        if (u.data.enhancedLinkAttribution === "true") {
          if (!u.required["enhancedLinkAttribution"]) {
            u.required["enhancedLinkAttribution"] = !0;
            u.all("require", "linkid", "linkid.js");
          }
        }
        u.data.order_id = u.data.order_id ? u.data.order_id : u.data.id;
        if (u.data.enhancedecommerce === "true") {
          u.all(
            "set",
            "&cu",
            u.data.currency ? u.data.currency : u.data.order_currency
          );
          if (u.data.order_id && u.data.enh_action === "refund") {
            if (
              u.data.order_id instanceof Array &&
              u.data.order_id.length > 0
            ) {
              u.data.order_id = u.data.order_id[0];
            }
            for (f = 0; f < u.data.product_id.length; f++) {
              g = {};
              g.id = u.data.product_id[f];
              g.quantity = u.data.product_quantity[f]
                ? u.data.product_quantity[f]
                : "1";
              u.setHitData(g, "enhecom_events", "product_refund", f);
              u.all("ec:addProduct", g);
            }
            g = {};
            g.id = u.data.order_id;
            u.setHitData(g, "enhecom_events", "refund");
            u.all("ec:setAction", "refund", g);
          } else if (u.data.order_id) {
            if (
              u.data.order_id instanceof Array &&
              u.data.order_id.length > 0
            ) {
              u.data.order_id = u.data.order_id[0];
            }
            u.addproduct("product_purchase", u.data.product_id.length, false);
            g = {};
            g.id = u.data.order_id;
            g.affiliation = u.data.affiliation
              ? u.data.affiliation
              : u.data.order_store;
            g.revenue = u.data.revenue ? u.data.revenue : u.data.order_total;
            g.shipping = u.data.shipping
              ? u.data.shipping
              : u.data.order_shipping;
            g.tax = u.data.tax ? u.data.tax : u.data.order_tax;
            g.coupon = u.data.coupon ? u.data.coupon : u.data.order_coupon_code;
            u.setHitData(g, "enhecom_events", "purchase");
            u.all("ec:setAction", "purchase", g);
          } else if (
            u.data.enh_action === "product_click" &&
            u.data.a === "link"
          ) {
            u.addproduct("product_click", 1, false);
            u.all("ec:setAction", "click", {
              list: u.data.product_action_list,
            });
            if (u.data.autosend_events === "true") {
              u.all("send", "event", "UX", "click", "Results", {
                hitCallback: u.data.enh_event_cb,
              });
            }
          } else if (u.data.enh_action === "detail") {
            u.addproduct("detail", 1, false);
            g = {};
            u.setHitData(g, "list", u.data.product_action_list);
            u.all("ec:setAction", "detail");
          } else if (u.data.enh_action === "add") {
            u.addproduct("product_add", u.data.product_id.length, false);
            u.all("ec:setAction", "add", { list: u.data.product_action_list });
            if (u.data.a === "link" && u.data.autosend_events === "true") {
              u.all("send", "event", "UX", "click", "add to cart", {
                hitCallback: u.data.enh_event_cb,
              });
            }
          } else if (u.data.enh_action === "remove") {
            u.addproduct("product_remove", u.data.product_id.length, false);
            u.all("ec:setAction", "remove");
            if (u.data.a === "link" && u.data.autosend_events === "true") {
              u.all("send", "event", "UX", "click", "remove from cart", {
                hitCallback: u.data.enh_event_cb,
              });
            }
          } else if (u.data.enh_action === "checkout") {
            u.addproduct("product_checkout", u.data.product_id.length, false);
            g = {};
            g.step = u.data.enh_checkout_step || "1";
            g.option = u.data.enh_checkout_option;
            u.all("ec:setAction", u.data.enh_action, g);
          }
          if (u.data.enh_action === "checkout_option" && u.data.a === "link") {
            g = {};
            g.step = u.data.enh_checkout_step || "1";
            g.option = u.data.enh_checkout_option;
            u.all("ec:setAction", u.data.enh_action, g);
            if (u.data.autosend_events === "true") {
              u.all("send", "event", "Checkout", "Option", {
                hitCallback: u.data.enh_event_cb,
              });
            }
          }
          if (u.data.enh_impression_id) {
            u.addproduct(
              "product_impression",
              u.data.enh_impression_id.length,
              true
            );
          }
          if (u.data.enh_promo_id) {
            u.addpromo(u.data.enh_action, u.data.a);
          }
          g = {};
          if (u.data.order_id) {
            u.setHitData(g, "transaction_events");
          }
          u.setHitData(g, "pageview_events");
          if (
            u.data.sessionControl === "start" ||
            u.data.sessionControl === "end"
          ) {
            g.sessionControl = u.data.sessionControl;
          }
          if (u.data.a === "view") {
            if (u.data.screenView === "true" || u.data.screenView === true) {
              g.screenName = u.data.screen_title || "";
              u.all("send", "screenview", g);
            } else {
              g.hitType = "pageview";
              u.all("send", g);
            }
          }
        } else if (u.data.a === "view") {
          g = {};
          u.setHitData(g, "pageview_events");
          if (
            u.data.sessionControl === "start" ||
            u.data.sessionControl === "end"
          ) {
            g.sessionControl = u.data.sessionControl;
          }
          if (u.data.screenView === "true" || u.data.screenView === true) {
            g.screenName = u.data.screen_title || "";
            u.all("send", "screenview", g);
          } else {
            g.hitType = "pageview";
            u.all("send", g);
          }
          if (u.data.order_id && !(u.data.order_id instanceof Array)) {
            if (!u.required["ecommerce"]) {
              u.required["ecommerce"] = !0;
              u.all("require", "ecommerce", "ecommerce.js");
            }
            g = {};
            u.setHitData(g, "transaction_events");
            g.id = u.data.order_id;
            g.affiliation = u.data.affiliation
              ? u.data.affiliation
              : u.data.order_store;
            g.revenue = u.data.revenue ? u.data.revenue : u.data.order_total;
            g.shipping = u.data.shipping
              ? u.data.shipping
              : u.data.order_shipping;
            g.tax = u.data.tax ? u.data.tax : u.data.order_tax;
            g.currency = u.data.currency
              ? u.data.currency
              : u.data.order_currency;
            u.all("ecommerce:addTransaction", g);
            for (f = 0; f < u.data.product_id.length; f++) {
              g = {};
              g.id = u.data.order_id;
              g.sku = u.data.product_id[f];
              g.name = u.data.product_name[f]
                ? u.data.product_name[f]
                : u.data.product_id[f];
              g.category = u.data.product_category[f]
                ? u.data.product_category[f]
                : "";
              g.price = u.data.product_unit_price[f]
                ? u.data.product_unit_price[f]
                : "1.00";
              g.quantity = u.data.product_quantity[f]
                ? u.data.product_quantity[f]
                : "1";
              u.setHitData(g, "transaction_events");
              u.all("ecommerce:addItem", g);
            }
            u.all("ecommerce:send");
          } else if (
            u.data.order_id instanceof Array &&
            u.data.order_id.length > 0
          ) {
            if (!u.required["ecommerce"]) {
              u.required["ecommerce"] = !0;
              u.all("require", "ecommerce", "ecommerce.js");
            }
            var lastindex = 0;
            for (f = 0; f < u.data.order_id.length; f++) {
              if (
                f === u.data.order_id.length - 1 ||
                u.data.order_id[f] !== u.data.order_id[f + 1]
              ) {
                g = {};
                u.setHitData(g, "transaction_events");
                g.id = u.data.order_id[f];
                g.affiliation =
                  u.data.affiliation &&
                  typeof u.data.affiliation[f] !== "undefined"
                    ? u.data.affiliation[f]
                    : u.data.order_store;
                g.revenue =
                  u.data.revenue && typeof u.data.revenue[f] !== "undefined"
                    ? u.data.revenue[f]
                    : u.data.order_total;
                g.shipping =
                  u.data.shipping && typeof u.data.shipping[f] !== "undefined"
                    ? u.data.shipping[f]
                    : u.data.order_shipping;
                g.tax =
                  u.data.tax && typeof u.data.tax[f] !== "undefined"
                    ? u.data.tax[f]
                    : u.data.order_tax;
                g.currency = u.data.currency
                  ? u.data.currency
                  : u.data.order_currency;
                u.all("ecommerce:addTransaction", g);
                for (e = lastindex; e < f + 1; e++) {
                  g = {};
                  g.id = u.data.order_id[f];
                  g.sku = u.data.product_id[e];
                  g.name = u.data.product_name[e]
                    ? u.data.product_name[e]
                    : u.data.product_id[e];
                  g.category = u.data.product_category[e]
                    ? u.data.product_category[e]
                    : "";
                  g.price = u.data.product_unit_price[e]
                    ? u.data.product_unit_price[e]
                    : "1.00";
                  g.quantity = u.data.product_quantity[e]
                    ? u.data.product_quantity[e]
                    : "1";
                  u.setHitData(g, "transaction_events");
                  u.all("ecommerce:addItem", g);
                }
                lastindex = f + 1;
              }
            }
            u.all("ecommerce:send");
          }
        }
        if (u.data.eventCategory && u.data.eventAction) {
          g = {};
          u.setHitData(g, "link_events");
          g.hitType = "event";
          g.eventCategory = u.data.eventCategory;
          if (u.data.nonInteraction) {
            g.nonInteraction = 1;
          }
          g.eventAction = u.data.eventAction;
          if (u.data.eventLabel) {
            g.eventLabel = u.data.eventLabel;
          }
          if (
            typeof u.data.eventValue !== "undefined" &&
            u.data.eventValue !== ""
          ) {
            g.eventValue = u.data.eventValue;
          }
          if (u.data.standard_event_cb) {
            g.hitCallback = u.data.standard_event_cb;
          }
          if (u.data.screenView === "true" || u.data.screenView === true) {
            g.screenName = u.data.screen_title || "";
          }
          if (
            u.data.sessionControl === "start" ||
            u.data.sessionControl === "end"
          ) {
            g.sessionControl = u.data.sessionControl;
          }
          u.all("send", g);
          u.data.eventCategory =
            u.data.eventAction =
            u.data.eventLabel =
            u.data.eventValue =
              "";
        }
        for (e = 0; e < u.data.ga_events.length; e++) {
          g = {};
          u.setHitData(g, "link_events");
          g.hitType = "event";
          g.eventCategory = u.data.ga_events[e].eventCategory;
          g.eventAction = u.data.ga_events[e].eventAction;
          g.eventLabel = u.data.ga_events[e].eventLabel;
          g.eventValue = u.data.ga_events[e].eventValue;
          if (u.data.ga_events[e].nonInteraction) {
            g.nonInteraction = 1;
          }
          if (
            u.data.sessionControl === "start" ||
            u.data.sessionControl === "end"
          ) {
            g.sessionControl = u.data.sessionControl;
          }
          u.all("send", g);
        }
        if (
          u.data.socialNetwork &&
          u.data.socialAction &&
          u.data.socialTarget
        ) {
          g = {};
          g.hitType = "social";
          g.socialNetwork = u.data.socialNetwork;
          g.socialAction = u.data.socialAction;
          g.socialTarget = u.data.socialTarget;
          u.all("send", g);
          u.data.socialNetwork = u.data.socialAction = u.data.socialTarget = "";
        }
        if (u.data.timingCategory && u.data.timingVar && u.data.timingValue) {
          g = {};
          g.hitType = "timing";
          g.timingCategory = u.data.timingCategory;
          g.timingVar = u.data.timingVar;
          g.timingValue = u.data.timingValue;
          g.timingLabel = u.data.timingLabel || "";
          u.all("send", g);
        }
        if (u.data["ga-disable"]) {
          window["ga-disable-" + u.data["ga-disable"]] = true;
        }
        (function () {
          var id = "tealium-tag-7110";
          if (document.getElementById(id)) {
            return;
          }
          u.loader({
            type: "script",
            src: "https://www.google-analytics.com/analytics.js",
            loc: "script",
            id: id,
          });
          u.o.l = 1 * new Date();
        })();
      }
    };
    utag.o[loader].loader.LOAD(id);
  })("184", "mbs.main");
} catch (error) {
  utag.DB(error);
}

//tealium universal tag - utag.262 ut4.0.202207210624, Copyright 2022 Tealium.com Inc. All Rights Reserved.
try {
  (function (id, loader) {
    var u = { id: id };
    utag.o[loader].sender[id] = u;
    if (utag.ut === undefined) {
      utag.ut = {};
    }
    var match = /ut\d\.(\d*)\..*/.exec(utag.cfg.v);
    if (utag.ut.loader === undefined || !match || parseInt(match[1]) < 41) {
      u.loader = function (o, a, b, c, l, m) {
        utag.DB(o);
        a = document;
        if (o.type == "iframe") {
          m = a.getElementById(o.id);
          if (m && m.tagName == "IFRAME") {
            b = m;
          } else {
            b = a.createElement("iframe");
          }
          o.attrs = o.attrs || {};
          utag.ut.merge(
            o.attrs,
            { height: "1", width: "1", style: "display:none" },
            0
          );
        } else if (o.type == "img") {
          utag.DB("Attach img: " + o.src);
          b = new Image();
        } else {
          b = a.createElement("script");
          b.language = "javascript";
          b.type = "text/javascript";
          b.async = 1;
          b.charset = "utf-8";
        }
        if (o.id) {
          b.id = o.id;
        }
        for (l in utag.loader.GV(o.attrs)) {
          b.setAttribute(l, o.attrs[l]);
        }
        b.setAttribute("src", o.src);
        if (typeof o.cb == "function") {
          if (b.addEventListener) {
            b.addEventListener(
              "load",
              function () {
                o.cb();
              },
              false
            );
          } else {
            b.onreadystatechange = function () {
              if (
                this.readyState == "complete" ||
                this.readyState == "loaded"
              ) {
                this.onreadystatechange = null;
                o.cb();
              }
            };
          }
        }
        if (o.type != "img" && !m) {
          l = o.loc || "head";
          c = a.getElementsByTagName(l)[0];
          if (c) {
            utag.DB("Attach to " + l + ": " + o.src);
            if (l == "script") {
              c.parentNode.insertBefore(b, c);
            } else {
              c.appendChild(b);
            }
          }
        }
      };
    } else {
      u.loader = utag.ut.loader;
    }
    u.ev = { view: 1 };
    u.map = { "cp.trace_id": "tealium_trace_id" };
    u.extend = [
      function (a, b) {
        try {
          utag.loader.SC("utag_main", { dcsyncran: "1" + ";exp-session" });
          b["cp.utag_main_dcsyncran"] = "1";
        } catch (e) {
          utag.DB(e);
        }
      },
    ];
    u.send = function (a, b) {
      if (u.ev[a] || u.ev.all !== undefined) {
        utag.DB("send:262");
        utag.DB(b);
        var c, d, e, f, key;
        u.data = {
          qsp_delim: "&",
          kvp_delim: "=",
          base_url: "//cm.g.doubleclick.net/pixel?",
          google_nid: "tealium_dmp",
          tealium_selector: "",
          tealium_trace_id: "",
          tealium_account: "mbs",
          tealium_profile: "main",
          custom: {},
          iab_v20_compliance: true,
          tc_string: "",
        };
        for (c = 0; c < u.extend.length; c++) {
          try {
            d = u.extend[c](a, b);
            if (d == false) return;
          } catch (e) {}
        }
        utag.DB("send:262:EXTENSIONS");
        utag.DB(b);
        c = [];
        for (d in utag.loader.GV(u.map)) {
          if (b[d] !== undefined && b[d] !== "") {
            e = u.map[d].split(",");
            for (f = 0; f < e.length; f++) {
              if (u.data.hasOwnProperty(e[f])) {
                u.data[e[f]] = b[d];
              } else {
                u.data.custom[e[f]] = b[d];
              }
            }
          }
        }
        utag.DB("send:262:MAPPINGS");
        utag.DB(u.data);
        if (
          u.data.iab_v20_compliance === true ||
          u.data.iab_v20_compliance === "true"
        ) {
          if (typeof __tcfapi === "function") {
            __tcfapi("getTCData", 2, function (tcData, success) {
              if (success) {
                u.data.tc_string += "gdpr=";
                if (tcData.gdprApplies === true) {
                  u.data.tc_string += "1";
                } else if (tcData.gdprApplies === false) {
                  u.data.tc_string += "0";
                } else {
                  u.data.tc_string += String(tcData.gdprApplies);
                }
                u.data.tc_string += "&gdpr_consent=" + tcData.tcString;
                execute_send();
              }
            });
          } else {
            var frame = window;
            var cmpFrame;
            var cmpCallbacks = {};
            while (frame) {
              try {
                if (frame.frames["__tcfapiLocator"]) {
                  cmpFrame = frame;
                  break;
                }
              } catch (error) {
                utag.DB(error);
              }
              if (frame === window.top) {
                break;
              }
              frame = frame.parent;
            }
            if (!cmpFrame) {
              execute_send();
            } else {
              window.__tcfapi = function (cmd, version, callback, arg) {
                var callId = String(Math.random());
                var msg = {
                  __tcfapiCall: {
                    command: cmd,
                    parameter: arg,
                    version: version,
                    callId: callId,
                  },
                };
                cmpCallbacks[callId] = callback;
                cmpFrame.postMessage(msg, "*");
              };
              window.tealiumiabPostMessageHandler = function (event) {
                var json = {};
                try {
                  json =
                    typeof event.data === "string"
                      ? JSON.parse(event.data)
                      : event.data;
                } catch (error) {
                  utag.DB(error);
                }
                var payload = json.__tcfapiReturn;
                if (payload) {
                  if (typeof cmpCallbacks[payload.callId] === "function") {
                    cmpCallbacks[payload.callId](
                      payload.returnValue,
                      payload.success
                    );
                    cmpCallbacks[payload.callId] = null;
                  }
                }
              };
              window.addEventListener(
                "message",
                tealiumiabPostMessageHandler,
                false
              );
              __tcfapi("getTCData", 2, function (tcData, success) {
                if (success) {
                  u.data.tc_string += "gdpr=";
                  if (tcData.gdprApplies === true) {
                    u.data.tc_string += "1";
                  } else if (tcData.gdprApplies === false) {
                    u.data.tc_string += "0";
                  } else {
                    u.data.tc_string += String(tcData.gdprApplies);
                  }
                  u.data.tc_string += "&gdpr_consent=" + tcData.tcString;
                  execute_send();
                }
              });
            }
          }
        } else {
          execute_send();
        }
        function execute_send() {
          u.data.tealium_account =
            u.data.tealium_account || utag.cfg.utid.split("/")[0];
          u.data.tealium_profile =
            u.data.tealium_profile || utag.cfg.utid.split("/")[1];
          c.push("tealium_cookie_sync" + u.data.kvp_delim + "true");
          c.push("google_nid" + u.data.kvp_delim + u.data.google_nid);
          c.push("google_cm");
          c.push("tealium_vid" + u.data.kvp_delim + b["cp.utag_main_v_id"]);
          c.push("tealium_account" + u.data.kvp_delim + u.data.tealium_account);
          c.push("tealium_profile" + u.data.kvp_delim + u.data.tealium_profile);
          if (u.data.tealium_selector) {
            c.push(
              "tealium_selector" + u.data.kvp_delim + u.data.tealium_selector
            );
          }
          if (u.data.tealium_trace_id) {
            c.push(
              "tealium_trace_id" + u.data.kvp_delim + u.data.tealium_trace_id
            );
          }
          if (!utag.ut.isEmptyObject(u.data.custom))
            for (key in u.data.custom) {
              if (u.data.custom.hasOwnProperty(key)) {
                c.push(key + u.data.kvp_delim + u.data.custom[key]);
              }
            }
          if (u.data.tc_string) {
            u.data.base_url +=
              u.data.tc_string + "&" + c.join(u.data.qsp_delim);
          } else {
            u.data.base_url += c.join(u.data.qsp_delim);
          }
          u.loader({ type: "img", src: u.data.base_url });
          utag.DB("send:262:COMPLETE");
        }
      }
    };
    utag.o[loader].loader.LOAD(id);
  })("262", "mbs.main");
} catch (error) {
  utag.DB(error);
}

//tealium universal tag - utag.8 ut4.0.202207210624, Copyright 2022 Tealium.com Inc. All Rights Reserved.
try {
  (function (id, loader) {
    var u = {};
    utag.o[loader].sender[id] = u;
    if (utag === undefined) {
      utag = {};
    }
    if (utag.ut === undefined) {
      utag.ut = {};
    }
    if (utag.ut.loader === undefined) {
      u.loader = function (o) {
        var a, b, c, l;
        a = document;
        if (o.type === "iframe") {
          b = a.createElement("iframe");
          b.setAttribute("height", "1");
          b.setAttribute("width", "1");
          b.setAttribute("style", "display:none");
          b.setAttribute("src", o.src);
        } else if (o.type === "img") {
          utag.DB("Attach img: " + o.src);
          b = new Image();
          b.src = o.src;
          return;
        } else {
          b = a.createElement("script");
          b.language = "javascript";
          b.type = "text/javascript";
          b.async = 1;
          b.charset = "utf-8";
          b.src = o.src;
        }
        if (o.id) {
          b.id = o.id;
        }
        if (typeof o.cb === "function") {
          if (b.addEventListener) {
            b.addEventListener(
              "load",
              function () {
                o.cb();
              },
              false
            );
          } else {
            b.onreadystatechange = function () {
              if (
                this.readyState === "complete" ||
                this.readyState === "loaded"
              ) {
                this.onreadystatechange = null;
                o.cb();
              }
            };
          }
        }
        l = o.loc || "head";
        c = a.getElementsByTagName(l)[0];
        if (c) {
          utag.DB("Attach to " + l + ": " + o.src);
          if (l === "script") {
            c.parentNode.insertBefore(b, c);
          } else {
            c.appendChild(b);
          }
        }
      };
    } else {
      u.loader = utag.ut.loader;
    }
    u.ev = { view: 1 };
    u.initialized = false;
    u.hasOwn = function (o, a) {
      return o != null && Object.prototype.hasOwnProperty.call(o, a);
    };
    u.isEmptyObject = function (o, a) {
      for (a in o) {
        if (u.hasOwn(o, a)) {
          return false;
        }
      }
      return true;
    };
    u.map = {
      DC_CAT: "cat",
      DC_TYPE: "type",
      "cp.utag_main_v_id": "u1",
      language_code: "u2",
      domain_pathname: "u3",
      page_name: "u5",
      page_category: "u6",
      page_sub_category: "u7",
      "va.current_visit.properties.46": "u8",
      "va.current_visit.properties.47": "u9",
      "va.current_visit.properties.44": "u10",
      "va.current_visit.properties.48": "u11",
      "va.current_visit.properties.45": "u12",
      "va.current_visit.properties.5": "u13",
      login_status: "u14",
      loyalty_tier: "u15",
      property_name: "u16",
      property_id: "u17",
      room_type_code: "u18",
      displayed_room_sub_types: "u22",
      displayed_room_types: "u23",
      filter_amenities: "u24",
      filter_max_rate: "u25",
      filter_no_of_rooms: "u26",
      filter_room_type: "u27",
      asm_exhibition_category: "u46",
      restaurant_cuisine: "u50",
      store_category: "u60",
      store_collection: "u61",
      num_of_nights: "u32",
      num_of_rooms: "u33",
      num_of_adults: "u34",
      num_of_children: "u35",
      avg_room_rate: "u36",
      currency: "u37",
      order_promo_code: "u38",
      order_discount_amount: "u39",
      order_room_occupancy: "u40",
      order_room_type: "u41",
      asm_exhibition_name: "u47",
      asm_avg_ticket_price: "u48",
      asm_ticket_total_price: "u49",
      entertainment_asm_transaction_id: "u45",
      restaurant_time_category: "u52",
      restaurant_name: "u53",
      restaurant_guest_quantity: "u54",
      entertainment_show_name: "u56",
      entertainment_show_price_avg: "u59",
      entertainment_ticket_price: "u58",
      entertainment_ticket_category: "u55",
      booking_no: "order_id",
      entertainment_ticket_show_name: "u62",
      order_offer_name: "u63",
      entertainment_ticket_price_unit: "u57",
      entertainment_ticket_unit_price_with_fee: "u58",
      entertainment_ticket_date: "u14",
      entertainment_product_id: "u15",
      entertainment_ticket_time: "u16",
      entertainment_ticket_unit_price_with_fees: "u17",
      entertainment_order_id: "u18",
      product_category: "u19,u6",
      entertainment_product_name: "u45",
      entertainment_venue: "u46",
      entertainment_price_class: "u47",
      entertainment_ticket_quantity: "u48",
      entertainment_order_quantity: "u49",
      entertainment_order_total_with_fees: "u50",
      entertainment_ticket_unit_price_without_fees: "u67",
      entertainment_order_total_without_fees: "u68",
      restaurant_dine_date: "u51",
      restaurant_dine_time: "u59",
      site_section: "u4",
      hotel_offer_name: "u20",
      room_type: "u21",
      check_in_date: "u30",
      check_out_date: "u31",
      hotel_offer_code: "u44",
      hotel_total_occupancy: "u43",
      days_till_check_in: "u64",
      hotel_order_id: "u29,transaction_id",
      page_type: "u4",
      displayed_rate_amount: "u19",
      displayed_rate_amounts: "u20",
      room_types: "u21",
      check_in: "u30",
      check_out: "u31",
      sum_num_of_nights: "u32,quantity",
      order_total: "u42",
      order_subtotal: "u42",
      order_total_occupancy: "u43",
      rate_code: "u44",
      reservation_room_rate_code: "u44",
      hotel_sum_subtotal: "u42",
      restaurant_order_subtotal: "u42",
      restaurant_order_id: "u29,transaction_id",
      restaurant_revenue: "u42",
      merchandise_order_id: "transaction_id,u29,order_id",
      merchandise_product_name: "u61",
      merchandise_product_total_quantity: "u62",
      merchandise_order_subtotal_aft_discount: "u63,order_subtotal",
      filter_restaurant_cuisine: "u55",
    };
    u.extend = [
      function (a, b) {
        try {
          if (
            /staging.marinabaysands.com\/restaurants\/(.*)\/reservation\/confirmation.html/.test(
              b["domain_pathname"]
            ) &&
            b["tealium_event"]
              .toString()
              .indexOf("restaurant_booking_confirmation") > -1
          ) {
            try {
              b["restaurant_dine_date"] = b["restaurant_dine_date"];
            } catch (e) {}
            try {
              b["restaurant_guest_quantity"] = b["restaurant_guest_quantity"];
            } catch (e) {}
            try {
              b["restaurant_name"] = b["restaurant_name"];
            } catch (e) {}
            try {
              b["restaurant_order_id"] = b["restaurant_order_id"];
            } catch (e) {}
            try {
              b["restaurant_order_subtotal"] = b["restaurant_order_subtotal"];
            } catch (e) {}
            try {
              b["restaurant_time_category"] = b["restaurant_time_category"];
            } catch (e) {}
            try {
              b["restaurant_unit_price"] = b["restaurant_unit_price"];
            } catch (e) {}
            try {
              b["restaurant_dine_time"] = b["restaurant_dine_time"];
            } catch (e) {}
          }
        } catch (e) {
          utag.DB(e);
        }
      },
      function (a, b) {
        try {
          if (
            typeof b["merchandise_product_total_quantity"] != "undefined" &&
            b["merchandise_product_total_quantity"] != "" &&
            typeof b["merchandise_product_total_quantity"] != "undefined"
          ) {
            try {
              b["merchandise_product_total_quantity"] =
                b["merchandise_product_total_quantity"].toString();
            } catch (e) {}
          }
        } catch (e) {
          utag.DB(e);
        }
      },
    ];
    u.send = function (a, b) {
      if (u.ev[a] || u.ev.all !== undefined) {
        var c, d, e, f, i;
        u.data = {
          qsp_delim: ";",
          kvp_delim: "=",
          base_url: "https://www.googletagmanager.com/gtag/js",
          src: "DC-8293333",
          type: "",
          cat: "",
          ord: "",
          cost: "",
          qty: 0,
          total_qty: 0,
          hotel_order_id: "",
          hotel_sum_subtotal: "",
          sum_num_of_nights: "",
          days_till_check_in: "",
          hotel_total_occupancy: "",
          num_of_rooms: "",
          countertype: "standard",
          conversioncount: "single",
          order_id: "",
          order_subtotal: "",
          product_id: [],
          product_quantity: [],
          product_unit_price: [],
        };
        for (c = 0; c < u.extend.length; c++) {
          try {
            d = u.extend[c](a, b);
            if (d == false) return;
          } catch (e) {}
        }
        c = [];
        g = [];
        z = [];
        for (d in utag.loader.GV(u.map)) {
          if (b[d] !== undefined && b[d] !== "") {
            e = u.map[d].split(",");
            for (f = 0; f < e.length; f++) {
              if (
                /^(cat|multicat|type|src|cost|qty|countertype|conversioncount|ord|order_id|hotel_order_id|order_subtotal|hotel_sum_subtotal|sum_num_of_nights|days_till_check_in|hotel_total_occupancy|num_of_rooms|product_id|product_quantity|product_unit_price)$/.test(
                  e[f]
                )
              ) {
                u.data[e[f]] = b[d];
              } else {
                u.data[e[f]] = b[d];
                z[e[f]] = b[d];
              }
            }
          }
        }
        u.data.order_id =
          b.order_id || u.data.order_id || u.data.ord || b._corder || "";
        u.data.order_subtotal =
          b.order_subtotal ||
          u.data.cost ||
          u.data.order_subtotal ||
          b._csubtotal ||
          b._ctotal ||
          "";
        if (u.data.product_id.length === 0 && b._cprod !== undefined) {
          u.data.product_id = b._cprod.slice(0);
        }
        if (
          (u.data.qty && u.data.qty.length > 0) ||
          (u.data.product_quantity.length === 0 && b._cquan !== undefined)
        ) {
          u.data.product_quantity = u.data.qty || b._cquan.slice(0);
        }
        if (u.data.product_unit_price.length === 0 && b._cprice !== undefined) {
          u.data.product_unit_price = b._cprice.slice(0);
        }
        u.data.hotel_order_id = b.hotel_order_id || "";
        u.data.hotel_sum_subtotal = b.hotel_sum_subtotal || "";
        u.data.sum_num_of_nights = b.sum_num_of_nights || "";
        u.data.days_till_check_in = b.days_till_check_in || "";
        u.data.hotel_total_occupancy = b.hotel_total_occupancy || "";
        u.data.num_of_rooms = b.num_of_rooms || "";
        if (!u.data.src) {
          utag.DB(u.id + ": Tag not fired: Required attribute not populated");
          return;
        }
        window.dataLayer = window.dataLayer || [];
        if (typeof window.gtag !== "function") {
          window.gtag = function () {
            window.dataLayer.push(arguments);
          };
          gtag("js", new Date());
        }
        gtag("config", u.data.src);
        if (u.data.order_id) {
          if (
            u.data.conversioncount === "multi" &&
            u.data.product_quantity.length > 0
          ) {
            for (f = 0; f < u.data.product_quantity.length; f++) {
              u.data.total_qty += parseInt(u.data.product_quantity[f]);
            }
            u.data.qty = u.data.total_qty;
          } else {
            u.data.qty = 1;
          }
          var dc_fl_prd = [];
          for (var i = 0; i < u.data.product_id.length; i++) {
            var prod_num = i + 1;
            dc_fl_prd.push(
              "i" +
                prod_num +
                ":" +
                u.data.product_id[i] +
                "|p" +
                prod_num +
                ":" +
                u.data.product_unit_price[i] +
                "|q" +
                prod_num +
                ":" +
                u.data.product_quantity[i]
            );
          }
          u.prd = dc_fl_prd.join("|");
          if (u.prd) {
            u.data.prd = u.prd;
          }
        }
        u.loader_cb = function () {
          u.initialized = true;
          var g = {};
          g.allow_custom_scripts = true;
          if (u.data.src && u.data.type && u.data.cat) {
            g.u33 = u.data.num_of_rooms;
            if (u.data.sum_num_of_nights) {
              g.quantity = u.data.sum_num_of_nights;
              g.u32 = u.data.sum_num_of_nights;
              g.u43 = u.data.hotel_total_occupancy;
              g.u64 = u.data.days_till_check_in;
            }
            if (u.data.hotel_sum_subtotal) {
              g.value = u.data.hotel_sum_subtotal;
              g.u42 = u.data.hotel_sum_subtotal;
              if (u.data.hotel_order_id.length > 0) {
                g.transaction_id = u.data.hotel_order_id;
                g.u29 = u.data.hotel_order_id;
                g.send_to =
                  u.data.src +
                  "/" +
                  u.data.type +
                  "/" +
                  u.data.cat +
                  "+" +
                  "transactions";
              } else {
                g.send_to =
                  u.data.src +
                  "/" +
                  u.data.type +
                  "/" +
                  u.data.cat +
                  "+" +
                  u.data.countertype;
              }
            } else if (u.data.order_subtotal) {
              g.value = u.data.order_subtotal;
              g.transaction_id = u.data.order_id;
              if (u.data.qty > 1) {
                g.quantity = u.data.qty;
                g.send_to =
                  u.data.src +
                  "/" +
                  u.data.type +
                  "/" +
                  u.data.cat +
                  "+" +
                  "items_sold";
              } else {
                g.send_to =
                  u.data.src +
                  "/" +
                  u.data.type +
                  "/" +
                  u.data.cat +
                  "+" +
                  "transactions";
              }
            } else {
              if (u.data.countertype === "session") {
                g.session_id = u.data.order_id
                  ? u.data.order_id
                  : window.utag.data["cp.utag_main_ses_id"];
                g.send_to =
                  u.data.src +
                  "/" +
                  u.data.type +
                  "/" +
                  u.data.cat +
                  "+" +
                  "per_session";
              } else {
                g.send_to =
                  u.data.src +
                  "/" +
                  u.data.type +
                  "/" +
                  u.data.cat +
                  "+" +
                  u.data.countertype;
              }
            }
            if (u.data.prd) {
              g.prd = u.data.prd;
            }
            for (var key in z) {
              if (!u.isEmptyObject(z[key])) {
                g[key] = z[key];
              }
            }
            gtag("event", "conversion", g);
          }
        };
        if (!u.initialized) {
          if (
            window.google_tag_manager &&
            window.google_tag_manager.gtagRegistered
          ) {
            u.loader_cb();
          } else {
            u.loader({
              type: "script",
              src: u.data.base_url + "?id=" + u.data.src,
              cb: u.loader_cb,
              loc: "script",
              id: "utag_8",
            });
          }
        } else {
          u.loader_cb();
        }
      }
    };
    utag.o[loader].loader.LOAD(id);
  })("8", "mbs.main");
} catch (error) {
  utag.DB(error);
}

//tealium universal tag - utag.69 ut4.0.202207210624, Copyright 2022 Tealium.com Inc. All Rights Reserved.
try {
  (function (id, loader) {
    var u = {};
    utag.o[loader].sender[id] = u;
    if (utag === undefined) {
      utag = {};
    }
    if (utag.ut === undefined) {
      utag.ut = {};
    }
    if (utag.ut.loader === undefined) {
      u.loader = function (o) {
        var a, b, c, l;
        a = document;
        if (o.type === "iframe") {
          b = a.createElement("iframe");
          b.setAttribute("height", "1");
          b.setAttribute("width", "1");
          b.setAttribute("style", "display:none");
          b.setAttribute("src", o.src);
        } else if (o.type === "img") {
          utag.DB("Attach img: " + o.src);
          b = new Image();
          b.src = o.src;
          return;
        } else {
          b = a.createElement("script");
          b.language = "javascript";
          b.type = "text/javascript";
          b.async = 1;
          b.charset = "utf-8";
          b.src = o.src;
        }
        if (o.id) {
          b.id = o.id;
        }
        if (typeof o.cb === "function") {
          if (b.addEventListener) {
            b.addEventListener(
              "load",
              function () {
                o.cb();
              },
              false
            );
          } else {
            b.onreadystatechange = function () {
              if (
                this.readyState === "complete" ||
                this.readyState === "loaded"
              ) {
                this.onreadystatechange = null;
                o.cb();
              }
            };
          }
        }
        l = o.loc || "head";
        c = a.getElementsByTagName(l)[0];
        if (c) {
          utag.DB("Attach to " + l + ": " + o.src);
          if (l === "script") {
            c.parentNode.insertBefore(b, c);
          } else {
            c.appendChild(b);
          }
        }
      };
    } else {
      u.loader = utag.ut.loader;
    }
    u.ev = { view: 1 };
    u.initialized = false;
    u.hasOwn = function (o, a) {
      return o != null && Object.prototype.hasOwnProperty.call(o, a);
    };
    u.isEmptyObject = function (o, a) {
      for (a in o) {
        if (u.hasOwn(o, a)) {
          return false;
        }
      }
      return true;
    };
    u.map = {
      DC_CAT_regex: "cat",
      DC_TYPE_regex: "type",
      "cp.utag_main_v_id": "u1",
      language_code: "u2",
      domain_pathname: "u3",
      page_name: "u5",
      page_category: "u6",
      page_sub_category: "u7",
      "va.current_visit.properties.46": "u8",
      "va.current_visit.properties.47": "u9",
      "va.current_visit.properties.44": "u10",
      "va.current_visit.properties.48": "u11",
      "va.current_visit.properties.45": "u12",
      "va.current_visit.properties.5": "u13",
      login_status: "u14",
      loyalty_tier: "u15",
      property_name: "u16",
      property_id: "u17",
      room_type_code: "u18",
      displayed_room_sub_types: "u22",
      displayed_room_types: "u23",
      filter_amenities: "u24",
      filter_max_rate: "u25",
      filter_no_of_rooms: "u26",
      filter_room_type: "u27",
      asm_exhibition_category: "u46",
      restaurant_cuisine: "u50",
      store_category: "u60",
      store_collection: "u61",
      num_of_nights: "u32",
      num_of_rooms: "u33",
      num_of_adults: "u34",
      num_of_children: "u35",
      avg_room_rate: "u36",
      currency: "u37",
      foreign_currency: "u37",
      order_promo_code: "u38",
      order_discount_amount: "u39",
      order_room_occupancy: "u40",
      order_room_type: "u41",
      entertainment_asm_transaction_id: "u45",
      asm_exhibition_name: "u47",
      asm_avg_ticket_price: "u48",
      asm_ticket_total_price: "u49",
      restaurant_time_category: "u52",
      restaurant_name: "u53",
      restaurant_guest_quantity: "u54",
      entertainment_show_price_avg: "u59",
      entertainment_ticket_price_total: "u58",
      entertainment_ticket_category: "u55",
      entertainment_ticket_show_name: "u56",
      entertainment_show_name: "u62",
      order_offer_name: "u63",
      entertainment_ticket_price_unit: "u57",
      entertainment_ticket_price: "u58",
      days_till_checkin: "u64",
      days_till_checkin_minus_seven: "u65",
      room_type: "u21",
      room_sub_type: "u22",
      room_view_type: "u23",
      entertainment_ticket_unit_price_with_fee: "u58",
      entertainment_ticket_date: "u14",
      entertainment_product_id: "u15",
      entertainment_ticket_time: "u16",
      entertainment_ticket_unit_price_with_fees: "u17",
      entertainment_order_id: "u18",
      product_category: "u19",
      entertainment_product_name: "u45",
      entertainment_venue: "u46",
      entertainment_price_class: "u47",
      entertainment_ticket_quantity: "u48",
      entertainment_order_quantity: "u49",
      entertainment_order_total_with_fees: "u50",
      entertainment_ticket_unit_price_without_fees: "u67",
      entertainment_order_total_without_fees: "u68",
      site_section: "u4",
      merchandise_order_id: "order_id",
      merchandise_product_name: "u61",
      merchandise_product_total_quantity: "u62",
      merchandise_order_subtotal_aft_discount: "u63,order_subtotal",
      merchandise_product_type: "u60",
      restaurant_dine_date: "u51",
      restaurant_dine_time: "u59",
      hotel_offer_name: "u20",
      check_in_date: "u30",
      check_out_date: "u31",
      hotel_offer_code: "u44",
      hotel_total_occupancy: "u43",
      days_till_check_in: "u64",
      hotel_order_id: "u29,transaction_id",
      hotel_sum_subtotal: "u42",
      page_type: "u4",
      displayed_rate_amount: "u19",
      displayed_rate_amounts: "u20",
      room_types: "u21",
      check_in: "u30",
      check_out: "u31",
      sum_num_of_nights: "u32,quantity",
      order_total: "u42",
      order_subtotal: "u42",
      order_total_occupancy: "u43",
      rate_code: "u44",
      reservation_room_rate_code: "u44",
    };
    u.extend = [
      function (a, b) {
        try {
          if (typeof b["entertainment_order_subtotal"] != "undefined") {
            try {
              b["entertainment_order_subtotal"] = parseInt(
                b["entertainment_order_subtotal"]
              );
            } catch (e) {}
          }
        } catch (e) {
          utag.DB(e);
        }
      },
      function (a, b) {
        try {
          if (
            typeof b["merchandise_product_total_quantity"] != "undefined" &&
            b["merchandise_product_total_quantity"] != "" &&
            typeof b["merchandise_product_total_quantity"] != "undefined"
          ) {
            try {
              b["merchandise_product_total_quantity"] =
                b["merchandise_product_total_quantity"].toString();
            } catch (e) {}
          }
        } catch (e) {
          utag.DB(e);
        }
      },
    ];
    u.send = function (a, b) {
      if (u.ev[a] || u.ev.all !== undefined) {
        var c, d, e, f, i;
        u.data = {
          qsp_delim: ";",
          kvp_delim: "=",
          base_url: "https://www.googletagmanager.com/gtag/js",
          src: "DC-8293333",
          type: "",
          cat: "",
          ord: "",
          cost: "",
          qty: 0,
          total_qty: 0,
          hotel_order_id: "",
          hotel_sum_subtotal: "",
          sum_num_of_nights: "",
          days_till_check_in: "",
          hotel_total_occupancy: "",
          num_of_rooms: "",
          countertype: "standard",
          conversioncount: "single",
          order_id: "",
          order_subtotal: "",
          product_id: [],
          product_quantity: [],
          product_unit_price: [],
        };
        for (c = 0; c < u.extend.length; c++) {
          try {
            d = u.extend[c](a, b);
            if (d == false) return;
          } catch (e) {}
        }
        c = [];
        g = [];
        z = [];
        for (d in utag.loader.GV(u.map)) {
          if (b[d] !== undefined && b[d] !== "") {
            e = u.map[d].split(",");
            for (f = 0; f < e.length; f++) {
              if (
                /^(cat|multicat|type|src|cost|qty|countertype|conversioncount|ord|order_id|hotel_order_id|order_subtotal|hotel_sum_subtotal|sum_num_of_nights|days_till_check_in|hotel_total_occupancy|num_of_rooms|product_id|product_quantity|product_unit_price)$/.test(
                  e[f]
                )
              ) {
                u.data[e[f]] = b[d];
              } else {
                u.data[e[f]] = b[d];
                z[e[f]] = b[d];
              }
            }
          }
        }
        u.data.order_id =
          u.data.order_id || b.order_id || u.data.ord || b._corder || "";
        u.data.order_subtotal =
          u.data.cost ||
          u.data.order_subtotal ||
          b.order_subtotal ||
          b._csubtotal ||
          b._ctotal ||
          "";
        if (u.data.product_id.length === 0 && b._cprod !== undefined) {
          u.data.product_id = b._cprod.slice(0);
        }
        if (
          (u.data.qty && u.data.qty.length > 0) ||
          (u.data.product_quantity.length === 0 && b._cquan !== undefined)
        ) {
          u.data.product_quantity = u.data.qty || b._cquan.slice(0);
        }
        if (u.data.product_unit_price.length === 0 && b._cprice !== undefined) {
          u.data.product_unit_price = b._cprice.slice(0);
        }
        u.data.hotel_order_id = b.hotel_order_id || "";
        u.data.hotel_sum_subtotal = b.hotel_sum_subtotal || "";
        u.data.sum_num_of_nights = b.sum_num_of_nights || "";
        u.data.days_till_check_in = b.days_till_check_in || "";
        u.data.hotel_total_occupancy = b.hotel_total_occupancy || "";
        u.data.num_of_rooms = b.num_of_rooms || "";
        if (!u.data.src) {
          utag.DB(u.id + ": Tag not fired: Required attribute not populated");
          return;
        }
        window.dataLayer = window.dataLayer || [];
        if (typeof window.gtag !== "function") {
          window.gtag = function () {
            window.dataLayer.push(arguments);
          };
          gtag("js", new Date());
        }
        gtag("config", u.data.src);
        if (u.data.order_id) {
          if (
            u.data.conversioncount === "multi" &&
            u.data.product_quantity.length > 0
          ) {
            for (f = 0; f < u.data.product_quantity.length; f++) {
              u.data.total_qty += parseInt(u.data.product_quantity[f]);
            }
            u.data.qty = u.data.total_qty;
          } else {
            u.data.qty = 1;
          }
          var dc_fl_prd = [];
          for (var i = 0; i < u.data.product_id.length; i++) {
            var prod_num = i + 1;
            dc_fl_prd.push(
              "i" +
                prod_num +
                ":" +
                u.data.product_id[i] +
                "|p" +
                prod_num +
                ":" +
                u.data.product_unit_price[i] +
                "|q" +
                prod_num +
                ":" +
                u.data.product_quantity[i]
            );
          }
          u.prd = dc_fl_prd.join("|");
          if (u.prd) {
            u.data.prd = u.prd;
          }
        }
        u.loader_cb = function () {
          u.initialized = true;
          var g = {};
          g.allow_custom_scripts = true;
          if (u.data.src && u.data.type && u.data.cat) {
            g.u33 = u.data.num_of_rooms;
            if (u.data.sum_num_of_nights) {
              g.quantity = u.data.sum_num_of_nights;
              g.u32 = u.data.sum_num_of_nights;
              g.u43 = u.data.hotel_total_occupancy;
              g.u64 = u.data.days_till_check_in;
            }
            if (u.data.hotel_sum_subtotal) {
              g.value = u.data.hotel_sum_subtotal;
              g.u42 = u.data.hotel_sum_subtotal;
              if (u.data.hotel_order_id.length > 0) {
                g.transaction_id = u.data.hotel_order_id;
                g.u29 = u.data.hotel_order_id;
                g.send_to =
                  u.data.src +
                  "/" +
                  u.data.type +
                  "/" +
                  u.data.cat +
                  "+" +
                  "transactions";
              } else {
                g.send_to =
                  u.data.src +
                  "/" +
                  u.data.type +
                  "/" +
                  u.data.cat +
                  "+" +
                  u.data.countertype;
              }
            } else if (u.data.order_subtotal) {
              g.value = u.data.order_subtotal;
              g.transaction_id = u.data.order_id;
              if (u.data.qty > 1) {
                g.quantity = u.data.qty;
                g.send_to =
                  u.data.src +
                  "/" +
                  u.data.type +
                  "/" +
                  u.data.cat +
                  "+" +
                  "items_sold";
              } else {
                g.send_to =
                  u.data.src +
                  "/" +
                  u.data.type +
                  "/" +
                  u.data.cat +
                  "+" +
                  "transactions";
              }
            } else {
              if (u.data.countertype === "session") {
                g.session_id = u.data.order_id
                  ? u.data.order_id
                  : window.utag.data["cp.utag_main_ses_id"];
                g.send_to =
                  u.data.src +
                  "/" +
                  u.data.type +
                  "/" +
                  u.data.cat +
                  "+" +
                  "per_session";
              } else {
                g.send_to =
                  u.data.src +
                  "/" +
                  u.data.type +
                  "/" +
                  u.data.cat +
                  "+" +
                  u.data.countertype;
              }
            }
            if (u.data.prd) {
              g.prd = u.data.prd;
            }
            for (var key in z) {
              if (!u.isEmptyObject(z[key])) {
                g[key] = z[key];
              }
            }
            gtag("event", "conversion", g);
          }
        };
        if (!u.initialized) {
          if (
            window.google_tag_manager &&
            window.google_tag_manager.gtagRegistered
          ) {
            u.loader_cb();
          } else {
            u.loader({
              type: "script",
              src: u.data.base_url + "?id=" + u.data.src,
              cb: u.loader_cb,
              loc: "script",
              id: "utag_69",
            });
          }
        } else {
          u.loader_cb();
        }
      }
    };
    utag.o[loader].loader.LOAD(id);
  })("69", "mbs.main");
} catch (error) {
  utag.DB(error);
}

//tealium universal tag - utag.139 ut4.0.202207210624, Copyright 2022 Tealium.com Inc. All Rights Reserved.
try {
  (function (id, loader) {
    var u = {};
    utag.o[loader].sender[id] = u;
    if (utag === undefined) {
      utag = {};
    }
    if (utag.ut === undefined) {
      utag.ut = {};
    }
    if (utag.ut.loader === undefined) {
      u.loader = function (o) {
        var a, b, c, l;
        a = document;
        if (o.type === "iframe") {
          b = a.createElement("iframe");
          b.setAttribute("height", "1");
          b.setAttribute("width", "1");
          b.setAttribute("style", "display:none");
          b.setAttribute("src", o.src);
        } else if (o.type === "img") {
          utag.DB("Attach img: " + o.src);
          b = new Image();
          b.src = o.src;
          return;
        } else {
          b = a.createElement("script");
          b.language = "javascript";
          b.type = "text/javascript";
          b.async = 1;
          b.charset = "utf-8";
          b.src = o.src;
        }
        if (o.id) {
          b.id = o.id;
        }
        if (typeof o.cb === "function") {
          if (b.addEventListener) {
            b.addEventListener(
              "load",
              function () {
                o.cb();
              },
              false
            );
          } else {
            b.onreadystatechange = function () {
              if (
                this.readyState === "complete" ||
                this.readyState === "loaded"
              ) {
                this.onreadystatechange = null;
                o.cb();
              }
            };
          }
        }
        l = o.loc || "head";
        c = a.getElementsByTagName(l)[0];
        if (c) {
          utag.DB("Attach to " + l + ": " + o.src);
          if (l === "script") {
            c.parentNode.insertBefore(b, c);
          } else {
            c.appendChild(b);
          }
        }
      };
    } else {
      u.loader = utag.ut.loader;
    }
    u.ev = { view: 1 };
    u.map = {};
    u.extend = [];
    u.send = function (a, b) {
      if (u.ev[a] || u.ev.all !== undefined) {
        var c, d, e, f;
        u.data = {
          account_id: "7794a2cf5d302912171a2c96ba1d2eba",
          base_url: "//hm.baidu.com/hm.js?",
        };
        for (d in utag.loader.GV(u.map)) {
          if (b[d] !== undefined && b[d] !== "") {
            e = u.map[d].split(",");
            for (f = 0; f < e.length; f++) {
              u.data[e[f]] = b[d];
            }
          }
        }
        u.data.base_url += u.data.account_id;
        u.loader({
          type: "script",
          src: u.data.base_url,
          loc: "script",
          id: "utag_139",
        });
      }
    };
    utag.o[loader].loader.LOAD(id);
  })("139", "mbs.main");
} catch (error) {
  utag.DB(error);
}

//tealium universal tag - utag.347 ut4.0.202207210624, Copyright 2022 Tealium.com Inc. All Rights Reserved.
try {
  (function (id, loader) {
    var u = { id: id };
    utag.o[loader].sender[id] = u;
    if (utag.ut === undefined) {
      utag.ut = {};
    }
    var match = /ut\d\.(\d*)\..*/.exec(utag.cfg.v);
    if (utag.ut.loader === undefined || !match || parseInt(match[1]) < 41) {
      u.loader = function (o, a, b, c, l, m) {
        utag.DB(o);
        a = document;
        if (o.type == "iframe") {
          m = a.getElementById(o.id);
          if (m && m.tagName == "IFRAME") {
            b = m;
          } else {
            b = a.createElement("iframe");
          }
          o.attrs = o.attrs || {};
          utag.ut.merge(
            o.attrs,
            { height: "1", width: "1", style: "display:none" },
            0
          );
        } else if (o.type == "img") {
          utag.DB("Attach img: " + o.src);
          b = new Image();
        } else {
          b = a.createElement("script");
          b.language = "javascript";
          b.type = "text/javascript";
          b.async = 1;
          b.charset = "utf-8";
        }
        if (o.id) {
          b.id = o.id;
        }
        for (l in utag.loader.GV(o.attrs)) {
          b.setAttribute(l, o.attrs[l]);
        }
        b.setAttribute("src", o.src);
        if (typeof o.cb == "function") {
          if (b.addEventListener) {
            b.addEventListener(
              "load",
              function () {
                o.cb();
              },
              false
            );
          } else {
            b.onreadystatechange = function () {
              if (
                this.readyState == "complete" ||
                this.readyState == "loaded"
              ) {
                this.onreadystatechange = null;
                o.cb();
              }
            };
          }
        }
        if (o.type != "img" && !m) {
          l = o.loc || "head";
          c = a.getElementsByTagName(l)[0];
          if (c) {
            utag.DB("Attach to " + l + ": " + o.src);
            if (l == "script") {
              c.parentNode.insertBefore(b, c);
            } else {
              c.appendChild(b);
            }
          }
        }
      };
    } else {
      u.loader = utag.ut.loader;
    }
    if (utag.ut.typeOf === undefined) {
      u.typeOf = function (e) {
        return {}.toString
          .call(e)
          .match(/\s([a-zA-Z]+)/)[1]
          .toLowerCase();
      };
    } else {
      u.typeOf = utag.ut.typeOf;
    }
    u.ev = { link: 1 };
    u.hasOwn = function (o, a) {
      return o != null && Object.prototype.hasOwnProperty.call(o, a);
    };
    u.isEmptyObject = function (o, a) {
      for (a in o) {
        if (u.hasOwn(o, a)) {
          return false;
        }
      }
      return true;
    };
    u.toBoolean = function (val) {
      val = val || "";
      return (
        val === true ||
        val.toLowerCase() === "true" ||
        val.toLowerCase() === "on"
      );
    };
    u.hasgtagjs = function () {
      window.gtagRename = window.gtagRename || "" || "gtag";
      if (utag.ut.gtagScriptRequested) {
        return true;
      }
      var i,
        s = document.getElementsByTagName("script");
      for (i = 0; i < s.length; i++) {
        if (
          s[i].src &&
          s[i].src.indexOf("gtag/js") >= 0 &&
          s[i].id &&
          s[i].id.indexOf("utag") > -1
        ) {
          return true;
        }
      }
      var data_layer_name = "" || "dataLayer";
      window[data_layer_name] = window[data_layer_name] || [];
      if (typeof window[window.gtagRename] !== "function") {
        window[window.gtagRename] = function () {
          window[data_layer_name].push(arguments);
        };
        var cross_track_domains = "";
        if (cross_track_domains !== "") {
          window[window.gtagRename]("set", "linker", {
            domains: cross_track_domains.split(","),
            accept_incoming: true,
          });
        }
        window[window.gtagRename]("js", new Date());
      }
      return false;
    };
    u.scriptrequested = u.hasgtagjs();
    u.o = window[window.gtagRename];
    u.map_func = function (arr, obj, item) {
      var i = arr.shift();
      obj[i] = obj[i] || {};
      if (arr.length > 0) {
        u.map_func(arr, obj[i], item);
      } else {
        obj[i] = item;
      }
    };
    u.map = {
      room_type: "custom.u21",
      room_sub_type: "custom.u22",
      room_view_type: "custom.u23",
      "event_category:select_room": "conversion",
      event_dc_activity: "activity",
      event_dc_activity_group: "activity_group",
      restaurant_dine_date: "custom.u51",
      restaurant_time_category: "custom.u52",
      restaurant_name: "custom.u53",
      restaurant_guest_quantity: "custom.u54",
      "event_label:Page View - Step 5 Confirmation": "conversion",
      "event_action:dc_fire": "conversion",
      entertainment_ticket_date: "custom.u14",
      entertainment_product_id: "custom.u15",
      entertainment_ticket_time: "custom.u16",
      product_category: "custom.u19",
      currency: "custom.u37",
      entertainment_product_name: "custom.u45",
      entertainment_venue: "custom.u46",
      entertainment_price_class: "custom.u47",
      entertainment_ticket_quantity: "custom.u48",
      entertainment_order_quantity: "custom.u49",
      entertainment_ticket_unit_price_without_fees: "custom.u67",
      entertainment_order_total_without_fees: "custom.u68",
      restaurant_dine_time: "custom.u59",
      order_subtotal: "custom.u42",
      hotel_sum_subtotal: "custom.u42",
      sum_num_of_nights: "custom.u32",
      "cp.utag_main_v_id": "custom.u1",
      language_code: "custom.u2",
      domain_pathname: "custom.u3",
      site_section: "custom.u4",
      page_name: "custom.u5",
      "va.current_visit.properties.46": "custom.u8",
      "va.current_visit.properties.44": "custom.u10",
      "va.current_visit.properties.5": "custom.u13",
      restaurant_revenue: "custom.u42",
      restaurant_order_id: "custom.u29,custom.transaction_id",
    };
    u.extend = [
      function (a, b) {
        try {
          if (
            b["domain_pathname"].toString().indexOf("restaurants/waku-ghin") >
              -1 &&
            b["event_action"].toString().indexOf("Waku Ghin") > -1 &&
            b["tealium_event"].toString().indexOf("WakuGhin_email_click") > -1
          ) {
            b["event_dc_activity"] = "mbs_700y";
            b["event_dc_activity_group"] = "mbsre0";
            b["event_action"] = "dc_fire";
            try {
              b["restaurant_name"] = b["domain_pathname"]
                .split("/")
                .pop()
                .split(".")[0];
            } catch (e) {}
          }
        } catch (e) {
          utag.DB(e);
        }
      },
      function (a, b) {
        try {
          if (
            b["domain_pathname"].toString().indexOf("restaurants/waku-ghin") >
              -1 &&
            b["event_action"].toString().indexOf("WakuGhinContactPhone") > -1 &&
            b["tealium_event"].toString().indexOf("WakuGhin_phone_click") > -1
          ) {
            b["event_dc_activity"] = "mbs_700z";
            b["event_dc_activity_group"] = "mbsre0";
            b["event_action"] = "dc_fire";
            try {
              b["restaurant_name"] = b["domain_pathname"]
                .split("/")
                .pop()
                .split(".")[0];
            } catch (e) {}
          }
        } catch (e) {
          utag.DB(e);
        }
      },
      function (a, b) {
        try {
          if (
            (b["domain_pathname"]
              .toString()
              .indexOf(
                "marinabaysands.com/deals/restaurants/gourmet-takeaway"
              ) > -1 &&
              typeof b["event_action"] != "undefined" &&
              b["event_action"]
                .toString()
                .toLowerCase()
                .indexOf("ORDER ONLINE NOW".toLowerCase()) > -1) ||
            (b["domain_pathname"]
              .toString()
              .indexOf(
                "marinabaysands.com/deals/restaurants/gourmet-takeaway"
              ) > -1 &&
              typeof b["event_action"] != "undefined" &&
              b["event_action"]
                .toString()
                .toLowerCase()
                .indexOf("PESAN SEKARANG".toLowerCase()) > -1) ||
            (b["domain_pathname"]
              .toString()
              .indexOf(
                "marinabaysands.com/deals/restaurants/gourmet-takeaway"
              ) > -1 &&
              typeof b["event_action"] != "undefined" &&
              b["event_action"]
                .toString()
                .toLowerCase()
                .indexOf("ç°å¨è®¢è´­".toLowerCase()) > -1) ||
            (b["domain_pathname"]
              .toString()
              .indexOf(
                "marinabaysands.com/deals/restaurants/gourmet-takeaway"
              ) > -1 &&
              typeof b["event_action"] != "undefined" &&
              b["event_action"]
                .toString()
                .toLowerCase()
                .indexOf("ä»ããæ³¨æ".toLowerCase()) > -1) ||
            (b["domain_pathname"]
              .toString()
              .indexOf(
                "marinabaysands.com/deals/restaurants/gourmet-takeaway"
              ) > -1 &&
              typeof b["event_action"] != "undefined" &&
              b["event_action"]
                .toString()
                .toLowerCase()
                .indexOf("ì§ê¸ ì£¼ë¬¸íì¸ì".toLowerCase()) > -1)
          ) {
            b["event_dc_activity"] = "mbs_700l";
            b["event_dc_activity_group"] = "deals";
            b["event_action"] = "dc_fire";
            try {
              b["restaurant_name"] = b["event_label"].split("/")[2];
            } catch (e) {}
          }
        } catch (e) {
          utag.DB(e);
        }
      },
      function (a, b) {
        try {
          if (
            b["domain_pathname"]
              .toString()
              .indexOf("marinabaysands.com/restaurants/") > -1 &&
            typeof b["event_category"] != "undefined" &&
            b["event_category"]
              .toString()
              .toLowerCase()
              .indexOf("PhoneLink".toLowerCase()) > -1 &&
            b["tealium_event"]
              .toString()
              .toLowerCase()
              .indexOf("restaurant_phone_click".toLowerCase()) > -1
          ) {
            b["event_dc_activity"] = "mbs_700x";
            b["event_dc_activity_group"] = "mbsre0";
            b["event_action"] = "dc_fire";
            try {
              b["restaurant_name"] = b["domain_pathname"]
                .split("/")
                .pop()
                .split(".")[0];
            } catch (e) {}
          }
        } catch (e) {
          utag.DB(e);
        }
      },
      function (a, b) {
        try {
          if (
            b["domain_pathname"]
              .toString()
              .indexOf("marinabaysands.com/restaurants/") > -1 &&
            typeof b["event_category"] != "undefined" &&
            b["event_category"]
              .toString()
              .toLowerCase()
              .indexOf("EmailUs".toLowerCase()) > -1 &&
            b["tealium_event"]
              .toString()
              .toLowerCase()
              .indexOf("restaurant_email_click".toLowerCase()) > -1
          ) {
            b["event_dc_activity"] = "mbs_7001";
            b["event_dc_activity_group"] = "mbsre0";
            b["event_action"] = "dc_fire";
            try {
              b["restaurant_name"] = b["domain_pathname"]
                .split("/")
                .pop()
                .split(".")[0];
            } catch (e) {}
          }
        } catch (e) {
          utag.DB(e);
        }
      },
      function (a, b) {
        try {
          if (
            b["dom.pathname"]
              .toString()
              .indexOf("/hotel/amenities/banyan-tree-spa") > -1 &&
            typeof b["event_label"] != "undefined" &&
            b["event_label"]
              .toString()
              .toLowerCase()
              .indexOf("mailto".toLowerCase()) > -1 &&
            b["event_label"]
              .toString()
              .toLowerCase()
              .indexOf("room.reservations".toLowerCase()) < 0
          ) {
            b["event_dc_activity"] = "mbs_700j";
            b["event_dc_activity_group"] = "mbsla00";
            b["event_action"] = "dc_fire";
          }
        } catch (e) {
          utag.DB(e);
        }
      },
      function (a, b) {
        try {
          if (
            b["domain_pathname"]
              .toString()
              .indexOf("marinabaysands.com/sands-rewards-club/login.aspx") >
              -1 &&
            b["tealium_event"].toString().toLowerCase() ==
              "user_login".toLowerCase()
          ) {
            b["event_dc_activity"] = "mbs_700";
            b["event_dc_activity_group"] = "mbs_r0";
            b["event_action"] = "dc_fire";
            b["page_name"] = "login";
            b["site_section"] = "sands-rewards-club";
            try {
              b["language_code"] =
                b["domain_pathname"].split(".")[0] == "www"
                  ? "en"
                  : b["domain_pathname"].split(".")[0];
            } catch (e) {}
          }
        } catch (e) {
          utag.DB(e);
        }
      },
      function (a, b) {
        try {
          if (
            b["domain_pathname"]
              .toString()
              .indexOf(
                "marinabaysands.com/sands-rewards-lifestyle/login.aspx"
              ) > -1 &&
            b["tealium_event"].toString().toLowerCase() ==
              "user_login".toLowerCase()
          ) {
            b["event_dc_activity"] = "mbs_700";
            b["event_dc_activity_group"] = "mbssr0";
            b["event_action"] = "dc_fire";
            b["page_name"] = "login";
            b["site_section"] = "sands-rewards-lifestyle";
            try {
              b["language_code"] =
                b["domain_pathname"].split(".")[0] == "www"
                  ? "en"
                  : b["domain_pathname"].split(".")[0];
            } catch (e) {}
          }
        } catch (e) {
          utag.DB(e);
        }
      },
      function (a, b) {
        try {
          if (
            (/^\/expo-events-and-convention-centre/.test(b["dom.pathname"]) &&
              typeof b["event_label"] != "undefined" &&
              b["event_label"]
                .toString()
                .toLowerCase()
                .indexOf("room.reservations".toLowerCase()) < 0) ||
            (/^\/environmental-sustainability\/green-meetings/.test(
              b["dom.pathname"]
            ) &&
              typeof b["event_label"] != "undefined" &&
              b["event_label"]
                .toString()
                .toLowerCase()
                .indexOf("room.reservations".toLowerCase()) < 0)
          ) {
            b["event_dc_activity"] = "mbs_7005";
            b["event_dc_activity_group"] = "mbsev0";
            b["event_action"] = "dc_fire";
          }
        } catch (e) {
          utag.DB(e);
        }
      },
      function (a, b) {
        try {
          if (
            b["dom.pathname"]
              .toString()
              .indexOf("hotel/amenities/banyan-tree-spa.html") > -1 &&
            typeof b["event_label"] != "undefined" &&
            b["event_label"]
              .toString()
              .indexOf("/hotel/amenities/banyan-tree-spa/reservation.html") > -1
          ) {
            b["event_dc_activity_group"] = "mbsla00";
            b["event_dc_activity"] = "mbs_700l";
            b["event_action"] = "dc_fire";
          }
        } catch (e) {
          utag.DB(e);
        }
      },
      function (a, b) {
        try {
          if (
            b["dom.pathname"]
              .toString()
              .indexOf("expo-events-and-convention-centre/") > -1 &&
            typeof b["event_label"] != "undefined" &&
            b["event_label"]
              .toString()
              .indexOf("meetings.marinabaysands.com/booking") > -1
          ) {
            b["event_dc_activity_group"] = "mbsev0";
            b["event_dc_activity"] = "mbs_7006";
            b["event_action"] = "dc_fire";
          }
        } catch (e) {
          utag.DB(e);
        }
      },
      function (a, b) {
        try {
          if (
            b["tealium_event"] == "selectProduct" &&
            /ticket.marinabaysands.com\/mbs\/booking\/.+/.test(b["dom.url"])
          ) {
            b["event_dc_activity_group"] = "mbsfb0";
            b["event_dc_activity"] = "mbs_700h";
            b["event_action"] = "dc_fire";
          }
        } catch (e) {
          utag.DB(e);
        }
      },
      function (a, b) {
        try {
          if (
            b["tealium_event"] == "selectProduct" &&
            /ticket.marinabaysands.com\/mbs\/hotel\/.+\/package\//.test(
              b["dom.url"]
            )
          ) {
            b["event_dc_activity_group"] = "mbsre00";
            b["event_dc_activity"] = "mbs_7003";
            b["event_action"] = "dc_fire";
          }
        } catch (e) {
          utag.DB(e);
        }
      },
      function (a, b) {
        try {
          if (
            b["tealium_event"].toString().indexOf("user_register") > -1 &&
            b["domain_pathname"]
              .toString()
              .indexOf("marinabaysands.com/sands-rewards-lifestyle") > -1
          ) {
            b["event_dc_activity_group"] = "mbssr0";
            b["event_dc_activity"] = "mbs_70";
            b["event_action"] = "dc_fire";
            b["page_name"] = "login";
            b["site_section"] = "sands-rewards-lifestyle";
            try {
              b["language_code"] =
                b["domain_pathname"].split(".")[0] == "www"
                  ? "en"
                  : b["domain_pathname"].split(".")[0];
            } catch (e) {}
          }
        } catch (e) {
          utag.DB(e);
        }
      },
      function (a, b) {
        try {
          if (
            b["tealium_event"] == "addToCart" &&
            /ticket.marinabaysands.com\/mbs\/booking\/.+/.test(b["dom.url"])
          ) {
            b["event_dc_activity_group"] = "mbsfb0";
            b["event_dc_activity"] = "mbs_700i";
            b["event_action"] = "dc_fire";
            b["currency"] = "SGD";
          }
        } catch (e) {
          utag.DB(e);
        }
      },
      function (a, b) {
        try {
          if (
            b["tealium_event"] == "addToCart" &&
            /ticket.marinabaysands.com\/mbs\/hotel\/.+\/package\//.test(
              b["dom.url"]
            )
          ) {
            b["event_dc_activity_group"] = "mbsre00";
            b["event_dc_activity"] = "mbs_7004";
            b["event_action"] = "dc_fire";
            b["currency"] = "SGD";
          }
        } catch (e) {
          utag.DB(e);
        }
      },
      function (a, b) {
        try {
          if (
            (b["event_name"].toString().toLowerCase() ==
              "Outbound Link".toLowerCase() &&
              b["outbound_url"]
                .toString()
                .toLowerCase()
                .indexOf("sevenrooms.com".toLowerCase()) > -1 &&
              b["dom.url"]
                .toString()
                .toLowerCase()
                .indexOf(
                  "/deals/restaurants/endless-lunch-selections.html".toLowerCase()
                ) > -1) ||
            (b["event_name"].toString().toLowerCase() ==
              "Outbound Link".toLowerCase() &&
              /marinabaysands.com\/restaurants\/(.*)\/reservation/.test(
                b["outbound_url"]
              ) &&
              b["dom.url"]
                .toString()
                .indexOf("/deals/restaurants/endless-lunch-selections.html") >
                -1)
          ) {
            b["event_dc_activity_group"] = "deals";
            b["event_dc_activity"] = "mbs_7006";
            b["event_action"] = "dc_fire";
            try {
              b["restaurant_name"] = b["outbound_url"]
                .split("/reservations/")[1]
                .split("?")[0];
            } catch (e) {}
          }
        } catch (e) {
          utag.DB(e);
        }
      },
      function (a, b) {
        try {
          if (
            b["event_label"]
              .toString()
              .toLowerCase()
              .indexOf(
                "/deals/restaurants/endless-lunch-selections/reservation.html".toLowerCase()
              ) > -1 &&
            b["tealium_event"].toString().toLowerCase() ==
              "restaurant_booking_select_time".toLowerCase()
          ) {
            b["event_dc_activity_group"] = "deals";
            b["event_dc_activity"] = "mbs_7006";
            b["event_action"] = "dc_fire";
          }
        } catch (e) {
          utag.DB(e);
        }
      },
      function (a, b) {
        try {
          if (
            typeof b["merchandise_product_total_quantity"] != "undefined" &&
            b["merchandise_product_total_quantity"] != "" &&
            typeof b["merchandise_product_total_quantity"] != "undefined"
          ) {
            try {
              b["merchandise_product_total_quantity"] =
                b["merchandise_product_total_quantity"].toString();
            } catch (e) {}
          }
        } catch (e) {
          utag.DB(e);
        }
      },
      function (a, b) {
        try {
          if (
            (b["event_name"].toString().toLowerCase() ==
              "Outbound Link".toLowerCase() &&
              b["outbound_url"].toString().indexOf("sevenrooms.com") > -1 &&
              b["dom.url"]
                .toString()
                .indexOf("/deals/restaurants/dine-and-earn.html") > -1) ||
            (b["event_name"].toString().toLowerCase() ==
              "Outbound Link".toLowerCase() &&
              /marinabaysands.com\/restaurants\/(.*)\/reservation/.test(
                b["outbound_url"]
              ) &&
              b["dom.url"]
                .toString()
                .indexOf("/deals/restaurants/dine-and-earn.html") > -1)
          ) {
            b["event_dc_activity_group"] = "deals";
            b["event_dc_activity"] = "mbs_7008";
            b["event_action"] = "dc_fire";
            try {
              b["restaurant_name"] = b["outbound_url"]
                .split("/reservations/")[1]
                .split("?")[0];
            } catch (e) {}
          }
        } catch (e) {
          utag.DB(e);
        }
      },
    ];
    u.send = function (a, b) {
      if (u.ev[a] || u.ev.all !== undefined) {
        utag.DB("send:347");
        utag.DB(b);
        var c, d, e, f, h, i, j, k, _event, p, key;
        u.data = {
          qsp_delim: "&",
          kvp_delim: "=",
          base_url: "https://www.googletagmanager.com/gtag/js",
          advertiser_id: "DC-8293333",
          activity_group: "mbsla00",
          activity: "",
          counting_method: "standard",
          fire_purchase: "false",
          custom_scripts: "true",
          data_layer_name: "",
          session_id: "",
          product_id: [],
          product_quantity: [],
          product_unit_price: [],
          dc_custom_params: {},
          event_name: "",
          event: [],
          custom: {},
        };
        for (c = 0; c < u.extend.length; c++) {
          try {
            d = u.extend[c](a, b);
            if (d == false) return;
          } catch (e) {}
        }
        utag.DB("send:347:EXTENSIONS");
        utag.DB(b);
        for (d in utag.loader.GV(u.map)) {
          if (b[d] !== undefined && b[d] !== "") {
            e = u.map[d].split(",");
            for (f = 0; f < e.length; f++) {
              u.map_func(e[f].split("."), u.data, b[d]);
            }
          } else {
            h = d.split(":");
            if (h.length === 2 && b[h[0]] === h[1]) {
              if (u.map[d]) {
                u.data.event = u.data.event.concat(u.map[d].split(","));
              }
            }
          }
        }
        utag.DB("send:347:MAPPINGS");
        utag.DB(u.data);
        u.data.order_id = u.data.order_id || b._corder || "";
        u.data.order_total = u.data.order_total || b._ctotal || "";
        if (u.data.product_quantity.length === 0 && b._cquan !== undefined) {
          u.data.product_quantity = b._cquan.slice(0);
        }
        if (typeof u.data.advertiser_id === "string") {
          u.data.advertiser_id = u.data.advertiser_id.split(",");
        }
        if (typeof u.data.activity_group === "string") {
          u.data.activity_group = u.data.activity_group.split(",");
        }
        if (typeof u.data.activity === "string") {
          u.data.activity = u.data.activity.split(",");
        }
        if (typeof u.data.counting_method === "string") {
          u.data.counting_method = u.data.counting_method.split(",");
        }
        if (typeof u.data.session_id === "string") {
          u.data.session_id = u.data.session_id.split(",");
        }
        if (u.data.product_id.length === 0 && b._cprod !== undefined) {
          u.data.product_id = b._cprod.slice(0);
        }
        if (u.data.product_quantity.length === 0 && b._cquan !== undefined) {
          u.data.product_quantity = b._cquan.slice(0);
        }
        if (u.data.product_unit_price.length === 0 && b._cprice !== undefined) {
          u.data.product_unit_price = b._cprice.slice(0);
        }
        if (!u.data.advertiser_id) {
          utag.DB(u.id + ": Tag not fired: Required attribute not populated");
          return;
        }
        for (i = 0; i < u.data.advertiser_id.length; i++) {
          if (!/^[a-zA-Z]{2}-/.test(u.data.advertiser_id[i])) {
            u.data.advertiser_id[i] = "DC-" + u.data.advertiser_id[i];
          }
        }
        u.data.base_url += "?id=" + u.data.advertiser_id[0];
        if (u.data.data_layer_name) {
          u.data.base_url = u.data.base_url + "&l=" + u.data.data_layer_name;
        }
        for (i = 0; i < u.data.advertiser_id.length; i++) {
          u.o("config", u.data.advertiser_id[i]);
        }
        if (u.data.order_id) {
          for (i = 0; i < u.data.event.length; i++) {
            if (u.data.event[i] === "purchase") {
              p = true;
            }
          }
          if (!p && u.toBoolean(u.data.fire_purchase)) {
            u.data.event.push("purchase");
            if (u.data.counting_method[0] === "") {
              u.data.counting_method[0] = "transactions";
            }
          }
        }
        var total_qty = 0;
        if (typeof u.data.product_quantity === "number") {
          total_qty = u.data.product_quantity;
        } else if (u.data.product_quantity.length === 1) {
          total_qty = u.data.product_quantity[0];
        } else if (u.data.product_quantity.length > 1) {
          for (i = 0; i < u.data.product_quantity.length; i++) {
            total_qty += parseInt(u.data.product_quantity[i], 10);
          }
        } else {
          total_qty = 1;
        }
        for (i = 0; i < u.data.event.length; i++) {
          _event = u.data.event[i];
          for (j = 0; j < u.data.advertiser_id.length; j++) {
            var eventIdData = {};
            if (u.data.custom_scripts === "true" || u.data.custom_scripts) {
              eventIdData.allow_custom_scripts = true;
            } else if (
              u.data.custom_scripts === "false" ||
              !u.data.custom_scripts
            ) {
              eventIdData.allow_custom_scripts = false;
            }
            if (u.data.session_id.length === 1 && u.data.session_id[0] !== "") {
              eventIdData.session_id = u.data.session_id[0];
            } else if (u.data.session_id[j] !== "") {
              eventIdData.session_id = u.data.session_id[j];
            }
            if (u.data.order_total) {
              eventIdData.value = u.data.order_total;
              eventIdData.transaction_id = u.data.order_id;
            }
            if (u.data.product_quantity) {
              eventIdData.quantity = total_qty;
            }
            eventIdData.items = [];
            for (k = 0; k < u.data.product_id.length; k++) {
              if (
                typeof u.data.product_unit_price[k] === "undefined" ||
                typeof u.data.product_quantity[k] === "undefined"
              ) {
                utag.DB(
                  "No matching unit price or quantity for product ID " +
                    u.data.product_id[k]
                );
              } else {
                eventIdData.items.push({
                  id: u.data.product_id[k],
                  price: u.data.product_unit_price[k],
                  quantity: u.data.product_quantity[k],
                });
              }
            }
            for (key in u.data.custom) {
              eventIdData[key] = u.data.custom[key];
            }
            if (!u.isEmptyObject(u.data.dc_custom_params)) {
              eventIdData.dc_custom_params = {};
              for (key in u.data.dc_custom_params) {
                eventIdData.dc_custom_params[key] =
                  u.data.dc_custom_params[key];
              }
            }
            if (
              u.data.counting_method[j] &&
              u.data.counting_method[j] !==
                u.data.counting_method[j].toLowerCase()
            ) {
              u.data.counting_method[j] =
                u.data.counting_method[j].toLowerCase();
              utag.DB(
                "Counting Method not supplied in proper case - converted to lower case"
              );
            }
            eventIdData.send_to =
              u.data.advertiser_id[j] +
              "/" +
              u.data.activity_group[j] +
              "/" +
              u.data.activity[j] +
              "+" +
              u.data.counting_method[j];
            if (_event === "purchase") {
              u.o("event", "purchase", eventIdData);
            }
            if (_event === "conversion") {
              u.o("event", "conversion", eventIdData);
            }
          }
        }
        if (!u.hasgtagjs()) {
          u.scriptrequested = true;
          utag.ut.gtagScriptRequested = true;
          u.loader({
            type: "script",
            src: u.data.base_url,
            cb: null,
            loc: "script",
            id: "utag_347",
            attrs: {},
          });
        }
        utag.DB("send:347:COMPLETE");
      }
    };
    utag.o[loader].loader.LOAD(id);
  })("347", "mbs.main");
} catch (error) {
  utag.DB(error);
}

//tealium universal tag - utag.362 ut4.0.202207210624, Copyright 2022 Tealium.com Inc. All Rights Reserved.
try {
  (function (id, loader) {
    var u = { id: id };
    utag.o[loader].sender[id] = u;
    if (utag.ut === undefined) {
      utag.ut = {};
    }
    if (utag.ut.loader === undefined) {
      u.loader = function (o) {
        var b,
          c,
          l,
          a = document;
        if (o.type === "iframe") {
          b = a.createElement("iframe");
          o.attrs = o.attrs || {
            height: "1",
            width: "1",
            style: "display:none",
          };
          for (l in utag.loader.GV(o.attrs)) {
            b.setAttribute(l, o.attrs[l]);
          }
          b.setAttribute("src", o.src);
        } else if (o.type == "img") {
          utag.DB("Attach img: " + o.src);
          b = new Image();
          b.src = o.src;
          return;
        } else {
          b = a.createElement("script");
          b.language = "javascript";
          b.type = "text/javascript";
          b.async = 1;
          b.charset = "utf-8";
          for (l in utag.loader.GV(o.attrs)) {
            b[l] = o.attrs[l];
          }
          b.src = o.src;
        }
        if (o.id) {
          b.id = o.id;
        }
        if (typeof o.cb == "function") {
          if (b.addEventListener) {
            b.addEventListener(
              "load",
              function () {
                o.cb();
              },
              false
            );
          } else {
            b.onreadystatechange = function () {
              if (
                this.readyState == "complete" ||
                this.readyState == "loaded"
              ) {
                this.onreadystatechange = null;
                o.cb();
              }
            };
          }
        }
        l = o.loc || "head";
        c = a.getElementsByTagName(l)[0];
        if (c) {
          utag.DB("Attach to " + l + ": " + o.src);
          if (l == "script") {
            c.parentNode.insertBefore(b, c);
          } else {
            c.appendChild(b);
          }
        }
      };
    } else {
      u.loader = utag.ut.loader;
    }
    u.encode = function (a, b) {
      b = "";
      try {
        b = encodeURIComponent(a);
      } catch (e) {
        utag.DB(e);
      }
      if (b == "") {
        b = escape(a);
      }
      return b;
    };
    u.ev = { view: 1 };
    u.scriptrequested = false;
    u.rp = function (a, b) {
      if (typeof a !== "undefined" && a.indexOf("@@") > 0) {
        a = a.replace(/@@([^@]+)@@/g, function (m, d) {
          if (b[d]) {
            return u.encode(b[d]);
          } else {
            return "";
          }
        });
      }
      return a;
    };
    u.map = {};
    u.extend = [];
    u.send = function (a, b) {
      if (u.ev[a] || u.ev.all !== undefined) {
        var c, d, e, f;
        u.data = {
          qsp_delim: "&" || "&",
          kvp_delim: "=" || "=",
          qs_delim: "?" || "?",
          tag_type: "script",
          base_url:
            "//d.turn.com/r/dft/id/L21rdC8xMzEwL3BpZC8xMzQwODA3ODMvdC8w",
          secure_base_url: "",
          static_params: "",
          cachebust: "disabled",
          cachevar: "" || "_rnd",
          requestscriptonce: "disabled",
        };
        utag.DB("send:362:EXTENSIONS");
        utag.DB(b);
        c = [];
        for (d in utag.loader.GV(u.map)) {
          if (typeof b[d] !== "undefined" && b[d] !== "") {
            e = u.map[d].split(",");
            for (f = 0; f < e.length; f++) {
              if (!u.data.hasOwnProperty(e[f])) {
                c.push(e[f] + "##kvp_delim##" + u.encode(b[d]));
              }
              u.data[e[f]] = b[d];
            }
          }
        }
        if (!u.data.base_url) {
          if (!u.data.secure_base_url) {
            utag.DB("Error: No Base URL or Secure HTTPS Override Provided.");
            return;
          } else {
            u.data.base_url = u.data.secure_base_url;
            utag.DB("No Base URL provided, using Secure HTTPS Override.");
          }
        }
        u.data.secure_base_url = u.data.secure_base_url || u.data.base_url;
        u.data.url =
          location.protocol === "https:"
            ? u.data.secure_base_url
            : u.data.base_url;
        if (u.data.url.indexOf("http") !== 0 && u.data.url.indexOf("/") !== 0) {
          u.data.url = location.protocol + "//" + u.data.url;
        }
        if (u.data.static_params) {
          c.push(u.data.static_params);
        }
        var cb_check = new RegExp(
          "(\\" +
            u.data.qs_delim +
            "|" +
            u.data.qsp_delim +
            ")" +
            u.data.cachevar +
            "="
        );
        if (u.data.cachebust === "enabled" && !cb_check.test(u.data.url)) {
          c.push([u.data.cachevar, Math.random()].join(u.data.kvp_delim));
        }
        if (c.length > 0) {
          if (u.data.url.indexOf(u.data.qs_delim) < 0) {
            u.data.url += u.data.qs_delim;
          } else if (
            u.data.url.indexOf(u.data.qs_delim) !==
            u.data.url.length - 1
          ) {
            u.data.url += u.data.qsp_delim;
          }
        }
        u.data.url = u.rp(u.data.url, b) + u.rp(c.join(u.data.qsp_delim), b);
        u.data.url = u.data.url.replace(/##kvp_delim##/g, u.data.kvp_delim);
        u.callback = u.callback || function () {};
        if (
          u.data.requestscriptonce === "enabled" &&
          u.data.tag_type === "script"
        ) {
          if (!u.scriptrequested) {
            u.scriptrequested = true;
            u.loader({
              type: u.data.tag_type,
              src: u.data.url,
              loc: "script",
              id: "utag_362",
              cb: u.callback,
            });
          } else {
            u.callback();
          }
        } else {
          u.loader({
            type: u.data.tag_type,
            src: u.data.url,
            loc: "script",
            id: "utag_362",
            cb: u.callback,
          });
        }
        utag.DB("send:362:COMPLETE");
      }
    };
    utag.o[loader].loader.LOAD(id);
  })("362", "mbs.main");
} catch (error) {
  utag.DB(error);
}

//tealium universal tag - utag.363 ut4.0.202207210624, Copyright 2022 Tealium.com Inc. All Rights Reserved.
window.GoogleAnalyticsObject = "" || "ga";
window[window.GoogleAnalyticsObject] =
  window[window.GoogleAnalyticsObject] ||
  function () {
    (window[window.GoogleAnalyticsObject].q =
      window[window.GoogleAnalyticsObject].q || []).push(arguments);
  };
try {
  (function (id, loader) {
    var u = {};
    utag.o[loader].sender[id] = u;
    if (utag.ut === undefined) {
      utag.ut = {};
    }
    if (utag.ut.loader === undefined) {
      u.loader = function (o) {
        var a, b, c, l;
        a = document;
        if (o.type === "iframe") {
          b = a.createElement("iframe");
          b.setAttribute("height", "1");
          b.setAttribute("width", "1");
          b.setAttribute("style", "display:none");
          b.setAttribute("src", o.src);
        } else if (o.type === "img") {
          utag.DB("Attach img: " + o.src);
          b = new Image();
          b.src = o.src;
          return;
        } else {
          b = a.createElement("script");
          b.language = "javascript";
          b.type = "text/javascript";
          b.async = 1;
          b.src = o.src;
        }
        if (o.id) {
          b.id = o.id;
        }
        if (typeof o.cb === "function") {
          b.hFlag = 0;
          b.onreadystatechange = function () {
            if (
              (this.readyState === "complete" ||
                this.readyState === "loaded") &&
              !b.hFlag
            ) {
              b.hFlag = 1;
              o.cb();
            }
          };
          b.onload = function () {
            if (!b.hFlag) {
              b.hFlag = 1;
              o.cb();
            }
          };
        }
        l = o.loc || "head";
        c = a.getElementsByTagName(l)[0];
        if (c) {
          utag.DB("Attach to " + l + ": " + o.src);
          if (l === "script") {
            c.parentNode.insertBefore(b, c);
          } else {
            c.appendChild(b);
          }
        }
      };
    } else {
      u.loader = utag.ut.loader;
    }
    if (utag.ut.typeOf === undefined) {
      u.typeOf = function (e) {
        return {}.toString
          .call(e)
          .match(/\s([a-zA-Z]+)/)[1]
          .toLowerCase();
      };
    } else {
      u.typeOf = utag.ut.typeOf;
    }
    u.ev = { view: 1, link: 1 };
    u.o = window[window.GoogleAnalyticsObject];
    u.required = {};
    u.created = false;
    u.all = function (e, o, v, a, b, c) {
      for (var i = 0; i < u.data.account.length; i++) {
        var t = u.data.name[i] ? u.data.name[i] + "." : "";
        if (o === "event") {
          u.o(t + e, o, v, a, b, c);
        } else if (v !== undefined) {
          u.o(t + e, o, v);
        } else {
          u.o(t + e, o);
        }
      }
    };
    u.setHitData = function (g, a, b, f) {
      var obj = u.data[a];
      for (var d in utag.loader.GV(obj)) {
        if (
          b &&
          d.indexOf("enh_" + b + "-") !== 0 &&
          d.indexOf("enh_all-") !== 0
        ) {
          continue;
        }
        var idx = d.split("-")[1],
          val = obj[d];
        if (u.typeOf(val) !== "array") {
          g[idx] = val;
        } else {
          g[idx] = val[f];
        }
      }
    };
    u.addEvent = function (v) {
      if (
        typeof v.eventCategory == "undefined" ||
        typeof v.eventAction == "undefined"
      ) {
        utag.DB("GA event Category or Action is not set");
        return;
      }
      if (isNaN(parseInt(v.eventValue))) {
        utag.DB("GA event Value is not a number");
        v.eventValue = null;
      } else {
        v.eventValue = parseInt(v.eventValue) || null;
      }
      u.data.ga_events.push(v);
    };
    u.addproduct = function (event_type, len, imp) {
      var g = {},
        i,
        j,
        k = [];
      if (imp === true) {
        k = u.data.enh_impression_id.length
          ? u.data.enh_impression_id
          : u.data.enh_impression_name;
        for (i = 0; i < k.length; i++) {
          g = {};
          g.id = u.data.enh_impression_id[i] ? u.data.enh_impression_id[i] : "";
          g.name = u.data.enh_impression_name[i]
            ? u.data.enh_impression_name[i]
            : "";
          g.brand = u.data.enh_impression_brand[i]
            ? u.data.enh_impression_brand[i]
            : "";
          g.variant = u.data.enh_impression_variant[i]
            ? u.data.enh_impression_variant[i]
            : "";
          g.category = u.data.enh_impression_category[i]
            ? u.data.enh_impression_category[i]
            : "";
          g.list = u.data.enh_impression_list[i]
            ? u.data.enh_impression_list[i]
            : "";
          g.price = u.data.enh_impression_price[i]
            ? u.data.enh_impression_price[i]
            : "";
          g.position = u.data.enh_impression_position[i]
            ? u.data.enh_impression_position[i]
            : "";
          u.setHitData(g, "enhecom_events", event_type, i);
          u.all("ec:addImpression", g);
        }
      } else {
        for (i = 0; i < len; i++) {
          g = {};
          if (u.data.autofill_params === "true") {
            for (j = 0; j < u.data.product_id.length; j++) {
              u.data.product_name[j] =
                u.data.product_name[j] || u.data.product_id[j];
              u.data.product_unit_price[j] =
                u.data.product_unit_price[j] || "1.00";
              u.data.product_quantity[j] = u.data.product_quantity[j] || "1";
            }
          }
          g.id = u.data.product_id[i];
          g.name = u.data.product_name[i] ? u.data.product_name[i] : "";
          g.brand = u.data.product_brand[i] ? u.data.product_brand[i] : "";
          g.variant = u.data.product_variant[i]
            ? u.data.product_variant[i]
            : "";
          g.category = u.data.product_category[i]
            ? u.data.product_category[i]
            : "";
          g.price = u.data.product_unit_price[i]
            ? u.data.product_unit_price[i]
            : "";
          g.quantity = u.data.product_quantity[i]
            ? u.data.product_quantity[i]
            : "";
          g.coupon = u.data.product_discount[i]
            ? u.data.product_discount[i]
            : "";
          g.position = u.data.product_position[i]
            ? u.data.product_position[i]
            : "";
          u.setHitData(g, "enhecom_events", event_type, i);
          u.all("ec:addProduct", g);
        }
      }
    };
    u.addpromo = function (action, event) {
      var f, g;
      for (f = 0; f < u.data.enh_promo_id.length; f++) {
        g = {};
        g.id = u.data.enh_promo_id[f];
        g.name = u.data.enh_promo_name[f]
          ? u.data.enh_promo_name[f]
          : u.data.enh_promo_id[f];
        g.creative = u.data.enh_promo_creative[f]
          ? u.data.enh_promo_creative[f]
          : "";
        g.position = u.data.enh_promo_position[f]
          ? u.data.enh_promo_position[f]
          : "";
        u.all("ec:addPromo", g);
      }
      if (action === "promo_click" && event === "link") {
        u.all("ec:setAction", u.data.enh_action);
        if (u.data.autosend_events === "true") {
          u.all(
            "send",
            "event",
            "Internal Promotions",
            "click",
            g.name ? g.name : g.id,
            { hitCallback: u.data.enh_event_cb }
          );
        }
      }
    };
    u.createTracker = function () {
      var i, tn, start;
      if (u.typeOf(u.data.account) === "string") {
        u.data.account = u.data.account.replace(/\s/g, "").split(",");
      }
      if (u.typeOf(u.data.name) === "string" && u.data.name !== "") {
        u.data.name = u.data.name.replace(/\s/g, "").split(",");
      }
      if (!u.data.name || u.data.name.length !== u.data.account.length) {
        start =
          u.data.name.length !== u.data.account.length ? u.data.name.length : 0;
        tn = utag.tagsettings.gua.trackernames;
        u.data.name = u.data.name || [];
        for (i = start; i < u.data.account.length; i++) {
          u.data.name.push("tealium_" + (i + tn));
        }
        utag.tagsettings.gua.trackernames = tn + i;
      }
    };
    u.initTracker = function () {
      var c, f;
      if (!u.created) {
        u.created = true;
        for (f = 0; f < u.data.account.length; f++) {
          c = {};
          if (u.data.siteSpeedSampleRate) {
            c.siteSpeedSampleRate = parseInt(u.data.siteSpeedSampleRate);
          }
          if (u.data.sampleRate) {
            c.sampleRate = parseFloat(u.data.sampleRate);
          }
          c.cookieDomain = u.data.cookieDomain;
          if (u.data.cookieExpires || u.data.cookieExpires === "0") {
            c.cookieExpires = parseInt(u.data.cookieExpires);
          }
          if (u.data.legacyCookieDomain) {
            c.legacyCookieDomain = u.data.legacyCookieDomain;
          }
          if (
            u.data.legacyHistoryImport === "false" ||
            u.data.legacyHistoryImport === false
          ) {
            c.legacyHistoryImport = u.data.legacyHistoryImport;
          }
          c.allowLinker = u.data.allowLinker;
          if (typeof u.data.name[f] !== "undefined" && u.data.name[f] !== "") {
            c.name = u.data.name[f];
          }
          if (u.data.clientId) {
            c.clientId = u.data.clientId;
          }
          if (
            u.data.useAmpClientId === "true" ||
            u.data.useAmpClientId === true
          ) {
            c.useAmpClientId = u.data.useAmpClientId;
          }
          u.o("create", u.data.account[f], c);
        }
        if (u.data.global_event_cb) {
          u.all("set", "hitCallback", u.data.global_event_cb);
        }
        if (u.data.optimizely === "true") {
          window.optimizely = window.optimizely || [];
          window.optimizely.push(["activateUniversalAnalytics"]);
        }
      }
    };
    u.setGlobalProperties = function (data, reset, custom_property) {
      var map = {
          uid: { name: "&uid", type: "exists", reset: true },
          page: { name: "page", type: "exists", reset: true },
          title: { name: "title", type: "exists", reset: true },
          location: { name: "location", type: "exists", reset: false },
          campaignId: { name: "campaignId", type: "exists", reset: true },
          campaignName: { name: "campaignName", type: "exists", reset: true },
          campaignSource: {
            name: "campaignSource",
            type: "exists",
            reset: true,
          },
          campaignMedium: {
            name: "campaignMedium",
            type: "exists",
            reset: true,
          },
          campaignContent: {
            name: "campaignContent",
            type: "exists",
            reset: true,
          },
          campaignKeyword: {
            name: "campaignKeyword",
            type: "exists",
            reset: true,
          },
          dataSource: { name: "dataSource", type: "exists", reset: true },
        },
        prop;
      if (data.clear_global_vars === "true") {
        for (key in u.map) {
          if (
            u.map[key].match(/dimension|metric/) &&
            typeof data[key] === "undefined"
          ) {
            var item = u.map[key].split(",")[0];
            u.all("set", item, "");
          }
        }
      }
      if (custom_property && reset) {
        u.all("set", custom_property, "");
      }
      for (prop in utag.loader.GV(map)) {
        if (reset && map[prop].reset) {
          u.all("set", map[prop].name, "");
        } else {
          if (map[prop].type === "bool") {
            if (data[prop] == true || data[prop] === "true") {
              u.all("set", map[prop].name, true);
            }
          } else if (map[prop].type === "exists") {
            if (data[prop]) {
              u.all("set", map[prop].name, data[prop]);
            }
          }
        }
      }
    };
    window.utag.tagsettings = window.utag.tagsettings || {};
    window.utag.tagsettings.gua = window.utag.tagsettings.gua || {};
    window.utag.tagsettings.gua.trackernames =
      window.utag.tagsettings.gua.trackernames || 0;
    u.map = {
      event_category: "eventCategory",
      event_name: "eventCategory",
      event_action: "eventAction",
      event_label: "eventLabel",
      restaurant_category: "product_category",
      restaurant_name: "product_name",
      restaurant_time_category: "product_id",
      restaurant_guest_quantity: "product_quantity",
      restaurant_unit_price: "product_unit_price",
      restaurant_order_id: "order_id",
      restaurant_dine_date: "dimension18",
      restaurant_revenue: "revenue",
      product_category: "product_category",
      restaurant_dine_time: "dimension20",
      site_section: "dimension21",
    };
    u.extend = [];
    u.send = function (a, b) {
      if (u.ev[a] || u.ev.all !== undefined) {
        u.o = window[window.GoogleAnalyticsObject];
        b.ga_events = b.ga_events || [];
        var c, d, e, f, g, h, tn, prop;
        if (u.data && u.data.name) {
          tn = u.data.name;
        }
        u.data = {
          qsp_delim: "&",
          kvp_delim: "=",
          base_url: "",
          a: a,
          cookieDomain: "" || utag.loader.lh(),
          name: tn || "sevenrooms",
          account: "UA-29456215-11",
          anonymizeIp: "false",
          allowLinker: "true",
          crossDomainTrack: "",
          enhancedLinkAttribution: "true",
          enhancedecommerce: "true",
          displayfeatures: "true",
          screenView: "false",
          optimizely: "false",
          init_before_extensions: "false",
          autofill_params: "false",
          autosend_events: "true" || "true",
          clear_global_vars: "false",
          enh_action: "",
          enh_event_cb: "",
          enh_checkout_step: "",
          enh_checkout_option: "",
          product_action_list: "",
          product_variant: [],
          enh_impression_id: [],
          enh_impression_name: [],
          enh_impression_price: [],
          enh_impression_category: [],
          enh_impression_brand: [],
          enh_impression_variant: [],
          enh_impression_list: [],
          enh_impression_position: [],
          enh_promo_id: [],
          enh_promo_name: [],
          enh_promo_creative: [],
          enh_promo_position: [],
          id: "",
          product_id: [],
          product_name: [],
          product_brand: [],
          product_category: [],
          product_quantity: [],
          product_unit_price: [],
          product_discount: [],
          product_position: [],
          ga_events: [],
          sessionControl: "",
          set: {},
        };
        if (u.data.init_before_extensions === "true") {
          u.createTracker();
          u.initTracker();
        }
        c = [];
        for (d in utag.loader.GV(u.map)) {
          if (b[d] !== undefined && b[d] !== "") {
            e = u.map[d].split(",");
            for (f = 0; f < e.length; f++) {
              if (e[f].indexOf("a.") === 0) {
                u.data["a"][e[f].substring(2)] = b[d];
              } else if (e[f].indexOf("set.") === 0) {
                u.data.set[e[f].substring(4)] = b[d];
              } else {
                u.data[e[f]] = b[d];
              }
            }
          } else {
            h = d.split(":");
            if (h.length === 2 && b[h[0]] === h[1]) {
              if (u.map[d]) {
                u.data.enh_action = u.map[d];
              }
            }
          }
        }
        u.data.account = u.data.tid || u.data.account;
        if (
          u.typeOf(u.data.ga_events) === "array" &&
          u.typeOf(b.ga_events) === "array"
        ) {
          if (u.data.ga_events.length === 0 && b.ga_events.length > 0) {
            u.data.ga_events = b.ga_events;
          } else if (u.data.ga_events.length > 0 && b.ga_events.length > 0) {
            u.data.ga_events = u.data.ga_events.concat(b.ga_events);
          }
        }
        u.data.order_id = u.data.order_id || b._corder || "";
        u.data.order_total = u.data.order_total || b._ctotal || "";
        u.data.order_shipping = u.data.order_shipping || b._cship || "";
        u.data.order_tax = u.data.order_tax || b._ctax || "";
        u.data.order_store = u.data.order_store || b._cstore || "";
        u.data.order_currency = u.data.order_currency || b._ccurrency || "";
        u.data.order_coupon_code = u.data.order_coupon_code || b._cpromo || "";
        if (u.data.product_id.length === 0 && b._cprod !== undefined) {
          u.data.product_id = b._cprod.slice(0);
        }
        if (u.data.product_name.length === 0 && b._cprodname !== undefined) {
          u.data.product_name = b._cprodname.slice(0);
        }
        if (u.data.product_brand.length === 0 && b._cbrand !== undefined) {
          u.data.product_brand = b._cbrand.slice(0);
        }
        if (u.data.product_category.length === 0 && b._ccat !== undefined) {
          u.data.product_category = b._ccat.slice(0);
        }
        if (u.data.product_quantity.length === 0 && b._cquan !== undefined) {
          u.data.product_quantity = b._cquan.slice(0);
        }
        if (u.data.product_unit_price.length === 0 && b._cprice !== undefined) {
          u.data.product_unit_price = b._cprice.slice(0);
        }
        if (u.data.product_discount.length === 0 && b._cpdisc !== undefined) {
          u.data.product_discount = b._cpdisc.slice(0);
        }
        if (u.data.init_before_extensions !== "true") {
          u.createTracker();
          u.initTracker();
        }
        if (u.data.enhancedecommerce === "true" && !u.required["ec"]) {
          u.required["ec"] = !0;
          u.all("require", "ec");
        }
        u.data.app_id = u.data.app_id || u.data.appId || b.app_id;
        u.data.app_name = u.data.app_name || u.data.appName || b.app_name;
        u.data.app_version =
          u.data.app_version || u.data.appVersion || b.app_version;
        u.data.app_rdns =
          u.data.app_rdns || u.data.appInstallerId || b.app_rdns;
        u.data.screen_title =
          u.data.screen_title || u.data.screenName || b.screen_title;
        if (u.data.app_id || u.data.app_name) {
          g = {};
          g.appName = u.data.app_name;
          g.appId = u.data.app_id || "";
          g.appVersion = u.data.app_version;
          g.appInstallerId = u.data.app_rdns;
          u.all("set", g);
        }
        u.data.exception_reason = u.data.exception_reason || b.exception_reason;
        if (u.data.exception_reason) {
          g = {};
          g.exDescription = u.data.exception_reason;
          g.exFatal = true;
          if (u.data.nonInteraction) {
            g.nonInteraction = 1;
          }
          u.all("send", "exception", g);
        }
        if (u.data.allowLinker === "true" || u.data.allowLinker === true) {
          if (!u.required["linker"]) {
            u.all("require", "linker");
            u.required["linker"] = !0;
          }
          if (u.data.crossDomainTrack) {
            if (u.typeOf(u.data.crossDomainTrack) === "string") {
              u.data.crossDomainTrack = u.data.crossDomainTrack
                .replace(/\s/g, "")
                .split(",");
            }
            u.all("linker:autoLink", u.data.crossDomainTrack);
          }
        }
        if (u.data.clear_global_vars === "true") {
          u.setGlobalProperties(u.data, true);
          for (prop in utag.loader.GV(u.data.set)) {
            u.setGlobalProperties(u.data, true, prop);
          }
        }
        u.setGlobalProperties(u.data, false);
        if (u.data.anonymizeIp === "true" || u.data.anonymizeIp === true) {
          u.all("set", "anonymizeIp", true);
        }
        if (u.data.uid) {
          u.all("set", "&uid", u.data.uid);
        }
        if (u.data.page) {
          u.all("set", "page", u.data.page);
        }
        if (u.data.title) {
          u.all("set", "title", u.data.title);
        }
        if (u.data.location) {
          u.all("set", "location", u.data.location);
        }
        if (u.data.campaignId) {
          u.all("set", "campaignId", u.data.campaignId);
        }
        if (u.data.campaignName) {
          u.all("set", "campaignName", u.data.campaignName);
        }
        if (u.data.campaignSource) {
          u.all("set", "campaignSource", u.data.campaignSource);
        }
        if (u.data.campaignMedium) {
          u.all("set", "campaignMedium", u.data.campaignMedium);
        }
        if (u.data.campaignContent) {
          u.all("set", "campaignContent", u.data.campaignContent);
        }
        if (u.data.campaignKeyword) {
          u.all("set", "campaignKeyword", u.data.campaignKeyword);
        }
        if (
          u.data.displayfeatures === "true" ||
          u.data.displayfeatures === true
        ) {
          if (!u.required["displayfeatures"]) {
            u.required["displayfeatures"] = !0;
            u.all("require", "displayfeatures");
          }
        } else {
          u.all("set", "displayFeaturesTask", null);
        }
        if (u.data.dataSource) {
          u.all("set", "dataSource", u.data.dataSource);
        }
        for (prop in utag.loader.GV(u.data.set)) {
          u.all("set", prop, u.data.set[prop]);
        }
        u.data.transaction_events = {};
        u.data.pageview_events = {};
        u.data.link_events = {};
        u.data.enhecom_events = {};
        for (d in utag.loader.GV(u.data)) {
          if (
            d.indexOf("-") > -1 &&
            (d.indexOf("metric") > -1 ||
              d.indexOf("dimension") > -1 ||
              d.indexOf("contentGroup") > -1)
          ) {
            if (d.indexOf("transaction-") === 0) {
              u.data.transaction_events[d] = u.data[d];
            } else if (d.indexOf("pageview-") === 0) {
              u.data.pageview_events[d] = u.data[d];
            } else if (d.indexOf("link-") === 0) {
              u.data.link_events[d] = u.data[d];
            } else if (
              u.data.enhancedecommerce === "true" &&
              d.indexOf("enh_") === 0
            ) {
              u.data.enhecom_events[d] = u.data[d];
            }
          } else if (
            d.indexOf("metric") === 0 ||
            d.indexOf("dimension") === 0 ||
            d.indexOf("contentGroup") === 0
          ) {
            u.all("set", d, u.data[d]);
          }
        }
        if (u.data.enhancedLinkAttribution === "true") {
          if (!u.required["enhancedLinkAttribution"]) {
            u.required["enhancedLinkAttribution"] = !0;
            u.all("require", "linkid", "linkid.js");
          }
        }
        u.data.order_id = u.data.order_id ? u.data.order_id : u.data.id;
        if (u.data.enhancedecommerce === "true") {
          u.all(
            "set",
            "&cu",
            u.data.currency ? u.data.currency : u.data.order_currency
          );
          if (u.data.order_id && u.data.enh_action === "refund") {
            if (
              u.data.order_id instanceof Array &&
              u.data.order_id.length > 0
            ) {
              u.data.order_id = u.data.order_id[0];
            }
            for (f = 0; f < u.data.product_id.length; f++) {
              g = {};
              g.id = u.data.product_id[f];
              g.quantity = u.data.product_quantity[f]
                ? u.data.product_quantity[f]
                : "1";
              u.setHitData(g, "enhecom_events", "product_refund", f);
              u.all("ec:addProduct", g);
            }
            g = {};
            g.id = u.data.order_id;
            u.setHitData(g, "enhecom_events", "refund");
            u.all("ec:setAction", "refund", g);
          } else if (u.data.order_id) {
            if (
              u.data.order_id instanceof Array &&
              u.data.order_id.length > 0
            ) {
              u.data.order_id = u.data.order_id[0];
            }
            u.addproduct("product_purchase", u.data.product_id.length, false);
            g = {};
            g.id = u.data.order_id;
            g.affiliation = u.data.affiliation
              ? u.data.affiliation
              : u.data.order_store;
            g.revenue = u.data.revenue ? u.data.revenue : u.data.order_total;
            g.shipping = u.data.shipping
              ? u.data.shipping
              : u.data.order_shipping;
            g.tax = u.data.tax ? u.data.tax : u.data.order_tax;
            g.coupon = u.data.coupon ? u.data.coupon : u.data.order_coupon_code;
            u.setHitData(g, "enhecom_events", "purchase");
            u.all("ec:setAction", "purchase", g);
          } else if (
            u.data.enh_action === "product_click" &&
            u.data.a === "link"
          ) {
            u.addproduct("product_click", 1, false);
            u.all("ec:setAction", "click", {
              list: u.data.product_action_list,
            });
            if (u.data.autosend_events === "true") {
              u.all("send", "event", "UX", "click", "Results", {
                hitCallback: u.data.enh_event_cb,
              });
            }
          } else if (u.data.enh_action === "detail") {
            u.addproduct("detail", 1, false);
            g = {};
            u.setHitData(g, "list", u.data.product_action_list);
            u.all("ec:setAction", "detail");
          } else if (u.data.enh_action === "add") {
            u.addproduct("product_add", u.data.product_id.length, false);
            u.all("ec:setAction", "add", { list: u.data.product_action_list });
            if (u.data.a === "link" && u.data.autosend_events === "true") {
              u.all("send", "event", "UX", "click", "add to cart", {
                hitCallback: u.data.enh_event_cb,
              });
            }
          } else if (u.data.enh_action === "remove") {
            u.addproduct("product_remove", u.data.product_id.length, false);
            u.all("ec:setAction", "remove");
            if (u.data.a === "link" && u.data.autosend_events === "true") {
              u.all("send", "event", "UX", "click", "remove from cart", {
                hitCallback: u.data.enh_event_cb,
              });
            }
          } else if (u.data.enh_action === "checkout") {
            u.addproduct("product_checkout", u.data.product_id.length, false);
            g = {};
            g.step = u.data.enh_checkout_step || "1";
            g.option = u.data.enh_checkout_option;
            u.all("ec:setAction", u.data.enh_action, g);
          }
          if (u.data.enh_action === "checkout_option" && u.data.a === "link") {
            g = {};
            g.step = u.data.enh_checkout_step || "1";
            g.option = u.data.enh_checkout_option;
            u.all("ec:setAction", u.data.enh_action, g);
            if (u.data.autosend_events === "true") {
              u.all("send", "event", "Checkout", "Option", {
                hitCallback: u.data.enh_event_cb,
              });
            }
          }
          if (u.data.enh_impression_id) {
            u.addproduct(
              "product_impression",
              u.data.enh_impression_id.length,
              true
            );
          }
          if (u.data.enh_promo_id) {
            u.addpromo(u.data.enh_action, u.data.a);
          }
          g = {};
          if (u.data.order_id) {
            u.setHitData(g, "transaction_events");
          }
          u.setHitData(g, "pageview_events");
          if (
            u.data.sessionControl === "start" ||
            u.data.sessionControl === "end"
          ) {
            g.sessionControl = u.data.sessionControl;
          }
          if (u.data.a === "view") {
            if (u.data.screenView === "true" || u.data.screenView === true) {
              g.screenName = u.data.screen_title || "";
              u.all("send", "screenview", g);
            } else {
              g.hitType = "pageview";
              u.all("send", g);
            }
          }
        } else if (u.data.a === "view") {
          g = {};
          u.setHitData(g, "pageview_events");
          if (
            u.data.sessionControl === "start" ||
            u.data.sessionControl === "end"
          ) {
            g.sessionControl = u.data.sessionControl;
          }
          if (u.data.screenView === "true" || u.data.screenView === true) {
            g.screenName = u.data.screen_title || "";
            u.all("send", "screenview", g);
          } else {
            g.hitType = "pageview";
            u.all("send", g);
          }
          if (u.data.order_id && !(u.data.order_id instanceof Array)) {
            if (!u.required["ecommerce"]) {
              u.required["ecommerce"] = !0;
              u.all("require", "ecommerce", "ecommerce.js");
            }
            g = {};
            u.setHitData(g, "transaction_events");
            g.id = u.data.order_id;
            g.affiliation = u.data.affiliation
              ? u.data.affiliation
              : u.data.order_store;
            g.revenue = u.data.revenue ? u.data.revenue : u.data.order_total;
            g.shipping = u.data.shipping
              ? u.data.shipping
              : u.data.order_shipping;
            g.tax = u.data.tax ? u.data.tax : u.data.order_tax;
            g.currency = u.data.currency
              ? u.data.currency
              : u.data.order_currency;
            u.all("ecommerce:addTransaction", g);
            for (f = 0; f < u.data.product_id.length; f++) {
              g = {};
              g.id = u.data.order_id;
              g.sku = u.data.product_id[f];
              g.name = u.data.product_name[f]
                ? u.data.product_name[f]
                : u.data.product_id[f];
              g.category = u.data.product_category[f]
                ? u.data.product_category[f]
                : "";
              g.price = u.data.product_unit_price[f]
                ? u.data.product_unit_price[f]
                : "1.00";
              g.quantity = u.data.product_quantity[f]
                ? u.data.product_quantity[f]
                : "1";
              u.setHitData(g, "transaction_events");
              u.all("ecommerce:addItem", g);
            }
            u.all("ecommerce:send");
          } else if (
            u.data.order_id instanceof Array &&
            u.data.order_id.length > 0
          ) {
            if (!u.required["ecommerce"]) {
              u.required["ecommerce"] = !0;
              u.all("require", "ecommerce", "ecommerce.js");
            }
            var lastindex = 0;
            for (f = 0; f < u.data.order_id.length; f++) {
              if (
                f === u.data.order_id.length - 1 ||
                u.data.order_id[f] !== u.data.order_id[f + 1]
              ) {
                g = {};
                u.setHitData(g, "transaction_events");
                g.id = u.data.order_id[f];
                g.affiliation =
                  u.data.affiliation &&
                  typeof u.data.affiliation[f] !== "undefined"
                    ? u.data.affiliation[f]
                    : u.data.order_store;
                g.revenue =
                  u.data.revenue && typeof u.data.revenue[f] !== "undefined"
                    ? u.data.revenue[f]
                    : u.data.order_total;
                g.shipping =
                  u.data.shipping && typeof u.data.shipping[f] !== "undefined"
                    ? u.data.shipping[f]
                    : u.data.order_shipping;
                g.tax =
                  u.data.tax && typeof u.data.tax[f] !== "undefined"
                    ? u.data.tax[f]
                    : u.data.order_tax;
                g.currency = u.data.currency
                  ? u.data.currency
                  : u.data.order_currency;
                u.all("ecommerce:addTransaction", g);
                for (e = lastindex; e < f + 1; e++) {
                  g = {};
                  g.id = u.data.order_id[f];
                  g.sku = u.data.product_id[e];
                  g.name = u.data.product_name[e]
                    ? u.data.product_name[e]
                    : u.data.product_id[e];
                  g.category = u.data.product_category[e]
                    ? u.data.product_category[e]
                    : "";
                  g.price = u.data.product_unit_price[e]
                    ? u.data.product_unit_price[e]
                    : "1.00";
                  g.quantity = u.data.product_quantity[e]
                    ? u.data.product_quantity[e]
                    : "1";
                  u.setHitData(g, "transaction_events");
                  u.all("ecommerce:addItem", g);
                }
                lastindex = f + 1;
              }
            }
            u.all("ecommerce:send");
          }
        }
        if (u.data.eventCategory && u.data.eventAction) {
          g = {};
          u.setHitData(g, "link_events");
          g.hitType = "event";
          g.eventCategory = u.data.eventCategory;
          if (u.data.nonInteraction) {
            g.nonInteraction = 1;
          }
          g.eventAction = u.data.eventAction;
          if (u.data.eventLabel) {
            g.eventLabel = u.data.eventLabel;
          }
          if (
            typeof u.data.eventValue !== "undefined" &&
            u.data.eventValue !== ""
          ) {
            g.eventValue = u.data.eventValue;
          }
          if (u.data.standard_event_cb) {
            g.hitCallback = u.data.standard_event_cb;
          }
          if (u.data.screenView === "true" || u.data.screenView === true) {
            g.screenName = u.data.screen_title || "";
          }
          if (
            u.data.sessionControl === "start" ||
            u.data.sessionControl === "end"
          ) {
            g.sessionControl = u.data.sessionControl;
          }
          u.all("send", g);
          u.data.eventCategory =
            u.data.eventAction =
            u.data.eventLabel =
            u.data.eventValue =
              "";
        }
        for (e = 0; e < u.data.ga_events.length; e++) {
          g = {};
          u.setHitData(g, "link_events");
          g.hitType = "event";
          g.eventCategory = u.data.ga_events[e].eventCategory;
          g.eventAction = u.data.ga_events[e].eventAction;
          g.eventLabel = u.data.ga_events[e].eventLabel;
          g.eventValue = u.data.ga_events[e].eventValue;
          if (u.data.ga_events[e].nonInteraction) {
            g.nonInteraction = 1;
          }
          if (
            u.data.sessionControl === "start" ||
            u.data.sessionControl === "end"
          ) {
            g.sessionControl = u.data.sessionControl;
          }
          u.all("send", g);
        }
        if (
          u.data.socialNetwork &&
          u.data.socialAction &&
          u.data.socialTarget
        ) {
          g = {};
          g.hitType = "social";
          g.socialNetwork = u.data.socialNetwork;
          g.socialAction = u.data.socialAction;
          g.socialTarget = u.data.socialTarget;
          u.all("send", g);
          u.data.socialNetwork = u.data.socialAction = u.data.socialTarget = "";
        }
        if (u.data.timingCategory && u.data.timingVar && u.data.timingValue) {
          g = {};
          g.hitType = "timing";
          g.timingCategory = u.data.timingCategory;
          g.timingVar = u.data.timingVar;
          g.timingValue = u.data.timingValue;
          g.timingLabel = u.data.timingLabel || "";
          u.all("send", g);
        }
        if (u.data["ga-disable"]) {
          window["ga-disable-" + u.data["ga-disable"]] = true;
        }
        (function () {
          var id = "tealium-tag-7110";
          if (document.getElementById(id)) {
            return;
          }
          u.loader({
            type: "script",
            src: "https://www.google-analytics.com/analytics.js",
            loc: "script",
            id: id,
          });
          u.o.l = 1 * new Date();
        })();
      }
    };
    utag.o[loader].loader.LOAD(id);
  })("363", "mbs.main");
} catch (error) {
  utag.DB(error);
}

//tealium universal tag - utag.366 ut4.0.202207210624, Copyright 2022 Tealium.com Inc. All Rights Reserved.
var _linkedin = _linkedin || {};
var _linkedin_data_partner_id = _linkedin_data_partner_id || "";
try {
  (function (id, loader) {
    var u = { id: id };
    utag.o[loader].sender[id] = u;
    if (utag.ut === undefined) {
      utag.ut = {};
    }
    var match = /ut\d\.(\d*)\..*/.exec(utag.cfg.v);
    if (utag.ut.loader === undefined || !match || parseInt(match[1]) < 41) {
      u.loader = function (o, a, b, c, l, m) {
        utag.DB(o);
        a = document;
        if (o.type == "iframe") {
          m = a.getElementById(o.id);
          if (m && m.tagName == "IFRAME") {
            b = m;
          } else {
            b = a.createElement("iframe");
          }
          o.attrs = o.attrs || {};
          utag.ut.merge(
            o.attrs,
            { height: "1", width: "1", style: "display:none" },
            0
          );
        } else if (o.type == "img") {
          utag.DB("Attach img: " + o.src);
          b = new Image();
        } else {
          b = a.createElement("script");
          b.language = "javascript";
          b.type = "text/javascript";
          b.async = 1;
          b.charset = "utf-8";
        }
        if (o.id) {
          b.id = o.id;
        }
        for (l in utag.loader.GV(o.attrs)) {
          b.setAttribute(l, o.attrs[l]);
        }
        b.setAttribute("src", o.src);
        if (typeof o.cb == "function") {
          if (b.addEventListener) {
            b.addEventListener(
              "load",
              function () {
                o.cb();
              },
              false
            );
          } else {
            b.onreadystatechange = function () {
              if (
                this.readyState == "complete" ||
                this.readyState == "loaded"
              ) {
                this.onreadystatechange = null;
                o.cb();
              }
            };
          }
        }
        if (o.type != "img" && !m) {
          l = o.loc || "head";
          c = a.getElementsByTagName(l)[0];
          if (c) {
            utag.DB("Attach to " + l + ": " + o.src);
            if (l == "script") {
              c.parentNode.insertBefore(b, c);
            } else {
              c.appendChild(b);
            }
          }
        }
      };
    } else {
      u.loader = utag.ut.loader;
    }
    if (utag.ut.typeOf === undefined) {
      u.typeOf = function (e) {
        return {}.toString
          .call(e)
          .match(/\s([a-zA-Z]+)/)[1]
          .toLowerCase();
      };
    } else {
      u.typeOf = utag.ut.typeOf;
    }
    u.ev = { view: 1 };
    u.map_func = function (arr, obj, item) {
      var i = arr.shift();
      obj[i] = obj[i] || {};
      if (arr.length > 0) {
        u.map_func(arr, obj[i], item);
      } else {
        obj[i] = item;
      }
    };
    u.clearEmptyKeys = function (object) {
      for (var key in object) {
        if (object[key] === "" || object[key] === undefined) {
          delete object[key];
        }
      }
      return object;
    };
    u.map = {};
    u.extend = [];
    u.send = function (a, b) {
      if (u.ev[a] || u.ev.all !== undefined) {
        utag.DB("send:366");
        utag.DB(b);
        var c, d, e, f;
        u.data = {
          qsp_delim: "&",
          kvp_delim: "=",
          base_url: "https://snap.licdn.com/li.lms-analytics/insight.min.js",
          partner_id: "358411",
          linkedin: {
            custom_channel_id: "",
            custom_group_id: "",
            custom_user_id: "",
            zoom_info_id: "",
            title: "",
            domain: "",
            company: "",
            gender: "",
            location: "",
            education: "",
            email_sha256: "",
            email_sha512: "",
            raw_data: "",
            raw_data_overwrite: "",
            encrypted_data: "",
            partner_data: "",
            sic_codes: "",
            employee_range: "",
            default_keywords: "",
            async_target: "",
            use_iframe: "",
            use_callback: "",
            test_url: "",
          },
        };
        utag.DB("send:366:EXTENSIONS");
        utag.DB(b);
        c = [];
        for (d in utag.loader.GV(u.map)) {
          if (b[d] !== undefined && b[d] !== "") {
            e = u.map[d].split(",");
            for (f = 0; f < e.length; f++) {
              u.map_func(e[f].split("."), u.data, b[d]);
            }
          }
        }
        utag.DB("send:366:MAPPINGS");
        utag.DB(u.data);
        u.data.order_id = u.data.order_id || b._corder || "";
        u.data.order_total = u.data.order_total || b._ctotal || "";
        u.data.order_currency = u.data.order_currency || b._ccurrency || "";
        u.data.customer_id = u.data.customer_id || b._ccustid || "";
        if (!u.data.partner_id) {
          utag.DB(u.id + ": Tag not fired: Required attribute not populated");
          return;
        }
        _linkedin_data_partner_id = u.data.partner_id;
        u.data.linkedin.partner_id = u.data.partner_id;
        u.data.linkedin.order_id = u.data.order_id;
        u.data.linkedin.conv_value = u.data.order_total;
        u.data.linkedin.conv_currency = u.data.order_currency;
        _linkedin = u.clearEmptyKeys(u.data.linkedin);
        u.loader({
          type: "script",
          src: u.data.base_url,
          cb: null,
          loc: "script",
          id: "utag_366",
          attrs: {},
        });
        utag.DB("send:366:COMPLETE");
      }
    };
    utag.o[loader].loader.LOAD(id);
  })("366", "mbs.main");
} catch (error) {
  utag.DB(error);
}

//tealium universal tag - utag.376 ut4.0.202207210624, Copyright 2022 Tealium.com Inc. All Rights Reserved.
try {
  (function (id, loader) {
    var u = { id: id };
    utag.o[loader].sender[id] = u;
    if (utag.ut === undefined) {
      utag.ut = {};
    }
    var match = /ut\d\.(\d*)\..*/.exec(utag.cfg.v);
    if (utag.ut.loader === undefined || !match || parseInt(match[1]) < 41) {
      u.loader = function (o, a, b, c, l, m) {
        utag.DB(o);
        a = document;
        if (o.type == "iframe") {
          m = a.getElementById(o.id);
          if (m && m.tagName == "IFRAME") {
            b = m;
          } else {
            b = a.createElement("iframe");
          }
          o.attrs = o.attrs || {};
          utag.ut.merge(
            o.attrs,
            { height: "1", width: "1", style: "display:none" },
            0
          );
        } else if (o.type == "img") {
          utag.DB("Attach img: " + o.src);
          b = new Image();
        } else {
          b = a.createElement("script");
          b.language = "javascript";
          b.type = "text/javascript";
          b.async = 1;
          b.charset = "utf-8";
        }
        if (o.id) {
          b.id = o.id;
        }
        for (l in utag.loader.GV(o.attrs)) {
          b.setAttribute(l, o.attrs[l]);
        }
        b.setAttribute("src", o.src);
        if (typeof o.cb == "function") {
          if (b.addEventListener) {
            b.addEventListener(
              "load",
              function () {
                o.cb();
              },
              false
            );
          } else {
            b.onreadystatechange = function () {
              if (
                this.readyState == "complete" ||
                this.readyState == "loaded"
              ) {
                this.onreadystatechange = null;
                o.cb();
              }
            };
          }
        }
        if (o.type != "img" && !m) {
          l = o.loc || "head";
          c = a.getElementsByTagName(l)[0];
          if (c) {
            utag.DB("Attach to " + l + ": " + o.src);
            if (l == "script") {
              c.parentNode.insertBefore(b, c);
            } else {
              c.appendChild(b);
            }
          }
        }
      };
    } else {
      u.loader = utag.ut.loader;
    }
    if (utag.ut.typeOf === undefined) {
      u.typeOf = function (e) {
        return {}.toString
          .call(e)
          .match(/\s([a-zA-Z]+)/)[1]
          .toLowerCase();
      };
    } else {
      u.typeOf = utag.ut.typeOf;
    }
    u.ev = { view: 1, link: 1 };
    u.hasOwn = function (o, a) {
      return o != null && Object.prototype.hasOwnProperty.call(o, a);
    };
    u.isEmptyObject = function (o, a) {
      for (a in o) {
        if (u.hasOwn(o, a)) {
          return false;
        }
      }
      return true;
    };
    u.toBoolean = function (val) {
      val = val || "";
      return (
        val === true ||
        val.toLowerCase() === "true" ||
        val.toLowerCase() === "on"
      );
    };
    u.hasgtagjs = function () {
      window.gtagRename = window.gtagRename || "" || "gtag";
      if (utag.ut.gtagScriptRequested) {
        return true;
      }
      var i,
        s = document.getElementsByTagName("script");
      for (i = 0; i < s.length; i++) {
        if (
          s[i].src &&
          s[i].src.indexOf("gtag/js") >= 0 &&
          s[i].id &&
          s[i].id.indexOf("utag") > -1
        ) {
          return true;
        }
      }
      var data_layer_name = "" || "dataLayer";
      window[data_layer_name] = window[data_layer_name] || [];
      if (typeof window[window.gtagRename] !== "function") {
        window[window.gtagRename] = function () {
          window[data_layer_name].push(arguments);
        };
        var cross_track_domains = "";
        if (cross_track_domains !== "") {
          window[window.gtagRename]("set", "linker", {
            domains: cross_track_domains.split(","),
            accept_incoming: true,
          });
        }
        window[window.gtagRename]("js", new Date());
      }
      return false;
    };
    u.scriptrequested = u.hasgtagjs();
    u.o = window[window.gtagRename];
    u.map_func = function (arr, obj, item) {
      var i = arr.shift();
      obj[i] = obj[i] || {};
      if (arr.length > 0) {
        u.map_func(arr, obj[i], item);
      } else {
        obj[i] = item;
      }
    };
    u.map = {
      "cp.utag_main_v_id": "custom.u1",
      language_code: "custom.u2",
      domain_pathname: "custom.u3",
      page_type: "custom.u4",
      page_name: "custom.u5",
      page_category: "custom.u6",
      page_sub_category: "custom.u7",
      "va.current_visit.properties.46": "custom.u8",
      "va.current_visit.properties.47": "custom.u9",
      "va.current_visit.properties.44": "custom.u10",
      "va.current_visit.properties.48": "custom.u11",
      "va.current_visit.properties.45": "custom.u12",
      "va.current_visit.properties.5": "custom.u13",
      login_status: "custom.u14",
      loyalty_tier: "custom.u15",
      "_sm_376_16:dc_fire": "conversion",
    };
    u.extend = [
      function (a, b) {
        try {
          b["_sm_376_16"] = "dc_fire";
        } catch (e) {
          utag.DB(e);
        }
      },
    ];
    u.send = function (a, b) {
      if (u.ev[a] || u.ev.all !== undefined) {
        utag.DB("send:376");
        utag.DB(b);
        var c, d, e, f, h, i, j, k, _event, p, key;
        u.data = {
          qsp_delim: "&",
          kvp_delim: "=",
          base_url: "https://www.googletagmanager.com/gtag/js",
          advertiser_id: "DC-8293333",
          activity_group: "all",
          activity: "mbs_70",
          counting_method: "standard",
          fire_purchase: "false",
          custom_scripts: "true",
          data_layer_name: "",
          session_id: "",
          product_id: [],
          product_quantity: [],
          product_unit_price: [],
          dc_custom_params: {},
          event_name: "",
          event: [],
          custom: {},
        };
        for (c = 0; c < u.extend.length; c++) {
          try {
            d = u.extend[c](a, b);
            if (d == false) return;
          } catch (e) {}
        }
        utag.DB("send:376:EXTENSIONS");
        utag.DB(b);
        for (d in utag.loader.GV(u.map)) {
          if (b[d] !== undefined && b[d] !== "") {
            e = u.map[d].split(",");
            for (f = 0; f < e.length; f++) {
              u.map_func(e[f].split("."), u.data, b[d]);
            }
          } else {
            h = d.split(":");
            if (h.length === 2 && b[h[0]] === h[1]) {
              if (u.map[d]) {
                u.data.event = u.data.event.concat(u.map[d].split(","));
              }
            }
          }
        }
        utag.DB("send:376:MAPPINGS");
        utag.DB(u.data);
        u.data.order_id = u.data.order_id || b._corder || "";
        u.data.order_total = u.data.order_total || b._ctotal || "";
        if (u.data.product_quantity.length === 0 && b._cquan !== undefined) {
          u.data.product_quantity = b._cquan.slice(0);
        }
        if (typeof u.data.advertiser_id === "string") {
          u.data.advertiser_id = u.data.advertiser_id.split(",");
        }
        if (typeof u.data.activity_group === "string") {
          u.data.activity_group = u.data.activity_group.split(",");
        }
        if (typeof u.data.activity === "string") {
          u.data.activity = u.data.activity.split(",");
        }
        if (typeof u.data.counting_method === "string") {
          u.data.counting_method = u.data.counting_method.split(",");
        }
        if (typeof u.data.session_id === "string") {
          u.data.session_id = u.data.session_id.split(",");
        }
        if (u.data.product_id.length === 0 && b._cprod !== undefined) {
          u.data.product_id = b._cprod.slice(0);
        }
        if (u.data.product_quantity.length === 0 && b._cquan !== undefined) {
          u.data.product_quantity = b._cquan.slice(0);
        }
        if (u.data.product_unit_price.length === 0 && b._cprice !== undefined) {
          u.data.product_unit_price = b._cprice.slice(0);
        }
        if (!u.data.advertiser_id) {
          utag.DB(u.id + ": Tag not fired: Required attribute not populated");
          return;
        }
        for (i = 0; i < u.data.advertiser_id.length; i++) {
          if (!/^[a-zA-Z]{2}-/.test(u.data.advertiser_id[i])) {
            u.data.advertiser_id[i] = "DC-" + u.data.advertiser_id[i];
          }
        }
        u.data.base_url += "?id=" + u.data.advertiser_id[0];
        if (u.data.data_layer_name) {
          u.data.base_url = u.data.base_url + "&l=" + u.data.data_layer_name;
        }
        for (i = 0; i < u.data.advertiser_id.length; i++) {
          u.o("config", u.data.advertiser_id[i]);
        }
        if (u.data.order_id) {
          for (i = 0; i < u.data.event.length; i++) {
            if (u.data.event[i] === "purchase") {
              p = true;
            }
          }
          if (!p && u.toBoolean(u.data.fire_purchase)) {
            u.data.event.push("purchase");
            if (u.data.counting_method[0] === "") {
              u.data.counting_method[0] = "transactions";
            }
          }
        }
        var total_qty = 0;
        if (typeof u.data.product_quantity === "number") {
          total_qty = u.data.product_quantity;
        } else if (u.data.product_quantity.length === 1) {
          total_qty = u.data.product_quantity[0];
        } else if (u.data.product_quantity.length > 1) {
          for (i = 0; i < u.data.product_quantity.length; i++) {
            total_qty += parseInt(u.data.product_quantity[i], 10);
          }
        } else {
          total_qty = 1;
        }
        for (i = 0; i < u.data.event.length; i++) {
          _event = u.data.event[i];
          for (j = 0; j < u.data.advertiser_id.length; j++) {
            var eventIdData = {};
            if (u.data.custom_scripts === "true" || u.data.custom_scripts) {
              eventIdData.allow_custom_scripts = true;
            } else if (
              u.data.custom_scripts === "false" ||
              !u.data.custom_scripts
            ) {
              eventIdData.allow_custom_scripts = false;
            }
            if (u.data.session_id.length === 1 && u.data.session_id[0] !== "") {
              eventIdData.session_id = u.data.session_id[0];
            } else if (u.data.session_id[j] !== "") {
              eventIdData.session_id = u.data.session_id[j];
            }
            if (u.data.order_total) {
              eventIdData.value = u.data.order_total;
              eventIdData.transaction_id = u.data.order_id;
            }
            if (u.data.product_quantity) {
              eventIdData.quantity = total_qty;
            }
            eventIdData.items = [];
            for (k = 0; k < u.data.product_id.length; k++) {
              if (
                typeof u.data.product_unit_price[k] === "undefined" ||
                typeof u.data.product_quantity[k] === "undefined"
              ) {
                utag.DB(
                  "No matching unit price or quantity for product ID " +
                    u.data.product_id[k]
                );
              } else {
                eventIdData.items.push({
                  id: u.data.product_id[k],
                  price: u.data.product_unit_price[k],
                  quantity: u.data.product_quantity[k],
                });
              }
            }
            for (key in u.data.custom) {
              eventIdData[key] = u.data.custom[key];
            }
            if (!u.isEmptyObject(u.data.dc_custom_params)) {
              eventIdData.dc_custom_params = {};
              for (key in u.data.dc_custom_params) {
                eventIdData.dc_custom_params[key] =
                  u.data.dc_custom_params[key];
              }
            }
            if (
              u.data.counting_method[j] &&
              u.data.counting_method[j] !==
                u.data.counting_method[j].toLowerCase()
            ) {
              u.data.counting_method[j] =
                u.data.counting_method[j].toLowerCase();
              utag.DB(
                "Counting Method not supplied in proper case - converted to lower case"
              );
            }
            eventIdData.send_to =
              u.data.advertiser_id[j] +
              "/" +
              u.data.activity_group[j] +
              "/" +
              u.data.activity[j] +
              "+" +
              u.data.counting_method[j];
            if (_event === "purchase") {
              u.o("event", "purchase", eventIdData);
            }
            if (_event === "conversion") {
              u.o("event", "conversion", eventIdData);
            }
          }
        }
        if (!u.hasgtagjs()) {
          u.scriptrequested = true;
          utag.ut.gtagScriptRequested = true;
          u.loader({
            type: "script",
            src: u.data.base_url,
            cb: null,
            loc: "script",
            id: "utag_376",
            attrs: {},
          });
        }
        utag.DB("send:376:COMPLETE");
      }
    };
    utag.o[loader].loader.LOAD(id);
  })("376", "mbs.main");
} catch (error) {
  utag.DB(error);
}

//tealium universal tag - utag.382 ut4.0.202207210624, Copyright 2022 Tealium.com Inc. All Rights Reserved.
!(function (g, d, t, e, v, n, s) {
  if (g.gdt) return;
  v = g.gdt = function () {
    v.tk ? v.tk.apply(v, arguments) : v.queue.push(arguments);
  };
  v.sv = "1.0";
  v.bt = 1;
  v.queue = [];
  n = d.createElement(t);
  n.async = !0;
  n.src = e;
  s = d.getElementsByTagName(t)[0];
  s.parentNode.insertBefore(n, s);
})(
  window,
  document,
  "script",
  "//qzonestyle.gtimg.cn/qzone/biz/gdt/dmp/user-action/gdtevent.min.js"
);
try {
  (function (id, loader) {
    var u = {};
    utag.o[loader].sender[id] = u;
    if (utag === undefined) {
      utag = {};
    }
    if (utag.ut === undefined) {
      utag.ut = {};
    }
    if (utag.ut.loader === undefined) {
      u.loader = function (o) {
        var a, b, c, l;
        a = document;
        if (o.type === "iframe") {
          b = a.createElement("iframe");
          b.setAttribute("height", "1");
          b.setAttribute("width", "1");
          b.setAttribute("style", "display:none");
          b.setAttribute("src", o.src);
        } else if (o.type === "img") {
          utag.DB("Attach img: " + o.src);
          b = new Image();
          b.src = o.src;
          return;
        } else {
          b = a.createElement("script");
          b.language = "javascript";
          b.type = "text/javascript";
          b.async = 1;
          b.charset = "utf-8";
          b.src = o.src;
        }
        if (o.id) {
          b.id = o.id;
        }
        if (typeof o.cb === "function") {
          if (b.addEventListener) {
            b.addEventListener(
              "load",
              function () {
                o.cb();
              },
              false
            );
          } else {
            b.onreadystatechange = function () {
              if (
                this.readyState === "complete" ||
                this.readyState === "loaded"
              ) {
                this.onreadystatechange = null;
                o.cb();
              }
            };
          }
        }
        l = o.loc || "head";
        c = a.getElementsByTagName(l)[0];
        if (c) {
          utag.DB("Attach to " + l + ": " + o.src);
          if (l === "script") {
            c.parentNode.insertBefore(b, c);
          } else {
            c.appendChild(b);
          }
        }
      };
    } else {
      u.loader = utag.ut.loader;
    }
    u.ev = { view: 1 };
    u.initialized = false;
    u.map = {};
    u.extend = [];
    u.send = function (a, b) {
      if (u.ev[a] || u.ev.all !== undefined) {
        var c, d, e, f, i;
        u.data = {};
        for (d in utag.loader.GV(u.map)) {
          if (b[d] !== undefined && b[d] !== "") {
            e = u.map[d].split(",");
            for (f = 0; f < e.length; f++) {
              u.data[e[f]] = b[d];
            }
          }
        }
        gdt("init", "1110011521");
        gdt("track", "PAGE_VIEW");
      }
    };
    utag.o[loader].loader.LOAD(id);
  })("382", "mbs.main");
} catch (error) {
  utag.DB(error);
}

//tealium universal tag - utag.392 ut4.0.202207210624, Copyright 2022 Tealium.com Inc. All Rights Reserved.
window.GoogleAnalyticsObject = "" || "ga";
window[window.GoogleAnalyticsObject] =
  window[window.GoogleAnalyticsObject] ||
  function () {
    (window[window.GoogleAnalyticsObject].q =
      window[window.GoogleAnalyticsObject].q || []).push(arguments);
  };
try {
  (function (id, loader) {
    var u = {};
    utag.o[loader].sender[id] = u;
    if (utag.ut === undefined) {
      utag.ut = {};
    }
    if (utag.ut.loader === undefined) {
      u.loader = function (o) {
        var a, b, c, l;
        a = document;
        if (o.type === "iframe") {
          b = a.createElement("iframe");
          b.setAttribute("height", "1");
          b.setAttribute("width", "1");
          b.setAttribute("style", "display:none");
          b.setAttribute("src", o.src);
        } else if (o.type === "img") {
          utag.DB("Attach img: " + o.src);
          b = new Image();
          b.src = o.src;
          return;
        } else {
          b = a.createElement("script");
          b.language = "javascript";
          b.type = "text/javascript";
          b.async = 1;
          b.src = o.src;
        }
        if (o.id) {
          b.id = o.id;
        }
        if (typeof o.cb === "function") {
          b.hFlag = 0;
          b.onreadystatechange = function () {
            if (
              (this.readyState === "complete" ||
                this.readyState === "loaded") &&
              !b.hFlag
            ) {
              b.hFlag = 1;
              o.cb();
            }
          };
          b.onload = function () {
            if (!b.hFlag) {
              b.hFlag = 1;
              o.cb();
            }
          };
        }
        l = o.loc || "head";
        c = a.getElementsByTagName(l)[0];
        if (c) {
          utag.DB("Attach to " + l + ": " + o.src);
          if (l === "script") {
            c.parentNode.insertBefore(b, c);
          } else {
            c.appendChild(b);
          }
        }
      };
    } else {
      u.loader = utag.ut.loader;
    }
    if (utag.ut.typeOf === undefined) {
      u.typeOf = function (e) {
        return {}.toString
          .call(e)
          .match(/\s([a-zA-Z]+)/)[1]
          .toLowerCase();
      };
    } else {
      u.typeOf = utag.ut.typeOf;
    }
    u.ev = { view: 1, link: 1 };
    u.o = window[window.GoogleAnalyticsObject];
    u.required = {};
    u.created = false;
    u.all = function (e, o, v, a, b, c) {
      for (var i = 0; i < u.data.account.length; i++) {
        var t = u.data.name[i] ? u.data.name[i] + "." : "";
        if (o === "event") {
          u.o(t + e, o, v, a, b, c);
        } else if (v !== undefined) {
          u.o(t + e, o, v);
        } else {
          u.o(t + e, o);
        }
      }
    };
    u.setHitData = function (g, a, b, f) {
      var obj = u.data[a];
      for (var d in utag.loader.GV(obj)) {
        if (
          b &&
          d.indexOf("enh_" + b + "-") !== 0 &&
          d.indexOf("enh_all-") !== 0
        ) {
          continue;
        }
        var idx = d.split("-")[1],
          val = obj[d];
        if (u.typeOf(val) !== "array") {
          g[idx] = val;
        } else {
          g[idx] = val[f];
        }
      }
    };
    u.addEvent = function (v) {
      if (
        typeof v.eventCategory == "undefined" ||
        typeof v.eventAction == "undefined"
      ) {
        utag.DB("GA event Category or Action is not set");
        return;
      }
      if (isNaN(parseInt(v.eventValue))) {
        utag.DB("GA event Value is not a number");
        v.eventValue = null;
      } else {
        v.eventValue = parseInt(v.eventValue) || null;
      }
      u.data.ga_events.push(v);
    };
    u.addproduct = function (event_type, len, imp) {
      var g = {},
        i,
        j,
        k = [];
      if (imp === true) {
        k = u.data.enh_impression_id.length
          ? u.data.enh_impression_id
          : u.data.enh_impression_name;
        for (i = 0; i < k.length; i++) {
          g = {};
          g.id = u.data.enh_impression_id[i] ? u.data.enh_impression_id[i] : "";
          g.name = u.data.enh_impression_name[i]
            ? u.data.enh_impression_name[i]
            : "";
          g.brand = u.data.enh_impression_brand[i]
            ? u.data.enh_impression_brand[i]
            : "";
          g.variant = u.data.enh_impression_variant[i]
            ? u.data.enh_impression_variant[i]
            : "";
          g.category = u.data.enh_impression_category[i]
            ? u.data.enh_impression_category[i]
            : "";
          g.list = u.data.enh_impression_list[i]
            ? u.data.enh_impression_list[i]
            : "";
          g.price = u.data.enh_impression_price[i]
            ? u.data.enh_impression_price[i]
            : "";
          g.position = u.data.enh_impression_position[i]
            ? u.data.enh_impression_position[i]
            : "";
          u.setHitData(g, "enhecom_events", event_type, i);
          u.all("ec:addImpression", g);
        }
      } else {
        for (i = 0; i < len; i++) {
          g = {};
          if (u.data.autofill_params === "true") {
            for (j = 0; j < u.data.product_id.length; j++) {
              u.data.product_name[j] =
                u.data.product_name[j] || u.data.product_id[j];
              u.data.product_unit_price[j] =
                u.data.product_unit_price[j] || "1.00";
              u.data.product_quantity[j] = u.data.product_quantity[j] || "1";
            }
          }
          g.id = u.data.product_id[i];
          g.name = u.data.product_name[i] ? u.data.product_name[i] : "";
          g.brand = u.data.product_brand[i] ? u.data.product_brand[i] : "";
          g.variant = u.data.product_variant[i]
            ? u.data.product_variant[i]
            : "";
          g.category = u.data.product_category[i]
            ? u.data.product_category[i]
            : "";
          g.price = u.data.product_unit_price[i]
            ? u.data.product_unit_price[i]
            : "";
          g.quantity = u.data.product_quantity[i]
            ? u.data.product_quantity[i]
            : "";
          g.coupon = u.data.product_discount[i]
            ? u.data.product_discount[i]
            : "";
          g.position = u.data.product_position[i]
            ? u.data.product_position[i]
            : "";
          u.setHitData(g, "enhecom_events", event_type, i);
          u.all("ec:addProduct", g);
        }
      }
    };
    u.addpromo = function (action, event) {
      var f, g;
      for (f = 0; f < u.data.enh_promo_id.length; f++) {
        g = {};
        g.id = u.data.enh_promo_id[f];
        g.name = u.data.enh_promo_name[f]
          ? u.data.enh_promo_name[f]
          : u.data.enh_promo_id[f];
        g.creative = u.data.enh_promo_creative[f]
          ? u.data.enh_promo_creative[f]
          : "";
        g.position = u.data.enh_promo_position[f]
          ? u.data.enh_promo_position[f]
          : "";
        u.all("ec:addPromo", g);
      }
      if (action === "promo_click" && event === "link") {
        u.all("ec:setAction", u.data.enh_action);
        if (u.data.autosend_events === "true") {
          u.all(
            "send",
            "event",
            "Internal Promotions",
            "click",
            g.name ? g.name : g.id,
            { hitCallback: u.data.enh_event_cb }
          );
        }
      }
    };
    u.createTracker = function () {
      var i, tn, start;
      if (u.typeOf(u.data.account) === "string") {
        u.data.account = u.data.account.replace(/\s/g, "").split(",");
      }
      if (u.typeOf(u.data.name) === "string" && u.data.name !== "") {
        u.data.name = u.data.name.replace(/\s/g, "").split(",");
      }
      if (!u.data.name || u.data.name.length !== u.data.account.length) {
        start =
          u.data.name.length !== u.data.account.length ? u.data.name.length : 0;
        tn = utag.tagsettings.gua.trackernames;
        u.data.name = u.data.name || [];
        for (i = start; i < u.data.account.length; i++) {
          u.data.name.push("tealium_" + (i + tn));
        }
        utag.tagsettings.gua.trackernames = tn + i;
      }
    };
    u.initTracker = function () {
      var c, f;
      if (!u.created) {
        u.created = true;
        for (f = 0; f < u.data.account.length; f++) {
          c = {};
          if (u.data.siteSpeedSampleRate) {
            c.siteSpeedSampleRate = parseInt(u.data.siteSpeedSampleRate);
          }
          if (u.data.sampleRate) {
            c.sampleRate = parseFloat(u.data.sampleRate);
          }
          c.cookieDomain = u.data.cookieDomain;
          if (u.data.cookieExpires || u.data.cookieExpires === "0") {
            c.cookieExpires = parseInt(u.data.cookieExpires);
          }
          if (u.data.legacyCookieDomain) {
            c.legacyCookieDomain = u.data.legacyCookieDomain;
          }
          if (
            u.data.legacyHistoryImport === "false" ||
            u.data.legacyHistoryImport === false
          ) {
            c.legacyHistoryImport = u.data.legacyHistoryImport;
          }
          c.allowLinker = u.data.allowLinker;
          if (typeof u.data.name[f] !== "undefined" && u.data.name[f] !== "") {
            c.name = u.data.name[f];
          }
          if (u.data.clientId) {
            c.clientId = u.data.clientId;
          }
          if (
            u.data.useAmpClientId === "true" ||
            u.data.useAmpClientId === true
          ) {
            c.useAmpClientId = u.data.useAmpClientId;
          }
          u.o("create", u.data.account[f], c);
        }
        if (u.data.global_event_cb) {
          u.all("set", "hitCallback", u.data.global_event_cb);
        }
        if (u.data.optimizely === "true") {
          window.optimizely = window.optimizely || [];
          window.optimizely.push(["activateUniversalAnalytics"]);
        }
      }
    };
    u.setGlobalProperties = function (data, reset, custom_property) {
      var map = {
          uid: { name: "&uid", type: "exists", reset: true },
          page: { name: "page", type: "exists", reset: true },
          title: { name: "title", type: "exists", reset: true },
          location: { name: "location", type: "exists", reset: false },
          campaignId: { name: "campaignId", type: "exists", reset: true },
          campaignName: { name: "campaignName", type: "exists", reset: true },
          campaignSource: {
            name: "campaignSource",
            type: "exists",
            reset: true,
          },
          campaignMedium: {
            name: "campaignMedium",
            type: "exists",
            reset: true,
          },
          campaignContent: {
            name: "campaignContent",
            type: "exists",
            reset: true,
          },
          campaignKeyword: {
            name: "campaignKeyword",
            type: "exists",
            reset: true,
          },
          dataSource: { name: "dataSource", type: "exists", reset: true },
        },
        prop;
      if (data.clear_global_vars === "true") {
        for (key in u.map) {
          if (
            u.map[key].match(/dimension|metric/) &&
            typeof data[key] === "undefined"
          ) {
            var item = u.map[key].split(",")[0];
            u.all("set", item, null);
          }
        }
      }
      if (custom_property && reset) {
        u.all("set", custom_property, "");
      }
      for (prop in utag.loader.GV(map)) {
        if (reset && map[prop].reset) {
          u.all("set", map[prop].name, "");
        } else {
          if (map[prop].type === "bool") {
            if (data[prop] == true || data[prop] === "true") {
              u.all("set", map[prop].name, true);
            }
          } else if (map[prop].type === "exists") {
            if (data[prop]) {
              u.all("set", map[prop].name, data[prop]);
            }
          }
        }
      }
    };
    window.utag.tagsettings = window.utag.tagsettings || {};
    window.utag.tagsettings.gua = window.utag.tagsettings.gua || {};
    window.utag.tagsettings.gua.trackernames =
      window.utag.tagsettings.gua.trackernames || 0;
    u.map = {};
    u.extend = [];
    u.send = function (a, b) {
      if (u.ev[a] || u.ev.all !== undefined) {
        u.o = window[window.GoogleAnalyticsObject];
        b.ga_events = b.ga_events || [];
        var c, d, e, f, g, h, tn, prop;
        if (u.data && u.data.name) {
          tn = u.data.name;
        }
        u.data = {
          qsp_delim: "&",
          kvp_delim: "=",
          base_url: "",
          a: a,
          cookieDomain: "" || utag.loader.lh(),
          name: tn || "micebooking",
          account: "UA-16481317-23",
          anonymizeIp: "false",
          allowLinker: "true",
          crossDomainTrack: "",
          enhancedLinkAttribution: "true",
          enhancedecommerce: "true",
          displayfeatures: "true",
          screenView: "false",
          optimizely: "false",
          init_before_extensions: "false",
          autofill_params: "false",
          autosend_events: "true" || "true",
          clear_global_vars: "false",
          useAmpClientId: "false",
          enh_action: "",
          enh_event_cb: "",
          enh_checkout_step: "",
          enh_checkout_option: "",
          product_action_list: "",
          product_variant: [],
          enh_impression_id: [],
          enh_impression_name: [],
          enh_impression_price: [],
          enh_impression_category: [],
          enh_impression_brand: [],
          enh_impression_variant: [],
          enh_impression_list: [],
          enh_impression_position: [],
          enh_promo_id: [],
          enh_promo_name: [],
          enh_promo_creative: [],
          enh_promo_position: [],
          id: "",
          product_id: [],
          product_name: [],
          product_brand: [],
          product_category: [],
          product_quantity: [],
          product_unit_price: [],
          product_discount: [],
          product_position: [],
          ga_events: [],
          sessionControl: "",
          set: {},
        };
        if (u.data.init_before_extensions === "true") {
          u.createTracker();
          u.initTracker();
        }
        c = [];
        for (d in utag.loader.GV(u.map)) {
          if (b[d] !== undefined && b[d] !== "") {
            e = u.map[d].split(",");
            for (f = 0; f < e.length; f++) {
              if (e[f].indexOf("a.") === 0) {
                u.data["a"][e[f].substring(2)] = b[d];
              } else if (e[f].indexOf("set.") === 0) {
                u.data.set[e[f].substring(4)] = b[d];
              } else {
                u.data[e[f]] = b[d];
              }
            }
          } else {
            h = d.split(":");
            if (h.length === 2 && b[h[0]] === h[1]) {
              if (u.map[d]) {
                u.data.enh_action = u.map[d];
              }
            }
          }
        }
        u.data.account = u.data.tid || u.data.account;
        if (
          u.typeOf(u.data.ga_events) === "array" &&
          u.typeOf(b.ga_events) === "array"
        ) {
          if (u.data.ga_events.length === 0 && b.ga_events.length > 0) {
            u.data.ga_events = b.ga_events;
          } else if (u.data.ga_events.length > 0 && b.ga_events.length > 0) {
            u.data.ga_events = u.data.ga_events.concat(b.ga_events);
          }
        }
        u.data.order_id = u.data.order_id || b._corder || "";
        u.data.order_total = u.data.order_total || b._ctotal || "";
        u.data.order_shipping = u.data.order_shipping || b._cship || "";
        u.data.order_tax = u.data.order_tax || b._ctax || "";
        u.data.order_store = u.data.order_store || b._cstore || "";
        u.data.order_currency = u.data.order_currency || b._ccurrency || "";
        u.data.order_coupon_code = u.data.order_coupon_code || b._cpromo || "";
        if (u.data.product_id.length === 0 && b._cprod !== undefined) {
          u.data.product_id = b._cprod.slice(0);
        }
        if (u.data.product_name.length === 0 && b._cprodname !== undefined) {
          u.data.product_name = b._cprodname.slice(0);
        }
        if (u.data.product_brand.length === 0 && b._cbrand !== undefined) {
          u.data.product_brand = b._cbrand.slice(0);
        }
        if (u.data.product_category.length === 0 && b._ccat !== undefined) {
          u.data.product_category = b._ccat.slice(0);
        }
        if (u.data.product_quantity.length === 0 && b._cquan !== undefined) {
          u.data.product_quantity = b._cquan.slice(0);
        }
        if (u.data.product_unit_price.length === 0 && b._cprice !== undefined) {
          u.data.product_unit_price = b._cprice.slice(0);
        }
        if (u.data.product_discount.length === 0 && b._cpdisc !== undefined) {
          u.data.product_discount = b._cpdisc.slice(0);
        }
        if (u.data.init_before_extensions !== "true") {
          u.createTracker();
          u.initTracker();
        }
        if (u.data.enhancedecommerce === "true" && !u.required["ec"]) {
          u.required["ec"] = !0;
          u.all("require", "ec");
        }
        u.data.app_id = u.data.app_id || u.data.appId || b.app_id;
        u.data.app_name = u.data.app_name || u.data.appName || b.app_name;
        u.data.app_version =
          u.data.app_version || u.data.appVersion || b.app_version;
        u.data.app_rdns =
          u.data.app_rdns || u.data.appInstallerId || b.app_rdns;
        u.data.screen_title =
          u.data.screen_title || u.data.screenName || b.screen_title;
        if (u.data.app_id || u.data.app_name) {
          g = {};
          g.appName = u.data.app_name;
          g.appId = u.data.app_id || "";
          g.appVersion = u.data.app_version;
          g.appInstallerId = u.data.app_rdns;
          u.all("set", g);
        }
        u.data.exception_reason = u.data.exception_reason || b.exception_reason;
        if (u.data.exception_reason) {
          g = {};
          g.exDescription = u.data.exception_reason;
          g.exFatal = true;
          if (u.data.nonInteraction) {
            g.nonInteraction = 1;
          }
          u.all("send", "exception", g);
        }
        if (u.data.allowLinker === "true" || u.data.allowLinker === true) {
          if (!u.required["linker"]) {
            u.all("require", "linker");
            u.required["linker"] = !0;
          }
          if (u.data.crossDomainTrack) {
            if (u.typeOf(u.data.crossDomainTrack) === "string") {
              u.data.crossDomainTrack = u.data.crossDomainTrack
                .replace(/\s/g, "")
                .split(",");
            }
            u.all("linker:autoLink", u.data.crossDomainTrack);
          }
        }
        if (u.data.clear_global_vars === "true") {
          u.setGlobalProperties(u.data, true);
          for (prop in utag.loader.GV(u.data.set)) {
            u.setGlobalProperties(u.data, true, prop);
          }
        }
        u.setGlobalProperties(u.data, false);
        if (u.data.anonymizeIp === "true" || u.data.anonymizeIp === true) {
          u.all("set", "anonymizeIp", true);
        }
        if (u.data.uid) {
          u.all("set", "&uid", u.data.uid);
        }
        if (u.data.page) {
          u.all("set", "page", u.data.page);
        }
        if (u.data.title) {
          u.all("set", "title", u.data.title);
        }
        if (u.data.location) {
          u.all("set", "location", u.data.location);
        }
        if (u.data.campaignId) {
          u.all("set", "campaignId", u.data.campaignId);
        }
        if (u.data.campaignName) {
          u.all("set", "campaignName", u.data.campaignName);
        }
        if (u.data.campaignSource) {
          u.all("set", "campaignSource", u.data.campaignSource);
        }
        if (u.data.campaignMedium) {
          u.all("set", "campaignMedium", u.data.campaignMedium);
        }
        if (u.data.campaignContent) {
          u.all("set", "campaignContent", u.data.campaignContent);
        }
        if (u.data.campaignKeyword) {
          u.all("set", "campaignKeyword", u.data.campaignKeyword);
        }
        if (
          u.data.displayfeatures === "true" ||
          u.data.displayfeatures === true
        ) {
          if (!u.required["displayfeatures"]) {
            u.required["displayfeatures"] = !0;
            u.all("require", "displayfeatures");
          }
        } else {
          u.all("set", "allowAdFeatures", false);
        }
        if (u.data.dataSource) {
          u.all("set", "dataSource", u.data.dataSource);
        }
        for (prop in utag.loader.GV(u.data.set)) {
          u.all("set", prop, u.data.set[prop]);
        }
        u.data.transaction_events = {};
        u.data.pageview_events = {};
        u.data.link_events = {};
        u.data.enhecom_events = {};
        for (d in utag.loader.GV(u.data)) {
          if (
            d.indexOf("-") > -1 &&
            (d.indexOf("metric") > -1 ||
              d.indexOf("dimension") > -1 ||
              d.indexOf("contentGroup") > -1)
          ) {
            if (d.indexOf("transaction-") === 0) {
              u.data.transaction_events[d] = u.data[d];
            } else if (d.indexOf("pageview-") === 0) {
              u.data.pageview_events[d] = u.data[d];
            } else if (d.indexOf("link-") === 0) {
              u.data.link_events[d] = u.data[d];
            } else if (
              u.data.enhancedecommerce === "true" &&
              d.indexOf("enh_") === 0
            ) {
              u.data.enhecom_events[d] = u.data[d];
            }
          } else if (
            d.indexOf("metric") === 0 ||
            d.indexOf("dimension") === 0 ||
            d.indexOf("contentGroup") === 0
          ) {
            u.all("set", d, u.data[d]);
          }
        }
        if (u.data.enhancedLinkAttribution === "true") {
          if (!u.required["enhancedLinkAttribution"]) {
            u.required["enhancedLinkAttribution"] = !0;
            u.all("require", "linkid", "linkid.js");
          }
        }
        u.data.order_id = u.data.order_id ? u.data.order_id : u.data.id;
        if (u.data.enhancedecommerce === "true") {
          u.all(
            "set",
            "&cu",
            u.data.currency ? u.data.currency : u.data.order_currency
          );
          if (u.data.order_id && u.data.enh_action === "refund") {
            if (
              u.data.order_id instanceof Array &&
              u.data.order_id.length > 0
            ) {
              u.data.order_id = u.data.order_id[0];
            }
            for (f = 0; f < u.data.product_id.length; f++) {
              g = {};
              g.id = u.data.product_id[f];
              g.quantity = u.data.product_quantity[f]
                ? u.data.product_quantity[f]
                : "1";
              u.setHitData(g, "enhecom_events", "product_refund", f);
              u.all("ec:addProduct", g);
            }
            g = {};
            g.id = u.data.order_id;
            u.setHitData(g, "enhecom_events", "refund");
            u.all("ec:setAction", "refund", g);
          } else if (u.data.order_id) {
            if (
              u.data.order_id instanceof Array &&
              u.data.order_id.length > 0
            ) {
              u.data.order_id = u.data.order_id[0];
            }
            u.addproduct("product_purchase", u.data.product_id.length, false);
            g = {};
            g.id = u.data.order_id;
            g.affiliation = u.data.affiliation
              ? u.data.affiliation
              : u.data.order_store;
            g.revenue = u.data.revenue ? u.data.revenue : u.data.order_total;
            g.shipping = u.data.shipping
              ? u.data.shipping
              : u.data.order_shipping;
            g.tax = u.data.tax ? u.data.tax : u.data.order_tax;
            g.coupon = u.data.coupon ? u.data.coupon : u.data.order_coupon_code;
            u.setHitData(g, "enhecom_events", "purchase");
            u.all("ec:setAction", "purchase", g);
          } else if (
            u.data.enh_action === "product_click" &&
            u.data.a === "link"
          ) {
            u.addproduct("product_click", 1, false);
            u.all("ec:setAction", "click", {
              list: u.data.product_action_list,
            });
            if (u.data.autosend_events === "true") {
              u.all("send", "event", "UX", "click", "Results", {
                hitCallback: u.data.enh_event_cb,
              });
            }
          } else if (u.data.enh_action === "detail") {
            u.addproduct("detail", 1, false);
            g = {};
            u.setHitData(g, "list", u.data.product_action_list);
            u.all("ec:setAction", "detail");
          } else if (u.data.enh_action === "add") {
            u.addproduct("product_add", u.data.product_id.length, false);
            u.all("ec:setAction", "add", { list: u.data.product_action_list });
            if (u.data.a === "link" && u.data.autosend_events === "true") {
              u.all("send", "event", "UX", "click", "add to cart", {
                hitCallback: u.data.enh_event_cb,
              });
            }
          } else if (u.data.enh_action === "remove") {
            u.addproduct("product_remove", u.data.product_id.length, false);
            u.all("ec:setAction", "remove");
            if (u.data.a === "link" && u.data.autosend_events === "true") {
              u.all("send", "event", "UX", "click", "remove from cart", {
                hitCallback: u.data.enh_event_cb,
              });
            }
          } else if (u.data.enh_action === "checkout") {
            u.addproduct("product_checkout", u.data.product_id.length, false);
            g = {};
            g.step = u.data.enh_checkout_step || "1";
            g.option = u.data.enh_checkout_option;
            u.all("ec:setAction", u.data.enh_action, g);
          }
          if (u.data.enh_action === "checkout_option" && u.data.a === "link") {
            g = {};
            g.step = u.data.enh_checkout_step || "1";
            g.option = u.data.enh_checkout_option;
            u.all("ec:setAction", u.data.enh_action, g);
            if (u.data.autosend_events === "true") {
              u.all("send", "event", "Checkout", "Option", {
                hitCallback: u.data.enh_event_cb,
              });
            }
          }
          if (u.data.enh_impression_id) {
            u.addproduct(
              "product_impression",
              u.data.enh_impression_id.length,
              true
            );
          }
          if (u.data.enh_promo_id) {
            u.addpromo(u.data.enh_action, u.data.a);
          }
          g = {};
          if (u.data.order_id) {
            u.setHitData(g, "transaction_events");
          }
          u.setHitData(g, "pageview_events");
          if (
            u.data.sessionControl === "start" ||
            u.data.sessionControl === "end"
          ) {
            g.sessionControl = u.data.sessionControl;
          }
          if (u.data.a === "view") {
            if (u.data.screenView === "true" || u.data.screenView === true) {
              g.screenName = u.data.screen_title || "";
              u.all("send", "screenview", g);
            } else {
              g.hitType = "pageview";
              u.all("send", g);
            }
          }
        } else if (u.data.a === "view") {
          g = {};
          u.setHitData(g, "pageview_events");
          if (
            u.data.sessionControl === "start" ||
            u.data.sessionControl === "end"
          ) {
            g.sessionControl = u.data.sessionControl;
          }
          if (u.data.screenView === "true" || u.data.screenView === true) {
            g.screenName = u.data.screen_title || "";
            u.all("send", "screenview", g);
          } else {
            g.hitType = "pageview";
            u.all("send", g);
          }
          if (u.data.order_id && !(u.data.order_id instanceof Array)) {
            if (!u.required["ecommerce"]) {
              u.required["ecommerce"] = !0;
              u.all("require", "ecommerce", "ecommerce.js");
            }
            g = {};
            u.setHitData(g, "transaction_events");
            g.id = u.data.order_id;
            g.affiliation = u.data.affiliation
              ? u.data.affiliation
              : u.data.order_store;
            g.revenue = u.data.revenue ? u.data.revenue : u.data.order_total;
            g.shipping = u.data.shipping
              ? u.data.shipping
              : u.data.order_shipping;
            g.tax = u.data.tax ? u.data.tax : u.data.order_tax;
            g.currency = u.data.currency
              ? u.data.currency
              : u.data.order_currency;
            u.all("ecommerce:addTransaction", g);
            for (f = 0; f < u.data.product_id.length; f++) {
              g = {};
              g.id = u.data.order_id;
              g.sku = u.data.product_id[f];
              g.name = u.data.product_name[f]
                ? u.data.product_name[f]
                : u.data.product_id[f];
              g.category = u.data.product_category[f]
                ? u.data.product_category[f]
                : "";
              g.price = u.data.product_unit_price[f]
                ? u.data.product_unit_price[f]
                : "1.00";
              g.quantity = u.data.product_quantity[f]
                ? u.data.product_quantity[f]
                : "1";
              u.setHitData(g, "transaction_events");
              u.all("ecommerce:addItem", g);
            }
            u.all("ecommerce:send");
          } else if (
            u.data.order_id instanceof Array &&
            u.data.order_id.length > 0
          ) {
            if (!u.required["ecommerce"]) {
              u.required["ecommerce"] = !0;
              u.all("require", "ecommerce", "ecommerce.js");
            }
            var lastindex = 0;
            for (f = 0; f < u.data.order_id.length; f++) {
              if (
                f === u.data.order_id.length - 1 ||
                u.data.order_id[f] !== u.data.order_id[f + 1]
              ) {
                g = {};
                u.setHitData(g, "transaction_events");
                g.id = u.data.order_id[f];
                g.affiliation =
                  u.data.affiliation &&
                  typeof u.data.affiliation[f] !== "undefined"
                    ? u.data.affiliation[f]
                    : u.data.order_store;
                g.revenue =
                  u.data.revenue && typeof u.data.revenue[f] !== "undefined"
                    ? u.data.revenue[f]
                    : u.data.order_total;
                g.shipping =
                  u.data.shipping && typeof u.data.shipping[f] !== "undefined"
                    ? u.data.shipping[f]
                    : u.data.order_shipping;
                g.tax =
                  u.data.tax && typeof u.data.tax[f] !== "undefined"
                    ? u.data.tax[f]
                    : u.data.order_tax;
                g.currency = u.data.currency
                  ? u.data.currency
                  : u.data.order_currency;
                u.all("ecommerce:addTransaction", g);
                for (e = lastindex; e < f + 1; e++) {
                  g = {};
                  g.id = u.data.order_id[f];
                  g.sku = u.data.product_id[e];
                  g.name = u.data.product_name[e]
                    ? u.data.product_name[e]
                    : u.data.product_id[e];
                  g.category = u.data.product_category[e]
                    ? u.data.product_category[e]
                    : "";
                  g.price = u.data.product_unit_price[e]
                    ? u.data.product_unit_price[e]
                    : "1.00";
                  g.quantity = u.data.product_quantity[e]
                    ? u.data.product_quantity[e]
                    : "1";
                  u.setHitData(g, "transaction_events");
                  u.all("ecommerce:addItem", g);
                }
                lastindex = f + 1;
              }
            }
            u.all("ecommerce:send");
          }
        }
        if (u.data.eventCategory && u.data.eventAction) {
          g = {};
          u.setHitData(g, "link_events");
          g.hitType = "event";
          g.eventCategory = u.data.eventCategory;
          if (u.data.nonInteraction) {
            g.nonInteraction = 1;
          }
          g.eventAction = u.data.eventAction;
          if (u.data.eventLabel) {
            g.eventLabel = u.data.eventLabel;
          }
          if (
            typeof u.data.eventValue !== "undefined" &&
            u.data.eventValue !== ""
          ) {
            g.eventValue = u.data.eventValue;
          }
          if (u.data.standard_event_cb) {
            g.hitCallback = u.data.standard_event_cb;
          }
          if (u.data.screenView === "true" || u.data.screenView === true) {
            g.screenName = u.data.screen_title || "";
          }
          if (
            u.data.sessionControl === "start" ||
            u.data.sessionControl === "end"
          ) {
            g.sessionControl = u.data.sessionControl;
          }
          u.all("send", g);
          u.data.eventCategory =
            u.data.eventAction =
            u.data.eventLabel =
            u.data.eventValue =
              "";
        }
        for (e = 0; e < u.data.ga_events.length; e++) {
          g = {};
          u.setHitData(g, "link_events");
          g.hitType = "event";
          g.eventCategory = u.data.ga_events[e].eventCategory;
          g.eventAction = u.data.ga_events[e].eventAction;
          g.eventLabel = u.data.ga_events[e].eventLabel;
          g.eventValue = u.data.ga_events[e].eventValue;
          if (u.data.ga_events[e].nonInteraction) {
            g.nonInteraction = 1;
          }
          if (
            u.data.sessionControl === "start" ||
            u.data.sessionControl === "end"
          ) {
            g.sessionControl = u.data.sessionControl;
          }
          u.all("send", g);
        }
        if (
          u.data.socialNetwork &&
          u.data.socialAction &&
          u.data.socialTarget
        ) {
          g = {};
          g.hitType = "social";
          g.socialNetwork = u.data.socialNetwork;
          g.socialAction = u.data.socialAction;
          g.socialTarget = u.data.socialTarget;
          u.all("send", g);
          u.data.socialNetwork = u.data.socialAction = u.data.socialTarget = "";
        }
        if (u.data.timingCategory && u.data.timingVar && u.data.timingValue) {
          g = {};
          g.hitType = "timing";
          g.timingCategory = u.data.timingCategory;
          g.timingVar = u.data.timingVar;
          g.timingValue = u.data.timingValue;
          g.timingLabel = u.data.timingLabel || "";
          u.all("send", g);
        }
        if (u.data["ga-disable"]) {
          window["ga-disable-" + u.data["ga-disable"]] = true;
        }
        (function () {
          var id = "tealium-tag-7110";
          if (document.getElementById(id)) {
            return;
          }
          u.loader({
            type: "script",
            src: "https://www.google-analytics.com/analytics.js",
            loc: "script",
            id: id,
          });
          u.o.l = 1 * new Date();
        })();
      }
    };
    utag.o[loader].loader.LOAD(id);
  })("392", "mbs.main");
} catch (error) {
  utag.DB(error);
}

//tealium universal tag - utag.425 ut4.0.202207210624, Copyright 2022 Tealium.com Inc. All Rights Reserved.
try {
  (function (id, loader) {
    var u = { id: id };
    utag.o[loader].sender[id] = u;
    if (utag.ut === undefined) {
      utag.ut = {};
    }
    var match = /ut\d\.(\d*)\..*/.exec(utag.cfg.v);
    if (utag.ut.loader === undefined || !match || parseInt(match[1]) < 41) {
      u.loader = function (o, a, b, c, l, m) {
        utag.DB(o);
        a = document;
        if (o.type == "iframe") {
          m = a.getElementById(o.id);
          if (m && m.tagName == "IFRAME") {
            b = m;
          } else {
            b = a.createElement("iframe");
          }
          o.attrs = o.attrs || {};
          utag.ut.merge(
            o.attrs,
            { height: "1", width: "1", style: "display:none" },
            0
          );
        } else if (o.type == "img") {
          utag.DB("Attach img: " + o.src);
          b = new Image();
        } else {
          b = a.createElement("script");
          b.language = "javascript";
          b.type = "text/javascript";
          b.async = 1;
          b.charset = "utf-8";
        }
        if (o.id) {
          b.id = o.id;
        }
        for (l in utag.loader.GV(o.attrs)) {
          b.setAttribute(l, o.attrs[l]);
        }
        b.setAttribute("src", o.src);
        if (typeof o.cb == "function") {
          if (b.addEventListener) {
            b.addEventListener(
              "load",
              function () {
                o.cb();
              },
              false
            );
          } else {
            b.onreadystatechange = function () {
              if (
                this.readyState == "complete" ||
                this.readyState == "loaded"
              ) {
                this.onreadystatechange = null;
                o.cb();
              }
            };
          }
        }
        if (o.type != "img" && !m) {
          l = o.loc || "head";
          c = a.getElementsByTagName(l)[0];
          if (c) {
            utag.DB("Attach to " + l + ": " + o.src);
            if (l == "script") {
              c.parentNode.insertBefore(b, c);
            } else {
              c.appendChild(b);
            }
          }
        }
      };
    } else {
      u.loader = utag.ut.loader;
    }
    if (utag.ut.typeOf === undefined) {
      u.typeOf = function (e) {
        return {}.toString
          .call(e)
          .match(/\s([a-zA-Z]+)/)[1]
          .toLowerCase();
      };
    } else {
      u.typeOf = utag.ut.typeOf;
    }
    u.ev = { view: 1 };
    u.initialized = false;
    u.scriptrequested = false;
    u.queue = [];
    utag.globals = utag.globals || {};
    utag.globals.yahoo_jp_remarketing = utag.globals.yahoo_jp_remarketing || {};
    utag.globals.yahoo_jp_remarketing.queue =
      utag.globals.yahoo_jp_remarketing.queue || [];
    u.map = {
      order_room_type: "item_id",
      order_total: "price",
      num_of_rooms: "quantity",
      yahoo_retargeting_label: "yahoo_retargeting_label",
    };
    u.extend = [
      function (a, b, c, d, e, f, g) {
        if (1) {
          d = b["domain_pathname"];
          if (typeof d == "undefined") return;
          c = [
            { "reserve.marinabaysands.com/confirmation": "resarvation" },
            { "jp.marinabaysands.com/samurai.html": "lptop" },
            { "marinabaysands.com/booking/confirmation": "resarvation" },
          ];
          var m = false;
          for (e = 0; e < c.length; e++) {
            for (f in utag.loader.GV(c[e])) {
              if (d.toString().indexOf(f) > -1) {
                b["yahoo_retargeting_label"] = c[e][f];
                m = true;
              }
            }
            if (m) break;
          }
        }
      },
      function (a, b) {
        try {
          if (1) {
            if (typeof b["yahoo_retargeting_label"] == "undefined") {
              return false;
            }
          }
        } catch (e) {
          utag.DB(e);
        }
      },
    ];
    u.loader_cb = function (a, b, c) {
      utag.DB("send:425:CALLBACK");
      u.initialized = true;
      window.yahoo_retargeting_id = "";
      window.yahoo_retargeting_label = "";
      if (utag.globals.yahoo_jp_remarketing.queue.length !== 0) {
        utag.globals.yahoo_jp_remarketing.queue[0].fromCallback = true;
        utag.sender[utag.globals.yahoo_jp_remarketing.queue[0].UID].send(
          "view",
          b
        );
      }
      utag.DB("send:425:CALLBACK:COMPLETE");
    };
    u.callBack = function () {
      var data = {};
      while ((data = u.queue.shift())) {
        u.data = data.data;
        u.loader_cb(data.a, data.b, data.c);
      }
    };
    u.send = function (a, b) {
      if (u.ev[a] || u.ev.all !== undefined) {
        var c, d, e, f;
        u.data = {
          base_url: "//b92.yahoo.co.jp/js/s_retargeting.js",
          yahoo_retargeting_id: "9KC51DZ8UQ",
          yahoo_retargeting_label: "",
        };
        for (c = 0; c < u.extend.length; c++) {
          try {
            d = u.extend[c](a, b);
            if (d == false) return;
          } catch (e) {}
        }
        for (d in utag.loader.GV(u.map)) {
          if (b[d] !== undefined && b[d] !== "") {
            e = u.map[d].split(",");
            for (f = 0; f < e.length; f++) {
              u.data[e[f]] = b[d];
            }
          }
        }
        if (
          utag.globals.yahoo_jp_remarketing.queue.length === 0 ||
          !utag.globals.yahoo_jp_remarketing.queue[0].fromCallback
        ) {
          utag.globals.yahoo_jp_remarketing.queue.push({
            UID: u.id,
            retargetingID: u.data.yahoo_retargeting_id,
            retargetingLabel: u.data.yahoo_retargeting_label,
            fromCallback: false,
          });
        }
        if (!window.yahoo_retargeting_id) {
          var currYahooObj = utag.globals.yahoo_jp_remarketing.queue.shift();
          window.yahoo_retargeting_id = currYahooObj.retargetingID;
          window.yahoo_retargeting_label = currYahooObj.retargetingLabel;
        } else {
          utag.DB(u.id + ": Tag has been queued.");
          return;
        }
        if (u.initialized) {
          u.loader_cb(a, b, c);
        } else {
          u.queue.push({ data: u.data, a: a, b: b, c: c });
          if (!u.scriptrequested) {
            u.scriptrequested = true;
            u.loader({
              type: "script",
              src: u.data.base_url,
              cb: u.callBack,
              loc: "script",
              id: "utag_425",
              attrs: {},
            });
          }
        }
      }
    };
    utag.o[loader].loader.LOAD(id);
  })("425", "mbs.main");
} catch (error) {
  utag.DB(error);
}

//tealium universal tag - utag.410 ut4.0.202207210624, Copyright 2022 Tealium.com Inc. All Rights Reserved.
window.yjDataLayer = window.yjDataLayer || [];
function ytag() {
  window.yjDataLayer.push(arguments);
}
ytag({ type: "ycl_cookie" });
try {
  (function (id, loader) {
    var u = {};
    utag.o[loader].sender[id] = u;
    if (utag === undefined) {
      utag = {};
    }
    if (utag.ut === undefined) {
      utag.ut = {};
    }
    if (utag.ut.loader === undefined) {
      u.loader = function (o) {
        var a, b, c, l;
        a = document;
        if (o.type === "iframe") {
          b = a.createElement("iframe");
          b.setAttribute("height", "1");
          b.setAttribute("width", "1");
          b.setAttribute("style", "display:none");
          b.setAttribute("src", o.src);
        } else if (o.type === "img") {
          utag.DB("Attach img: " + o.src);
          b = new Image();
          b.src = o.src;
          return;
        } else {
          b = a.createElement("script");
          b.language = "javascript";
          b.type = "text/javascript";
          b.async = 1;
          b.charset = "utf-8";
          b.src = o.src;
        }
        if (o.id) {
          b.id = o.id;
        }
        if (typeof o.cb === "function") {
          if (b.addEventListener) {
            b.addEventListener(
              "load",
              function () {
                o.cb();
              },
              false
            );
          } else {
            b.onreadystatechange = function () {
              if (
                this.readyState === "complete" ||
                this.readyState === "loaded"
              ) {
                this.onreadystatechange = null;
                o.cb();
              }
            };
          }
        }
        l = o.loc || "head";
        c = a.getElementsByTagName(l)[0];
        if (c) {
          utag.DB("Attach to " + l + ": " + o.src);
          if (l === "script") {
            c.parentNode.insertBefore(b, c);
          } else {
            c.appendChild(b);
          }
        }
      };
    } else {
      u.loader = utag.ut.loader;
    }
    u.ev = { view: 1 };
    u.initialized = false;
    u.map = {};
    u.extend = [];
    u.send = function (a, b) {
      if (u.ev[a] || u.ev.all !== undefined) {
        var c, d, e, f, i;
        u.data = { base_url: "//s.yimg.jp/images/listing/tool/cv/ytag.js" };
        for (d in utag.loader.GV(u.map)) {
          if (b[d] !== undefined && b[d] !== "") {
            e = u.map[d].split(",");
            for (f = 0; f < e.length; f++) {
              u.data[e[f]] = b[d];
            }
          }
        }
        u.loader_cb = function () {};
        u.loader({
          type: "script",
          src: u.data.base_url,
          cb: u.loader_cb,
          loc: "script",
          id: "utag_410",
        });
      }
    };
    utag.o[loader].loader.LOAD(id);
  })("410", "mbs.main");
} catch (error) {
  utag.DB(error);
}

//tealium universal tag - utag.411 ut4.0.202207210624, Copyright 2022 Tealium.com Inc. All Rights Reserved.
window.yjDataLayer = window.yjDataLayer || [];
if (typeof ytag == "undefined") {
  window.ytag = function () {
    window.yjDataLayer.push(arguments);
  };
}
try {
  (function (id, loader) {
    var u = {};
    utag.o[loader].sender[id] = u;
    if (utag === undefined) {
      utag = {};
    }
    if (utag.ut === undefined) {
      utag.ut = {};
    }
    if (utag.ut.loader === undefined) {
      u.loader = function (o) {
        var a, b, c, l;
        a = document;
        if (o.type === "iframe") {
          b = a.createElement("iframe");
          b.setAttribute("height", "1");
          b.setAttribute("width", "1");
          b.setAttribute("style", "display:none");
          b.setAttribute("src", o.src);
        } else if (o.type === "img") {
          utag.DB("Attach img: " + o.src);
          b = new Image();
          b.src = o.src;
          return;
        } else {
          b = a.createElement("script");
          b.language = "javascript";
          b.type = "text/javascript";
          b.async = 1;
          b.charset = "utf-8";
          b.src = o.src;
        }
        if (o.id) {
          b.id = o.id;
        }
        if (typeof o.cb === "function") {
          if (b.addEventListener) {
            b.addEventListener(
              "load",
              function () {
                o.cb();
              },
              false
            );
          } else {
            b.onreadystatechange = function () {
              if (
                this.readyState === "complete" ||
                this.readyState === "loaded"
              ) {
                this.onreadystatechange = null;
                o.cb();
              }
            };
          }
        }
        l = o.loc || "head";
        c = a.getElementsByTagName(l)[0];
        if (c) {
          utag.DB("Attach to " + l + ": " + o.src);
          if (l === "script") {
            c.parentNode.insertBefore(b, c);
          } else {
            c.appendChild(b);
          }
        }
      };
    } else {
      u.loader = utag.ut.loader;
    }
    u.ev = { link: 1 };
    u.initialized = false;
    u.map = {
      avg_room_rate: "yahoo_sstag_custom_params.avg_room_rate",
      num_of_nights: "yahoo_sstag_custom_params.num_of_nights",
      reservation_order_subtotal:
        "yahoo_sstag_custom_params.hotel_order_subtotal,order_subtotal",
      check_in: "yahoo_sstag_custom_params.check_in_date",
      check_out: "yahoo_sstag_custom_params.check_out_date",
      rate_code: "yahoo_sstag_custom_params.hotel_offer",
    };
    u.extend = [];
    u.send = function (a, b) {
      if (u.ev[a] || u.ev.all !== undefined) {
        var c, d, e, f, i;
        u.data = { order_subtotal: "0", yahoo_sstag_custom_params: {} };
        for (d in utag.loader.GV(u.map)) {
          if (b[d] !== undefined && b[d] !== "") {
            e = u.map[d].split(",");
            for (f = 0; f < e.length; f++) {
              if (e[f].indexOf("yahoo_sstag_custom_params.") === 0) {
                var id = e[f].substr(26);
                u.data.yahoo_sstag_custom_params[id] = b[d];
              } else u.data[e[f]] = b[d];
            }
          }
        }
        ytag({
          type: "yss_conversion",
          config: {
            yahoo_conversion_id: "1000416564",
            yahoo_conversion_label: "0f5QCLf7mXsQwYDdiAM",
            yahoo_conversion_value: u.data.order_subtotal,
            yahoo_sstag_custom_params: u.data.yahoo_sstag_custom_params,
          },
        });
      }
    };
    utag.o[loader].loader.LOAD(id);
  })("411", "mbs.main");
} catch (error) {
  utag.DB(error);
}

//tealium universal tag - utag.412 ut4.0.202207210624, Copyright 2022 Tealium.com Inc. All Rights Reserved.
window.yjDataLayer = window.yjDataLayer || [];
if (typeof ytag == "undefined") {
  window.ytag = function () {
    window.yjDataLayer.push(arguments);
  };
}
try {
  (function (id, loader) {
    var u = {};
    utag.o[loader].sender[id] = u;
    if (utag === undefined) {
      utag = {};
    }
    if (utag.ut === undefined) {
      utag.ut = {};
    }
    if (utag.ut.loader === undefined) {
      u.loader = function (o) {
        var a, b, c, l;
        a = document;
        if (o.type === "iframe") {
          b = a.createElement("iframe");
          b.setAttribute("height", "1");
          b.setAttribute("width", "1");
          b.setAttribute("style", "display:none");
          b.setAttribute("src", o.src);
        } else if (o.type === "img") {
          utag.DB("Attach img: " + o.src);
          b = new Image();
          b.src = o.src;
          return;
        } else {
          b = a.createElement("script");
          b.language = "javascript";
          b.type = "text/javascript";
          b.async = 1;
          b.charset = "utf-8";
          b.src = o.src;
        }
        if (o.id) {
          b.id = o.id;
        }
        if (typeof o.cb === "function") {
          if (b.addEventListener) {
            b.addEventListener(
              "load",
              function () {
                o.cb();
              },
              false
            );
          } else {
            b.onreadystatechange = function () {
              if (
                this.readyState === "complete" ||
                this.readyState === "loaded"
              ) {
                this.onreadystatechange = null;
                o.cb();
              }
            };
          }
        }
        l = o.loc || "head";
        c = a.getElementsByTagName(l)[0];
        if (c) {
          utag.DB("Attach to " + l + ": " + o.src);
          if (l === "script") {
            c.parentNode.insertBefore(b, c);
          } else {
            c.appendChild(b);
          }
        }
      };
    } else {
      u.loader = utag.ut.loader;
    }
    u.ev = { view: 1 };
    u.initialized = false;
    u.map = {
      avg_room_rate: "yahoo_sstag_custom_params.avg_room_rate",
      num_of_nights: "yahoo_sstag_custom_params.num_of_nights",
      reservation_order_subtotal:
        "yahoo_sstag_custom_params.hotel_order_subtotal",
      check_in: "yahoo_sstag_custom_params.check_in_date",
      check_out: "yahoo_sstag_custom_params.check_out_date",
      rate_code: "yahoo_sstag_custom_params.hotel_offer",
    };
    u.extend = [];
    u.send = function (a, b) {
      if (u.ev[a] || u.ev.all !== undefined) {
        var c, d, e, f, i;
        u.data = { yahoo_sstag_custom_params: {} };
        for (d in utag.loader.GV(u.map)) {
          if (b[d] !== undefined && b[d] !== "") {
            e = u.map[d].split(",");
            for (f = 0; f < e.length; f++) {
              if (e[f].indexOf("yahoo_sstag_custom_params.") === 0) {
                var id = e[f].substr(26);
                u.data.yahoo_sstag_custom_params[id] = b[d];
              } else u.data[e[f]] = b[d];
            }
          }
        }
        ytag({
          type: "yss_retargeting",
          config: {
            yahoo_ss_retargeting_id: "1000416564",
            yahoo_sstag_custom_params: u.data.yahoo_sstag_custom_params,
          },
        });
      }
    };
    utag.o[loader].loader.LOAD(id);
  })("412", "mbs.main");
} catch (error) {
  utag.DB(error);
}

//tealium universal tag - utag.415 ut4.0.202207210624, Copyright 2022 Tealium.com Inc. All Rights Reserved.
window.yjDataLayer = window.yjDataLayer || [];
if (typeof ytag == "undefined") {
  window.ytag = function () {
    window.yjDataLayer.push(arguments);
  };
}
try {
  (function (id, loader) {
    var u = {};
    utag.o[loader].sender[id] = u;
    if (utag === undefined) {
      utag = {};
    }
    if (utag.ut === undefined) {
      utag.ut = {};
    }
    if (utag.ut.loader === undefined) {
      u.loader = function (o) {
        var a, b, c, l;
        a = document;
        if (o.type === "iframe") {
          b = a.createElement("iframe");
          b.setAttribute("height", "1");
          b.setAttribute("width", "1");
          b.setAttribute("style", "display:none");
          b.setAttribute("src", o.src);
        } else if (o.type === "img") {
          utag.DB("Attach img: " + o.src);
          b = new Image();
          b.src = o.src;
          return;
        } else {
          b = a.createElement("script");
          b.language = "javascript";
          b.type = "text/javascript";
          b.async = 1;
          b.charset = "utf-8";
          b.src = o.src;
        }
        if (o.id) {
          b.id = o.id;
        }
        if (typeof o.cb === "function") {
          if (b.addEventListener) {
            b.addEventListener(
              "load",
              function () {
                o.cb();
              },
              false
            );
          } else {
            b.onreadystatechange = function () {
              if (
                this.readyState === "complete" ||
                this.readyState === "loaded"
              ) {
                this.onreadystatechange = null;
                o.cb();
              }
            };
          }
        }
        l = o.loc || "head";
        c = a.getElementsByTagName(l)[0];
        if (c) {
          utag.DB("Attach to " + l + ": " + o.src);
          if (l === "script") {
            c.parentNode.insertBefore(b, c);
          } else {
            c.appendChild(b);
          }
        }
      };
    } else {
      u.loader = utag.ut.loader;
    }
    u.ev = { view: 1, link: 1 };
    u.initialized = false;
    u.map = {
      restaurant_name: "yahoo_sstag_custom_params.restaurant_name",
      restaurant_guest_quantity:
        "yahoo_sstag_custom_params.restaurant_guestquantity",
      entertainment_venue: "yahoo_sstag_custom_params.entertainment_venue",
      entertainment_price_class:
        "yahoo_sstag_custom_params.entertainment_price_class",
      entertainment_order_quantity:
        "yahoo_sstag_custom_params.entertainment_order_quantity",
    };
    u.extend = [];
    u.send = function (a, b) {
      if (u.ev[a] || u.ev.all !== undefined) {
        var c, d, e, f, i;
        u.data = { yahoo_sstag_custom_params: {} };
        for (d in utag.loader.GV(u.map)) {
          if (b[d] !== undefined && b[d] !== "") {
            e = u.map[d].split(",");
            for (f = 0; f < e.length; f++) {
              if (e[f].indexOf("yahoo_sstag_custom_params.") === 0) {
                var id = e[f].substr(26);
                u.data.yahoo_sstag_custom_params[id] = b[d];
              } else u.data[e[f]] = b[d];
            }
          }
        }
        ytag({
          type: "yss_retargeting",
          config: {
            yahoo_ss_retargeting_id: "1000997368",
            yahoo_sstag_custom_params: u.data.yahoo_sstag_custom_params,
          },
        });
      }
    };
    utag.o[loader].loader.LOAD(id);
  })("415", "mbs.main");
} catch (error) {
  utag.DB(error);
}

//tealium universal tag - utag.421 ut4.0.202207210624, Copyright 2022 Tealium.com Inc. All Rights Reserved.
window.yjDataLayer = window.yjDataLayer || [];
if (typeof ytag == "undefined") {
  window.ytag = function () {
    window.yjDataLayer.push(arguments);
  };
}
try {
  (function (id, loader) {
    var u = {};
    utag.o[loader].sender[id] = u;
    if (utag === undefined) {
      utag = {};
    }
    if (utag.ut === undefined) {
      utag.ut = {};
    }
    if (utag.ut.loader === undefined) {
      u.loader = function (o) {
        var a, b, c, l;
        a = document;
        if (o.type === "iframe") {
          b = a.createElement("iframe");
          b.setAttribute("height", "1");
          b.setAttribute("width", "1");
          b.setAttribute("style", "display:none");
          b.setAttribute("src", o.src);
        } else if (o.type === "img") {
          utag.DB("Attach img: " + o.src);
          b = new Image();
          b.src = o.src;
          return;
        } else {
          b = a.createElement("script");
          b.language = "javascript";
          b.type = "text/javascript";
          b.async = 1;
          b.charset = "utf-8";
          b.src = o.src;
        }
        if (o.id) {
          b.id = o.id;
        }
        if (typeof o.cb === "function") {
          if (b.addEventListener) {
            b.addEventListener(
              "load",
              function () {
                o.cb();
              },
              false
            );
          } else {
            b.onreadystatechange = function () {
              if (
                this.readyState === "complete" ||
                this.readyState === "loaded"
              ) {
                this.onreadystatechange = null;
                o.cb();
              }
            };
          }
        }
        l = o.loc || "head";
        c = a.getElementsByTagName(l)[0];
        if (c) {
          utag.DB("Attach to " + l + ": " + o.src);
          if (l === "script") {
            c.parentNode.insertBefore(b, c);
          } else {
            c.appendChild(b);
          }
        }
      };
    } else {
      u.loader = utag.ut.loader;
    }
    u.ev = { view: 1 };
    u.initialized = false;
    u.map = {};
    u.extend = [];
    u.send = function (a, b) {
      if (u.ev[a] || u.ev.all !== undefined) {
        var c, d, e, f, i;
        u.data = {};
        for (d in utag.loader.GV(u.map)) {
          if (b[d] !== undefined && b[d] !== "") {
            e = u.map[d].split(",");
            for (f = 0; f < e.length; f++) {
              u.data[e[f]] = b[d];
            }
          }
        }
        ytag({
          type: "yjad_retargeting",
          config: {
            yahoo_retargeting_id: "4F87TAS2HG",
            yahoo_retargeting_label: "",
          },
        });
      }
    };
    utag.o[loader].loader.LOAD(id);
  })("421", "mbs.main");
} catch (error) {
  utag.DB(error);
}

//tealium universal tag - utag.423 ut4.0.202207210624, Copyright 2022 Tealium.com Inc. All Rights Reserved.
window.yjDataLayer = window.yjDataLayer || [];
if (typeof ytag == "undefined") {
  window.ytag = function () {
    window.yjDataLayer.push(arguments);
  };
}
try {
  (function (id, loader) {
    var u = {};
    utag.o[loader].sender[id] = u;
    if (utag === undefined) {
      utag = {};
    }
    if (utag.ut === undefined) {
      utag.ut = {};
    }
    if (utag.ut.loader === undefined) {
      u.loader = function (o) {
        var a, b, c, l;
        a = document;
        if (o.type === "iframe") {
          b = a.createElement("iframe");
          b.setAttribute("height", "1");
          b.setAttribute("width", "1");
          b.setAttribute("style", "display:none");
          b.setAttribute("src", o.src);
        } else if (o.type === "img") {
          utag.DB("Attach img: " + o.src);
          b = new Image();
          b.src = o.src;
          return;
        } else {
          b = a.createElement("script");
          b.language = "javascript";
          b.type = "text/javascript";
          b.async = 1;
          b.charset = "utf-8";
          b.src = o.src;
        }
        if (o.id) {
          b.id = o.id;
        }
        if (typeof o.cb === "function") {
          if (b.addEventListener) {
            b.addEventListener(
              "load",
              function () {
                o.cb();
              },
              false
            );
          } else {
            b.onreadystatechange = function () {
              if (
                this.readyState === "complete" ||
                this.readyState === "loaded"
              ) {
                this.onreadystatechange = null;
                o.cb();
              }
            };
          }
        }
        l = o.loc || "head";
        c = a.getElementsByTagName(l)[0];
        if (c) {
          utag.DB("Attach to " + l + ": " + o.src);
          if (l === "script") {
            c.parentNode.insertBefore(b, c);
          } else {
            c.appendChild(b);
          }
        }
      };
    } else {
      u.loader = utag.ut.loader;
    }
    u.ev = { view: 1 };
    u.initialized = false;
    u.map = {
      "dom.url": "yahoo_sstag_custom_params.page_type",
      rate_code: "yahoo_sstag_custom_params.hotel_offer",
      check_in: "yahoo_sstag_custom_params.check_in_date",
      check_out: "yahoo_sstag_custom_params.check_out_date",
      order_subtotal: "yahoo_sstag_custom_params.hotel_order_subtotal",
      avg_room_rate: "yahoo_sstag_custom_params.avg_room_rate",
      num_of_nights: "yahoo_sstag_custom_params.num_of_nights",
    };
    u.extend = [];
    u.send = function (a, b) {
      if (u.ev[a] || u.ev.all !== undefined) {
        var c, d, e, f, i;
        u.data = { yahoo_sstag_custom_params: {} };
        for (d in utag.loader.GV(u.map)) {
          if (b[d] !== undefined && b[d] !== "") {
            e = u.map[d].split(",");
            for (f = 0; f < e.length; f++) {
              if (e[f].indexOf("yahoo_sstag_custom_params.") === 0) {
                var id = e[f].substr(26);
                u.data.yahoo_sstag_custom_params[id] = b[d];
              } else u.data[e[f]] = b[d];
            }
          }
        }
        ytag({
          type: "yss_conversion",
          config: {
            yahoo_conversion_id: "1000416564",
            yahoo_conversion_label: "4wVjCJyXtrwBEMGA3YgD",
            yahoo_conversion_value: "0",
            yahoo_sstag_custom_params: u.data.yahoo_sstag_custom_params,
          },
        });
      }
    };
    utag.o[loader].loader.LOAD(id);
  })("423", "mbs.main");
} catch (error) {
  utag.DB(error);
}

//tealium universal tag - utag.424 ut4.0.202207210624, Copyright 2022 Tealium.com Inc. All Rights Reserved.
window.yjDataLayer = window.yjDataLayer || [];
if (typeof ytag == "undefined") {
  window.ytag = function () {
    window.yjDataLayer.push(arguments);
  };
}
try {
  (function (id, loader) {
    var u = {};
    utag.o[loader].sender[id] = u;
    if (utag === undefined) {
      utag = {};
    }
    if (utag.ut === undefined) {
      utag.ut = {};
    }
    if (utag.ut.loader === undefined) {
      u.loader = function (o) {
        var a, b, c, l;
        a = document;
        if (o.type === "iframe") {
          b = a.createElement("iframe");
          b.setAttribute("height", "1");
          b.setAttribute("width", "1");
          b.setAttribute("style", "display:none");
          b.setAttribute("src", o.src);
        } else if (o.type === "img") {
          utag.DB("Attach img: " + o.src);
          b = new Image();
          b.src = o.src;
          return;
        } else {
          b = a.createElement("script");
          b.language = "javascript";
          b.type = "text/javascript";
          b.async = 1;
          b.charset = "utf-8";
          b.src = o.src;
        }
        if (o.id) {
          b.id = o.id;
        }
        if (typeof o.cb === "function") {
          if (b.addEventListener) {
            b.addEventListener(
              "load",
              function () {
                o.cb();
              },
              false
            );
          } else {
            b.onreadystatechange = function () {
              if (
                this.readyState === "complete" ||
                this.readyState === "loaded"
              ) {
                this.onreadystatechange = null;
                o.cb();
              }
            };
          }
        }
        l = o.loc || "head";
        c = a.getElementsByTagName(l)[0];
        if (c) {
          utag.DB("Attach to " + l + ": " + o.src);
          if (l === "script") {
            c.parentNode.insertBefore(b, c);
          } else {
            c.appendChild(b);
          }
        }
      };
    } else {
      u.loader = utag.ut.loader;
    }
    u.ev = { view: 1 };
    u.initialized = false;
    u.map = {
      "dom.url": "yahoo_sstag_custom_params.page_type",
      rate_code: "yahoo_sstag_custom_params.hotel_offer",
      check_in: "yahoo_sstag_custom_params.check_in_date",
      check_out: "yahoo_sstag_custom_params.check_out_date",
      avg_room_rate: "yahoo_sstag_custom_params.avg_room_rate",
      num_of_nights: "yahoo_sstag_custom_params.num_of_nights",
      order_subtotal: "yahoo_sstag_custom_params.hotel_order_subtotal",
    };
    u.extend = [];
    u.send = function (a, b) {
      if (u.ev[a] || u.ev.all !== undefined) {
        var c, d, e, f, i;
        u.data = { order_subtotal: "", yahoo_sstag_custom_params: {} };
        for (d in utag.loader.GV(u.map)) {
          if (b[d] !== undefined && b[d] !== "") {
            e = u.map[d].split(",");
            for (f = 0; f < e.length; f++) {
              if (e[f].indexOf("yahoo_sstag_custom_params.") === 0) {
                var id = e[f].substr(26);
                u.data.yahoo_sstag_custom_params[id] = b[d];
              } else u.data[e[f]] = b[d];
            }
          }
        }
        ytag({
          type: "yjad_conversion",
          config: {
            yahoo_ydn_conv_io: "P8K9JXgOLDUiPqu7991l",
            yahoo_ydn_conv_label: "7V8SN8TABHEO8YBREFU674040",
            yahoo_ydn_conv_transaction_id: "",
            yahoo_ydn_conv_value: u.data.order_subtotal,
            yahoo_sstag_custom_params: u.data.yahoo_sstag_custom_params,
          },
        });
      }
    };
    utag.o[loader].loader.LOAD(id);
  })("424", "mbs.main");
} catch (error) {
  utag.DB(error);
}

//tealium universal tag - utag.450 ut4.0.202207210624, Copyright 2022 Tealium.com Inc. All Rights Reserved.
var ScarabQueue = ScarabQueue || [];
(function (id) {
  if (document.getElementById(id)) return;
  var js = document.createElement("script");
  js.id = id;
  js.src = "//cdn.scarabresearch.com/js/1D472C1795B23100/scarab-v2.js";
  var fs = document.getElementsByTagName("script")[0];
  fs.parentNode.insertBefore(js, fs);
})("scarab-js-api");
try {
  (function (id, loader) {
    var u = {};
    utag.o[loader].sender[id] = u;
    if (utag === undefined) {
      utag = {};
    }
    if (utag.ut === undefined) {
      utag.ut = {};
    }
    if (utag.ut.loader === undefined) {
      u.loader = function (o) {
        var a, b, c, l;
        a = document;
        if (o.type === "iframe") {
          b = a.createElement("iframe");
          b.setAttribute("height", "1");
          b.setAttribute("width", "1");
          b.setAttribute("style", "display:none");
          b.setAttribute("src", o.src);
        } else if (o.type === "img") {
          utag.DB("Attach img: " + o.src);
          b = new Image();
          b.src = o.src;
          return;
        } else {
          b = a.createElement("script");
          b.language = "javascript";
          b.type = "text/javascript";
          b.async = 1;
          b.charset = "utf-8";
          b.src = o.src;
        }
        if (o.id) {
          b.id = o.id;
        }
        if (typeof o.cb === "function") {
          if (b.addEventListener) {
            b.addEventListener(
              "load",
              function () {
                o.cb();
              },
              false
            );
          } else {
            b.onreadystatechange = function () {
              if (
                this.readyState === "complete" ||
                this.readyState === "loaded"
              ) {
                this.onreadystatechange = null;
                o.cb();
              }
            };
          }
        }
        l = o.loc || "head";
        c = a.getElementsByTagName(l)[0];
        if (c) {
          utag.DB("Attach to " + l + ": " + o.src);
          if (l === "script") {
            c.parentNode.insertBefore(b, c);
          } else {
            c.appendChild(b);
          }
        }
      };
    } else {
      u.loader = utag.ut.loader;
    }
    u.ev = { view: 1, link: 1 };
    u.initialized = false;
    u.map = {
      "dom.url": "content_url",
      site_section: "content_category",
      page_name: "content_title",
      _sm_450_4: "tag",
      restaurant_order_id: "order_id",
      restaurant_unit_price: "product_price",
      restaurant_name: "product_id",
      restaurant_guest_quantity: "product_quantity",
      customer_email: "email",
      "va.properties.5808": "email",
      "cp.utag_main_sc_eh": "emarsys_emailhash",
      reservation_order_id: "order_id",
      reservation_room_rate_code: "product_id",
      reservation_order_subtotal: "product_price",
      reservation_room_num_nights: "product_quantity",
      entertainment_order_id: "order_id",
      entertainment_product_name: "product_id",
      entertainment_ticket_unit_price_without_fees: "product_price",
      entertainment_ticket_quantity: "product_quantity",
    };
    u.extend = [
      function (a, b) {
        try {
          b["_sm_450_4"] = "content_pageview";
        } catch (e) {
          utag.DB(e);
        }
      },
    ];
    u.send = function (a, b) {
      if (u.ev[a] || u.ev.all !== undefined) {
        var c, d, e, f, i;
        u.data = {
          emarsys_emaiulhash: "",
          content_category: "",
          content_url: "",
          content_title: "",
          order_id: "",
          product_price: "",
          product_quantity: "",
          product_id: "",
        };
        for (c = 0; c < u.extend.length; c++) {
          try {
            d = u.extend[c](a, b);
            if (d == false) return;
          } catch (e) {}
        }
        for (d in utag.loader.GV(u.map)) {
          if (b[d] !== undefined && b[d] !== "") {
            e = u.map[d].split(",");
            for (f = 0; f < e.length; f++) {
              u.data[e[f]] = b[d];
            }
          }
        }
        var send_go_command = "false";
        if (b["ut.event"] == "view") {
          ScarabQueue.push(["view", "dummy_item"]);
          send_go_command = "true";
          if (u.data.email) {
            ScarabQueue.push(["setEmail", u.data.email]);
            send_go_command = "true";
          } else if (u.data.emarsys_emailhash) {
            ScarabQueue.push(["setEmailHash", u.data.emarsys_emailhash]);
            send_go_command = "true";
          }
        }
        if (u.data.content_category) {
          ScarabQueue.push([
            "tag",
            u.data.tag,
            {
              content_category: u.data.content_category,
              content_url: u.data.content_url,
              content_title: u.data.content_title,
            },
          ]);
          send_go_command = "true";
        }
        if (u.data.order_id) {
          if (u.data.product_id) {
            u.data.item = [];
            var temp = {};
            if (
              typeof u.data.product_id == "string" ||
              u.data.product_id.length == 1
            ) {
              var temp_price = u.data.product_price;
              var temp_quantity = u.data.product_quantity;
              temp = {
                item: u.data.product_id.toString(),
                price: parseFloat(temp_price.toString()),
                quantity: parseInt(temp_quantity.toString()),
              };
              u.data.item.push(temp);
            } else {
              for (i = 0; i < u.data.product_id.length; i++) {
                var temp_price = u.data.product_price[i];
                var temp_quantity = u.data.product_quantity[i];
                temp = {
                  item: u.data.product_id[i],
                  price: parseFloat(temp_price),
                  quantity: parseInt(temp_quantity),
                };
                u.data.item.push(temp);
              }
            }
          }
          ScarabQueue.push([
            "purchase",
            { orderId: u.data.order_id, items: u.data.item },
          ]);
          if (u.data.email) {
            ScarabQueue.push(["setEmail", u.data.email]);
          }
          send_go_command = "true";
        }
        if (send_go_command == "true") {
          ScarabQueue.push(["go"]);
        }
      }
    };
    utag.o[loader].loader.LOAD(id);
  })("450", "mbs.main");
} catch (error) {
  utag.DB(error);
}

//tealium universal tag - utag.507 ut4.0.202207210624, Copyright 2022 Tealium.com Inc. All Rights Reserved.
try {
  (function (id, loader) {
    var u = {};
    utag.o[loader].sender[id] = u;
    if (utag === undefined) {
      utag = {};
    }
    if (utag.ut === undefined) {
      utag.ut = {};
    }
    if (utag.ut.loader === undefined) {
      u.loader = function (o) {
        var a, b, c, l;
        a = document;
        if (o.type === "iframe") {
          b = a.createElement("iframe");
          b.setAttribute("height", "1");
          b.setAttribute("width", "1");
          b.setAttribute("style", "display:none");
          b.setAttribute("src", o.src);
        } else if (o.type === "img") {
          utag.DB("Attach img: " + o.src);
          b = new Image();
          b.src = o.src;
          return;
        } else {
          b = a.createElement("script");
          b.language = "javascript";
          b.type = "text/javascript";
          b.async = 1;
          b.charset = "utf-8";
          b.src = o.src;
        }
        if (o.id) {
          b.id = o.id;
        }
        if (typeof o.cb === "function") {
          if (b.addEventListener) {
            b.addEventListener(
              "load",
              function () {
                o.cb();
              },
              false
            );
          } else {
            b.onreadystatechange = function () {
              if (
                this.readyState === "complete" ||
                this.readyState === "loaded"
              ) {
                this.onreadystatechange = null;
                o.cb();
              }
            };
          }
        }
        l = o.loc || "head";
        c = a.getElementsByTagName(l)[0];
        if (c) {
          utag.DB("Attach to " + l + ": " + o.src);
          if (l === "script") {
            c.parentNode.insertBefore(b, c);
          } else {
            c.appendChild(b);
          }
        }
      };
    } else {
      u.loader = utag.ut.loader;
    }
    u.ev = { view: 1 };
    u.initialized = false;
    u.map = {};
    u.extend = [];
    u.send = function (a, b) {
      if (u.ev[a] || u.ev.all !== undefined) {
        var c, d, e, f, i;
        u.data = {};
        for (d in utag.loader.GV(u.map)) {
          if (b[d] !== undefined && b[d] !== "") {
            e = u.map[d].split(",");
            for (f = 0; f < e.length; f++) {
              u.data[e[f]] = b[d];
            }
          }
        }
        if (window.location.hostname == "www.marinabaysands.com") {
          window._monsido = window._monsido || {
            token: "D7Slaz18JO0mODzTah2Azg",
            statistics: {
              enabled: true,
              documentTracking: {
                enabled: true,
                documentCls: "monsido_download",
                documentIgnoreCls: "monsido_ignore_download",
                documentExt: ["pdf", "doc", "ppt", "docx", "pptx"],
              },
            },
          };
        } else if (window.location.hostname == "zh.marinabaysands.com") {
          window._monsido = window._monsido || {
            token: "TalRMYBGFRX1HChA6ehPiQ",
            statistics: {
              enabled: true,
              documentTracking: {
                enabled: true,
                documentCls: "monsido_download",
                documentIgnoreCls: "monsido_ignore_download",
                documentExt: ["pdf", "doc", "ppt", "docx", "pptx"],
              },
            },
          };
        } else if (window.location.hostname == "hk.marinabaysands.com") {
          window._monsido = window._monsido || {
            token: "84gDjrKI6LCwftnpnhcJng",
            statistics: {
              enabled: true,
              documentTracking: {
                enabled: true,
                documentCls: "monsido_download",
                documentIgnoreCls: "monsido_ignore_download",
                documentExt: ["pdf", "doc", "ppt", "docx", "pptx"],
              },
            },
          };
        } else if (window.location.hostname == "id.marinabaysands.com") {
          window._monsido = window._monsido || {
            token: "VJlffDab3svTWeP39AvUTg",
            statistics: {
              enabled: true,
              documentTracking: {
                enabled: true,
                documentCls: "monsido_download",
                documentIgnoreCls: "monsido_ignore_download",
                documentExt: ["pdf", "doc", "ppt", "docx", "pptx"],
              },
            },
          };
        } else if (window.location.hostname == "jp.marinabaysands.com") {
          window._monsido = window._monsido || {
            token: "AnTPokmARdBLs_dmTbI5cg",
            statistics: {
              enabled: true,
              documentTracking: {
                enabled: true,
                documentCls: "monsido_download",
                documentIgnoreCls: "monsido_ignore_download",
                documentExt: ["pdf", "doc", "ppt", "docx", "pptx"],
              },
            },
          };
        } else if (window.location.hostname == "ko.marinabaysands.com") {
          window._monsido = window._monsido || {
            token: "sNnLV3PoPoeKZCoTEG2PiQ",
            statistics: {
              enabled: true,
              documentTracking: {
                enabled: true,
                documentCls: "monsido_download",
                documentIgnoreCls: "monsido_ignore_download",
                documentExt: ["pdf", "doc", "ppt", "docx", "pptx"],
              },
            },
          };
        }
        if (!u.initialized) {
          u.loader({
            type: "script",
            src: "//app-script.monsido.com/v2/monsido-script.js",
            cb: u.loader_cb,
            loc: "script",
            id: "monsido",
          });
        } else {
          u.loader_cb();
        }
      }
    };
    utag.o[loader].loader.LOAD(id);
  })("507", "mbs.main");
} catch (error) {
  utag.DB(error);
}

//tealium universal tag - utag.509 ut4.0.202207210624, Copyright 2022 Tealium.com Inc. All Rights Reserved.
try {
  (function (id, loader) {
    var u = { id: id };
    utag.o[loader].sender[id] = u;
    if (utag.ut === undefined) {
      utag.ut = {};
    }
    var match = /ut\d\.(\d*)\..*/.exec(utag.cfg.v);
    if (utag.ut.loader === undefined || !match || parseInt(match[1]) < 41) {
      u.loader = function (o, a, b, c, l, m) {
        utag.DB(o);
        a = document;
        if (o.type == "iframe") {
          m = a.getElementById(o.id);
          if (m && m.tagName == "IFRAME") {
            b = m;
          } else {
            b = a.createElement("iframe");
          }
          o.attrs = o.attrs || {};
          utag.ut.merge(
            o.attrs,
            { height: "1", width: "1", style: "display:none" },
            0
          );
        } else if (o.type == "img") {
          utag.DB("Attach img: " + o.src);
          b = new Image();
        } else {
          b = a.createElement("script");
          b.language = "javascript";
          b.type = "text/javascript";
          b.async = 1;
          b.charset = "utf-8";
        }
        if (o.id) {
          b.id = o.id;
        }
        for (l in utag.loader.GV(o.attrs)) {
          b.setAttribute(l, o.attrs[l]);
        }
        b.setAttribute("src", o.src);
        if (typeof o.cb == "function") {
          if (b.addEventListener) {
            b.addEventListener(
              "load",
              function () {
                o.cb();
              },
              false
            );
          } else {
            b.onreadystatechange = function () {
              if (
                this.readyState == "complete" ||
                this.readyState == "loaded"
              ) {
                this.onreadystatechange = null;
                o.cb();
              }
            };
          }
        }
        if (o.type != "img" && !m) {
          l = o.loc || "head";
          c = a.getElementsByTagName(l)[0];
          if (c) {
            utag.DB("Attach to " + l + ": " + o.src);
            if (l == "script") {
              c.parentNode.insertBefore(b, c);
            } else {
              c.appendChild(b);
            }
          }
        }
      };
    } else {
      u.loader = utag.ut.loader;
    }
    if (utag.ut.typeOf === undefined) {
      u.typeOf = function (e) {
        return {}.toString
          .call(e)
          .match(/\s([a-zA-Z]+)/)[1]
          .toLowerCase();
      };
    } else {
      u.typeOf = utag.ut.typeOf;
    }
    u.ev = { view: 1, link: 1 };
    u.toBoolean = function (val) {
      val = val || "";
      return (
        val === true ||
        val.toLowerCase() === "true" ||
        val.toLowerCase() === "on"
      );
    };
    u.clearEmptyKeys = function (object) {
      for (var key in object) {
        if (object[key] === "" || object[key] === undefined) {
          delete object[key];
        }
      }
      return object;
    };
    u.isEmptyObject = function (o, a) {
      for (a in o) {
        if (utag.ut.hasOwn(o, a)) return false;
      }
      return true;
    };
    u.hasgtagjs = function () {
      window.gtagRename = window.gtagRename || "" || "gtag";
      if (utag.ut.gtagScriptRequested) {
        return true;
      }
      var i,
        s = document.getElementsByTagName("script");
      for (i = 0; i < s.length; i++) {
        if (
          s[i].src &&
          s[i].src.indexOf("gtag/js") >= 0 &&
          s[i].id &&
          s[i].id.indexOf("utag") > -1
        ) {
          return true;
        }
      }
      var data_layer_name = "" || "dataLayer";
      window[data_layer_name] = window[data_layer_name] || [];
      if (typeof window[window.gtagRename] !== "function") {
        window[window.gtagRename] = function () {
          window[data_layer_name].push(arguments);
        };
        var cross_track_domains = "";
        if (cross_track_domains !== "") {
          window[window.gtagRename]("set", "linker", {
            domains: cross_track_domains.split(","),
            accept_incoming: true,
          });
        }
        window[window.gtagRename]("js", new Date());
      }
      return false;
    };
    u.scriptrequested = u.hasgtagjs();
    u.o = window[window.gtagRename];
    u.map_func = function (arr, obj, item) {
      var i = arr.shift();
      obj[i] = obj[i] || {};
      if (arr.length > 0) {
        u.map_func(arr, obj[i], item);
      } else {
        obj[i] = item;
      }
    };
    u.sites = {
      ecomm: {
        required: ["prodid"],
        params: [
          "prodid",
          "pagetype",
          "totalvalue",
          "category",
          "pvalue",
          "quantity",
        ],
        valuerules: ["product", "cart", "purchase"],
      },
      hotel: {
        required: ["hotelid"],
        params: ["hotelid", "pagetype", "checkoutdate", "totalvalue"],
        valuerules: ["cart", "purchase"],
      },
      edu: { required: ["pid"], params: ["pid", "plocid", "pagetype"] },
      flight: {
        required: ["originid", "destid"],
        params: [
          "originid",
          "destid",
          "pagetype",
          "totalvalue",
          "startdate",
          "enddate",
        ],
        valuerules: ["cart", "purchase"],
      },
      hrental: {
        required: ["id"],
        params: ["id", "pagetype", "startdate", "enddate", "totalvalue"],
        valuerules: ["conversionintent", "conversion"],
      },
      job: {
        required: ["id"],
        params: ["id", "locid", "pagetype", "totalvalue"],
        valuerules: ["conversionintent", "conversion"],
      },
      local: {
        required: ["id"],
        params: ["id", "pagetype", "totalvalue"],
        valuerules: ["conversionintent", "conversion"],
      },
      listing: {
        required: ["id"],
        params: ["id", "pagetype", "totalvalue"],
        valuerules: ["conversionintent", "conversion"],
      },
      travel: {
        required: ["destid"],
        params: [
          "destid",
          "originid",
          "pagetype",
          "startdate",
          "enddate",
          "totalvalue",
        ],
        valuerules: ["conversionintent", "conversion"],
      },
      dynx: {
        required: ["itemid"],
        params: ["itemid", "itemid2", "pagetype", "totalvalue"],
        valuerules: ["conversionintent"],
      },
    };
    u.checkRequired = function (siteName, site) {
      var i,
        valid = false;
      if (!u.data[siteName]) {
        return valid;
      }
      for (i = 0; i < site.required.length; i++) {
        valid = u.data[siteName][site.required[i]] ? true : false;
      }
      return valid;
    };
    u.getValue = function (paramName, siteName, site) {
      var i;
      for (i = 0; i < site.valuerules.length; i++) {
        if (u.data.pagetype && u.data.pagetype === site.valuerules[i]) {
          return u.data[siteName][paramName] || u.data.order_subtotal;
        }
      }
    };
    u.getParams = function () {
      var siteName,
        g = {},
        i;
      for (siteName in u.sites) {
        var site = u.sites[siteName];
        if (!u.data[siteName]) {
          continue;
        }
        if (u.checkRequired(siteName, site)) {
          for (i = 0; i < site.params.length; i++) {
            if (site.params[i] === "totalvalue") {
              g[siteName + "_" + site.params[i]] = u.getValue(
                site.params[i],
                siteName,
                site
              );
            } else if (site.params[i] === "pagetype") {
              g[siteName + "_" + site.params[i]] = u.data.pagetype;
            } else {
              g[siteName + "_" + site.params[i]] =
                u.data[siteName][site.params[i]];
            }
          }
        }
      }
      return u.clearEmptyKeys(g);
    };
    u.getRemarketingItems = function () {
      var i,
        item = {},
        items = [],
        rmkt = u.data.rmkt,
        len = 0,
        verticalName,
        vertical,
        paramName;
      if (u.data.product_id.length > 0 && !rmkt.retail) {
        rmkt.retail = {};
        rmkt.retail.id = u.data.product_id;
      }
      for (verticalName in rmkt) {
        if (!u.isEmptyObject(rmkt[verticalName])) {
          vertical = rmkt[verticalName];
          if (
            verticalName.match(
              /retail|education|hotel_rental|jobs|local|real_estate|custom/i
            ) &&
            vertical.id
          ) {
            len = vertical.id.length;
          } else if (
            verticalName.match(/flights|travel/i) &&
            vertical.destination
          ) {
            len = vertical.destination.length;
          }
          for (i = 0; i < len; i++) {
            item = {};
            for (paramName in vertical) {
              if (vertical[paramName][i]) {
                item[paramName] = vertical[paramName][i];
              }
            }
            if (!u.isEmptyObject(item)) {
              item.google_business_vertical = verticalName;
              items.push(item);
            }
          }
        }
      }
      return items;
    };
    u.getItems = function (len) {
      var item = {},
        i,
        j,
        items = [],
        nextLoop = false;
      items = u.getRemarketingItems();
      if (u.data.conversion_label) {
        len = len || u.data.product_id.length;
        for (i = 0; i < len; i++) {
          item = {};
          for (j = 0; j < items.length; j++) {
            if (items[j].id === u.data.product_id[i]) {
              items[j].price = u.data.product_unit_price[i]
                ? u.data.product_unit_price[i]
                : "";
              items[j].quantity = u.data.product_quantity[i]
                ? u.data.product_quantity[i]
                : "";
              nextLoop = true;
              break;
            }
          }
          if (nextLoop) {
            nextLoop = false;
            continue;
          }
          item.id = u.data.product_id[i];
          item.price = u.data.product_unit_price[i]
            ? u.data.product_unit_price[i]
            : "";
          item.quantity = u.data.product_quantity[i]
            ? u.data.product_quantity[i]
            : "";
          items.push(item);
        }
      }
      return items;
    };
    u.map = {
      "va.badges.10421:true": "CA_LW_MBRC_WB_LAL_TIQ",
      "va.badges.10402:true": "LO_LW_MBRL_WB_LAL_TIQ",
    };
    u.extend = [];
    u.send = function (a, b) {
      if (u.ev[a] || u.ev.all !== undefined) {
        utag.DB("send:509");
        utag.DB(b);
        var c, d, e, f, h, i, j;
        u.data = {
          base_url: "https://www.googletagmanager.com/gtag/js",
          conversion_id: "AW-828621882",
          conversion_label: "",
          conversion_value: "",
          pagetype: "home",
          remarketing: "false",
          data_layer_name: "",
          product_id: [],
          product_category: [],
          product_quantity: [],
          product_unit_price: [],
          product_discount: [],
          rmkt: {},
          config: {},
          event_data: { items: [] },
          event: [],
          custom: {},
        };
        utag.DB("send:509:EXTENSIONS");
        utag.DB(b);
        c = [];
        for (d in utag.loader.GV(u.map)) {
          if (b[d] !== undefined && b[d] !== "") {
            e = u.map[d].split(",");
            for (f = 0; f < e.length; f++) {
              u.map_func(e[f].split("."), u.data, b[d]);
            }
          } else {
            h = d.split(":");
            if (h.length === 2 && b[h[0]] === h[1]) {
              if (u.map[d]) {
                u.data.event = u.data.event.concat(u.map[d].split(","));
              }
            }
          }
        }
        utag.DB("send:509:MAPPINGS");
        utag.DB(u.data);
        u.data.order_id = u.data.order_id || b._corder || "";
        u.data.order_subtotal =
          u.data.conversion_value ||
          u.data.order_subtotal ||
          b._csubtotal ||
          "";
        u.data.order_currency =
          u.data.conversion_currency ||
          u.data.order_currency ||
          b._ccurrency ||
          "";
        if (u.data.product_id.length === 0 && b._cprod !== undefined) {
          u.data.product_id = b._cprod.slice(0);
        }
        if (u.data.product_category.length === 0 && b._ccat !== undefined) {
          u.data.product_category = b._ccat.slice(0);
        }
        if (u.data.product_quantity.length === 0 && b._cquan !== undefined) {
          u.data.product_quantity = b._cquan.slice(0);
        }
        if (u.data.product_unit_price.length === 0 && b._cprice !== undefined) {
          u.data.product_unit_price = b._cprice.slice(0);
        }
        if (u.data.product_discount.length === 0 && b._cpdisc !== undefined) {
          u.data.product_discount = b._cpdisc.slice(0);
        }
        if (u.data.event.length === 0 && b._cevent !== undefined) {
          u.data.event =
            u.typeOf(b._cevent) === "array" ? b._cevent.slice(0) : [b._cevent];
        }
        if (
          typeof u.data.conversion_id === "string" &&
          u.data.conversion_id !== ""
        ) {
          u.data.conversion_id = u.data.conversion_id
            .replace(/\s/g, "")
            .split(",");
        }
        if (
          typeof u.data.conversion_label === "string" &&
          u.data.conversion_label !== ""
        ) {
          u.data.conversion_label = u.data.conversion_label
            .replace(/\s/g, "")
            .split(",");
        }
        if (
          typeof u.data.conversion_cookie_prefix === "string" &&
          u.data.conversion_cookie_prefix !== ""
        ) {
          u.data.conversion_cookie_prefix = u.data.conversion_cookie_prefix
            .replace(/\s/g, "")
            .split(",");
        }
        if (u.data.order_currency !== u.data.order_currency.toUpperCase()) {
          u.data.order_currency = u.data.order_currency.toUpperCase();
          utag.DB(
            "Currency not supplied in uppercase - automatically converting"
          );
        }
        if (!u.data.conversion_id) {
          utag.DB(u.id + ": Tag not fired: Required attribute not populated");
          return;
        }
        if (u.data.gtag_enable_tcf_support) {
          window["gtag_enable_tcf_support"] = u.toBoolean(
            u.data.gtag_enable_tcf_support
          );
        }
        u.o("set", { "developer_id.dYmQxMT": true });
        for (i = 0; i < u.data.conversion_id.length; i++) {
          if (!/^[a-zA-Z]{2}-/.test(u.data.conversion_id[i])) {
            u.data.conversion_id[i] = "AW-" + u.data.conversion_id[i];
          }
        }
        u.data.base_url += "?id=" + u.data.conversion_id[0];
        if (u.data.data_layer_name) {
          u.data.base_url = u.data.base_url + "&l=" + u.data.data_layer_name;
        }
        for (i = 0; i < u.data.conversion_id.length; i++) {
          if (
            u.data.conversion_cookie_prefix &&
            u.data.conversion_cookie_prefix[i]
          ) {
            u.data.config.conversion_cookie_prefix =
              u.data.conversion_cookie_prefix[i];
          }
          u.o("config", u.data.conversion_id[i], u.data.config);
        }
        u.data.event_data = u.getParams();
        u.data.event_data.items = u.getItems();
        utag.ut.merge(u.data.event_data, u.data.custom, 1);
        if (u.data.conversion_label) {
          u.data.event_data.send_to = [];
          for (i = 0; i < u.data.conversion_id.length; i++) {
            u.data.event_data.send_to.push(
              u.data.conversion_id[i] +
                "/" +
                (u.data.conversion_label[i] || u.data.conversion_label[0])
            );
          }
          if (u.data.order_subtotal) {
            u.data.event_data.value = u.data.order_subtotal;
            u.data.event_data.currency = u.data.order_currency;
            u.data.event_data.transaction_id = u.data.order_id;
          }
          u.data.event_data.aw_merchant_id = u.data.aw_merchant_id;
          u.data.event_data.aw_feed_country = u.data.aw_feed_country;
          u.data.event_data.aw_feed_language = u.data.aw_feed_language;
          u.data.event_data.discount = 0;
          for (j = 0; j < u.data.product_discount.length; j++) {
            u.data.event_data.discount += isNaN(
              parseFloat(u.data.product_discount[j])
            )
              ? 0
              : parseFloat(u.data.product_discount[j]);
          }
          var containsConversion = false;
          for (i = 0; i < u.data.event.length; i++) {
            if (
              u.data.event[i] === "conversion" ||
              u.data.event[i] === "purchase"
            ) {
              containsConversion = true;
            }
          }
          if (!containsConversion && !u.data.event.length) {
            u.data.event.push("conversion");
          }
        }
        if (u.toBoolean(u.data.remarketing)) {
          if (!u.data.event.length) {
            u.data.event_data.send_to = u.data.conversion_id;
            u.data.event.push("page_view");
          }
        }
        for (i = 0; i < u.data.event.length; i++) {
          u.o("event", u.data.event[i], u.clearEmptyKeys(u.data.event_data));
        }
        if (!u.hasgtagjs()) {
          u.scriptrequested = true;
          utag.ut.gtagScriptRequested = true;
          u.loader({
            type: "script",
            src: u.data.base_url,
            cb: null,
            loc: "script",
            id: "utag_509",
            attrs: {},
          });
        }
        utag.DB("send:509:COMPLETE");
      }
    };
    utag.o[loader].loader.LOAD(id);
  })("509", "mbs.main");
} catch (error) {
  utag.DB(error);
}

//tealium universal tag - utag.530 ut4.0.202207210624, Copyright 2022 Tealium.com Inc. All Rights Reserved.
try {
  (function (id, loader) {
    var u = { id: id };
    utag.o[loader].sender[id] = u;
    u.ev = { view: 1, link: 1 };
    u.map = {
      currency: "order_currency",
      room_type: "product_id",
      avg_room_rate: "product_unit_price",
      hotel_offer_code: "product_name",
      entertainment_ticket_type: "product_variant",
      entertainment_ticket_show_name: "product_name",
      restaurant_unit_price: "product_unit_price",
      restaurant_name: "product_name",
      restaurant_guest_quantity: "product_quantity",
      hm_finalURL: "config.page_location",
      hm_baseID: "customer_id",
      restaurant_category: "product_category",
      restaurant_order_id: "order_id",
      restaurant_time_category: "product_id",
      entertainment_order_id: "order_id",
      entertainment_order_total: "order_total",
      entertainment_ticket_category: "product_category",
      entertainment_ticket_price: "product_unit_price",
      entertainment_ticket_id: "product_id",
      reservation_order_id: "order_id",
      reservation_order_affiliation: "product_affiliation",
      reservation_order_tax_amount: "order_tax",
      reservation_order_total: "order_total",
      reservation_order_subtotal: "order_total",
      reservation_room_category: "product_category",
      reservation_room_num_nights: "product_index",
      tealium_event: "add_to_cart.add",
      checkout_step: "begin_checkout.check_out",
      product_id: "product_id",
      product_name: "product_name",
      product_unit_price: "product_unit_price",
      product_category: "product_category",
      restaurant_order_subtotal: "order_total",
      restaurant_revenue: "order_total",
      entertainment_ticket_unit_price_without_fees: "product_unit_price",
      entertainment_product_name: "product_name",
      entertainment_order_total_with_fees: "order_total",
      entertainment_product_id: "product_id",
      entertainment_ticket_unit_price_with_fees: "product_unit_price",
      entertainment_order_total_without_fees: "order_total",
      ga_product_brand: "product_brand",
      merchandise_product_id: "product_id",
      merchandise_promo_name: "order_coupon_code",
      merchandise_product_quantity: "product_quantity",
      merchandise_product_unit_price: "product_unit_price",
      merchandise_order_subtotal_aft_discount: "order_total",
      merchandise_order_delivery_fee: "order_shipping",
      merchandise_order_id: "order_id",
      merchandise_product_type: "product_variant",
      hotel_order_id_individual: "order_id",
      hotel_subtotal_individual: "order_total",
      hotel_tax_individual: "order_tax",
      hotel_order_rate_code: "product_name",
      event_category: "event.event_category",
      event_action: "event.event_action",
      event_label: "event.event_label",
    };
    u.extend = [
      function (a, b) {
        try {
          if (
            b["dom.url"].toString().indexOf("marinabaysands.com/booking") > -1
          ) {
            if (Array.isArray(b.hotel_order_id) && !b.hotel_order_id.length) {
              b.hotel_order_id = "";
            }
          }
        } catch (e) {
          utag.DB(e);
        }
      },
      function (a, b) {
        try {
          if (1) {
            if (b["ga_page_override"] == "abort") {
              return false;
            }
          }
        } catch (e) {
          utag.DB(e);
        }
      },
      function (a, b) {
        try {
          if (
            b["dom.url"]
              .toString()
              .indexOf("/sands-rewards-lifestyle/signup-successful.aspx") > -1
          ) {
            b["domain_pathname"] =
              "/sands-rewards-lifestyle/signup-successful.aspx";
            b["dom.pathname"] =
              "/sands-rewards-lifestyle/signup-successful.aspx";
            b["ga_page_override"] =
              "/sands-rewards-lifestyle/signup-successful.aspx";
            b["dom.url"] = "/sands-rewards-lifestyle/signup-successful.aspx";
          }
        } catch (e) {
          utag.DB(e);
        }
      },
      function (a, b) {
        try {
          if (b["dom.url"].toString().indexOf("/mbs/patron/register") > -1) {
            b["domain_pathname"] =
              "ticket.marinabaysands.com/mbs/patron/register";
            b["dom.pathname"] = "/mbs/patron/register";
            b["ga_page_override"] = "/mbs/patron/register";
            b["dom.url"] = "ticket.marinabaysands.com/mbs/patron/register";
          }
        } catch (e) {
          utag.DB(e);
        }
      },
      function (a, b) {
        try {
          if (
            (b["tealium_event"]
              .toString()
              .toLowerCase()
              .indexOf("merchandise".toLowerCase()) > -1 &&
              typeof b["restaurant_name"] != "undefined" &&
              b["restaurant_name"] != "") ||
            (b["product_category"]
              .toString()
              .toLowerCase()
              .indexOf("merchandise".toLowerCase()) > -1 &&
              typeof b["restaurant_name"] != "undefined" &&
              b["restaurant_name"] != "") ||
            typeof b["product_category"] != "undefined"
          ) {
            if (
              typeof b["product_category"] == "string" &&
              b["product_category"] != "merchandise"
            ) {
              var product_category = [];
              product_category[0] = b["product_category"];
              b["product_category"] = product_category;
            }
            if (
              typeof b["restaurant_name"] == "string" &&
              typeof b["merchandise_product_name"] != "undefined"
            ) {
              var product_brand = [];
              for (var i = 0; i < b["merchandise_product_name"].length; i++) {
                product_brand[i] = b["restaurant_name"];
              }
              b["ga_product_brand"] = product_brand;
            }
            if (
              typeof b["product_category"] == "string" &&
              typeof b["merchandise_product_name"] != "undefined"
            ) {
              var product_category = [];
              for (var i = 0; i < b["merchandise_product_name"].length; i++) {
                product_category[i] = b["product_category"];
              }
              b["product_category"] = product_category;
            }
          }
        } catch (e) {
          utag.DB(e);
        }
      },
    ];
    u.send = function (utag_event, data_layer) {
      if (u.ev[utag_event] || u.ev.all !== undefined) {
        utag.DB("send:530");
        utag.DB(data_layer);
        var a,
          b,
          c,
          d,
          i,
          j,
          has_purchase = false,
          prop;
        a = utag_event;
        b = data_layer;
        u.data = {
          base_url:
            "https://www.googletagmanager.com/gtag/js?id=##utag_measurement_id##",
          measurement_id: "G-47M9JPMEW4",
          clear_global_vars: "false",
          data_layer_name: "",
          send_page_view: "true",
          order_id: "",
          order_total: "",
          order_subtotal: "",
          order_shipping: "",
          order_tax: "",
          order_store: "",
          order_currency: "",
          order_coupon_code: "",
          product_id: [],
          product_name: [],
          product_brand: [],
          product_category: [],
          product_subcategory: [],
          product_addcategory3: [],
          product_addcategory4: [],
          product_addcategory5: [],
          product_quantity: [],
          product_unit_price: [],
          product_discount: [],
          product_coupon: [],
          product_variant: [],
          product_promotion_id: [],
          product_promotion_name: [],
          product_creative_name: [],
          product_creative_slot: [],
          product_location_id: [],
          product_index: [],
          product_item_list_name: [],
          product_item_list_id: [],
          product_affiliation: [],
          event_queue: [],
          config: {},
          set: { "developer_id.dYmQxMT": true, user_properties: {} },
          event: {},
          items: [],
        };
        for (c = 0; c < u.extend.length; c++) {
          try {
            d = u.extend[c](a, b);
            if (d == false) return;
          } catch (e) {}
        }
        utag.DB("send:530:EXTENSIONS");
        utag.DB(data_layer);
        for (var mapping_key in utag.loader.GV(u.map)) {
          if (
            data_layer[mapping_key] !== undefined &&
            data_layer[mapping_key] !== ""
          ) {
            var destinations = u.map[mapping_key].split(",");
            for (i = 0; i < destinations.length; i++) {
              mapFunc(
                destinations[i].split("."),
                u.data,
                data_layer[mapping_key]
              );
            }
          } else {
            var event_destinations = mapping_key.split(":");
            if (
              event_destinations.length === 2 &&
              data_layer[event_destinations[0]] === event_destinations[1]
            ) {
              if (u.map[mapping_key]) {
                u.data.event_queue = u.data.event_queue.concat(
                  u.map[mapping_key].split(",")
                );
              }
            }
          }
        }
        utag.DB("send:530:MAPPINGS");
        utag.DB(u.data);
        u.data.order_id = u.data.order_id || data_layer._corder || "";
        u.data.order_total = u.data.order_total || data_layer._ctotal || "";
        u.data.order_shipping =
          u.data.order_shipping || data_layer._cship || "";
        u.data.order_tax = u.data.order_tax || data_layer._ctax || "";
        u.data.order_store = u.data.order_store || data_layer._cstore || "";
        u.data.order_currency =
          u.data.order_currency || data_layer._ccurrency || "";
        u.data.order_coupon_code =
          u.data.order_coupon_code || data_layer._cpromo || "";
        u.data.customer_id = u.data.customer_id || data_layer._ccustid || "";
        u.data.customer_city = u.data.customer_city || data_layer._ccity || "";
        u.data.customer_state =
          u.data.customer_state || data_layer._cstate || "";
        u.data.customer_zip = u.data.customer_zip || data_layer._czip || "";
        u.data.customer_country =
          u.data.customer_country || data_layer._ccountry || "";
        if (u.data.product_id.length === 0 && data_layer._cprod !== undefined) {
          u.data.product_id = data_layer._cprod.slice(0);
        }
        if (
          u.data.product_name.length === 0 &&
          data_layer._cprodname !== undefined
        ) {
          u.data.product_name = data_layer._cprodname.slice(0);
        }
        if (
          u.data.product_brand.length === 0 &&
          data_layer._cbrand !== undefined
        ) {
          u.data.product_brand = data_layer._cbrand.slice(0);
        }
        if (
          u.data.product_category.length === 0 &&
          data_layer._ccat !== undefined
        ) {
          u.data.product_category = data_layer._ccat.slice(0);
        }
        if (
          u.data.product_subcategory.length === 0 &&
          data_layer._ccat2 !== undefined
        ) {
          u.data.product_subcategory = data_layer._ccat2.slice(0);
        }
        if (
          u.data.product_quantity.length === 0 &&
          data_layer._cquan !== undefined
        ) {
          u.data.product_quantity = data_layer._cquan.slice(0);
        }
        if (
          u.data.product_unit_price.length === 0 &&
          data_layer._cprice !== undefined
        ) {
          u.data.product_unit_price = data_layer._cprice.slice(0);
        }
        if (
          u.data.product_discount.length === 0 &&
          data_layer._cpdisc !== undefined
        ) {
          u.data.product_discount = data_layer._cpdisc.slice(0);
        }
        if (
          utag.ut.typeOf(u.data.measurement_id) === "string" &&
          u.data.measurement_id !== ""
        ) {
          u.data.measurement_id = u.data.measurement_id
            .replace(/\s/g, "")
            .split(",");
        }
        if (u.data.data_layer_name) {
          u.data.base_url = u.data.base_url + "&l=" + u.data.data_layer_name;
        }
        if (!u.data.measurement_id) {
          utag.DB(
            u.id +
              ": Tag not fired: Required attribute measurement_id not populated"
          );
          return;
        }
        if (u.data.gtag_enable_tcf_support) {
          window["gtag_enable_tcf_support"] = toBoolean(
            u.data.gtag_enable_tcf_support
          );
        }
        var utmParams = [
          "utm_source",
          "utm_medium",
          "utm_campaign",
          "utm_term",
          "utm_content",
        ];
        var utmPageLocation =
          u.data.config.page_location || data_layer["dom.url"];
        var utmQuery = [];
        utmParams.forEach(function (paramName) {
          if (
            u.data[paramName] &&
            utmPageLocation.indexOf(paramName + "=") === -1
          ) {
            utmQuery.push(paramName + "=" + u.data[paramName]);
          }
        });
        if (utmQuery.length) {
          u.data.config.page_location =
            utmPageLocation.indexOf("?") === -1
              ? utmPageLocation + "?" + utmQuery.join("&")
              : utmPageLocation + "&" + utmQuery.join("&");
        }
        u.data.event.send_to = u.data.event.send_to || u.data.measurement_id;
        if (u.data.customer_id) {
          u.data.config.user_id = u.data.customer_id;
        }
        if (toBoolean(u.data.clear_global_vars)) {
          setGlobalProperties(u.data.config, true);
          for (prop in utag.loader.GV(u.data.set)) {
            if (prop !== "developer_id.dYmQxMT") {
              setGlobalProperties(u.data.set, true, prop);
            }
          }
        }
        setGlobalProperties(u.data.config, false);
        setGlobalProperties(u.data.set, false);
        if (u.data.config.send_page_view !== undefined) {
          u.data.send_page_view = toBoolean(u.data.config.send_page_view);
        }
        if (!u.initialized && toBoolean(u.data.send_page_view)) {
          u.data.event_queue.unshift("page_view");
        }
        u.data.config.send_page_view = false;
        for (i = 0; i < u.data.measurement_id.length; i++) {
          if (!/^[a-zA-Z]{1}-|^[a-zA-Z]{2}-/.test(u.data.measurement_id[i])) {
            u.data.measurement_id[i] = "G-" + u.data.measurement_id[i];
          }
          u.o("config", u.data.measurement_id[i], u.data.config);
        }
        u.initialized = true;
        for (i = 0; i < u.data.event_queue.length; i++) {
          if (
            u.data.event_queue[i] === "purchase" ||
            u.data.event_queue[i] === "refund"
          ) {
            has_purchase = true;
          }
        }
        if (u.data.order_id && !has_purchase) {
          u.data.event_queue.push("purchase");
        }
        for (i = 0; i < u.data.event_queue.length; i++) {
          var event_name = u.data.event_queue[i];
          var event_data = {};
          event_data = JSON.parse(JSON.stringify(u.data.event));
          if (u.data.event.non_interaction) {
            u.data.event.non_interaction = true;
          }
          if (u.event_map[event_name]) {
            for (j = 0; j < u.event_map[event_name].length; j++) {
              var event_param = u.event_map[event_name][j];
              var event_param_value = u.std_params[event_param]
                ? u.std_params[event_param](event_name)
                : u.data[event_param] || "";
              if (event_param_value !== "") {
                event_data[event_param] = event_param_value;
              }
            }
          }
          Object.keys(u.map).forEach(function (mapping_from) {
            if (
              u.map[mapping_from].indexOf(event_name) === 0 &&
              typeof b[mapping_from] !== "undefined"
            ) {
              var mapping_to = u.map[mapping_from].substring(
                event_name.length + 1
              );
              event_data[mapping_to] = b[mapping_from];
            }
          });
          utag.ut.merge(event_data, u.data[event_name], 0);
          u.o("event", event_name, event_data);
        }
        if (!hasgtagjs()) {
          u.scriptrequested = true;
          utag.ut.gtagScriptRequested = true;
          u.data.base_url = u.data.base_url.replace(
            "##utag_measurement_id##",
            u.data.measurement_id[0]
          );
          utag.ut.loader({
            type: "script",
            src: u.data.base_url,
            cb: null,
            loc: "script",
            id: "utag_530",
            attrs: {},
          });
        }
        utag.DB("send:530:COMPLETE");
      }
    };
    function mapFunc(arr, obj, item) {
      var i = arr.shift();
      obj[i] = obj[i] || {};
      if (arr.length > 0) {
        mapFunc(arr, obj[i], item);
      } else {
        obj[i] = item;
      }
    }
    function toBoolean(val) {
      val = val || "";
      return (
        val === true ||
        val.toLowerCase() === "true" ||
        val.toLowerCase() === "on"
      );
    }
    function hasgtagjs() {
      window.gtagRename = window.gtagRename || "" || "gtag";
      if (utag.ut.gtagScriptRequested) {
        return true;
      }
      var i,
        s = document.getElementsByTagName("script");
      for (i = 0; i < s.length; i++) {
        if (
          s[i].src &&
          s[i].src.indexOf("gtag/js") >= 0 &&
          s[i].id &&
          s[i].id.indexOf("utag") > -1
        ) {
          return true;
        }
      }
      var data_layer_name = "" || "dataLayer";
      window[data_layer_name] = window[data_layer_name] || [];
      if (typeof window[window.gtagRename] !== "function") {
        window[window.gtagRename] = function () {
          window[data_layer_name].push(arguments);
        };
        var cross_track = toBoolean(""),
          cross_track_domains = "";
        if (cross_track && cross_track_domains !== "") {
          window[window.gtagRename]("set", "linker", {
            domains: cross_track_domains.split(","),
            accept_incoming: true,
          });
        }
        window[window.gtagRename]("js", new Date());
      }
      return false;
    }
    u.scriptrequested = hasgtagjs();
    u.initialized = false;
    u.o = window[window.gtagRename];
    function setGlobalProperties(data, reset, custom_property) {
      var map = {
          user_id: { name: "user_id", type: "exists", reset: true },
          page_path: { name: "page_path", type: "exists", reset: true },
          page_title: { name: "page_title", type: "exists", reset: true },
          page_location: {
            name: "page_location",
            type: "exists",
            reset: false,
          },
          "developer_id.dYmQxMT": {
            name: "developer_id.dYmQxMT",
            type: "exists",
            reset: false,
          },
          user_properties: {
            name: "user_properties",
            type: "object",
            reset: true,
          },
        },
        prop,
        subProp,
        g = {};
      if (custom_property && reset) {
        g[custom_property] = "";
      }
      for (prop in utag.loader.GV(map)) {
        if (reset && map[prop].reset) {
          if (map[prop].name === "user_properties") {
            for (subProp in data[prop]) {
              if (!g[map[prop].name]) {
                g[map[prop].name] = {};
              }
              g[map[prop].name][subProp] = "";
            }
          } else {
            g[map[prop].name] = "";
          }
        } else {
          if (map[prop].type === "bool") {
            if (data[prop] == true || data[prop] === "true") {
              g[map[prop].name] = true;
            }
          } else if (
            map[prop].type === "exists" ||
            map[prop].type === "object"
          ) {
            if (data[prop]) {
              g[map[prop].name] = data[prop];
            }
          }
        }
      }
      if (!utag.ut.isEmptyObject(g)) {
        u.o("set", g);
      }
    }
    function getItems(length) {
      var g = {},
        i,
        items = [];
      length = length || u.data.product_id.length || u.data.product_name.length;
      for (i = 0; i < length; i++) {
        g = {};
        g.item_id = u.data.product_id[i];
        if (u.data.product_name[i]) {
          g.item_name = u.data.product_name[i];
        }
        if (u.data.product_coupon[i]) {
          g.coupon = u.data.product_coupon[i];
        }
        if (u.data.product_discount[i]) {
          g.discount = u.data.product_discount[i];
        }
        if (u.data.product_affiliation[i]) {
          g.affiliation = u.data.product_affiliation[i];
        }
        if (u.data.product_brand[i]) {
          g.item_brand = u.data.product_brand[i];
        }
        if (u.data.product_category[i]) {
          g.item_category = u.data.product_category[i];
        }
        if (u.data.product_subcategory[i]) {
          g.item_category2 = u.data.product_subcategory[i];
        }
        if (u.data.product_addcategory3[i]) {
          g.item_category3 = u.data.product_addcategory3[i];
        }
        if (u.data.product_addcategory4[i]) {
          g.item_category4 = u.data.product_addcategory4[i];
        }
        if (u.data.product_addcategory5[i]) {
          g.item_category5 = u.data.product_addcategory5[i];
        }
        if (u.data.product_variant[i]) {
          g.item_variant = u.data.product_variant[i];
        }
        if (u.data.product_unit_price[i]) {
          g.price = u.data.product_unit_price[i];
        }
        if (u.data.order_currency) {
          g.currency = u.data.order_currency;
        }
        if (u.data.product_quantity[i]) {
          g.quantity = u.data.product_quantity[i];
        }
        if (u.data.product_promotion_id[i]) {
          g.promotion_id = u.data.product_promotion_id[i];
        }
        if (u.data.product_promotion_name[i]) {
          g.promotion_name = u.data.product_promotion_name[i];
        }
        if (u.data.product_creative_name[i]) {
          g.creative_name = u.data.product_creative_name[i];
        }
        if (u.data.product_creative_slot[i]) {
          g.creative_slot = u.data.product_creative_slot[i];
        }
        if (u.data.product_location_id[i]) {
          g.location_id = u.data.product_location_id[i];
        }
        if (u.data.product_index[i]) {
          g.index = u.data.product_index[i];
        }
        if (u.data.product_item_list_name[i]) {
          g.item_list_name = u.data.product_item_list_name[i];
        }
        if (u.data.product_item_list_id[i]) {
          g.item_list_id = u.data.product_item_list_id[i];
        }
        items.push(g);
      }
      return items;
    }
    u.event_map = {
      add_payment_info: [
        "coupon",
        "currency",
        "items",
        "payment_type",
        "value",
      ],
      add_shipping_info: [
        "coupon",
        "currency",
        "items",
        "shipping_tier",
        "value",
      ],
      add_to_cart: ["currency", "items", "value"],
      add_to_wishlist: ["currency", "items", "value"],
      begin_checkout: ["coupon", "currency", "items", "value"],
      earn_virtual_currency: ["virtual_currency_name", "value"],
      generate_lead: ["currency", "value"],
      join_group: ["group_id"],
      level_end: ["level_name", "success"],
      level_start: ["level_name"],
      level_up: ["level", "character"],
      login: ["method"],
      post_score: ["score", "level", "character"],
      purchase: [
        "affiliation",
        "coupon",
        "currency",
        "items",
        "transaction_id",
        "shipping",
        "tax",
        "value",
      ],
      refund: [
        "affiliation",
        "coupon",
        "currency",
        "items",
        "transaction_id",
        "shipping",
        "tax",
        "value",
      ],
      remove_from_cart: ["currency", "items", "value"],
      search: ["search_term"],
      select_content: ["content_type", "item_id"],
      select_item: ["items", "item_list_name", "item_list_id"],
      select_promotion: ["items", "location_id"],
      share: ["method", "content_type", "content_id"],
      sign_up: ["method"],
      spend_virtual_currency: ["item_name", "virtual_currency_name", "value"],
      tutorial_begin: [],
      tutorial_complete: [],
      unlock_achievement: ["achievement_id"],
      view_cart: ["currency", "items", "value"],
      view_item: ["currency", "items", "value"],
      view_item_list: ["items", "item_list_name", "item_list_id"],
      view_promotion: ["items", "location_id"],
      exception: ["description", "fatal"],
      screen_view: ["screen_name"],
    };
    u.std_params = {
      transaction_id: function () {
        return u.data.order_id;
      },
      affiliation: function () {
        return u.data.order_store;
      },
      value: function (event) {
        if (event.match(/timing_complete|virtual_currency/i)) {
          return u.data.value;
        }
        return u.data.order_total;
      },
      currency: function () {
        return u.data.order_currency;
      },
      tax: function () {
        return u.data.order_tax;
      },
      shipping: function () {
        return u.data.order_shipping;
      },
      coupon: function () {
        return u.data.order_coupon_code;
      },
      fatal: function () {
        return toBoolean(u.data.fatal);
      },
      items: function (event) {
        if (event.match(/view_item$|select_content/)) {
          return getItems(1);
        }
        return getItems();
      },
      item_id: function () {
        return u.data.product_id[0] ? u.data.product_id[0] : "";
      },
    };
    utag.o[loader].loader.LOAD(id);
  })("530", "mbs.main");
} catch (error) {
  utag.DB(error);
}

//tealium universal tag - utag.537 ut4.0.202207210624, Copyright 2022 Tealium.com Inc. All Rights Reserved.
try {
  (function (id, loader) {
    var u = {};
    utag.o[loader].sender[id] = u;
    if (utag.ut === undefined) {
      utag.ut = {};
    }
    if (utag.ut.loader === undefined) {
      u.loader = function (o) {
        var a, b, c, l;
        a = document;
        if (o.type === "iframe") {
          b = a.createElement("iframe");
          b.setAttribute("height", "1");
          b.setAttribute("width", "1");
          b.setAttribute("style", "display:none");
          b.setAttribute("src", o.src);
        } else if (o.type === "img") {
          utag.DB("Attach img: " + o.src);
          b = new Image();
          b.src = o.src;
          return;
        } else {
          b = a.createElement("script");
          b.language = "javascript";
          b.type = "text/javascript";
          b.async = 1;
          b.src = o.src;
        }
        if (o.id) {
          b.id = o.id;
        }
        if (typeof o.cb === "function") {
          b.hFlag = 0;
          b.onreadystatechange = function () {
            if (
              (this.readyState === "complete" ||
                this.readyState === "loaded") &&
              !b.hFlag
            ) {
              b.hFlag = 1;
              o.cb();
            }
          };
          b.onload = function () {
            if (!b.hFlag) {
              b.hFlag = 1;
              o.cb();
            }
          };
        }
        l = o.loc || "head";
        c = a.getElementsByTagName(l)[0];
        if (c) {
          utag.DB("Attach to " + l + ": " + o.src);
          if (l === "script") {
            c.parentNode.insertBefore(b, c);
          } else {
            c.appendChild(b);
          }
        }
      };
    } else {
      u.loader = utag.ut.loader;
    }
    u.ev = { view: 1, link: 1 };
    u.map = {
      "cp.utag_main_v_id": "u1",
      language_code: "u2",
      domain_pathname: "u3",
      page_type: "u4",
      page_name: "u5",
      page_category: "u6",
      page_sub_category: "u7",
      "va.current_visit.properties.46": "u8",
      "va.current_visit.properties.47": "u9",
      "va.current_visit.properties.44": "u10",
      "va.current_visit.properties.48": "u11",
      "va.current_visit.properties.45": "u12",
      "va.current_visit.properties.5": "u13",
      product_category: "u19",
      merchandise_product_type: "u60",
      merchandise_product_name: "u61",
      merchandise_product_total_quantity: "u62",
      merchandise_order_subtotal_aft_discount: "u63",
      merchandise_order_id: "u29,transaction_id",
    };
    u.extend = [];
    u.send = function (a, b) {
      if (u.ev[a] || u.ev.all !== undefined) {
        var c, d, e, f, g;
        u.data = {
          qsp_delim: ";",
          kvp_delim: "=",
          base_url: "",
          src: "8293333",
          type: "dealss",
          cat: "mbs_700",
          multicat: "",
          ord: "",
          cost: "",
          qty: 0,
          total_qty: 0,
          countertype: "standard",
          conversioncount: "single",
          order_id: "",
          order_subtotal: "",
          product_id: [],
          product_quantity: [],
          product_unit_price: [],
        };
        c = [];
        g = [];
        for (d in utag.loader.GV(u.map)) {
          if (b[d] !== undefined && b[d] !== "") {
            e = u.map[d].split(",");
            for (f = 0; f < e.length; f++) {
              if (
                /^(cat|multicat|type|src|cost|qty|countertype|conversioncount|ord|order_id|order_subtotal|product_id|product_quantity|product_unit_price)$/.test(
                  e[f]
                )
              ) {
                u.data[e[f]] = b[d];
              } else {
                u.data[e[f]] = b[d];
                g.push(e[f] + u.data.kvp_delim + encodeURIComponent(b[d]));
              }
            }
          }
        }
        u.data.order_id = u.data.order_id || u.data.ord || b._corder || "";
        u.data.order_subtotal =
          u.data.cost ||
          u.data.order_subtotal ||
          b._csubtotal ||
          b._ctotal ||
          "";
        if (u.data.product_id.length === 0 && b._cprod !== undefined) {
          u.data.product_id = b._cprod.slice(0);
        }
        if (
          (u.data.qty && u.data.qty.length > 0) ||
          (u.data.product_quantity.length === 0 && b._cquan !== undefined)
        ) {
          u.data.product_quantity = u.data.qty || b._cquan.slice(0);
        }
        if (u.data.product_unit_price.length === 0 && b._cprice !== undefined) {
          u.data.product_unit_price = b._cprice.slice(0);
        }
        u.data.base_url =
          "//" +
          u.data.src +
          ".fls.doubleclick.net/activityi;src=" +
          u.data.src +
          ";type=" +
          u.data.type +
          ";";
        if (u.data.multicat === "") {
          u.data.multicat_arr = [u.data.cat];
        } else {
          u.data.multicat_arr = u.data.multicat.split(";");
        }
        if (u.data.order_id) {
          if (
            u.data.conversioncount === "multi" &&
            u.data.product_quantity.length > 0
          ) {
            for (f = 0; f < u.data.product_quantity.length; f++) {
              u.data.total_qty += parseInt(u.data.product_quantity[f]);
            }
            u.data.qty = u.data.total_qty;
          } else {
            u.data.qty = 1;
          }
          var dc_fl_prd = [];
          for (var i = 0; i < u.data.product_id.length; i++) {
            var prod_num = i + 1;
            dc_fl_prd.push(
              "i" +
                prod_num +
                ":" +
                u.data.product_id[i] +
                "|p" +
                prod_num +
                ":" +
                u.data.product_unit_price[i] +
                "|q" +
                prod_num +
                ":" +
                u.data.product_quantity[i]
            );
          }
          u.prd = dc_fl_prd.join("|");
          if (u.prd) {
            c.push("prd=" + u.prd);
          }
          c.push("qty=" + u.data.qty);
          c.push("cost=" + u.data.order_subtotal);
          if (g.length > 0) {
            c.push(g.join(";"));
          }
          c.push("ord=" + u.data.order_id);
        } else if (u.data.countertype === "standard") {
          if (g.length > 0) {
            c.push(g.join(";"));
          }
          c.push("ord=" + Math.random() * 10000000000000);
        } else if (u.data.countertype === "unique") {
          if (g.length > 0) {
            c.push(g.join(";"));
          }
          c.push("ord=1");
          c.push("num=" + Math.random() * 10000000000000);
        } else {
          if (g.length > 0) {
            c.push(g.join(";"));
          }
          c.push(
            "ord=" +
              (u.data.order_id
                ? u.data.order_id
                : window.utag.data["cp.utag_main_ses_id"])
          );
        }
        for (f = 0; f < u.data.multicat_arr.length; f++) {
          u.loader({
            type: "iframe",
            src:
              u.data.base_url +
              "cat=" +
              u.data.multicat_arr[f] +
              (c.length > 0 ? ";" + c.join(u.data.qsp_delim) : "") +
              "?",
            loc: "body",
            id: "utag_537_iframe",
          });
        }
      }
    };
    utag.o[loader].loader.LOAD(id);
  })("537", "mbs.main");
} catch (error) {
  utag.DB(error);
}

//tealium universal tag - utag.550 ut4.0.202207210624, Copyright 2022 Tealium.com Inc. All Rights Reserved.
window.GoogleAnalyticsObject = "" || "ga";
window[window.GoogleAnalyticsObject] =
  window[window.GoogleAnalyticsObject] ||
  function () {
    (window[window.GoogleAnalyticsObject].q =
      window[window.GoogleAnalyticsObject].q || []).push(arguments);
  };
try {
  (function (id, loader) {
    var u = {};
    utag.o[loader].sender[id] = u;
    if (utag.ut === undefined) {
      utag.ut = {};
    }
    if (utag.ut.loader === undefined) {
      u.loader = function (o) {
        var a, b, c, l;
        a = document;
        if (o.type === "iframe") {
          b = a.createElement("iframe");
          b.setAttribute("height", "1");
          b.setAttribute("width", "1");
          b.setAttribute("style", "display:none");
          b.setAttribute("src", o.src);
        } else if (o.type === "img") {
          utag.DB("Attach img: " + o.src);
          b = new Image();
          b.src = o.src;
          return;
        } else {
          b = a.createElement("script");
          b.language = "javascript";
          b.type = "text/javascript";
          b.async = 1;
          b.src = o.src;
        }
        if (o.id) {
          b.id = o.id;
        }
        if (typeof o.cb === "function") {
          b.hFlag = 0;
          b.onreadystatechange = function () {
            if (
              (this.readyState === "complete" ||
                this.readyState === "loaded") &&
              !b.hFlag
            ) {
              b.hFlag = 1;
              o.cb();
            }
          };
          b.onload = function () {
            if (!b.hFlag) {
              b.hFlag = 1;
              o.cb();
            }
          };
        }
        l = o.loc || "head";
        c = a.getElementsByTagName(l)[0];
        if (c) {
          utag.DB("Attach to " + l + ": " + o.src);
          if (l === "script") {
            c.parentNode.insertBefore(b, c);
          } else {
            c.appendChild(b);
          }
        }
      };
    } else {
      u.loader = utag.ut.loader;
    }
    if (utag.ut.typeOf === undefined) {
      u.typeOf = function (e) {
        return {}.toString
          .call(e)
          .match(/\s([a-zA-Z]+)/)[1]
          .toLowerCase();
      };
    } else {
      u.typeOf = utag.ut.typeOf;
    }
    u.ev = { view: 1, link: 1 };
    u.o = window[window.GoogleAnalyticsObject];
    u.required = {};
    u.created = false;
    u.all = function (e, o, v, a, b, c) {
      for (var i = 0; i < u.data.account.length; i++) {
        var t = u.data.name[i] ? u.data.name[i] + "." : "";
        if (o === "event") {
          u.o(t + e, o, v, a, b, c);
        } else if (v !== undefined) {
          u.o(t + e, o, v);
        } else {
          u.o(t + e, o);
        }
      }
    };
    u.setHitData = function (g, a, b, f) {
      var obj = u.data[a];
      for (var d in utag.loader.GV(obj)) {
        if (
          b &&
          d.indexOf("enh_" + b + "-") !== 0 &&
          d.indexOf("enh_all-") !== 0
        ) {
          continue;
        }
        var idx = d.split("-")[1],
          val = obj[d];
        if (u.typeOf(val) !== "array") {
          g[idx] = val;
        } else {
          g[idx] = val[f];
        }
      }
    };
    u.addEvent = function (v) {
      if (
        typeof v.eventCategory == "undefined" ||
        typeof v.eventAction == "undefined"
      ) {
        utag.DB("GA event Category or Action is not set");
        return;
      }
      if (isNaN(parseInt(v.eventValue))) {
        utag.DB("GA event Value is not a number");
        v.eventValue = null;
      } else {
        v.eventValue = parseInt(v.eventValue) || null;
      }
      u.data.ga_events.push(v);
    };
    u.addproduct = function (event_type, len, imp) {
      var g = {},
        i,
        j,
        k = [];
      if (imp === true) {
        k = u.data.enh_impression_id.length
          ? u.data.enh_impression_id
          : u.data.enh_impression_name;
        for (i = 0; i < k.length; i++) {
          g = {};
          g.id = u.data.enh_impression_id[i] ? u.data.enh_impression_id[i] : "";
          g.name = u.data.enh_impression_name[i]
            ? u.data.enh_impression_name[i]
            : "";
          g.brand = u.data.enh_impression_brand[i]
            ? u.data.enh_impression_brand[i]
            : "";
          g.variant = u.data.enh_impression_variant[i]
            ? u.data.enh_impression_variant[i]
            : "";
          g.category = u.data.enh_impression_category[i]
            ? u.data.enh_impression_category[i]
            : "";
          g.list = u.data.enh_impression_list[i]
            ? u.data.enh_impression_list[i]
            : "";
          g.price = u.data.enh_impression_price[i]
            ? u.data.enh_impression_price[i]
            : "";
          g.position = u.data.enh_impression_position[i]
            ? u.data.enh_impression_position[i]
            : "";
          u.setHitData(g, "enhecom_events", event_type, i);
          u.all("ec:addImpression", g);
        }
      } else {
        for (i = 0; i < len; i++) {
          g = {};
          if (u.data.autofill_params === "true") {
            for (j = 0; j < u.data.product_id.length; j++) {
              u.data.product_name[j] =
                u.data.product_name[j] || u.data.product_id[j];
              u.data.product_unit_price[j] =
                u.data.product_unit_price[j] || "1.00";
              u.data.product_quantity[j] = u.data.product_quantity[j] || "1";
            }
          }
          g.id = u.data.product_id[i];
          g.name = u.data.product_name[i] ? u.data.product_name[i] : "";
          g.brand = u.data.product_brand[i] ? u.data.product_brand[i] : "";
          g.variant = u.data.product_variant[i]
            ? u.data.product_variant[i]
            : "";
          g.category = u.data.product_category[i]
            ? u.data.product_category[i]
            : "";
          g.price = u.data.product_unit_price[i]
            ? u.data.product_unit_price[i]
            : "";
          g.quantity = u.data.product_quantity[i]
            ? u.data.product_quantity[i]
            : "";
          g.coupon = u.data.product_discount[i]
            ? u.data.product_discount[i]
            : "";
          g.position = u.data.product_position[i]
            ? u.data.product_position[i]
            : "";
          u.setHitData(g, "enhecom_events", event_type, i);
          u.all("ec:addProduct", g);
        }
      }
    };
    u.addpromo = function (action, event) {
      var f, g;
      for (f = 0; f < u.data.enh_promo_id.length; f++) {
        g = {};
        g.id = u.data.enh_promo_id[f];
        g.name = u.data.enh_promo_name[f]
          ? u.data.enh_promo_name[f]
          : u.data.enh_promo_id[f];
        g.creative = u.data.enh_promo_creative[f]
          ? u.data.enh_promo_creative[f]
          : "";
        g.position = u.data.enh_promo_position[f]
          ? u.data.enh_promo_position[f]
          : "";
        u.all("ec:addPromo", g);
      }
      if (action === "promo_click" && event === "link") {
        u.all("ec:setAction", u.data.enh_action);
        if (u.data.autosend_events === "true") {
          u.all(
            "send",
            "event",
            "Internal Promotions",
            "click",
            g.name ? g.name : g.id,
            { hitCallback: u.data.enh_event_cb }
          );
        }
      }
    };
    u.createTracker = function () {
      var i, tn, start;
      if (u.typeOf(u.data.account) === "string") {
        u.data.account = u.data.account.replace(/\s/g, "").split(",");
      }
      if (u.typeOf(u.data.name) === "string" && u.data.name !== "") {
        u.data.name = u.data.name.replace(/\s/g, "").split(",");
      }
      if (!u.data.name || u.data.name.length !== u.data.account.length) {
        start =
          u.data.name.length !== u.data.account.length ? u.data.name.length : 0;
        tn = utag.tagsettings.gua.trackernames;
        u.data.name = u.data.name || [];
        for (i = start; i < u.data.account.length; i++) {
          u.data.name.push("tealium_" + (i + tn));
        }
        utag.tagsettings.gua.trackernames = tn + i;
      }
    };
    u.initTracker = function () {
      var c, f;
      if (!u.created) {
        u.created = true;
        for (f = 0; f < u.data.account.length; f++) {
          c = {};
          if (u.data.siteSpeedSampleRate) {
            c.siteSpeedSampleRate = parseInt(u.data.siteSpeedSampleRate);
          }
          if (u.data.sampleRate) {
            c.sampleRate = parseFloat(u.data.sampleRate);
          }
          c.cookieDomain = u.data.cookieDomain;
          if (u.data.cookieExpires || u.data.cookieExpires === "0") {
            c.cookieExpires = parseInt(u.data.cookieExpires);
          }
          if (u.data.legacyCookieDomain) {
            c.legacyCookieDomain = u.data.legacyCookieDomain;
          }
          if (
            u.data.legacyHistoryImport === "false" ||
            u.data.legacyHistoryImport === false
          ) {
            c.legacyHistoryImport = u.data.legacyHistoryImport;
          }
          c.allowLinker = u.data.allowLinker;
          if (typeof u.data.name[f] !== "undefined" && u.data.name[f] !== "") {
            c.name = u.data.name[f];
          }
          if (u.data.clientId) {
            c.clientId = u.data.clientId;
          }
          if (
            u.data.useAmpClientId === "true" ||
            u.data.useAmpClientId === true
          ) {
            c.useAmpClientId = u.data.useAmpClientId;
          }
          u.o("create", u.data.account[f], c);
        }
        if (u.data.global_event_cb) {
          u.all("set", "hitCallback", u.data.global_event_cb);
        }
        if (u.data.optimizely === "true") {
          window.optimizely = window.optimizely || [];
          window.optimizely.push(["activateUniversalAnalytics"]);
        }
      }
    };
    u.setGlobalProperties = function (data, reset, custom_property) {
      var map = {
          uid: { name: "&uid", type: "exists", reset: true },
          page: { name: "page", type: "exists", reset: true },
          title: { name: "title", type: "exists", reset: true },
          location: { name: "location", type: "exists", reset: false },
          campaignId: { name: "campaignId", type: "exists", reset: false },
          campaignName: { name: "campaignName", type: "exists", reset: false },
          campaignSource: {
            name: "campaignSource",
            type: "exists",
            reset: false,
          },
          campaignMedium: {
            name: "campaignMedium",
            type: "exists",
            reset: false,
          },
          campaignContent: {
            name: "campaignContent",
            type: "exists",
            reset: false,
          },
          campaignKeyword: {
            name: "campaignKeyword",
            type: "exists",
            reset: false,
          },
          dataSource: { name: "dataSource", type: "exists", reset: true },
        },
        prop;
      if (data.clear_global_vars === "true") {
        for (key in u.map) {
          if (
            u.map[key].match(/dimension|metric/) &&
            typeof data[key] === "undefined"
          ) {
            var item = u.map[key].split(",")[0];
            u.all("set", item, null);
          }
        }
      }
      if (custom_property && reset) {
        u.all("set", custom_property, "");
      }
      for (prop in utag.loader.GV(map)) {
        if (reset && map[prop].reset) {
          u.all("set", map[prop].name, "");
        } else {
          if (map[prop].type === "bool") {
            if (data[prop] == true || data[prop] === "true") {
              u.all("set", map[prop].name, true);
            }
          } else if (map[prop].type === "exists") {
            if (data[prop]) {
              u.all("set", map[prop].name, data[prop]);
            }
          }
        }
      }
    };
    window.utag.tagsettings = window.utag.tagsettings || {};
    window.utag.tagsettings.gua = window.utag.tagsettings.gua || {};
    window.utag.tagsettings.gua.trackernames =
      window.utag.tagsettings.gua.trackernames || 0;
    u.map = {
      page_name: "title",
      tealium_account: "pageview-dimension1",
      tealium_profile: "pageview-dimension2",
      tealium_library_version: "pageview-dimension3",
      "ut.env": "pageview-dimension4",
      language_code: "pageview-dimension6",
      login_status: "pageview-dimension8",
      num_of_rooms: "pageview-dimension18",
      num_of_adults: "pageview-dimension19",
      num_of_children: "pageview-dimension20",
      check_in_date: "pageview-dimension24",
      check_out_date: "pageview-dimension25",
      num_of_nights: "pageview-dimension26,product_quantity",
      hm_user_activity: "pageview-contentGroup1,pageview-dimension159",
      hm_product_service: "pageview-contentGroup2,pageview-dimension160",
      currency: "pageview-dimension29,currency",
      room_view_type: "pageview-dimension31",
      room_type: "pageview-dimension32,product_id",
      room_sub_type: "pageview-dimension33",
      room_code: "pageview-dimension34,pageview-dimension110",
      avg_room_rate: "pageview-dimension35,product_unit_price",
      reservation_room_name: "pageview-dimension37",
      bed_type: "pageview-dimension38",
      hotel_offer_code: "pageview-dimension39,product_name",
      hotel_offer_name: "pageview-dimension40",
      customer_country: "pageview-dimension42",
      error_message: "pageview-dimension48",
      entertainment_ticket_type: "pageview-dimension49,product_variant",
      entertainment_ticket_show_name: "pageview-dimension50,product_name",
      entertainment_ticket_date: "pageview-dimension52",
      entertainment_ticket_datetime: "pageview-dimension53",
      entertainment_ticket_quantity: "pageview-dimension54,product_quantity",
      entertainment_ticket_price_total: "pageview-dimension56",
      cuisines: "pageview-dimension57",
      restaurant_type: "pageview-dimension58",
      meal_type: "pageview-dimension59",
      restaurant_unit_price: "pageview-dimension60,product_unit_price",
      booking_no: "pageview-dimension63",
      restaurant_name: "pageview-dimension64,product_name",
      restaurant_dine_date: "pageview-dimension65",
      restaurant_guest_quantity: "pageview-dimension66,product_quantity",
      restaurant_dine_time: "pageview-dimension67",
      member_tier: "pageview-dimension82,pageview-dimension83",
      store_category: "pageview-dimension88",
      DY_ExperienceName: "pageview-dimension100",
      video_name: "pageview-dimension103",
      DY_TagName: "pageview-dimension104",
      DY_VariationName: "pageview-dimension105",
      days_till_checkin: "pageview-dimension107",
      hotel_arrival_time: "pageview-dimension108",
      foreign_avg_room_rate: "pageview-dimension109",
      page_category: "pageview-dimension112",
      domain_pathname: "pageview-dimension115",
      event_ui_element: "pageview-dimension117",
      object_class: "pageview-dimension118",
      check_in_day: "pageview-dimension134",
      check_out_day: "pageview-dimension135",
      occasion_preference: "pageview-dimension136",
      outlet_name: "pageview-dimension138",
      merchandise_order_discount: "pageview-dimension140",
      merchandise_product_total_quantity: "pageview-dimension141",
      merchandise_order_total: "pageview-dimension142",
      merchandise_product_name: "pageview-dimension140,product_name",
      merchandise_collection_date: "pageview-dimension145",
      merchandise_collection_time: "pageview-dimension146",
      merchandise_product_category: "pageview-dimension148",
      tealium_visitor_id: "pageview-dimension158",
      src_membership_id: "pageview-dimension80",
      srl_membership_id: "pageview-dimension81",
      hm_finalURL: "location",
      hm_finalQuery: "pageview-dimension181",
      hm_baseID: "pageview-dimension182,uid",
      reservation_room_date_checkin: "dimension24,enh_all-dimension183",
      reservation_room_date_checkout: "dimension25,enh_all-dimension157",
      order_promo_code: "dimension105",
      restaurant_category: "product_category",
      restaurant_order_id: "order_id",
      restaurant_time_category: "product_id",
      entertainment_order_id: "order_id",
      entertainment_order_total: "revenue",
      entertainment_ticket_category: "product_category",
      entertainment_ticket_price: "product_unit_price",
      entertainment_ticket_id: "product_id",
      reservation_order_id: "order_id",
      reservation_order_affiliation: "affiliation",
      reservation_order_tax_amount: "tax",
      reservation_order_subtotal: "revenue",
      reservation_order_total: "revenue",
      reservation_room_rate_code: "dimension55",
      reservation_room_category: "product_category",
      reservation_room_num_nights: "metric6,dimension101,product_quantity",
      metric4: "metric4",
      dimension10: "dimension53",
      metric1: "metric1",
      reservation_booking_method: "dimension65",
      reservation_room_rate_range: "dimension35",
      billing_info_views: "metric2",
      searches: "metric8",
      tealium_event: "enh_action",
      "tealium_event:addToCart": "add",
      checkout_step: "enh_checkout_step",
      search_type: "dimension104",
      booking_confirmations: "metric3",
      product_id: "product_id",
      product_name: "product_name",
      product_unit_price: "product_unit_price",
      suites_added: "metric5",
      metric7: "metric7",
      metric9: "metric9",
      upgrade_offer_accepted: "metric10",
      upgrade_offer_rate: "metric11",
      restaurant_order_subtotal: "revenue",
      restaurant_revenue: "revenue",
      product_category: "product_category",
      entertainment_ticket_unit_price_with_fee: "product_unit_price",
      entertainment_product_name: "product_name",
      entertainment_order_total_with_fees: "revenue,metric1",
      entertainment_price_class: "enh_all-dimension55,pageview-dimension55",
      entertainment_product_id: "product_id",
      entertainment_ticket_time: "dimension53,enh_all-dimension53",
      entertainment_ticket_unit_price_with_fees: "product_unit_price",
      entertainment_order_total_without_fees: "revenue",
      entertainment_ticket_unit_price_without_fees: "metric2,enh_all-metric2",
      entertainment_order_quantity: "enh_all-metric3,metric3",
      ga_product_brand: "product_brand",
      merchandise_product_id: "product_id",
      merchandise_promo_name: "coupon",
      merchandise_product_quantity: "product_quantity",
      merchandise_product_unit_price: "product_unit_price",
      merchandise_order_subtotal_aft_discount: "revenue",
      merchandise_order_delivery_fee: "shipping",
      merchandise_order_id: "order_id",
      merchandise_product_type: "product_variant",
      utm_campaign: "campaignName",
      utm_medium: "campaignMedium",
      utm_content: "campaignContent",
      utm_source: "campaignSource",
      utm_term: "campaignTerm",
      offer_name: "pageview-dimension40",
      hotel_order_id_individual: "order_id",
      hotel_subtotal_individual: "revenue",
      hotel_tax_individual: "tax",
      check_in: "dimension24",
      check_out: "dimension25",
      hotel_order_rate_code: "product_name",
      event_category: "eventCategory",
      event_action: "eventAction",
      event_label: "eventLabel",
      event_name: "eventCategory",
    };
    u.extend = [
      function (a, b) {
        try {
          if (
            b["dom.url"].toString().indexOf("marinabaysands.com/booking") > -1
          ) {
            if (Array.isArray(b.hotel_order_id) && !b.hotel_order_id.length) {
              b.hotel_order_id = "";
            }
          }
        } catch (e) {
          utag.DB(e);
        }
      },
      function (a, b) {
        try {
          if (1) {
            if (b["ga_page_override"] == "abort") {
              return false;
            }
          }
        } catch (e) {
          utag.DB(e);
        }
      },
      function (a, b) {
        try {
          if (
            b["dom.url"]
              .toString()
              .indexOf("/sands-rewards-lifestyle/signup-successful.aspx") > -1
          ) {
            b["domain_pathname"] =
              "/sands-rewards-lifestyle/signup-successful.aspx";
            b["dom.pathname"] =
              "/sands-rewards-lifestyle/signup-successful.aspx";
            b["ga_page_override"] =
              "/sands-rewards-lifestyle/signup-successful.aspx";
            b["dom.url"] = "/sands-rewards-lifestyle/signup-successful.aspx";
          }
        } catch (e) {
          utag.DB(e);
        }
      },
      function (a, b) {
        try {
          if (b["dom.url"].toString().indexOf("/mbs/patron/register") > -1) {
            b["domain_pathname"] =
              "ticket.marinabaysands.com/mbs/patron/register";
            b["dom.pathname"] = "/mbs/patron/register";
            b["ga_page_override"] = "/mbs/patron/register";
            b["dom.url"] = "ticket.marinabaysands.com/mbs/patron/register";
          }
        } catch (e) {
          utag.DB(e);
        }
      },
      function (a, b) {
        try {
          if (
            (b["tealium_event"]
              .toString()
              .toLowerCase()
              .indexOf("merchandise".toLowerCase()) > -1 &&
              typeof b["restaurant_name"] != "undefined" &&
              b["restaurant_name"] != "") ||
            (b["product_category"]
              .toString()
              .toLowerCase()
              .indexOf("merchandise".toLowerCase()) > -1 &&
              typeof b["restaurant_name"] != "undefined" &&
              b["restaurant_name"] != "") ||
            typeof b["product_category"] != "undefined"
          ) {
            if (
              typeof b["product_category"] == "string" &&
              b["product_category"] != "merchandise"
            ) {
              var product_category = [];
              product_category[0] = b["product_category"];
              b["product_category"] = product_category;
            }
            if (
              typeof b["restaurant_name"] == "string" &&
              typeof b["merchandise_product_name"] != "undefined"
            ) {
              var product_brand = [];
              for (var i = 0; i < b["merchandise_product_name"].length; i++) {
                product_brand[i] = b["restaurant_name"];
              }
              b["ga_product_brand"] = product_brand;
            }
            if (
              typeof b["product_category"] == "string" &&
              typeof b["merchandise_product_name"] != "undefined"
            ) {
              var product_category = [];
              for (var i = 0; i < b["merchandise_product_name"].length; i++) {
                product_category[i] = b["product_category"];
              }
              b["product_category"] = product_category;
            }
          }
        } catch (e) {
          utag.DB(e);
        }
      },
    ];
    u.send = function (a, b) {
      if (u.ev[a] || u.ev.all !== undefined) {
        u.o = window[window.GoogleAnalyticsObject];
        b.ga_events = b.ga_events || [];
        var c, d, e, f, g, h, tn, prop;
        if (u.data && u.data.name) {
          tn = u.data.name;
        }
        u.data = {
          qsp_delim: "&",
          kvp_delim: "=",
          base_url: "",
          a: a,
          cookieDomain: "" || utag.loader.lh(),
          name: tn || "",
          account: "UA-166936107-3,UA-166936107-1",
          anonymizeIp: "false",
          allowLinker: "true",
          crossDomainTrack:
            "marinabaysands.com,www.sandscasino.com,ovs.tour-list.com,sandsrewardsclub.sg,www.sevenrooms.com",
          transport: "default" || "default",
          enhancedLinkAttribution: "true",
          enhancedecommerce: "true",
          displayfeatures: "true",
          screenView: "false",
          optimizely: "false",
          init_before_extensions: "false",
          autofill_params: "false",
          autosend_events: "true" || "true",
          clear_global_vars: "false",
          useAmpClientId: "false",
          enh_action: "",
          enh_event_cb: "",
          enh_checkout_step: "",
          enh_checkout_option: "",
          product_action_list: "",
          product_variant: [],
          enh_impression_id: [],
          enh_impression_name: [],
          enh_impression_price: [],
          enh_impression_category: [],
          enh_impression_brand: [],
          enh_impression_variant: [],
          enh_impression_list: [],
          enh_impression_position: [],
          enh_promo_id: [],
          enh_promo_name: [],
          enh_promo_creative: [],
          enh_promo_position: [],
          id: "",
          product_id: [],
          product_name: [],
          product_brand: [],
          product_category: [],
          product_quantity: [],
          product_unit_price: [],
          product_discount: [],
          product_position: [],
          ga_events: [],
          sessionControl: "",
          set: {},
        };
        if (u.data.init_before_extensions === "true") {
          u.createTracker();
          u.initTracker();
        }
        for (c = 0; c < u.extend.length; c++) {
          try {
            d = u.extend[c](a, b);
            if (d == false) return;
          } catch (e) {}
        }
        c = [];
        for (d in utag.loader.GV(u.map)) {
          if (b[d] !== undefined && b[d] !== "") {
            e = u.map[d].split(",");
            for (f = 0; f < e.length; f++) {
              if (e[f].indexOf("a.") === 0) {
                u.data["a"][e[f].substring(2)] = b[d];
              } else if (e[f].indexOf("set.") === 0) {
                u.data.set[e[f].substring(4)] = b[d];
              } else {
                u.data[e[f]] = b[d];
              }
            }
          } else {
            h = d.split(":");
            if (h.length === 2 && b[h[0]] === h[1]) {
              if (u.map[d]) {
                u.data.enh_action = u.map[d];
              }
            }
          }
        }
        u.data.account = u.data.tid || u.data.account;
        if (
          u.typeOf(u.data.ga_events) === "array" &&
          u.typeOf(b.ga_events) === "array"
        ) {
          if (u.data.ga_events.length === 0 && b.ga_events.length > 0) {
            u.data.ga_events = b.ga_events;
          } else if (u.data.ga_events.length > 0 && b.ga_events.length > 0) {
            u.data.ga_events = u.data.ga_events.concat(b.ga_events);
          }
        }
        u.data.order_id = u.data.order_id || b._corder || "";
        u.data.order_total = u.data.order_total || b._ctotal || "";
        u.data.order_shipping = u.data.order_shipping || b._cship || "";
        u.data.order_tax = u.data.order_tax || b._ctax || "";
        u.data.order_store = u.data.order_store || b._cstore || "";
        u.data.order_currency = u.data.order_currency || b._ccurrency || "";
        u.data.order_coupon_code = u.data.order_coupon_code || b._cpromo || "";
        if (u.data.product_id.length === 0 && b._cprod !== undefined) {
          u.data.product_id = b._cprod.slice(0);
        }
        if (u.data.product_name.length === 0 && b._cprodname !== undefined) {
          u.data.product_name = b._cprodname.slice(0);
        }
        if (u.data.product_brand.length === 0 && b._cbrand !== undefined) {
          u.data.product_brand = b._cbrand.slice(0);
        }
        if (u.data.product_category.length === 0 && b._ccat !== undefined) {
          u.data.product_category = b._ccat.slice(0);
        }
        if (u.data.product_quantity.length === 0 && b._cquan !== undefined) {
          u.data.product_quantity = b._cquan.slice(0);
        }
        if (u.data.product_unit_price.length === 0 && b._cprice !== undefined) {
          u.data.product_unit_price = b._cprice.slice(0);
        }
        if (u.data.product_discount.length === 0 && b._cpdisc !== undefined) {
          u.data.product_discount = b._cpdisc.slice(0);
        }
        if (u.data.init_before_extensions !== "true") {
          u.createTracker();
          u.initTracker();
        }
        if (u.data.enhancedecommerce === "true" && !u.required["ec"]) {
          u.required["ec"] = !0;
          u.all("require", "ec");
        }
        u.data.app_id = u.data.app_id || u.data.appId || b.app_id;
        u.data.app_name = u.data.app_name || u.data.appName || b.app_name;
        u.data.app_version =
          u.data.app_version || u.data.appVersion || b.app_version;
        u.data.app_rdns =
          u.data.app_rdns || u.data.appInstallerId || b.app_rdns;
        u.data.screen_title =
          u.data.screen_title || u.data.screenName || b.screen_title;
        if (u.data.app_id || u.data.app_name) {
          g = {};
          g.appName = u.data.app_name;
          g.appId = u.data.app_id || "";
          g.appVersion = u.data.app_version;
          g.appInstallerId = u.data.app_rdns;
          u.all("set", g);
        }
        u.data.exception_reason = u.data.exception_reason || b.exception_reason;
        if (u.data.exception_reason) {
          g = {};
          g.exDescription = u.data.exception_reason;
          g.exFatal = true;
          if (u.data.nonInteraction) {
            g.nonInteraction = 1;
          }
          u.all("send", "exception", g);
        }
        if (u.data.allowLinker === "true" || u.data.allowLinker === true) {
          if (!u.required["linker"]) {
            u.all("require", "linker");
            u.required["linker"] = !0;
          }
          if (u.data.crossDomainTrack) {
            if (u.typeOf(u.data.crossDomainTrack) === "string") {
              u.data.crossDomainTrack = u.data.crossDomainTrack
                .replace(/\s/g, "")
                .split(",");
            }
            u.all("linker:autoLink", u.data.crossDomainTrack);
          }
        }
        if (u.data.clear_global_vars === "true") {
          u.setGlobalProperties(u.data, true);
          for (prop in utag.loader.GV(u.data.set)) {
            u.setGlobalProperties(u.data, true, prop);
          }
        }
        u.setGlobalProperties(u.data, false);
        if (u.data.anonymizeIp === "true" || u.data.anonymizeIp === true) {
          u.all("set", "anonymizeIp", true);
        }
        if (u.data.uid) {
          u.all("set", "&uid", u.data.uid);
        }
        if (u.data.page) {
          u.all("set", "page", u.data.page);
        }
        if (u.data.title) {
          u.all("set", "title", u.data.title);
        }
        if (u.data.location) {
          u.all("set", "location", u.data.location);
        }
        if (u.data.campaignId) {
          u.all("set", "campaignId", u.data.campaignId);
        }
        if (u.data.campaignName) {
          u.all("set", "campaignName", u.data.campaignName);
        }
        if (u.data.campaignSource) {
          u.all("set", "campaignSource", u.data.campaignSource);
        }
        if (u.data.campaignMedium) {
          u.all("set", "campaignMedium", u.data.campaignMedium);
        }
        if (u.data.campaignContent) {
          u.all("set", "campaignContent", u.data.campaignContent);
        }
        if (u.data.campaignKeyword) {
          u.all("set", "campaignKeyword", u.data.campaignKeyword);
        }
        if (
          u.data.displayfeatures === "true" ||
          u.data.displayfeatures === true
        ) {
          if (!u.required["displayfeatures"]) {
            u.required["displayfeatures"] = !0;
            u.all("require", "displayfeatures");
          }
        } else {
          u.all("set", "allowAdFeatures", false);
        }
        if (u.data.dataSource) {
          u.all("set", "dataSource", u.data.dataSource);
        }
        for (prop in utag.loader.GV(u.data.set)) {
          u.all("set", prop, u.data.set[prop]);
        }
        u.data.transaction_events = {};
        u.data.pageview_events = {};
        u.data.link_events = {};
        u.data.enhecom_events = {};
        for (d in utag.loader.GV(u.data)) {
          if (
            d.indexOf("-") > -1 &&
            (d.indexOf("metric") > -1 ||
              d.indexOf("dimension") > -1 ||
              d.indexOf("contentGroup") > -1)
          ) {
            if (d.indexOf("transaction-") === 0) {
              u.data.transaction_events[d] = u.data[d];
            } else if (d.indexOf("pageview-") === 0) {
              u.data.pageview_events[d] = u.data[d];
            } else if (d.indexOf("link-") === 0) {
              u.data.link_events[d] = u.data[d];
            } else if (
              u.data.enhancedecommerce === "true" &&
              d.indexOf("enh_") === 0
            ) {
              u.data.enhecom_events[d] = u.data[d];
            }
          } else if (
            d.indexOf("metric") === 0 ||
            d.indexOf("dimension") === 0 ||
            d.indexOf("contentGroup") === 0
          ) {
            u.all("set", d, u.data[d]);
          }
        }
        if (u.data.enhancedLinkAttribution === "true") {
          if (!u.required["enhancedLinkAttribution"]) {
            u.required["enhancedLinkAttribution"] = !0;
            u.all("require", "linkid", "linkid.js");
          }
        }
        u.data.order_id = u.data.order_id ? u.data.order_id : u.data.id;
        if (u.data.enhancedecommerce === "true") {
          u.all(
            "set",
            "&cu",
            u.data.currency ? u.data.currency : u.data.order_currency
          );
          if (u.data.order_id && u.data.enh_action === "refund") {
            if (
              u.data.order_id instanceof Array &&
              u.data.order_id.length > 0
            ) {
              u.data.order_id = u.data.order_id[0];
            }
            for (f = 0; f < u.data.product_id.length; f++) {
              g = {};
              g.id = u.data.product_id[f];
              g.quantity = u.data.product_quantity[f]
                ? u.data.product_quantity[f]
                : "1";
              u.setHitData(g, "enhecom_events", "product_refund", f);
              u.all("ec:addProduct", g);
            }
            g = {};
            g.id = u.data.order_id;
            u.setHitData(g, "enhecom_events", "refund");
            u.all("ec:setAction", "refund", g);
          } else if (u.data.order_id) {
            if (
              u.data.order_id instanceof Array &&
              u.data.order_id.length > 0
            ) {
              u.data.order_id = u.data.order_id[0];
            }
            u.addproduct("product_purchase", u.data.product_id.length, false);
            g = {};
            g.id = u.data.order_id;
            g.affiliation = u.data.affiliation
              ? u.data.affiliation
              : u.data.order_store;
            g.revenue = u.data.revenue ? u.data.revenue : u.data.order_total;
            g.shipping = u.data.shipping
              ? u.data.shipping
              : u.data.order_shipping;
            g.tax = u.data.tax ? u.data.tax : u.data.order_tax;
            g.coupon = u.data.coupon ? u.data.coupon : u.data.order_coupon_code;
            u.setHitData(g, "enhecom_events", "purchase");
            u.all("ec:setAction", "purchase", g);
          } else if (
            u.data.enh_action === "product_click" &&
            u.data.a === "link"
          ) {
            u.addproduct("product_click", 1, false);
            u.all("ec:setAction", "click", {
              list: u.data.product_action_list,
            });
            if (u.data.autosend_events === "true") {
              u.all("send", "event", "UX", "click", "Results", {
                hitCallback: u.data.enh_event_cb,
              });
            }
          } else if (u.data.enh_action === "detail") {
            u.addproduct("detail", 1, false);
            g = {};
            u.setHitData(g, "list", u.data.product_action_list);
            u.all("ec:setAction", "detail");
          } else if (u.data.enh_action === "add") {
            u.addproduct("product_add", u.data.product_id.length, false);
            u.all("ec:setAction", "add", { list: u.data.product_action_list });
            if (u.data.a === "link" && u.data.autosend_events === "true") {
              u.all("send", "event", "UX", "click", "add to cart", {
                hitCallback: u.data.enh_event_cb,
              });
            }
          } else if (u.data.enh_action === "remove") {
            u.addproduct("product_remove", u.data.product_id.length, false);
            u.all("ec:setAction", "remove");
            if (u.data.a === "link" && u.data.autosend_events === "true") {
              u.all("send", "event", "UX", "click", "remove from cart", {
                hitCallback: u.data.enh_event_cb,
              });
            }
          } else if (u.data.enh_action === "checkout") {
            u.addproduct("product_checkout", u.data.product_id.length, false);
            g = {};
            g.step = u.data.enh_checkout_step || "1";
            g.option = u.data.enh_checkout_option;
            u.all("ec:setAction", u.data.enh_action, g);
          }
          if (u.data.enh_action === "checkout_option" && u.data.a === "link") {
            g = {};
            g.step = u.data.enh_checkout_step || "1";
            g.option = u.data.enh_checkout_option;
            u.all("ec:setAction", u.data.enh_action, g);
            if (u.data.autosend_events === "true") {
              u.all("send", "event", "Checkout", "Option", {
                hitCallback: u.data.enh_event_cb,
              });
            }
          }
          if (u.data.enh_impression_id) {
            u.addproduct(
              "product_impression",
              u.data.enh_impression_id.length,
              true
            );
          }
          if (u.data.enh_promo_id) {
            u.addpromo(u.data.enh_action, u.data.a);
          }
          g = {};
          if (u.data.order_id) {
            u.setHitData(g, "transaction_events");
          }
          u.setHitData(g, "pageview_events");
          if (
            u.data.sessionControl === "start" ||
            u.data.sessionControl === "end"
          ) {
            g.sessionControl = u.data.sessionControl;
          }
          if (u.data.a === "view") {
            if (u.data.screenView === "true" || u.data.screenView === true) {
              g.screenName = u.data.screen_title || "";
              u.all("send", "screenview", g);
            } else {
              g.hitType = "pageview";
              u.all("send", g);
            }
          }
        } else if (u.data.a === "view") {
          g = {};
          u.setHitData(g, "pageview_events");
          if (
            u.data.sessionControl === "start" ||
            u.data.sessionControl === "end"
          ) {
            g.sessionControl = u.data.sessionControl;
          }
          if (u.data.screenView === "true" || u.data.screenView === true) {
            g.screenName = u.data.screen_title || "";
            u.all("send", "screenview", g);
          } else {
            g.hitType = "pageview";
            u.all("send", g);
          }
          if (u.data.order_id && !(u.data.order_id instanceof Array)) {
            if (!u.required["ecommerce"]) {
              u.required["ecommerce"] = !0;
              u.all("require", "ecommerce", "ecommerce.js");
            }
            g = {};
            u.setHitData(g, "transaction_events");
            g.id = u.data.order_id;
            g.affiliation = u.data.affiliation
              ? u.data.affiliation
              : u.data.order_store;
            g.revenue = u.data.revenue ? u.data.revenue : u.data.order_total;
            g.shipping = u.data.shipping
              ? u.data.shipping
              : u.data.order_shipping;
            g.tax = u.data.tax ? u.data.tax : u.data.order_tax;
            g.currency = u.data.currency
              ? u.data.currency
              : u.data.order_currency;
            u.all("ecommerce:addTransaction", g);
            for (f = 0; f < u.data.product_id.length; f++) {
              g = {};
              g.id = u.data.order_id;
              g.sku = u.data.product_id[f];
              g.name = u.data.product_name[f]
                ? u.data.product_name[f]
                : u.data.product_id[f];
              g.category = u.data.product_category[f]
                ? u.data.product_category[f]
                : "";
              g.price = u.data.product_unit_price[f]
                ? u.data.product_unit_price[f]
                : "1.00";
              g.quantity = u.data.product_quantity[f]
                ? u.data.product_quantity[f]
                : "1";
              u.setHitData(g, "transaction_events");
              u.all("ecommerce:addItem", g);
            }
            u.all("ecommerce:send");
          } else if (
            u.data.order_id instanceof Array &&
            u.data.order_id.length > 0
          ) {
            if (!u.required["ecommerce"]) {
              u.required["ecommerce"] = !0;
              u.all("require", "ecommerce", "ecommerce.js");
            }
            var lastindex = 0;
            for (f = 0; f < u.data.order_id.length; f++) {
              if (
                f === u.data.order_id.length - 1 ||
                u.data.order_id[f] !== u.data.order_id[f + 1]
              ) {
                g = {};
                u.setHitData(g, "transaction_events");
                g.id = u.data.order_id[f];
                g.affiliation =
                  u.data.affiliation &&
                  typeof u.data.affiliation[f] !== "undefined"
                    ? u.data.affiliation[f]
                    : u.data.order_store;
                g.revenue =
                  u.data.revenue && typeof u.data.revenue[f] !== "undefined"
                    ? u.data.revenue[f]
                    : u.data.order_total;
                g.shipping =
                  u.data.shipping && typeof u.data.shipping[f] !== "undefined"
                    ? u.data.shipping[f]
                    : u.data.order_shipping;
                g.tax =
                  u.data.tax && typeof u.data.tax[f] !== "undefined"
                    ? u.data.tax[f]
                    : u.data.order_tax;
                g.currency = u.data.currency
                  ? u.data.currency
                  : u.data.order_currency;
                u.all("ecommerce:addTransaction", g);
                for (e = lastindex; e < f + 1; e++) {
                  g = {};
                  g.id = u.data.order_id[f];
                  g.sku = u.data.product_id[e];
                  g.name = u.data.product_name[e]
                    ? u.data.product_name[e]
                    : u.data.product_id[e];
                  g.category = u.data.product_category[e]
                    ? u.data.product_category[e]
                    : "";
                  g.price = u.data.product_unit_price[e]
                    ? u.data.product_unit_price[e]
                    : "1.00";
                  g.quantity = u.data.product_quantity[e]
                    ? u.data.product_quantity[e]
                    : "1";
                  u.setHitData(g, "transaction_events");
                  u.all("ecommerce:addItem", g);
                }
                lastindex = f + 1;
              }
            }
            u.all("ecommerce:send");
          }
        }
        if (u.data.eventCategory && u.data.eventAction) {
          g = {};
          u.setHitData(g, "link_events");
          g.hitType = "event";
          g.eventCategory = u.data.eventCategory;
          if (u.data.nonInteraction) {
            g.nonInteraction = 1;
          }
          g.eventAction = u.data.eventAction;
          if (u.data.eventLabel) {
            g.eventLabel = u.data.eventLabel;
          }
          if (
            typeof u.data.eventValue !== "undefined" &&
            u.data.eventValue !== ""
          ) {
            g.eventValue = u.data.eventValue;
          }
          if (u.data.standard_event_cb) {
            g.hitCallback = u.data.standard_event_cb;
          }
          if (u.data.screenView === "true" || u.data.screenView === true) {
            g.screenName = u.data.screen_title || "";
          }
          if (
            u.data.sessionControl === "start" ||
            u.data.sessionControl === "end"
          ) {
            g.sessionControl = u.data.sessionControl;
          }
          if (u.data.transport !== "default") {
            g.transport = u.data.transport;
          }
          u.all("send", g);
          u.data.eventCategory =
            u.data.eventAction =
            u.data.eventLabel =
            u.data.eventValue =
              "";
        }
        for (e = 0; e < u.data.ga_events.length; e++) {
          g = {};
          u.setHitData(g, "link_events");
          g.hitType = "event";
          g.eventCategory = u.data.ga_events[e].eventCategory;
          g.eventAction = u.data.ga_events[e].eventAction;
          g.eventLabel = u.data.ga_events[e].eventLabel;
          g.eventValue = u.data.ga_events[e].eventValue;
          if (u.data.ga_events[e].nonInteraction) {
            g.nonInteraction = 1;
          }
          if (
            u.data.sessionControl === "start" ||
            u.data.sessionControl === "end"
          ) {
            g.sessionControl = u.data.sessionControl;
          }
          if (u.data.transport !== "default") {
            g.transport = u.data.transport;
          }
          u.all("send", g);
        }
        if (
          u.data.socialNetwork &&
          u.data.socialAction &&
          u.data.socialTarget
        ) {
          g = {};
          g.hitType = "social";
          g.socialNetwork = u.data.socialNetwork;
          g.socialAction = u.data.socialAction;
          g.socialTarget = u.data.socialTarget;
          u.all("send", g);
          u.data.socialNetwork = u.data.socialAction = u.data.socialTarget = "";
        }
        if (u.data.timingCategory && u.data.timingVar && u.data.timingValue) {
          g = {};
          g.hitType = "timing";
          g.timingCategory = u.data.timingCategory;
          g.timingVar = u.data.timingVar;
          g.timingValue = u.data.timingValue;
          g.timingLabel = u.data.timingLabel || "";
          u.all("send", g);
        }
        if (u.data["ga-disable"]) {
          window["ga-disable-" + u.data["ga-disable"]] = true;
        }
        (function () {
          var id = "tealium-tag-7110";
          if (document.getElementById(id)) {
            return;
          }
          u.loader({
            type: "script",
            src: "https://www.google-analytics.com/analytics.js",
            loc: "script",
            id: id,
          });
          u.o.l = 1 * new Date();
        })();
      }
    };
    utag.o[loader].loader.LOAD(id);
  })("550", "mbs.main");
} catch (error) {
  utag.DB(error);
}

//tealium universal tag - utag.562 ut4.0.202207210624, Copyright 2022 Tealium.com Inc. All Rights Reserved.
var _linkedin = _linkedin || {};
window._linkedin_data_partner_ids = window._linkedin_data_partner_ids || [];
try {
  (function (id, loader) {
    var u = { id: id };
    utag.o[loader].sender[id] = u;
    if (utag.ut === undefined) {
      utag.ut = {};
    }
    var match = /ut\d\.(\d*)\..*/.exec(utag.cfg.v);
    if (utag.ut.loader === undefined || !match || parseInt(match[1]) < 41) {
      u.loader = function (o, a, b, c, l, m) {
        utag.DB(o);
        a = document;
        if (o.type == "iframe") {
          m = a.getElementById(o.id);
          if (m && m.tagName == "IFRAME") {
            b = m;
          } else {
            b = a.createElement("iframe");
          }
          o.attrs = o.attrs || {};
          utag.ut.merge(
            o.attrs,
            { height: "1", width: "1", style: "display:none" },
            0
          );
        } else if (o.type == "img") {
          utag.DB("Attach img: " + o.src);
          b = new Image();
        } else {
          b = a.createElement("script");
          b.language = "javascript";
          b.type = "text/javascript";
          b.async = 1;
          b.charset = "utf-8";
        }
        if (o.id) {
          b.id = o.id;
        }
        for (l in utag.loader.GV(o.attrs)) {
          b.setAttribute(l, o.attrs[l]);
        }
        b.setAttribute("src", o.src);
        if (typeof o.cb == "function") {
          if (b.addEventListener) {
            b.addEventListener(
              "load",
              function () {
                o.cb();
              },
              false
            );
          } else {
            b.onreadystatechange = function () {
              if (
                this.readyState == "complete" ||
                this.readyState == "loaded"
              ) {
                this.onreadystatechange = null;
                o.cb();
              }
            };
          }
        }
        if (o.type != "img" && !m) {
          l = o.loc || "head";
          c = a.getElementsByTagName(l)[0];
          if (c) {
            utag.DB("Attach to " + l + ": " + o.src);
            if (l == "script") {
              c.parentNode.insertBefore(b, c);
            } else {
              c.appendChild(b);
            }
          }
        }
      };
    } else {
      u.loader = utag.ut.loader;
    }
    if (utag.ut.typeOf === undefined) {
      u.typeOf = function (e) {
        return {}.toString
          .call(e)
          .match(/\s([a-zA-Z]+)/)[1]
          .toLowerCase();
      };
    } else {
      u.typeOf = utag.ut.typeOf;
    }
    u.ev = { view: 1 };
    u.scriptrequested = false;
    u.map_func = function (arr, obj, item) {
      var i = arr.shift();
      obj[i] = obj[i] || {};
      if (arr.length > 0) {
        u.map_func(arr, obj[i], item);
      } else {
        obj[i] = item;
      }
    };
    u.clearEmptyKeys = function (object) {
      for (var key in object) {
        if (object[key] === "" || object[key] === undefined) {
          delete object[key];
        }
      }
      return object;
    };
    u.map = {};
    u.extend = [];
    u.send = function (a, b) {
      if (u.ev[a] || u.ev.all !== undefined) {
        utag.DB("send:562");
        utag.DB(b);
        var c, d, e, f;
        u.data = {
          qsp_delim: "&",
          kvp_delim: "=",
          base_url: "https://snap.licdn.com/li.lms-analytics/insight.min.js",
          partner_id: "3591948",
          conversionId: "",
          linkedin: {
            custom_channel_id: "",
            custom_group_id: "",
            custom_user_id: "",
            zoom_info_id: "",
            title: "",
            domain: "",
            company: "",
            gender: "",
            location: "",
            education: "",
            email_sha256: "",
            email_sha512: "",
            raw_data: "",
            raw_data_overwrite: "",
            encrypted_data: "",
            partner_data: "",
            sic_codes: "",
            employee_range: "",
            default_keywords: "",
            async_target: "",
            use_iframe: "",
            use_callback: "",
            test_url: "",
          },
        };
        utag.DB("send:562:EXTENSIONS");
        utag.DB(b);
        c = [];
        for (d in utag.loader.GV(u.map)) {
          if (b[d] !== undefined && b[d] !== "") {
            e = u.map[d].split(",");
            for (f = 0; f < e.length; f++) {
              u.map_func(e[f].split("."), u.data, b[d]);
            }
          }
        }
        utag.DB("send:562:MAPPINGS");
        utag.DB(u.data);
        u.data.order_id = u.data.order_id || b._corder || "";
        u.data.order_total = u.data.order_total || b._ctotal || "";
        u.data.order_currency = u.data.order_currency || b._ccurrency || "";
        u.data.customer_id = u.data.customer_id || b._ccustid || "";
        if (!u.data.partner_id) {
          utag.DB(u.id + ": Tag not fired: Required attribute not populated");
          return;
        }
        var partnerList = u.data.partner_id.split(/\s*,\s*/);
        window._linkedin_data_partner_ids = partnerList;
        u.data.linkedin.partner_id = partnerList;
        u.data.linkedin.order_id = u.data.order_id;
        u.data.linkedin.conv_value = u.data.order_total;
        u.data.linkedin.conv_currency = u.data.order_currency;
        _linkedin = u.clearEmptyKeys(u.data.linkedin);
        window._wait_for_lintrk = !!u.data.conversionId;
        u.loader_cb = function () {
          u.initialized = true;
          if (u.data.conversionId) {
            lintrk("track", { conversion_id: u.data.conversionId });
          }
        };
        if (u.scriptrequested) {
          u.loader_cb();
        } else {
          u.scriptrequested = true;
          u.loader({
            type: "script",
            src: u.data.base_url,
            cb: u.loader_cb,
            loc: "script",
            id: "utag_562",
            attrs: {},
          });
        }
        utag.DB("send:562:COMPLETE");
      }
    };
    utag.o[loader].loader.LOAD(id);
  })("562", "mbs.main");
} catch (error) {
  utag.DB(error);
}

//tealium universal tag - utag.569 ut4.0.202207210624, Copyright 2022 Tealium.com Inc. All Rights Reserved.
(function (f) {
  if (f.fbq) return;
  var n = (f.fbq = function () {
    n.callMethod ? n.callMethod.apply(n, arguments) : n.queue.push(arguments);
  });
  if (!f._fbq) f._fbq = n;
  n.push = n;
  n.loaded = !0;
  n.version = "2.0";
  n.queue = [];
  n.agent = "tmtealium";
})(window);
try {
  (function (id, loader) {
    var u = { id: id },
      md5;
    utag.o[loader].sender[id] = u;
    utag.globals = utag.globals || {};
    if (utag.ut === undefined) {
      utag.ut = {};
    }
    var match = /ut\d\.(\d*)\..*/.exec(utag.cfg.v);
    if (utag.ut.loader === undefined || !match || parseInt(match[1]) < 41) {
      u.loader = function (o, a, b, c, l, m) {
        utag.DB(o);
        a = document;
        if (o.type == "iframe") {
          m = a.getElementById(o.id);
          if (m && m.tagName == "IFRAME") {
            b = m;
          } else {
            b = a.createElement("iframe");
          }
          o.attrs = o.attrs || {};
          utag.ut.merge(
            o.attrs,
            { height: "1", width: "1", style: "display:none" },
            0
          );
        } else if (o.type == "img") {
          utag.DB("Attach img: " + o.src);
          b = new Image();
        } else {
          b = a.createElement("script");
          b.language = "javascript";
          b.type = "text/javascript";
          b.async = 1;
          b.charset = "utf-8";
        }
        if (o.id) {
          b.id = o.id;
        }
        for (l in utag.loader.GV(o.attrs)) {
          b.setAttribute(l, o.attrs[l]);
        }
        b.setAttribute("src", o.src);
        if (typeof o.cb == "function") {
          if (b.addEventListener) {
            b.addEventListener(
              "load",
              function () {
                o.cb();
              },
              false
            );
          } else {
            b.onreadystatechange = function () {
              if (
                this.readyState == "complete" ||
                this.readyState == "loaded"
              ) {
                this.onreadystatechange = null;
                o.cb();
              }
            };
          }
        }
        if (o.type != "img" && !m) {
          l = o.loc || "head";
          c = a.getElementsByTagName(l)[0];
          if (c) {
            utag.DB("Attach to " + l + ": " + o.src);
            if (l == "script") {
              c.parentNode.insertBefore(b, c);
            } else {
              c.appendChild(b);
            }
          }
        }
      };
    } else {
      u.loader = utag.ut.loader;
    }
    if (utag.ut.typeOf === undefined) {
      u.typeOf = function (e) {
        return {}.toString
          .call(e)
          .match(/\s([a-zA-Z]+)/)[1]
          .toLowerCase();
      };
    } else {
      u.typeOf = utag.ut.typeOf;
    }
    if (utag.ut.md5 === undefined) {
      md5 = (function (t, n) {
        var r;
        if (
          ("undefined" != typeof window && window.crypto && (r = window.crypto),
          !r &&
            "undefined" != typeof window &&
            window.msCrypto &&
            (r = window.msCrypto),
          !r &&
            "undefined" != typeof global &&
            global.crypto &&
            (r = global.crypto),
          !r && "function" == typeof require)
        )
          try {
            r = require("crypto");
          } catch (t) {}
        var e = function () {
            if (r) {
              if ("function" == typeof r.getRandomValues)
                try {
                  return r.getRandomValues(new Uint32Array(1))[0];
                } catch (t) {}
              if ("function" == typeof r.randomBytes)
                try {
                  return r.randomBytes(4).readInt32LE();
                } catch (t) {}
            }
            throw new Error(
              "Native crypto module could not be used to get secure random number."
            );
          },
          i =
            Object.create ||
            (function () {
              function t() {}
              return function (n) {
                var r;
                return (
                  (t.prototype = n), (r = new t()), (t.prototype = null), r
                );
              };
            })(),
          o = {},
          s = (o.lib = {}),
          a = (s.Base = {
            extend: function (t) {
              var n = i(this);
              return (
                t && n.mixIn(t),
                (n.hasOwnProperty("init") && this.init !== n.init) ||
                  (n.init = function () {
                    n.$super.init.apply(this, arguments);
                  }),
                (n.init.prototype = n),
                (n.$super = this),
                n
              );
            },
            create: function () {
              var t = this.extend();
              return t.init.apply(t, arguments), t;
            },
            init: function () {},
            mixIn: function (t) {
              for (var n in t) t.hasOwnProperty(n) && (this[n] = t[n]);
              t.hasOwnProperty("toString") && (this.toString = t.toString);
            },
            clone: function () {
              return this.init.prototype.extend(this);
            },
          }),
          c = (s.WordArray = a.extend({
            init: function (t, n) {
              (t = this.words = t || []),
                (this.sigBytes = null != n ? n : 4 * t.length);
            },
            toString: function (t) {
              return (t || f).stringify(this);
            },
            concat: function (t) {
              var n = this.words,
                r = t.words,
                e = this.sigBytes,
                i = t.sigBytes;
              if ((this.clamp(), e % 4))
                for (var o = 0; o < i; o++) {
                  var s = (r[o >>> 2] >>> (24 - (o % 4) * 8)) & 255;
                  n[(e + o) >>> 2] |= s << (24 - ((e + o) % 4) * 8);
                }
              else for (o = 0; o < i; o += 4) n[(e + o) >>> 2] = r[o >>> 2];
              return (this.sigBytes += i), this;
            },
            clamp: function () {
              var n = this.words,
                r = this.sigBytes;
              (n[r >>> 2] &= 4294967295 << (32 - (r % 4) * 8)),
                (n.length = t.ceil(r / 4));
            },
            clone: function () {
              var t = a.clone.call(this);
              return (t.words = this.words.slice(0)), t;
            },
            random: function (t) {
              for (var n = [], r = 0; r < t; r += 4) n.push(e());
              return new c.init(n, t);
            },
          })),
          u = (o.enc = {}),
          f = (u.Hex = {
            stringify: function (t) {
              for (var n = t.words, r = t.sigBytes, e = [], i = 0; i < r; i++) {
                var o = (n[i >>> 2] >>> (24 - (i % 4) * 8)) & 255;
                e.push((o >>> 4).toString(16)), e.push((15 & o).toString(16));
              }
              return e.join("");
            },
            parse: function (t) {
              for (var n = t.length, r = [], e = 0; e < n; e += 2)
                r[e >>> 3] |=
                  parseInt(t.substr(e, 2), 16) << (24 - (e % 8) * 4);
              return new c.init(r, n / 2);
            },
          }),
          h = (u.Latin1 = {
            stringify: function (t) {
              for (var n = t.words, r = t.sigBytes, e = [], i = 0; i < r; i++) {
                var o = (n[i >>> 2] >>> (24 - (i % 4) * 8)) & 255;
                e.push(String.fromCharCode(o));
              }
              return e.join("");
            },
            parse: function (t) {
              for (var n = t.length, r = [], e = 0; e < n; e++)
                r[e >>> 2] |= (255 & t.charCodeAt(e)) << (24 - (e % 4) * 8);
              return new c.init(r, n);
            },
          }),
          d = (u.Utf8 = {
            stringify: function (t) {
              try {
                return decodeURIComponent(escape(h.stringify(t)));
              } catch (t) {
                throw new Error("Malformed UTF-8 data");
              }
            },
            parse: function (t) {
              return h.parse(unescape(encodeURIComponent(t)));
            },
          }),
          l = (s.BufferedBlockAlgorithm = a.extend({
            reset: function () {
              (this._data = new c.init()), (this._nDataBytes = 0);
            },
            _append: function (t) {
              "string" == typeof t && (t = d.parse(t)),
                this._data.concat(t),
                (this._nDataBytes += t.sigBytes);
            },
            _process: function (n) {
              var r,
                e = this._data,
                i = e.words,
                o = e.sigBytes,
                s = this.blockSize,
                a = o / (4 * s),
                u =
                  (a = n
                    ? t.ceil(a)
                    : t.max((0 | a) - this._minBufferSize, 0)) * s,
                f = t.min(4 * u, o);
              if (u) {
                for (var h = 0; h < u; h += s) this._doProcessBlock(i, h);
                (r = i.splice(0, u)), (e.sigBytes -= f);
              }
              return new c.init(r, f);
            },
            clone: function () {
              var t = a.clone.call(this);
              return (t._data = this._data.clone()), t;
            },
            _minBufferSize: 0,
          })),
          p =
            ((s.Hasher = l.extend({
              cfg: a.extend(),
              init: function (t) {
                (this.cfg = this.cfg.extend(t)), this.reset();
              },
              reset: function () {
                l.reset.call(this), this._doReset();
              },
              update: function (t) {
                return this._append(t), this._process(), this;
              },
              finalize: function (t) {
                return t && this._append(t), this._doFinalize();
              },
              blockSize: 16,
              _createHelper: function (t) {
                return function (n, r) {
                  return new t.init(r).finalize(n);
                };
              },
              _createHmacHelper: function (t) {
                return function (n, r) {
                  return new p.HMAC.init(t, r).finalize(n);
                };
              },
            })),
            (o.algo = {}));
        return o;
      })(Math);
      (function (t) {
        var n = md5,
          r = n.lib,
          e = r.WordArray,
          i = r.Hasher,
          o = n.algo,
          s = [];
        !(function () {
          for (var n = 0; n < 64; n++)
            s[n] = (4294967296 * t.abs(t.sin(n + 1))) | 0;
        })();
        var a = (o.MD5 = i.extend({
          _doReset: function () {
            this._hash = new e.init([
              1732584193, 4023233417, 2562383102, 271733878,
            ]);
          },
          _doProcessBlock: function (t, n) {
            for (var r = 0; r < 16; r++) {
              var e = n + r,
                i = t[e];
              t[e] =
                (16711935 & ((i << 8) | (i >>> 24))) |
                (4278255360 & ((i << 24) | (i >>> 8)));
            }
            var o = this._hash.words,
              a = t[n + 0],
              d = t[n + 1],
              l = t[n + 2],
              p = t[n + 3],
              y = t[n + 4],
              g = t[n + 5],
              w = t[n + 6],
              v = t[n + 7],
              _ = t[n + 8],
              m = t[n + 9],
              B = t[n + 10],
              x = t[n + 11],
              b = t[n + 12],
              S = t[n + 13],
              H = t[n + 14],
              z = t[n + 15],
              C = o[0],
              M = o[1],
              A = o[2],
              D = o[3];
            (C = c(C, M, A, D, a, 7, s[0])),
              (D = c(D, C, M, A, d, 12, s[1])),
              (A = c(A, D, C, M, l, 17, s[2])),
              (M = c(M, A, D, C, p, 22, s[3])),
              (C = c(C, M, A, D, y, 7, s[4])),
              (D = c(D, C, M, A, g, 12, s[5])),
              (A = c(A, D, C, M, w, 17, s[6])),
              (M = c(M, A, D, C, v, 22, s[7])),
              (C = c(C, M, A, D, _, 7, s[8])),
              (D = c(D, C, M, A, m, 12, s[9])),
              (A = c(A, D, C, M, B, 17, s[10])),
              (M = c(M, A, D, C, x, 22, s[11])),
              (C = c(C, M, A, D, b, 7, s[12])),
              (D = c(D, C, M, A, S, 12, s[13])),
              (A = c(A, D, C, M, H, 17, s[14])),
              (C = u(C, (M = c(M, A, D, C, z, 22, s[15])), A, D, d, 5, s[16])),
              (D = u(D, C, M, A, w, 9, s[17])),
              (A = u(A, D, C, M, x, 14, s[18])),
              (M = u(M, A, D, C, a, 20, s[19])),
              (C = u(C, M, A, D, g, 5, s[20])),
              (D = u(D, C, M, A, B, 9, s[21])),
              (A = u(A, D, C, M, z, 14, s[22])),
              (M = u(M, A, D, C, y, 20, s[23])),
              (C = u(C, M, A, D, m, 5, s[24])),
              (D = u(D, C, M, A, H, 9, s[25])),
              (A = u(A, D, C, M, p, 14, s[26])),
              (M = u(M, A, D, C, _, 20, s[27])),
              (C = u(C, M, A, D, S, 5, s[28])),
              (D = u(D, C, M, A, l, 9, s[29])),
              (A = u(A, D, C, M, v, 14, s[30])),
              (C = f(C, (M = u(M, A, D, C, b, 20, s[31])), A, D, g, 4, s[32])),
              (D = f(D, C, M, A, _, 11, s[33])),
              (A = f(A, D, C, M, x, 16, s[34])),
              (M = f(M, A, D, C, H, 23, s[35])),
              (C = f(C, M, A, D, d, 4, s[36])),
              (D = f(D, C, M, A, y, 11, s[37])),
              (A = f(A, D, C, M, v, 16, s[38])),
              (M = f(M, A, D, C, B, 23, s[39])),
              (C = f(C, M, A, D, S, 4, s[40])),
              (D = f(D, C, M, A, a, 11, s[41])),
              (A = f(A, D, C, M, p, 16, s[42])),
              (M = f(M, A, D, C, w, 23, s[43])),
              (C = f(C, M, A, D, m, 4, s[44])),
              (D = f(D, C, M, A, b, 11, s[45])),
              (A = f(A, D, C, M, z, 16, s[46])),
              (C = h(C, (M = f(M, A, D, C, l, 23, s[47])), A, D, a, 6, s[48])),
              (D = h(D, C, M, A, v, 10, s[49])),
              (A = h(A, D, C, M, H, 15, s[50])),
              (M = h(M, A, D, C, g, 21, s[51])),
              (C = h(C, M, A, D, b, 6, s[52])),
              (D = h(D, C, M, A, p, 10, s[53])),
              (A = h(A, D, C, M, B, 15, s[54])),
              (M = h(M, A, D, C, d, 21, s[55])),
              (C = h(C, M, A, D, _, 6, s[56])),
              (D = h(D, C, M, A, z, 10, s[57])),
              (A = h(A, D, C, M, w, 15, s[58])),
              (M = h(M, A, D, C, S, 21, s[59])),
              (C = h(C, M, A, D, y, 6, s[60])),
              (D = h(D, C, M, A, x, 10, s[61])),
              (A = h(A, D, C, M, l, 15, s[62])),
              (M = h(M, A, D, C, m, 21, s[63])),
              (o[0] = (o[0] + C) | 0),
              (o[1] = (o[1] + M) | 0),
              (o[2] = (o[2] + A) | 0),
              (o[3] = (o[3] + D) | 0);
          },
          _doFinalize: function () {
            var n = this._data,
              r = n.words,
              e = 8 * this._nDataBytes,
              i = 8 * n.sigBytes;
            r[i >>> 5] |= 128 << (24 - (i % 32));
            var o = t.floor(e / 4294967296),
              s = e;
            (r[15 + (((i + 64) >>> 9) << 4)] =
              (16711935 & ((o << 8) | (o >>> 24))) |
              (4278255360 & ((o << 24) | (o >>> 8)))),
              (r[14 + (((i + 64) >>> 9) << 4)] =
                (16711935 & ((s << 8) | (s >>> 24))) |
                (4278255360 & ((s << 24) | (s >>> 8)))),
              (n.sigBytes = 4 * (r.length + 1)),
              this._process();
            for (var a = this._hash, c = a.words, u = 0; u < 4; u++) {
              var f = c[u];
              c[u] =
                (16711935 & ((f << 8) | (f >>> 24))) |
                (4278255360 & ((f << 24) | (f >>> 8)));
            }
            return a;
          },
          clone: function () {
            var t = i.clone.call(this);
            return (t._hash = this._hash.clone()), t;
          },
        }));
        function c(t, n, r, e, i, o, s) {
          var a = t + ((n & r) | (~n & e)) + i + s;
          return ((a << o) | (a >>> (32 - o))) + n;
        }
        function u(t, n, r, e, i, o, s) {
          var a = t + ((n & e) | (r & ~e)) + i + s;
          return ((a << o) | (a >>> (32 - o))) + n;
        }
        function f(t, n, r, e, i, o, s) {
          var a = t + (n ^ r ^ e) + i + s;
          return ((a << o) | (a >>> (32 - o))) + n;
        }
        function h(t, n, r, e, i, o, s) {
          var a = t + (r ^ (n | ~e)) + i + s;
          return ((a << o) | (a >>> (32 - o))) + n;
        }
        (n.MD5 = i._createHelper(a)), (n.HmacMD5 = i._createHmacHelper(a));
      })(Math);
    } else {
      md5 = utag.ut.md5;
    }
    u.ev = { view: 1, link: 1 };
    u.scriptrequested = false;
    u.pixels_initialized = {};
    u.clearEmptyKeys = function (object) {
      for (var key in object) {
        if (
          object[key] === "" ||
          object[key] === undefined ||
          object[key] === null ||
          (utag.ut.typeOf(object[key]) === "array" && object[key].length === 0)
        ) {
          delete object[key];
        }
      }
      return object;
    };
    u.generateEventID = function (event, data, lookup_id) {
      var hash_input =
          (data["tealium_timestamp_epoch"] ||
            (function () {
              var d = new Date();
              return Math.floor(d.getTime() / 1000);
            })()) +
          "-" +
          lookup_id +
          "-" +
          event +
          "-" +
          id,
        event_id = md5.MD5(hash_input).toString();
      return event_id;
    };
    u.isEmptyObject = function (object) {
      if (typeof Object.keys === "function") {
        if (Object.keys(object).length === 0) {
          return true;
        } else {
          return false;
        }
      } else {
        var key;
        for (key in object) {
          if (object.hasOwnProperty(key)) {
            return false;
          }
        }
        return true;
      }
    };
    u.map_func = function (arr, obj, item) {
      var i = arr.shift();
      obj[i] = obj[i] || {};
      if (arr.length > 0) {
        u.map_func(arr, obj[i], item);
      } else {
        obj[i] = item;
      }
    };
    u.processAMData = function (data) {
      var processed_data = {},
        key;
      for (key in data) {
        if (data.hasOwnProperty(key)) {
          if (key === "ph" || key === "ge" || key === "db" || key === "zp") {
            key = key.replace(/\s/g, "").toLowerCase();
          }
          if (key === "ph") {
            data[key] = data[key].replace(/[^\d]/g, "");
          } else if (key === "ge") {
            if (data[key] !== "m" && data[key] !== "f") {
              utag.DB(
                u.id +
                  ": Advanced Matching property 'ge' in wrong format. Removed from init call"
              );
              continue;
            }
          } else if (key === "db") {
            if (data[key].length !== 8) {
              utag.DB(
                u.id +
                  ": Advanced Matching property 'db' is not the correct length. Removed from init call"
              );
              continue;
            }
          } else if (key === "zp") {
            data[key] = data[key].replace(/[^\d]/g, "");
            if (data[key].length > 5) {
              utag.DB(
                u.id +
                  ": Advanced Matching property 'zp' is too long. Removed from init call"
              );
              continue;
            }
          }
        }
        processed_data[key] = data[key];
      }
      return u.clearEmptyKeys(processed_data);
    };
    u.map = {
      "va.badges.5734:true": "tealium_booking_cart_abandoner [AudienceSharing]",
      "va.badges.5740:true":
        "tealium_entertainment_cart_abandoner [AudienceSharing]",
      "va.badges.5742:true": "tealium_entertainment_shopper [AudienceSharing]",
      "va.badges.5744:true": "tealium_restaurant_abandoner [AudienceSharing]",
      "va.badges.5788:true": "tealium_restaurant_shopper [AudienceSharing]",
      "va.badges.7355:true": "tealium_asm_abandoner [AudienceSharing]",
      "va.badges.7359:true": "tealium_asm_shopper [AudienceSharing]",
      "va.badges.10163:true":
        "tealium_FNB_Lunch_Interactors_Unknown [AudienceSharing]",
      "va.badges.10402:true": "LO_LW_MBRL_WB_LAL_TIQ",
      "va.badges.10421:true": "CA_LW_MBRC_WB_LAL_TIQ",
      "va.badges.11237:true": "FN_HH_ALL_ABDN_WB_SG_TIQ",
      "va.badges.11271:true": "FN_HH_ALL_LDIN_WB_SG_TIQ",
      "va.badges.11363:true": "FN_MD_ALL_LITR_WB_SG_TIQ",
      "va.badges.11265:true": "FN_MD_ALL_LINT_WB_SG_TIQ",
      "va.badges.11561:true": "FN_LW_ALL_BKB_WB_SG_TIQ",
      _sm_569_16: "autoConfig,auto_page_view",
    };
    u.extend = [
      function (a, b) {
        try {
          b["_sm_569_16"] = "false";
        } catch (e) {
          utag.DB(e);
        }
      },
      function (a, b) {
        try {
          if (1) {
            for (var property in b) {
              if (b.hasOwnProperty(property)) {
                if (property.indexOf("va.badges") > -1)
                  b[property] = b[property] + "";
              }
            }
          }
        } catch (e) {
          utag.DB(e);
        }
      },
    ];
    u.send = function (a, b) {
      if (u.ev[a] || u.ev.all !== undefined) {
        utag.DB("send:569");
        utag.DB(b);
        var c,
          d,
          e,
          f,
          h,
          i,
          j,
          k,
          l,
          key,
          pixel_list,
          event,
          base_tracking_type = "track",
          event_data = {},
          event_id = "",
          event_name = "",
          event_tracking_type = "",
          fb_param = "",
          has_purchase = false,
          lookup_id = "",
          tracking_queue = [],
          standard_events_lookup = {
            AddPaymentInfo: {
              fb_params: [
                "content_category",
                "content_ids",
                "contents",
                "currency",
                "value",
              ],
            },
            AddToCart: {
              fb_params: [
                "content_ids",
                "content_name",
                "content_type",
                "contents",
                "currency",
                "value",
              ],
            },
            AddToWishlist: {
              fb_params: [
                "content_name",
                "content_category",
                "content_ids",
                "contents",
                "currency",
                "value",
              ],
            },
            CompleteRegistration: {
              fb_params: ["content_name", "currency", "status", "value"],
            },
            Contact: { fb_params: [] },
            CustomizeProduct: { fb_params: [] },
            Donate: { fb_params: [] },
            FindLocation: { fb_params: [] },
            InitiateCheckout: {
              fb_params: [
                "content_category",
                "content_ids",
                "contents",
                "currency",
                "num_items",
                "value",
              ],
            },
            Lead: {
              fb_params: [
                "content_category",
                "content_name",
                "currency",
                "value",
              ],
            },
            PageView: { fb_params: [] },
            Purchase: {
              fb_params: [
                "content_ids",
                "content_name",
                "content_type",
                "contents",
                "currency",
                "num_items",
                "value",
              ],
              req_params: ["currency", "value"],
            },
            Schedule: { fb_params: [] },
            Search: {
              fb_params: [
                "content_category",
                "content_ids",
                "contents",
                "currency",
                "search_string",
                "value",
              ],
            },
            StartTrial: { fb_params: ["currency", "predicted_ltv", "value"] },
            SubmitApplication: { fb_params: [] },
            Subscribe: { fb_params: ["currency", "predicted_ltv", "value"] },
            ViewContent: {
              fb_params: [
                "content_ids",
                "content_name",
                "content_type",
                "contents",
                "currency",
                "value",
              ],
            },
          },
          standard_params_lookup = {
            content_category: function () {
              return u.data.content_category || u.data.product_category;
            },
            content_name: function () {
              return u.data.content_name || u.data.product_name;
            },
            content_ids: function () {
              return u.data.content_ids || u.data.product_id;
            },
            content_type: function () {
              return u.data.content_type;
            },
            contents: function () {
              return u.data.contents;
            },
            currency: function () {
              return u.data.currency || u.data.order_currency;
            },
            num_items: function () {
              var i, num;
              if (
                typeof u.data.num_items !== "undefined" &&
                u.data.num_items !== ""
              ) {
                num = u.data.num_items;
              } else {
                if (
                  u.data.calc_items === true ||
                  u.data.calc_items === "true"
                ) {
                  num = 0;
                  for (i = 0; i < u.data.product_quantity.length; i++) {
                    num += parseInt(u.data.product_quantity[i]);
                  }
                }
              }
              if (typeof num !== "undefined" && num !== "") {
                num = parseInt(num);
              }
              return num;
            },
            predicted_ltv: function () {
              return u.data.predicted_ltv;
            },
            search_string: function () {
              return u.data.search_string;
            },
            status: function () {
              return u.data.status;
            },
            value: function (event) {
              var val = "";
              if (typeof u.data.value !== "undefined" && u.data.value !== "") {
                val = u.data.value;
              } else {
                if (
                  (event === "AddToCart" || event === "ViewContent") &&
                  u.data.product_unit_price.length > 0
                ) {
                  val = u.data.product_unit_price[0];
                } else if (event === "Purchase") {
                  val = u.data.order_subtotal;
                }
              }
              if (typeof val !== "undefined" && val !== "") {
                val = parseFloat(val);
              }
              return val;
            },
          };
        u.processing_options = function () {
          var key, ldu_option;
          for (key in u.data.lmt_data.ldu_types) {
            if (
              u.data.lmt_data.ldu_types[key] === "true" ||
              u.data.lmt_data.ldu_types[key] === true
            ) {
              ldu_option = key;
            }
          }
          if (
            u.data.lmt_data.use_ldu === "true" ||
            u.data.lmt_data.use_ldu === true
          ) {
            switch (ldu_option) {
              case "california":
                u.data.lmt_data.country = 1;
                u.data.lmt_data.state = 1000;
                break;
              case "geolocate":
                u.data.lmt_data.country = 0;
                u.data.lmt_data.state = 0;
                break;
              default:
                break;
            }
            fbq(
              "dataProcessingOptions",
              u.data.lmt_data.prcs_optns,
              u.data.lmt_data.country,
              u.data.lmt_data.state
            );
          } else if (
            u.data.lmt_data.use_ldu === "false" ||
            u.data.lmt_data.use_ldu === false
          ) {
            fbq("dataProcessingOptions", []);
          }
        };
        u.data = {
          base_url: "https://connect.facebook.net/en_US/fbevents.js",
          advanced_matching: "true",
          generate_event_id: "true",
          pixel_id: "194683111105570",
          autoConfig: true,
          auto_page_view: true,
          calc_items: true,
          consent: "",
          disablePushState: false,
          track_single: true,
          lmt_data: { prcs_optns: ["LDU"], country: 0, state: 0 },
          order_id: "",
          order_subtotal: "",
          order_currency: "",
          product_id: [],
          product_name: [],
          product_category: [],
          product_unit_price: [],
          product_quantity: [],
          content_category: "",
          content_ids: "",
          content_name: "",
          content_type: "",
          contents: null,
          currency: "",
          num_items: "",
          predicted_ltv: "",
          search_string: "",
          status: "",
          value: "",
          movieref: "",
          availability: "",
          body_style: "",
          checkin_date: "",
          checkout_date: "",
          city: "",
          country: "",
          departing_arrival_date: "",
          departing_departure_date: "",
          destination_airport: "",
          destination_ids: "",
          drivetrain: "",
          exterior_color: "",
          fuel_type: "",
          hotel_score: "",
          lease_end_date: "",
          lease_start_date: "",
          listing_type: "",
          make: "",
          model: "",
          neighborhood: "",
          num_adults: "",
          num_children: "",
          num_infants: "",
          origin_airport: "",
          postal_code: "",
          preferred_baths_range: "",
          preferred_beds_range: "",
          preferred_num_stops: "",
          preferred_price_range: "",
          price: "",
          property_type: "",
          region: "",
          returning_arrival_date: "",
          returning_departure_date: "",
          state_of_vehicle: "",
          transmission: "",
          travel_class: "",
          travel_end: "",
          travel_start: "",
          user_score: "",
          year: "",
          am: {},
          custom: {},
          event_queue: [],
        };
        for (c = 0; c < u.extend.length; c++) {
          try {
            d = u.extend[c](a, b);
            if (d == false) return;
          } catch (e) {}
        }
        utag.DB("send:569:EXTENSIONS");
        utag.DB(b);
        for (d in utag.loader.GV(u.map)) {
          if (b[d] !== undefined && b[d] !== "") {
            e = u.map[d].split(",");
            for (f = 0; f < e.length; f++) {
              if (u.data.hasOwnProperty(e[f]) || e[f].indexOf(".") > -1) {
                u.map_func(e[f].split("."), u.data, b[d]);
              } else {
                u.data.custom[e[f]] = b[d];
              }
            }
          } else {
            h = d.split(":");
            if (h.length === 2 && b[h[0]] === h[1]) {
              if (u.map[d]) {
                u.data.event_queue = u.data.event_queue.concat(
                  u.map[d].split(",")
                );
              }
            } else if (h.length === 3 && b[h[0]] === h[1]) {
              if (u.map[d]) {
                u.data[h[2]] = u.map[d];
              }
            }
          }
        }
        utag.DB("send:569:MAPPINGS");
        utag.DB(u.data);
        if (!u.data.pixel_id) {
          utag.DB(
            u.id +
              ": Tag not fired: Required attribute 'pixel_id' not populated."
          );
          return;
        }
        if (u.data.consent === "grant" || u.data.consent === "revoke") {
          fbq("consent", u.data.consent);
        }
        if (
          u.data.disablePushState === "true" ||
          u.data.disablePushState === true
        ) {
          fbq.disablePushState = true;
        }
        if (
          u.data.generate_event_id === "true" ||
          u.data.generate_event_id === true
        ) {
          lookup_id = b.tealium_random;
          if (typeof lookup_id !== "undefined") {
            utag.globals[lookup_id] = window.utag.globals[lookup_id] || {};
          } else {
            lookup_id = Math.random().toFixed(16).substring(2);
            utag.DB(
              "send:569: The tealium_random variable was not defined. Any Facebook event IDs generated will not be collected by Tealium Collect. Please ensure you are using the latest version of utag.js to generate a tealium_random value."
            );
          }
        }
        if (u.data.track_single === true || u.data.track_single === "true") {
          base_tracking_type += "Single";
        }
        u.data.order_currency = u.data.order_currency || b._ccurrency || "";
        u.data.order_id = u.data.order_id || b._corder || "";
        u.data.order_subtotal = u.data.order_subtotal || b._csubtotal || "";
        if (u.data.product_category.length === 0 && b._ccat !== undefined) {
          u.data.product_category = b._ccat.slice(0);
        }
        if (u.data.product_id.length === 0 && b._cprod !== undefined) {
          u.data.product_id = b._cprod.slice(0);
        }
        if (u.data.product_name.length === 0 && b._cprodname !== undefined) {
          u.data.product_name = b._cprodname.slice(0);
        }
        if (u.data.product_quantity.length === 0 && b._cquan !== undefined) {
          u.data.product_quantity = b._cquan.slice(0);
        }
        if (u.data.product_unit_price.length === 0 && b._cprice !== undefined) {
          u.data.product_unit_price = b._cprice.slice(0);
        }
        if (
          a === "view" &&
          (u.data.auto_page_view === true || u.data.auto_page_view === "true")
        ) {
          u.data.event_queue.push("PageView");
        }
        for (i = 0; i < u.data.event_queue.length; i++) {
          if (u.data.event_queue[i] === "Purchase") {
            has_purchase = true;
          }
        }
        if (u.data.order_id && !has_purchase) {
          u.data.event_queue.push("Purchase");
        }
        for (i = 0; i < u.data.event_queue.length; i++) {
          event_name = u.data.event_queue[i].replace(/ /g, "_");
          event_tracking_type = base_tracking_type;
          event_data = {};
          if (
            u.data.generate_event_id === "true" ||
            u.data.generate_event_id === true
          ) {
            if (b.tealium_random) {
              event_id = u.generateEventID(event_name, b, lookup_id);
              if (window.utag.globals[b.tealium_random]) {
                window.utag.globals[b.tealium_random][
                  "fb_event_id_" + event_name
                ] = event_id;
                window.utag.globals[b.tealium_random][
                  "fb_event_id_" + event_name + "_" + id
                ] = event_id;
              }
            } else {
              utag.DB(
                "send:569: Event ID Generation is enabled, but the tealium_random value was not found in the data layer. No event ID was generated for " +
                  event_name
              );
            }
            window.utag.globals[lookup_id]["fb_event_id_" + event_name] =
              event_id;
          }
          if (typeof standard_events_lookup[event_name] === "undefined") {
            event_tracking_type += "Custom";
          } else {
            for (
              j = 0;
              j < standard_events_lookup[event_name].fb_params.length;
              j++
            ) {
              fb_param = standard_events_lookup[event_name].fb_params[j];
              event_data[fb_param] =
                standard_params_lookup[fb_param](event_name);
            }
          }
          for (key in u.data.custom) {
            if (u.data.custom.hasOwnProperty(key)) {
              event_data[key] = u.data.custom[key];
            }
          }
          if (typeof u.data[event_name] === "object") {
            for (key in u.data[event_name]) {
              if (u.data[event_name].hasOwnProperty(key)) {
                if (
                  key === "value" &&
                  utag.ut.typeOf(u.data[event_name][key]) === "array" &&
                  u.data[event_name][key].length > 0
                ) {
                  event_data[key] = parseFloat(u.data[event_name][key][0]);
                } else {
                  event_data[key] = u.data[event_name][key];
                }
              }
            }
          }
          if (event_name === "Purchase") {
            for (key in standard_events_lookup[event_name].req_params) {
              if (
                standard_events_lookup[event_name].req_params.hasOwnProperty(
                  key
                )
              ) {
                if (
                  !event_data[
                    standard_events_lookup[event_name].req_params[key]
                  ]
                ) {
                  utag.DB(
                    "send:569:" +
                      event_name +
                      " tracking: The required parameter '" +
                      standard_events_lookup[event_name].req_params[key] +
                      "' is empty. "
                  );
                  continue;
                }
              }
            }
          }
          tracking_queue.push(
            u.clearEmptyKeys({
              event_tracking_type: event_tracking_type,
              event_name: event_name,
              event_data: event_data,
              event_id: event_id,
            })
          );
        }
        pixel_list = u.data.pixel_id.split(/\s*,\s*/);
        for (k = 0; k < pixel_list.length; k++) {
          if (u.data.autoConfig === "false" || u.data.autoConfig === false) {
            fbq("set", "autoConfig", false, pixel_list[k]);
          }
          if (a === "view") {
            if (!u.pixels_initialized[pixel_list[k]]) {
              u.processing_options();
              if (
                u.data.advanced_matching === "true" ||
                u.data.advanced_matching === true
              ) {
                u.data.am = u.processAMData(u.data.am);
                if (u.isEmptyObject(u.data.am)) {
                  utag.DB(
                    "Advanced Matching is enabled, but no Advanced Matching data was mapped."
                  );
                }
                fbq("init", pixel_list[k], u.data.am);
              } else {
                fbq("init", pixel_list[k]);
              }
              u.pixels_initialized[pixel_list[k]] = true;
            } else if (
              u.data.advanced_matching === "true" ||
              u.data.advanced_matching === true
            ) {
              fbq("init", pixel_list[k], u.processAMData(u.data.am));
            }
          }
          if (u.data.track_single === true || u.data.track_single === "true") {
            for (l = 0; l < tracking_queue.length; l++) {
              if (tracking_queue[l].event_id) {
                fbq(
                  tracking_queue[l].event_tracking_type,
                  pixel_list[k],
                  tracking_queue[l].event_name,
                  u.clearEmptyKeys(tracking_queue[l].event_data),
                  { eventID: tracking_queue[l].event_id }
                );
              } else {
                fbq(
                  tracking_queue[l].event_tracking_type,
                  pixel_list[k],
                  tracking_queue[l].event_name,
                  u.clearEmptyKeys(tracking_queue[l].event_data)
                );
              }
            }
          }
        }
        if (u.data.track_single !== true && u.data.track_single !== "true") {
          for (l = 0; l < tracking_queue.length; l++) {
            if (tracking_queue[l].event_id) {
              fbq(
                tracking_queue[l].event_tracking_type,
                tracking_queue[l].event_name,
                u.clearEmptyKeys(tracking_queue[l].event_data),
                { eventID: tracking_queue[l].event_id }
              );
            } else {
              fbq(
                tracking_queue[l].event_tracking_type,
                tracking_queue[l].event_name,
                u.clearEmptyKeys(tracking_queue[l].event_data)
              );
            }
          }
        }
        if (!u.scriptrequested) {
          u.scriptrequested = true;
          u.loader({
            type: "script",
            src: u.data.base_url,
            cb: null,
            loc: "script",
            id: "utag_569",
            attrs: {},
          });
        }
        utag.DB("send:569:COMPLETE");
      }
    };
    utag.o[loader].loader.LOAD(id);
  })("569", "mbs.main");
} catch (error) {
  utag.DB(error);
}
(function () {
  if (typeof utag != "undefined" && !utag_condload) {
    utag.initcatch = true;
    for (var i in utag.loader.GV(utag.loader.cfg)) {
      var b = utag.loader.cfg[i];
      if (b.load != 4) {
        utag.initcatch = false;
        break;
      }
      if (b.wait == 1) {
        utag.initcatch = false;
        break;
      }
    }
    if (utag.initcatch) utag.handler.INIT();
  }
})();
